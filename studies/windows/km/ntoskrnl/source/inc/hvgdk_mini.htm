<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>HVGDK_MINI.H</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="43332" -->
<div class="Main">
  <h1>HVGDK_MINI.H </h1>
  <p>The public symbol file NTKRPAMP.PDB for the original release of Windows 10 
  tells that the kernel is built with the HVGDK_MINI.H header at </p>
  <blockquote>
    d:\th.public.fre\internal\minwin\priv_sdk\inc
  </blockquote>
  <p>and draws from it the following type definitions: </p>
  <table class="LineNumbers">
    <colgroup>
      <col class="LineNumber"><col class="Name">
    </colgroup>
    <thead>
      <tr>
        <th>Line Number </th>
        <th>Type </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>449 </td>
        <td>union <span class="union">
        <a href="../../inc/shared/hvgdk_mini/hv_partition_privilege_mask.htm">_HV_PARTITION_PRIVILEGE_MASK</a></span>
        </td>
      </tr>
      <tr>
        <td>717 </td>
        <td>struct <span class="struct">
        <a href="../../inc/shared/hvgdk_mini/hv_x64_hypervisor_features.htm">_HV_X64_HYPERVISOR_FEATURES</a></span>
        </td>
      </tr>
    </tbody>
  </table>
  <p>The header HVGDK_MINI.H is not known in any Device Driver Kit (DDK) or Windows 
  Driver Kit (WDK). There was, however, an HVGDK.H in the WDK for Windows 7. It 
  defines the <span class="union">HV_PARTITION_PRIVILEGE_MASK</span> at line 2653. 
  That’s no small difference. It may mean that the reduction suggested by the MINI 
  suffix was of thousands of lines. More likely, though, is that separating material 
  to another header brought with it a substantial rearrangement. </p>
  <h2>Anti-Trust Settlement Forensics </h2>
  <p>For the record, Microsoft’s possibly accidental inclusion of private symbol 
  files for URLMON.DLL in downloadable packages of public symbols shows that many 
  more types were accessible to the source code for URLMON.DLL from including HVGDK_MINI.H 
  when building for the original release of 32-bit Windows 10: </p>
  <table class="LineNumbers">
    <colgroup>
      <col class="LineNumber"><col class="Name">
    </colgroup>
    <thead>
      <tr>
        <th>Line Number </th>
        <th>Type </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>431 </td>
        <td>struct <span class="struct">
        <a href="../../inc/shared/hvgdk_mini/hv_hypervisor_version_info.htm">_HV_HYPERVISOR_VERSION_INFO</a></span>
        </td>
      </tr>
      <tr>
        <td>449 </td>
        <td>union <span class="union">_HV_PARTITION_PRIVILEGE_MASK</span> </td>
      </tr>
      <tr>
        <td>565 </td>
        <td>union <span class="union">
        <a href="../../inc/shared/hvgdk_mini/hv_x64_platform_capabilities.htm">_HV_X64_PLATFORM_CAPABILITIES</a></span>
        </td>
      </tr>
      <tr>
        <td>650 </td>
        <td>enum <span class="enum">
        <a href="../../inc/shared/hvgdk_mini/hv_cpuid_function.htm">_HV_CPUID_FUNCTION</a></span>
        </td>
      </tr>
      <tr>
        <td>689 </td>
        <td>struct <span class="struct">
        <a href="../../inc/shared/hvgdk_mini/hv_vendor_and_max_function.htm">_HV_VENDOR_AND_MAX_FUNCTION</a></span>
        </td>
      </tr>
      <tr>
        <td>700 </td>
        <td>struct <span class="struct">
        <a href="../../inc/shared/hvgdk_mini/hv_hypervisor_interface_info.htm">_HV_HYPERVISOR_INTERFACE_INFO</a></span>
        </td>
      </tr>
      <tr>
        <td>717 </td>
        <td>struct <span class="struct">_HV_X64_HYPERVISOR_FEATURES</span> </td>
      </tr>
      <tr>
        <td>811 </td>
        <td>struct <span class="struct">
        <a href="../../inc/shared/hvgdk_mini/hv_x64_enlightenment_information.htm">
        _HV_X64_ENLIGHTENMENT_INFORMATION</a></span> </td>
      </tr>
      <tr>
        <td>885 </td>
        <td>struct <span class="struct">
        <a href="../../inc/shared/hvgdk_mini/hv_implementation_limits.htm">_HV_IMPLEMENTATION_LIMITS</a></span>
        </td>
      </tr>
      <tr>
        <td>917 </td>
        <td>struct <span class="struct">
        <a href="../../inc/shared/hvgdk_mini/hv_x64_hypervisor_hardware_features.htm">
        _HV_X64_HYPERVISOR_HARDWARE_FEATURES</a></span> </td>
      </tr>
      <tr>
        <td>960 </td>
        <td>struct <span class="struct">
        <a href="../../inc/shared/hvgdk_mini/hv_x64_hypervisor_cpu_management_features.htm">
        _HV_X64_HYPERVISOR_CPU_MANAGEMENT_FEATURES</a></span> </td>
      </tr>
      <tr>
        <td>1062 </td>
        <td>struct <span class="struct">
        <a href="../../inc/shared/hvgdk_mini/hv_hypervisor_svm_features.htm">_HV_HYPERVISOR_SVM_FEATURES</a></span>
        </td>
      </tr>
      <tr>
        <td>1089 </td>
        <td>union <span class="union">
        <a href="../../inc/shared/hvgdk_mini/hv_cpuid_result.htm">_HV_CPUID_RESULT</a></span>
        </td>
      </tr>
      <tr>
        <td>1101 </td>
        <td>unnamed struct for <span class="member">VersionAndFeatures</span> in
        <br>
        union <span class="union">_HV_CPUID_RESULT</span> </td>
      </tr>
    </tbody>
  </table>
  <p>None of these types are known from headers that Microsoft publishes for either 
  kernel-mode or user-mode programming for Windows 10 by programmers outside Microsoft. 
  Most were not yet defined for Windows 7 and therefore were not published even 
  in the short-lived HVGDK.H. Indeed, most are not disclosed even as type information 
  in other symbol files except for the Windows 8.1 kernel. Aside from the curiosity 
  of their appearance for just one version, there is also that the symbol files 
  for the Windows 8.1 kernel have type information for one enumeration that the 
  symbol files for the Windows 8.1 URLMON do not. This is the <span class="enum">
  <a href="../../inc/shared/hvgdk_mini/hv_hypervisor_interface.htm">HV_HYPERVISOR_INTERFACE</a></span>. 
  How this happened is not known: more research is required. </p>
  <p>The point to singling out URLMON.DLL is of course that it is part of Internet 
  Explorer. It was first distributed with Internet Explorer. Even for Windows 10 
  its version numbering still follows that of Internet Explorer. Microsoft defended 
  an anti-trust suit that was largely motivated by complaints that Microsoft’s development 
  and distribution of Internet Explorer in competition with other web browsers benefited 
  from Microsoft’s monopoly control of the operating system that these web browsers 
  run on. Among the complaints is that Microsoft’s programmers of Internet Explorer 
  had access to programming resources for Windows that were not available to the 
  programmers of competing web browsers. Plainly they did! </p>
  <p>Whether such access got Internet Exlorer any direct benefit is another question. 
  Whether it got an indirect benefit, as with faster or easier development just 
  from knowing more than was explicitly used, is also another question. The evidence 
  here is just that they did have the alleged access and still had it many years 
  after the supposed enforcement of a settlement that ought to have seen the access 
  removed. Either that or the access has been arranged since, which some would say 
  is worse for its surely deliberate contempt of the settlement. </p>
  <h3>Related Headers </h3>
  <p>The published symbol files for URLMON.DLL also suggest a little of how HVGDK_MINI.H 
  comes to exist. As noted above, Microsoft published an HVGDK.H for Windows 7 but 
  never for any later version. Also described above from symbol files for Windows 
  8 and higher, some types that are defined in the Windows 7 HVGDK.H are later defined 
  in HVGDK_MINI.H. The natural supposition is that HVGDK_MINI.H was extracted from 
  HVGDK.H, but does the latter still exist and is the former the only extract? The 
  answers look to be yes and no, respectively. </p>
  <p>Symbol files for URLMON.DLL in Windows 8 and higher confirm the continued existence 
  of a header named HVGDK.H and the existence of an otherwise unknown HVGDK_EXT.H. 
  These are not in the same directory as HVGDK_MINI.H. For the original Windows 
  10, they are instead at </p>
  <blockquote>
    d:\th.public.fre\internal\vm\inc
  </blockquote>
  <p>as if to suggest they are specialised to a “vm” project, separate from the 
  “minkernel” and not as any sort of SDK, private or otherwise. No type definitions 
  are reported from these headers and it may indeed be that URLMON.DLL would be 
  no different if built without access to these headers. What is reported is that 
  the two paths that have the various HVGDK headers are named in
  <span class="switch">-I</span> switches that are given to the compiler only when 
  building source files while the current directory is </p>
  <blockquote>
    d:\th\inetcore\lib\common\iel1_sp
  </blockquote>
  <p>The source files are all in this directory’s parent: strcmpii.cpp, ieisos_sp.cpp, 
  easyclassfactory.cpp, brproc.cpp, handlehelpers.cpp, dxhardwaredenylist.cpp, dxgiadapterwrapper.cpp, 
  gcount.cpp, lrieutil.cpp, privacieutil.cpp, ieprocesshelper.cpp, strutil.cpp, 
  hashtable.cpp, iecrypt.cpp, ieverdetect.cpp, ieisos_phonentimpl.cpp, cmptime.cpp, 
  useraccess.cpp, idllib.cpp, ishost_sp.cpp and arrayimpl.cpp. </p>
  <p>The point to the tedium of listing them, aside from noticing that several are 
  plainly named for Internet Explorer, is that this—meaning their names and their 
  inclusion of system-level headers that aren’t generally available to the programmers 
  of web browsers—is what can be learnt from forensic analysis of an Internet Explorer 
  DLL at the distance of having only the <span class="emphasis">symbol files</span>. 
  For supervising Microsoft’s compliance with the anti-trust settlement, the Technical 
  Committee had <span class="emphasis">source code</span>. Whatever this supervision 
  achieved, however it was conducted, it evidently did not establish at Microsoft 
  any persistent caution that Microsoft’s web browser in competition with others 
  must not have the anti-competitive advantage of being programmed with access to 
  definitions for Microsoft’s monopoly product that are withheld from the competitors. 
  It might not be too cynical to suspect that what was established at Microsoft 
  is an attitude that inevitably inadequate supervision lets Microsoft get away 
  with pretty much whatever it wants. </p>
  <p>There is here an enduring lesson for governments: advanced technology might 
  still be influenced through business, legal and political mechanisms but it is 
  too advanced for enforcement. Probably everyone knows, but it’s as well to have 
  a record. </p>
  <h2>Other Forensics </h2>
  <p>The most complete catalogue that I know of types defined in HVGDK_MINI.H is 
  from type information not in any symbol files but in a statically linked library. 
  That object files and libraries (which are essentially archives of object files) 
  can have type information is often overlooked, even by experts at reverse engineering. 
  Type information is retained in only very few libraries that Microsoft publishes 
  for programmers to link their code to. It seems fair to suspect that almost all 
  cases, especially in any WDK or Software Development Kit (SDK), are oversights. 
  Still, they are as openly published as are any symbol files that Microsoft publishes 
  as debugging support. In some ways type information in libraries is better than 
  in symbol files, and in some ways worse. Their forensic value is less because 
  the libraries are typically developed separately from the operating system. Type 
  information in a library is immaterial to the library’s role as supplier of code 
  for a linker’s resolution of external references. Even in a library that is clearly 
  targeted to one version of the operating system, its type information can be a 
  long way out of date, and often is. Against this is that type information in a 
  library or object file is sometimes—rarely, but sometimes—much more extensive 
  than in symbol files because there hasn’t yet been any selection according to 
  use. </p>
  <p>Two statically linked libraries in open distribution are known to have type 
  information from compiling HVGDK_MINI.H. One is relatively recent, only for Windows 
  10 but continuing at least to the 2004 release, and has obvious relevance to the 
  Hypervisor. It is named KDHV.LIB. Microsoft distributes it among the programming 
  samples in the package of Debugging Tools for Windows. If only for the version 
  that targets the original Windows 10, its type information from HVGDK_MINI.H comes 
  from compiling two source files. Their names, kdhvintel.c and kdhvhc.c, likely 
  don’t matter. What does is that the type information is already selected according 
  to what the compiler used for each object. What used means in this context can 
  be surprising, but the essential point is that although the private symbols in 
  this library cover many more hypervisor types than do the public symbols for the 
  kernel, the library is not much of a gold mine. </p>
  <p>The other library is. It is named CLFSMGMT.LIB. That it has no obvious relevance 
  to any hypervisor may be why it seems to have escaped the attention of most researchers 
  (including me in 2016 when I first wrote about Hyper-V support). Yet this library 
  knows of HVGDK_MINI.H as far back as Windows Vista—curiously without knowing of 
  HVGDK.H even in the library’s versions for Windows 7. This is a very odd library. 
  Microsoft distributes it only with the SDK, not the WDK. The Windows 10 SDK even 
  puts it in a subdirectory named “um” as if to make explicit that it’s for user-mode 
  programming. Yet the library has kernel-mode code to support the CLFS.SYS file 
  system driver. This mixture of modes may explain the curious way it got built. 
  Still, take its publication as a gift. </p>
  <p>What makes CLFSMGMT.LIB a gold mine for hypervisor studies is that its type 
  information from HVGDK_MINI.H comes from precompilation. This type information 
  is therefore not of types that have got used but of types that might get used. 
  Speaking again of the version for the original Windows 10, just for concreteness, 
  the library archives five objects. Four are compiled from C++ source files that 
  are particular to the library’s contribution to its project. Again the names likely 
  don’t matter: public_interface.cpp, managed_log.cpp, managed_client.cpp and log_collection.cpp. 
  Each is compiled using a pre-compiled header. The fifth object in the library, 
  stdpch.obj, is what was precompiled from a (pre-processed) C++ source file named 
  pch_hdr.src to use for the other source files where they would
  <span class="directive">#include</span> stdpch.h. </p>
  <p>The lesson here goes several ways. For programmers, even at Microsoft, understand 
  that if you throw everything but the kitchen sink into a precompiled header that 
  you create by compiling a source file into an object file, then the object file 
  contains pretty much everything but the kitchen sink! If the project was to build 
  a library of archived object files, then be sure to exempt this object file from 
  the archive—well, unless you really do mean that reverse engineers should have 
  everything but the kitchen sink. For commentators on reverse engineering, especially 
  if taking the line that information supposedly found by reverse engineering couldn’t 
  possibly have been found without source code, please think a little more about 
  what some techniques of building from source code may let slip into the finished 
  product. For reverse engineers, remember that symbol files aren’t everything. 
  Even a software manufacturer as careful as Microsoft sometimes builds the software 
  in ways that reveal far more than intended. </p>
  <p>The table that follows is of user-defined types (classes, enumerations, structures 
  and unions) for which the CLFSMGMT.LIB from the SDK for the original release of 
  Windows 10 shows the type as defined in HVGDK_MINI.H: </p>
  <table class="LineNumbers">
    <colgroup>
      <col class="LineNumber"><col class="Name">
    </colgroup>
    <thead>
      <tr>
        <th>Line Number </th>
        <th>Type </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>82 </td>
        <td>union <span class="union">
        <a href="../../inc/shared/hvgdk_mini/hv_uint128.htm">_HV_UINT128</a></span>
        </td>
      </tr>
      <tr>
        <td>84 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_UINT128</span> </td>
      </tr>
      <tr>
        <td>97 </td>
        <td>struct <span class="struct">_HV_UINT256</span> </td>
      </tr>
      <tr>
        <td>108 </td>
        <td>struct <span class="struct">_HV_UINT512</span> </td>
      </tr>
      <tr>
        <td>326 </td>
        <td>enum <span class="enum">_HV_HYPERVISOR_INTERFACE</span> </td>
      </tr>
      <tr>
        <td>341 </td>
        <td>enum <span class="enum">_HV_SERVICE_BRANCH</span> </td>
      </tr>
      <tr>
        <td>369 </td>
        <td>enum <span class="enum">_HV_GUEST_OS_VENDOR</span> </td>
      </tr>
      <tr>
        <td>375 </td>
        <td>enum <span class="enum">_HV_GUEST_OS_MICROSOFT_IDS</span> </td>
      </tr>
      <tr>
        <td>386 </td>
        <td>enum <span class="enum">_HV_GUEST_OS_OPENSOURCE_IDS</span> </td>
      </tr>
      <tr>
        <td>401 </td>
        <td>union <span class="union">_HV_GUEST_OS_ID_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>404 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_GUEST_OS_ID_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>417 </td>
        <td>unnamed struct for <span class="member">OpenSource</span> in <br>
        union <span class="union">_HV_GUEST_OS_ID_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>431 </td>
        <td>struct <span class="struct">_HV_HYPERVISOR_VERSION_INFO</span> </td>
      </tr>
      <tr>
        <td>449 </td>
        <td>union <span class="union">_HV_PARTITION_PRIVILEGE_MASK</span> </td>
      </tr>
      <tr>
        <td>452 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_PARTITION_PRIVILEGE_MASK</span> </td>
      </tr>
      <tr>
        <td>565 </td>
        <td>union <span class="union">_HV_X64_PLATFORM_CAPABILITIES</span> </td>
      </tr>
      <tr>
        <td>567 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_PLATFORM_CAPABILITIES</span> </td>
      </tr>
      <tr>
        <td>650 </td>
        <td>enum <span class="enum">_HV_CPUID_FUNCTION</span> </td>
      </tr>
      <tr>
        <td>689 </td>
        <td>struct <span class="struct">_HV_VENDOR_AND_MAX_FUNCTION</span> </td>
      </tr>
      <tr>
        <td>700 </td>
        <td>struct <span class="struct">_HV_HYPERVISOR_INTERFACE_INFO</span>
        </td>
      </tr>
      <tr>
        <td>717 </td>
        <td>struct <span class="struct">_HV_X64_HYPERVISOR_FEATURES</span> </td>
      </tr>
      <tr>
        <td>811 </td>
        <td>struct <span class="struct">_HV_X64_ENLIGHTENMENT_INFORMATION</span>
        </td>
      </tr>
      <tr>
        <td>885 </td>
        <td>struct <span class="struct">_HV_IMPLEMENTATION_LIMITS</span> </td>
      </tr>
      <tr>
        <td>917 </td>
        <td>struct <span class="struct">_HV_X64_HYPERVISOR_HARDWARE_FEATURES</span>
        </td>
      </tr>
      <tr>
        <td>960 </td>
        <td>struct <span class="struct">_HV_X64_HYPERVISOR_CPU_MANAGEMENT_FEATURES</span>
        </td>
      </tr>
      <tr>
        <td>1062 </td>
        <td>struct <span class="struct">_HV_HYPERVISOR_SVM_FEATURES</span> </td>
      </tr>
      <tr>
        <td>1089 </td>
        <td>union <span class="union">_HV_CPUID_RESULT</span> </td>
      </tr>
      <tr>
        <td>1091 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_CPUID_RESULT</span> </td>
      </tr>
      <tr>
        <td>1101 </td>
        <td>unnamed struct for <span class="member">VersionAndFeatures</span> in
        <br>
        union <span class="union">_HV_CPUID_RESULT</span> </td>
      </tr>
      <tr>
        <td>1157 </td>
        <td>union <span class="union">_HV_X64_MSR_HYPERCALL_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>1160 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_MSR_HYPERCALL_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>1183 </td>
        <td>union <span class="union">_HV_REGISTER_VP_ASSIST_PAGE</span> </td>
      </tr>
      <tr>
        <td>1186 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_VP_ASSIST_PAGE</span> </td>
      </tr>
      <tr>
        <td>1316 </td>
        <td>union <span class="union">_HV_X64_MSR_RESET_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>1319 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_MSR_RESET_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>1358 </td>
        <td>struct <span class="struct">_HV_VIRTUAL_APIC_ASSIST</span> </td>
      </tr>
      <tr>
        <td>1360 </td>
        <td>anonymous union in <br>
        struct <span class="struct">_HV_VIRTUAL_APIC_ASSIST</span> </td>
      </tr>
      <tr>
        <td>1363 </td>
        <td>anonymous struct in <br>
        anonymous union in <br>
        struct <span class="struct">_HV_VIRTUAL_APIC_ASSIST</span> </td>
      </tr>
      <tr>
        <td>1373 </td>
        <td>enum <span class="enum">_HV_CALL_CODE</span> </td>
      </tr>
      <tr>
        <td>1979 </td>
        <td>union <span class="union">_HV_HYPERCALL_INPUT</span> </td>
      </tr>
      <tr>
        <td>1984 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_HYPERCALL_INPUT</span> </td>
      </tr>
      <tr>
        <td>1999 </td>
        <td>union <span class="union">_HV_HYPERCALL_OUTPUT</span> </td>
      </tr>
      <tr>
        <td>2004 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_HYPERCALL_OUTPUT</span> </td>
      </tr>
      <tr>
        <td>2031 </td>
        <td>union <span class="union">_HV_GVA_RANGE_SIMPLE</span> </td>
      </tr>
      <tr>
        <td>2035 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_GVA_RANGE_SIMPLE</span> </td>
      </tr>
      <tr>
        <td>2052 </td>
        <td>union <span class="union">_HV_GVA_RANGE_EXTENDED</span> </td>
      </tr>
      <tr>
        <td>2056 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_GVA_RANGE_EXTENDED</span> </td>
      </tr>
      <tr>
        <td>2078 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_GVA_RANGE_EXTENDED</span> </td>
      </tr>
      <tr>
        <td>2108 </td>
        <td>union <span class="union">_HV_GVA_RANGE</span> </td>
      </tr>
      <tr>
        <td>2146 </td>
        <td>struct <span class="struct">_HV_INPUT_FLUSH_VIRTUAL_ADDRESS_SPACE_HEADER</span>
        </td>
      </tr>
      <tr>
        <td>2160 </td>
        <td>struct <span class="struct">_HV_INPUT_FLUSH_VIRTUAL_ADDRESS_SPACE</span>
        </td>
      </tr>
      <tr>
        <td>2171 </td>
        <td>struct <span class="struct">_HV_INPUT_FLUSH_VIRTUAL_ADDRESS_LIST</span>
        </td>
      </tr>
      <tr>
        <td>2181 </td>
        <td>struct <span class="struct">_HV_OUTPUT_GET_PARTITION_ID</span> </td>
      </tr>
      <tr>
        <td>2192 </td>
        <td>struct <span class="struct">_HV_INPUT_SEND_SYNTHETIC_CLUSTER_IPI</span>
        </td>
      </tr>
      <tr>
        <td>2244 </td>
        <td>union <span class="union">_HV_X64_MSR_REFERENCE_TSC_CONTENTS</span>
        </td>
      </tr>
      <tr>
        <td>2247 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_MSR_REFERENCE_TSC_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>2266 </td>
        <td>struct <span class="struct">_HV_REFERENCE_TSC_PAGE</span> </td>
      </tr>
      <tr>
        <td>2302 </td>
        <td>enum <span class="enum">_HV_INTERRUPT_TYPE</span> </td>
      </tr>
      <tr>
        <td>2339 </td>
        <td>union <span class="union">_HV_SYNIC_SINT</span> </td>
      </tr>
      <tr>
        <td>2342 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_SYNIC_SINT</span> </td>
      </tr>
      <tr>
        <td>2407 </td>
        <td>enum <span class="enum">_HV_ARCHITECTURE</span> </td>
      </tr>
      <tr>
        <td>2415 </td>
        <td>struct <span class="struct">_HV_X64_SEGMENT_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2420 </td>
        <td>anonymous union in <br>
        struct <span class="struct">_HV_X64_SEGMENT_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2422 </td>
        <td>anonymous struct in <br>
        anonymous union in <br>
        struct <span class="struct">_HV_X64_SEGMENT_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2439 </td>
        <td>struct <span class="struct">_HV_X64_TABLE_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2453 </td>
        <td>union <span class="union">_HV_X64_XSAVE_XFEM_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2457 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_XSAVE_XFEM_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2463 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_XSAVE_XFEM_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2477 </td>
        <td>struct <span class="struct">_HV_X64_XSAVE_HEADER</span> </td>
      </tr>
      <tr>
        <td>2503 </td>
        <td>union <span class="union">_HV_X64_FP_CONTROL_STATUS_REGISTER</span>
        </td>
      </tr>
      <tr>
        <td>2506 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_FP_CONTROL_STATUS_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2514 </td>
        <td>anonymous union in <br>
        anonymous struct in <br>
        union <span class="union">_HV_X64_FP_CONTROL_STATUS_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2519 </td>
        <td>anonymous struct in <br>
        anonymous union in <br>
        anonymous struct in <br>
        union <span class="union">_HV_X64_FP_CONTROL_STATUS_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2528 </td>
        <td>union <span class="union">_HV_X64_XMM_CONTROL_STATUS_REGISTER</span>
        </td>
      </tr>
      <tr>
        <td>2531 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_XMM_CONTROL_STATUS_REGISTER</span>
        </td>
      </tr>
      <tr>
        <td>2533 </td>
        <td>anonymous union in <br>
        anonymous struct in <br>
        union <span class="union">_HV_X64_XMM_CONTROL_STATUS_REGISTER</span>
        </td>
      </tr>
      <tr>
        <td>2538 </td>
        <td>anonymous struct in <br>
        anonymous union in <br>
        anonymous struct in <br>
        union <span class="union">_HV_X64_XMM_CONTROL_STATUS_REGISTER</span>
        </td>
      </tr>
      <tr>
        <td>2549 </td>
        <td>union <span class="union">_HV_X64_FP_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2552 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_FP_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2561 </td>
        <td>union <span class="union">_HV_X64_FP_MMX_REGISTER</span> </td>
      </tr>
      <tr>
        <td>2573 </td>
        <td>union <span class="union">_HV_X64_FX_REGISTERS</span> </td>
      </tr>
      <tr>
        <td>2575 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_FX_REGISTERS</span> </td>
      </tr>
      <tr>
        <td>2604 </td>
        <td>union <span class="union">_HV_X64_X_REGISTERS</span> </td>
      </tr>
      <tr>
        <td>2606 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_X_REGISTERS</span> </td>
      </tr>
      <tr>
        <td>2612 </td>
        <td>anonymous union in <br>
        anonymous struct in <br>
        union <span class="union">_HV_X64_X_REGISTERS</span> </td>
      </tr>
      <tr>
        <td>2645 </td>
        <td>union <span class="union">_HV_X64_XSAVE_AREA</span> </td>
      </tr>
      <tr>
        <td>2651 </td>
        <td>struct <span class="struct">_HV_X64_CONTEXT</span> </td>
      </tr>
      <tr>
        <td>2779 </td>
        <td>anonymous union in <br>
        struct <span class="struct">_HV_X64_CONTEXT</span> </td>
      </tr>
      <tr>
        <td>2800 </td>
        <td>struct <span class="struct">_HV_ARM64_CONTEXT</span> </td>
      </tr>
      <tr>
        <td>2924 </td>
        <td>struct <span class="struct">_HV_VP_CONTEXT</span> </td>
      </tr>
      <tr>
        <td>2938 </td>
        <td>anonymous union in <br>
        struct <span class="struct">_HV_VP_CONTEXT</span> </td>
      </tr>
      <tr>
        <td>2950 </td>
        <td>struct <span class="struct">_HV_X64_MSR_STIMER_CONFIG_CONTENTS</span>
        </td>
      </tr>
      <tr>
        <td>2952 </td>
        <td>anonymous union in <br>
        struct <span class="struct">_HV_X64_MSR_STIMER_CONFIG_CONTENTS</span>
        </td>
      </tr>
      <tr>
        <td>2955 </td>
        <td>anonymous struct in <br>
        anonymous union in <br>
        struct <span class="struct">_HV_X64_MSR_STIMER_CONFIG_CONTENTS</span>
        </td>
      </tr>
      <tr>
        <td>2979 </td>
        <td>union <span class="union">_HV_PORT_ID</span> </td>
      </tr>
      <tr>
        <td>2983 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_PORT_ID</span> </td>
      </tr>
      <tr>
        <td>3002 </td>
        <td>enum <span class="enum">_HV_MESSAGE_TYPE</span> </td>
      </tr>
      <tr>
        <td>3061 </td>
        <td>union <span class="union">_HV_SYNIC_SIMP</span> </td>
      </tr>
      <tr>
        <td>3064 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_SYNIC_SIMP</span> </td>
      </tr>
      <tr>
        <td>3082 </td>
        <td>enum <span class="enum">HV_EVENTLOG_TYPE</span> </td>
      </tr>
      <tr>
        <td>3094 </td>
        <td>struct <span class="struct">_HV_EVENTLOG_MESSAGE_PAYLOAD</span> </td>
      </tr>
      <tr>
        <td>3106 </td>
        <td>union <span class="union">_HV_MESSAGE_FLAGS</span> </td>
      </tr>
      <tr>
        <td>3109 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_MESSAGE_FLAGS</span> </td>
      </tr>
      <tr>
        <td>3120 </td>
        <td>struct <span class="struct">_HV_MESSAGE_HEADER</span> </td>
      </tr>
      <tr>
        <td>3126 </td>
        <td>anonymous union in <br>
        struct <span class="struct">_HV_MESSAGE_HEADER</span> </td>
      </tr>
      <tr>
        <td>3138 </td>
        <td>struct <span class="struct">_HV_TIMER_MESSAGE_PAYLOAD</span> </td>
      </tr>
      <tr>
        <td>3150 </td>
        <td>struct <span class="struct">_HV_MESSAGE</span> </td>
      </tr>
      <tr>
        <td>3153 </td>
        <td>anonymous union in <br>
        struct <span class="struct">_HV_MESSAGE</span> </td>
      </tr>
      <tr>
        <td>3165 </td>
        <td>struct <span class="struct">_HV_MESSAGE_PAGE</span> </td>
      </tr>
      <tr>
        <td>3176 </td>
        <td>union <span class="union">_HV_X64_MSR_NPIEP_CONFIG_CONTENTS</span>
        </td>
      </tr>
      <tr>
        <td>3179 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_MSR_NPIEP_CONFIG_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>3227 </td>
        <td>struct <span class="struct">_HV_INPUT_POST_DEBUG_DATA</span> </td>
      </tr>
      <tr>
        <td>3234 </td>
        <td>struct <span class="struct">_HV_OUTPUT_POST_DEBUG_DATA</span> </td>
      </tr>
      <tr>
        <td>3239 </td>
        <td>struct <span class="struct">_HV_INPUT_RETRIEVE_DEBUG_DATA</span>
        </td>
      </tr>
      <tr>
        <td>3246 </td>
        <td>struct <span class="struct">_HV_OUTPUT_RETRIEVE_DEBUG_DATA</span>
        </td>
      </tr>
      <tr>
        <td>3253 </td>
        <td>struct <span class="struct">_HV_DEBUG_NET_DATA</span> </td>
      </tr>
      <tr>
        <td>3271 </td>
        <td>struct <span class="struct">_HV_INPUT_RESET_DEBUG_SESSION</span>
        </td>
      </tr>
      <tr>
        <td>3276 </td>
        <td>struct <span class="struct">_HV_OUTPUT_RESET_DEBUG_SESSION</span>
        </td>
      </tr>
      <tr>
        <td>3300 </td>
        <td>union <span class="union">_HV_CRASH_CTL_REG_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>3303 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_CRASH_CTL_REG_CONTENTS</span> </td>
      </tr>
      <tr>
        <td>3336 </td>
        <td>union <span class="union">_HV_INPUT_VTL</span> </td>
      </tr>
      <tr>
        <td>3339 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_INPUT_VTL</span> </td>
      </tr>
      <tr>
        <td>3351 </td>
        <td>struct <span class="struct">_HV_INITIAL_VP_CONTEXT</span> </td>
      </tr>
      <tr>
        <td>3425 </td>
        <td>union <span class="union">_HV_ENABLE_PARTITION_VTL_FLAGS</span> </td>
      </tr>
      <tr>
        <td>3428 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_ENABLE_PARTITION_VTL_FLAGS</span> </td>
      </tr>
      <tr>
        <td>3435 </td>
        <td>struct <span class="struct">_HV_INPUT_ENABLE_PARTITION_VTL</span>
        </td>
      </tr>
      <tr>
        <td>3450 </td>
        <td>struct <span class="struct">_HV_INPUT_DISABLE_PARTITION_VTL</span>
        </td>
      </tr>
      <tr>
        <td>3465 </td>
        <td>struct <span class="struct">_HV_INPUT_ENABLE_VP_VTL</span> </td>
      </tr>
      <tr>
        <td>3480 </td>
        <td>struct <span class="struct">_HV_INPUT_DISABLE_VP_VTL</span> </td>
      </tr>
      <tr>
        <td>3493 </td>
        <td>union <span class="union">_HV_VTL_RETURN_INPUT</span> </td>
      </tr>
      <tr>
        <td>3497 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_VTL_RETURN_INPUT</span> </td>
      </tr>
      <tr>
        <td>3513 </td>
        <td>enum <span class="enum">_HV_VTL_MBEC_MODE</span> </td>
      </tr>
      <tr>
        <td>3527 </td>
        <td>union <span class="union">_HV_REGISTER_VSM_VP_VTL_CONTROL</span>
        </td>
      </tr>
      <tr>
        <td>3530 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_VSM_VP_VTL_CONTROL</span> </td>
      </tr>
      <tr>
        <td>3546 </td>
        <td>union <span class="union">_HV_REGISTER_VSM_CODE_PAGE_OFFSETS</span>
        </td>
      </tr>
      <tr>
        <td>3549 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_VSM_CODE_PAGE_OFFSETS</span> </td>
      </tr>
      <tr>
        <td>3564 </td>
        <td>union <span class="union">_HV_REGISTER_VSM_PARTITION_STATUS</span>
        </td>
      </tr>
      <tr>
        <td>3567 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_VSM_PARTITION_STATUS</span> </td>
      </tr>
      <tr>
        <td>3582 </td>
        <td>union <span class="union">_HV_REGISTER_VSM_VP_STATUS</span> </td>
      </tr>
      <tr>
        <td>3585 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_VSM_VP_STATUS</span> </td>
      </tr>
      <tr>
        <td>3594 </td>
        <td>enum <span class="register">_HV_REGISTER_NAME</span> </td>
      </tr>
      <tr>
        <td>3601 </td>
        <td>union <span class="union">_HV_REGISTER_VSM_VINA</span> </td>
      </tr>
      <tr>
        <td>3604 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_VSM_VINA</span> </td>
      </tr>
      <tr>
        <td>3640 </td>
        <td>union <span class="union">_HV_REGISTER_VSM_CAPABILITIES</span> </td>
      </tr>
      <tr>
        <td>3643 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_VSM_CAPABILITIES</span> </td>
      </tr>
      <tr>
        <td>3663 </td>
        <td>union <span class="union">_HV_REGISTER_VSM_VP_SECURE_VTL_CONFIG</span>
        </td>
      </tr>
      <tr>
        <td>3666 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_VSM_VP_SECURE_VTL_CONFIG</span>
        </td>
      </tr>
      <tr>
        <td>3681 </td>
        <td>union <span class="union">_HV_REGISTER_VSM_PARTITION_CONFIG</span>
        </td>
      </tr>
      <tr>
        <td>3684 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_VSM_PARTITION_CONFIG</span> </td>
      </tr>
      <tr>
        <td>3696 </td>
        <td>enum <span class="enum">_HV_VTL_ENTRY_REASON</span> </td>
      </tr>
      <tr>
        <td>3717 </td>
        <td>struct <span class="struct">_HV_VP_VTL_CONTROL</span> </td>
      </tr>
      <tr>
        <td>3730 </td>
        <td>unnamed union for <span class="member">VinaStatus</span> in <br>
        struct <span class="struct">_HV_VP_VTL_CONTROL</span> </td>
      </tr>
      <tr>
        <td>3733 </td>
        <td>anonymous struct in <br>
        unnamed union for <span class="member">VinaStatus</span> in <br>
        struct <span class="struct">_HV_VP_VTL_CONTROL</span> </td>
      </tr>
      <tr>
        <td>3749 </td>
        <td>anonymous union in <br>
        struct <span class="struct">_HV_VP_VTL_CONTROL</span> </td>
      </tr>
      <tr>
        <td>3751 </td>
        <td>anonymous struct in <br>
        anonymous union in <br>
        struct <span class="struct">_HV_VP_VTL_CONTROL</span> </td>
      </tr>
      <tr>
        <td>3757 </td>
        <td>anonymous struct in <br>
        anonymous union in <br>
        struct <span class="struct">_HV_VP_VTL_CONTROL</span> </td>
      </tr>
      <tr>
        <td>3775 </td>
        <td>struct <span class="struct">_HV_VP_ASSIST_PAGE</span> </td>
      </tr>
      <tr>
        <td>4363 </td>
        <td>union <span class="union">_HV_EXPLICIT_SUSPEND_REGISTER</span> </td>
      </tr>
      <tr>
        <td>4366 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_EXPLICIT_SUSPEND_REGISTER</span> </td>
      </tr>
      <tr>
        <td>4369 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_EXPLICIT_SUSPEND_REGISTER</span> </td>
      </tr>
      <tr>
        <td>4373 </td>
        <td>union <span class="union">_HV_INTERCEPT_SUSPEND_REGISTER</span> </td>
      </tr>
      <tr>
        <td>4383 </td>
        <td>union <span class="union">_HV_X64_INTERRUPT_STATE_REGISTER</span>
        </td>
      </tr>
      <tr>
        <td>4386 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_INTERRUPT_STATE_REGISTER</span> </td>
      </tr>
      <tr>
        <td>4396 </td>
        <td>enum <span class="enum">_HV_X64_PENDING_INTERRUPTION_TYPE</span>
        </td>
      </tr>
      <tr>
        <td>4403 </td>
        <td>union <span class="union">_HV_X64_PENDING_INTERRUPTION_REGISTER</span>
        </td>
      </tr>
      <tr>
        <td>4406 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_X64_PENDING_INTERRUPTION_REGISTER</span>
        </td>
      </tr>
      <tr>
        <td>4453 </td>
        <td>union <span class="union">_HV_REGISTER_VALUE</span> </td>
      </tr>
      <tr>
        <td>4494 </td>
        <td>struct <span class="struct">_HV_REGISTER_ASSOC</span> </td>
      </tr>
      <tr>
        <td>4501 </td>
        <td>struct <span class="struct">_HV_INPUT_SET_VP_REGISTERS</span> </td>
      </tr>
      <tr>
        <td>4517 </td>
        <td>struct <span class="struct">_HV_INPUT_GET_VP_REGISTERS</span> </td>
      </tr>
      <tr>
        <td>4528 </td>
        <td>union <span class="union">_HV_REGISTER_CR_INTERCEPT_CONTROL</span>
        </td>
      </tr>
      <tr>
        <td>4531 </td>
        <td>anonymous struct in <br>
        union <span class="union">_HV_REGISTER_CR_INTERCEPT_CONTROL</span> </td>
      </tr>
      <tr>
        <td>4559 </td>
        <td>struct <span class="struct">_HV_INPUT_START_VIRTUAL_PROCESSOR</span>
        </td>
      </tr>
      <tr>
        <td>4569 </td>
        <td>struct <span class="struct">_HV_INPUT_GET_VP_INDEX_FROM_APIC_ID</span>
        </td>
      </tr>
      <tr>
        <td>4591 </td>
        <td>struct <span class="struct">_HV_INPUT_MODIFY_VTL_PROTECTION_MASK</span>
        </td>
      </tr>
    </tbody>
  </table>
  <p>Not listed above are the types that HVGDK_MINI.H apparently defines in conditional 
  blocks for the 32-bit and 64-bit ARM platforms. These can be found by inspecting 
  the ARM-specific CLFSMGMT.LIB. They fill some of the gaps between the Intel-specific 
  definitions. </p>
  <p>For instance, that&nbsp; <span class="struct">_HV_X64_HYPERVISOR_FEATURES</span> 
  is defined at line 717 survives into the x86 and x64 builds of the library. These 
  show nothing of a <span class="struct">_HV_ARM64_HYPERVISOR_FEATURES</span>, presumably 
  because its definition was eliminated by the preprocessor’s interpretation of 
  some sort of <span class="directive">#if</span> directive. The ARM builds similarly 
  miss the X64 structure but show that <span class="struct">_HV_ARM64_HYPERVISOR_FEATURES</span> 
  is defined at line 775, i.e., between <span class="struct">_HV_X64_HYPERVISOR_FEATURES</span> 
  and <span class="struct">_HV_X64_ENLIGHTENMENT_INFORMATION</span>. </p>
  <p>It would be a sound guess, but is not knowable from the libraries, that such 
  paired definitions as those of <span class="struct">_HV_X64_HYPERVISOR_FEATURES</span> 
  and <span class="struct">_HV_AMD64_HYPERVISOR_FEATURES</span> are followed by 
  definitions of macros, in this case <span class="macro">HV_HYPERVISOR_FEATURES</span>, 
  that equate to the appropriate type for whichever platform the source code is 
  built for. </p>
  <p>That the types have platform-specific names means that conditional compilation 
  to eliminate the “wrong” one causes no error. Conditional compilation does indeed 
  look to have been skipped for <span class="struct">_HV_X64_CONTEXT</span> and
  <span class="struct">_HV_AMD64_CONTEXT</span>. Each library for the original Windows 
  10 has both. This is deliberate, so that both are nested within the multi-platform
  <span class="struct">HV_VP_CONTEXT</span>. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 23rd July 2020 but was not published 
    until 25th <a href="../../../../../../new/20/10.htm">October 2020</a>. It was 
    last modified on 26th <a href="../../../../../../new/22/10.htm">November 2022</a>.
    </p>
    <!--webbot bot="Include" U-Include="../../../_include/c2022.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="54407" -->
  </div>
</div>

</body>

</html>
