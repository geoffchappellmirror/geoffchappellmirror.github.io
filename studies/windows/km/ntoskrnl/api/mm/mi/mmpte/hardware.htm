<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>MMPTE_HARDWARE</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="42787" -->
<h1>MMPTE_HARDWARE </h1>
<p>The <span class="struct">MMPTE_HARDWARE</span> structure is Microsoft’s representation 
of a Page Table Entry (PTE) such as the processor can use when translating a linear 
address to a physical address. </p>
<p>The processor finds these PTEs by following a chain of physical addresses that 
begin from what’s in the <span class="register">cr3</span> register. The translation 
algorithm iterates through as many as four levels. Since this is all documented 
by Intel and our concern is less with the processor than the Memory Manager, a brief 
summary suffices here. Successively less significant parts of the linear address 
each provide an index into successively lower levels of page tables. These get successively 
more clumsy names—page directory, page directory pointer table and page map level 
4 (PML4) table—but each page table at whatever level is a page-sized array of PTEs. 
The indexed PTE at each level provides the physical address of the next (lower) 
level of page table until the iteration completes. The physical address from the 
lowest-level PTE is the physical address of the page that contains the given linear 
address. </p>
<p>There are presently three translation algorithms. Their mechanisms differ in 
the size of the PTE and the maximum possible depth of the iteration. The effect 
is of translating between different sizes of linear and physical address spaces. 
The choice is made even before the kernel is loaded. Indeed, the kernel exists 
in different forms which each implement only one of the translation algorithms: </p>
<table>
  <tr>
    <th>Algorithm </th>
    <th>PTE Size </th>
    <th>Depth </th>
    <th>Linear Address Width </th>
    <th>Physical Address Width </th>
    <th>Versions </th>
    <th>Kernels </th>
  </tr>
  <tr>
    <td rowspan="2">x86 </td>
    <td rowspan="2">4 bytes </td>
    <td rowspan="2">2 </td>
    <td rowspan="2">32 bits </td>
    <td rowspan="2">32 bits </td>
    <td>3.10 to 5.2 </td>
    <td>32-bit NTOSKRNL.EXE <br>
    32-bit NTKRNLMP.EXE </td>
  </tr>
  <tr>
    <td>6.0 to 6.1 </td>
    <td>32-bit NTOSKRNL.EXE </td>
  </tr>
  <tr>
    <td rowspan="3">PAE </td>
    <td rowspan="3">8 bytes </td>
    <td rowspan="3">3 </td>
    <td rowspan="3">32 bits </td>
    <td rowspan="3">36 bits </td>
    <td>5.0 to 5.2 </td>
    <td>32-bit NTKRNLPA.EXE <br>
    32-bit NTKRPAMP.EXE </td>
  </tr>
  <tr>
    <td>6.0 to 6.1 </td>
    <td>32-bit NTKRNLPA.EXE </td>
  </tr>
  <tr>
    <td>6.2 and higher </td>
    <td>32-bit NTOSKRNL.EXE </td>
  </tr>
  <tr>
    <td rowspan="2">x64 </td>
    <td rowspan="2">8 bytes </td>
    <td rowspan="2">4 </td>
    <td rowspan="2">48 bits </td>
    <td rowspan="2">48 bits </td>
    <td>late 5.2 </td>
    <td>64-bit NTOSKRNL.EXE <br>
    64-bit NTKRNLMP.EXE </td>
  </tr>
  <tr>
    <td>6.0 and higher </td>
    <td>64-bit NTOSKRNL.EXE </td>
  </tr>
</table>
<p>&nbsp;</p>
<h2>Access </h2>
<p>The Memory Manager, of course, accesses PTEs by linear addresses, not physical. 
It greatly eases this work by preparing the highest-level page table to have one 
of its PTEs give the physical address of that same page table. This creates a linear 
address whose translation to a physical address uses just this one PTE at all levels, 
but its larger consequence is that the PTEs for successive pages in the whole linear 
address space become addressable as one array. Through most of the history of Windows, 
and still in 32-bit Windows, the base address of this PTE array is preset: </p>
<table>
  <tr>
    <th>&nbsp;</th>
    <th>Symbolic Name </th>
    <th>x86 </th>
    <th>PAE </th>
    <th>x64 (Before 1607) </th>
  </tr>
  <tr>
    <td>First PTE </td>
    <td><span class="constant">PTE_BASE</span> </td>
    <td>C0000000 </td>
    <td>C0000000 </td>
    <td>FFFFF680`00000000 </td>
  </tr>
  <tr>
    <td>First PDE </td>
    <td><span class="constant">PDE_BASE</span> </td>
    <td>C0300000 </td>
    <td>C0600000 </td>
    <td>FFFFF6FB`40000000 </td>
  </tr>
  <tr>
    <td>First PDPTE </td>
    <td><span class="constant">PPE_BASE</span> (x64) </td>
    <td>&nbsp;</td>
    <td>C0603000 </td>
    <td>FFFFF6FB`7DA00000 </td>
  </tr>
  <tr>
    <td>First PML4E </td>
    <td><span class="constant">PXE_BASE</span> (x64) </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>FFFFF6FB`7DBED000 </td>
  </tr>
  <tr>
    <td>Self-Mapping PTE </td>
    <td><span class="constant">PXE_SELFMAP</span> (x64) </td>
    <td>C0300C00 </td>
    <td>C0603018 </td>
    <td>FFFFF6FB`7DBEDF68 </td>
  </tr>
  <tr>
    <td>Last byte of last PML4E </td>
    <td><span class="constant">PXE_TOP</span> (x64) </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>FFFFF6FB`7DBEDFFF </td>
  </tr>
  <tr>
    <td>Last byte of last PDPTE </td>
    <td><span class="constant">PPE_TOP</span> (x64) </td>
    <td>&nbsp;</td>
    <td>C060301F </td>
    <td>FFFFF6FB`7DBFFFFF </td>
  </tr>
  <tr>
    <td>Last byte of last PDE </td>
    <td><span class="constant">PDE_TOP</span> </td>
    <td>C0300FFF </td>
    <td>C0603FFF </td>
    <td>FFFFF6FB`7FFFFFFF </td>
  </tr>
  <tr>
    <td>Last byte of last PTE </td>
    <td><span class="constant">PTE_TOP</span> </td>
    <td>C03FFFFF </td>
    <td>C07FFFFF </td>
    <td>FFFFF6FF`FFFFFFFF </td>
  </tr>
</table>
<p>Microsoft’s macro definitions for the x64 values of these magic addresses have 
been published in the NTDDK.H and other headers from all versions of the Device 
Driver Kit (DDK) and Windows Driver Kit (WDK) from as far back as Windows XP. That 
Microsoft has matching definitions for the x86 values is no surprise but public 
confirmation is known only from the NTOSP.H file from the Enterprise WDK for the 
1511 release of Windows 10. Starting with the 1607 release of Windows 10, the x64 
kernel is still built with these addresses hard-coded, e.g., as immediate data in 
instructions, but in a continuing programme of Address Space Layout Randomization 
(ASLR) they all get changed at load time through the Dynamic Value Relocation Table 
in the kernel’s load configuration. </p>
<p>The reverse engineer or even the programmer who’s doing kernel-mode debugging 
will not get far into the Memory Manager’s code without encountering sequences that 
compute the address of the PTE for an arbitrary linear address. Let
<span class="variable">MmPteBase</span> be an internal variable or the hard-coded
<span class="constant">PTE_BASE</span>, but either way a pointer to the whole
<span class="struct">MMPTE</span> array. Then the address of the PTE for the linear 
address <span class="placeholder">p</span> is </p>
<pre class="source">&amp;MmPteBase [(ULONG_PTR) (<span class="placeholder">p</span>) &gt;&gt; PAGE_SHIFT]</pre>
<p>in 32-bit Windows, with or without Physical Address Extension (PAE), but the 
computation for 64-bit Windows needs just a little more because only the low 48 
bits of a 64-bit linear address are meaningful: </p>
<pre class="source">
&amp;MmPteBase [((ULONG_PTR) (<span class="placeholder">p</span>) &amp; 0x0000FFFFFFFFFFFF) &gt;&gt; PAGE_SHIFT]
</pre>
<p>See that the computation is recursive. For instance, the address of the PDE for 
a given address is the address of the PTE for the PTE for that address. This recursion 
of course produces more formulae that the programmer or reverse engineer may do 
well to recognise. For the magic addresses in particular, the recursion is that 
the PTE for <span class="constant">PTE_BASE</span> is at <span class="constant">
PDE_BASE</span>, the PTE for which is at <span class="constant">PPE_BASE</span>, 
and so on, as far as applicable to the architecture. The PTE for the self-mapping 
PTE is itself. </p>
<h2>Layout </h2>
<p>That a PTE is intended for the processor’s interpretation is presumably what 
makes it a <span class="definition">hardware PTE</span> for the Memory Manager. 
In Intel’s terminology for the processor, the translation from linear address to 
physical address can complete only if each PTE along the way has a set
<span class="bit">P</span> bit (masked by 0x01). Only then is anything else in a 
PTE meaningful to the processor. Encountering a hardware PTE with a clear
<span class="bit">P</span> bit causes the processor to raise an exception. The effect 
is to hand the PTE to software for interpretation as if the PTE were instead a
<span class="definition">software PTE</span>. It is here thought that the
<span class="struct">MMPTE_HARDWARE</span> is the Memory Manager’s one structure 
for a PTE that is intended to be interpreted by the processor. An
<span class="struct">MMPTE_HARDWARE</span> may have a clear <span class="bit">P</span> 
bit but its continued interpretation is then as an <span class="struct">MMPTE_SOFTWARE</span>.
</p>
<p>Names and types in the following tables are from public symbol files for the 
kernel, starting with Windows 2000 SP3 in general. The exception is that symbol 
files for the single-processor kernel without PAE support don’t have type information 
before Windows XP. This mostly doesn’t matter and is left unspecified almost everywhere 
that this website says that information is from public symbol files for Windows 
2000, but it matters for the <span class="struct">MMPTE_HARDWARE</span> because 
the kernel manages some bits differently if it has the complication of executing 
on multiple processors. </p>
<h3>32-Bit PTE </h3>
<p>For the x86 builds that do not use PAE, page table entries are four bytes. The 
whole <span class="struct">MMPTE_HARDWARE</span> is a structure of
<span class="type">ULONG</span> bit fields: </p>
<table class="Bits">
  <colgroup>
    <col class="Mask"><col class="Definition"><col class="Versions">
  </colgroup>
  <tr>
    <th>Mask </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0x00000001 </td>
    <td>
    <pre class="source">ULONG Valid : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">P</span>; <br>
    must be set for processor to interpret any other bits </td>
  </tr>
  <tr>
    <td rowspan="3">0x00000002 </td>
    <td>
    <pre class="source">ULONG Write : 1;</pre>
    </td>
    <td>3.10 to 3.51; <br>
    4.0 to 5.2 (UP) </td>
    <td>Intel’s <span class="bit">R/W</span> </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONG Writable : 1;</pre>
    </td>
    <td>4.0 to 5.2 (MP) </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONG Dirty1 : 1;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000004 </td>
    <td>
    <pre class="source">ULONG Owner : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">U/S</span> </td>
  </tr>
  <tr>
    <td>0x00000008 </td>
    <td>
    <pre class="source">ULONG WriteThrough : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">PWT</span> </td>
  </tr>
  <tr>
    <td>0x00000010 </td>
    <td>
    <pre class="source">ULONG CacheDisable : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">PCD</span> </td>
  </tr>
  <tr>
    <td>0x00000020 </td>
    <td>
    <pre class="source">ULONG Accessed : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">A</span> </td>
  </tr>
  <tr>
    <td>0x00000040 </td>
    <td>
    <pre class="source">ULONG Dirty : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">D</span> </td>
  </tr>
  <tr>
    <td>0x00000080 </td>
    <td>
    <pre class="source">ULONG LargePage : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">PAT</span> or <span class="bit">PS</span> </td>
  </tr>
  <tr>
    <td>0x00000100 </td>
    <td>
    <pre class="source">ULONG Global : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">G</span> </td>
  </tr>
  <tr>
    <td>0x00000200 </td>
    <td>
    <pre class="source">ULONG CopyOnWrite : 1;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000400 </td>
    <td>
    <pre class="source">ULONG Prototype : 1;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td rowspan="2">0x00000800 </td>
    <td>
    <pre class="source">ULONG reserved : 1;</pre>
    </td>
    <td>3.10 to 3.51; <br>
    4.0 to 5.2 (UP) </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONG Write : 1;</pre>
    </td>
    <td>4.0 to 5.0 (MP) </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xFFFFF000 </td>
    <td>
    <pre class="source">ULONG PageFrameNumber : 20;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>Remember that “all” and “higher” reach only to version 6.1. Though kernels without 
support for PAE may exist in theory for version 6.2 and higher, none are known to 
have been distributed. </p>
<p>Given that <span class="member">Valid</span> is set, the lowest nine bits all 
have their meaning defined by Intel for interpretation by the processor. The
<span class="member">CopyOnWrite</span>, <span class="member">Prototype</span> and 
(the multi-processor) <span class="member">Write</span> bits are how Windows uses 
the three bits that Intel leaves to the operating system even in a hardware PTE.
</p>
<p>The <span class="member">CopyOnWrite</span> bit acts most usefully for a page 
that is not enabled for <span class="member">Write</span> access. The physical page 
that corresponds to the linear address is protected from change. Attempting to write 
to it causes a page fault which the operating system resolves by finding a new physical 
page, filling it with the contents of the protected page, and then remapping the 
linear address to the new page. </p>
<p>The <span class="member">Prototype</span> bit has an important role in the various 
types of software PTE. In general, an <span class="struct">MMPTE_SOFTWARE</span> 
that has the <span class="member">Prototype</span> bit set is interpreted next as 
an <span class="struct">MMPTE_PROTOTYPE</span>. Early versions go straight to this 
interpretation even without testing that <span class="member">Valid</span> is clear.
</p>
<p>Redefining the <span class="member">Write</span> bit from Intel’s 0x00000002 
to 0x00000800 is Microsoft’s way around a problem that multi-processor systems present 
to operating-system software that would clear the <span class="member">Dirty</span> 
bit. This latter is set in the PTE by any processor that writes to any linear address 
whose translation ends with this PTE. That the processor does this is vital for 
the Memory Manager’s tracking of which pagable pages, i.e., pages of linear address 
space whose contents are subject to being paged in and out between physical memory 
and disk storage, have been modified. When the Memory Manager acts on a set
<span class="member">Dirty</span> bit, it clears not just this bit but also the
<span class="member">Writable</span> bit so that whatever it aims to do about the 
modified page cannot be interfered with by other processors (which temporarily see 
the page as having no write access). Meanwhile, the <span class="member">Write</span> 
bit is the Memory Manager’s record of whether the page is eventually to have its 
write access restored. Windows Vista, which discontinues the single-processor kernels, 
formalises that the <span class="member">Dirty</span> and <span class="member">Writable</span> 
bits (the latter now named <span class="member">Dirty1</span>) are cleared together.
</p>
<h3>64-Bit PTE </h3>
<p>For 64-Bit Windows but also for the x86 builds that use PAE, page table entries 
are eight bytes and the <span class="struct">MMPTE_HARDWARE</span> is a structure 
of <span class="type">ULONGLONG</span> bit fields. The low 12 bits of the 64-bit 
PTE, whether for PAE and x64, match closely those of the 32-bit PTE: </p>
<table class="Bits">
  <colgroup>
    <col class="Mask"><col class="Definition">
  </colgroup>
  <tr>
    <th>Mask </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0x00000000`00000001 </td>
    <td>
    <pre class="source">ULONGLONG Valid : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">P</span>; <br>
    must be set for processor to interpret any other bits </td>
  </tr>
  <tr>
    <td rowspan="3">0x00000000`00000002 </td>
    <td>
    <pre class="source">ULONGLONG Write : 1;</pre>
    </td>
    <td>5.0 to 5.2 (UP) </td>
    <td>Intel’s <span class="bit">R/W</span> </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG Writable : 1;</pre>
    </td>
    <td>5.0 to 5.2 (MP) </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG Dirty1 : 1;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000000`00000004 </td>
    <td>
    <pre class="source">ULONGLONG Owner : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">U/S</span> </td>
  </tr>
  <tr>
    <td>0x00000000`00000008 </td>
    <td>
    <pre class="source">ULONGLONG WriteThrough : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">PWT</span> </td>
  </tr>
  <tr>
    <td>0x00000000`00000010 </td>
    <td>
    <pre class="source">ULONGLONG CacheDisable : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">PCD</span> </td>
  </tr>
  <tr>
    <td>0x00000000`00000020 </td>
    <td>
    <pre class="source">ULONGLONG Accessed : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">A</span> </td>
  </tr>
  <tr>
    <td>0x00000000`00000040 </td>
    <td>
    <pre class="source">ULONGLONG Dirty : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">D</span> </td>
  </tr>
  <tr>
    <td>0x00000000`00000080 </td>
    <td>
    <pre class="source">ULONGLONG LargePage : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">PAT</span> or <span class="bit">PS</span> </td>
  </tr>
  <tr>
    <td>0x00000000`00000100 </td>
    <td>
    <pre class="source">ULONGLONG Global : 1;</pre>
    </td>
    <td>all </td>
    <td>Intel’s <span class="bit">G</span> </td>
  </tr>
  <tr>
    <td>0x00000000`00000200 </td>
    <td>
    <pre class="source">ULONGLONG CopyOnWrite : 1;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td rowspan="2">0x00000000`00000400 </td>
    <td>
    <pre class="source">ULONGLONG Prototype : 1;</pre>
    </td>
    <td>5.0 to 6.0 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG Unused : 1;</pre>
    </td>
    <td>6.1 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td rowspan="2">0x00000000`00000800 </td>
    <td>
    <pre class="source">ULONGLONG reserved0 : 1;</pre>
    </td>
    <td>5.0 to 5.2 (UP) </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG Write : 1;</pre>
    </td>
    <td>all (MP) </td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>Remember that “all” for PAE support begins with version 5.0. Similarly, the first 
x64 build is version 5.2 from Windows Server 2003 SP1. </p>
<p>For these low bits, the only difference from the 32-bit structure (for bits that 
aren’t reserved) is that version 6.1 removed <span class="member">Prototype</span> 
from one but not the other. The remaining bits differ significantly, not just from 
the 32-bit PTE but between the PAE and x64 implementations: </p>
<table class="Bits">
  <colgroup>
    <col class="Mask"><col class="Definition">
  </colgroup>
  <tr>
    <th>Mask (PAE) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td rowspan="2">0x0000000F`FFFFF000 (5.0); <br>
    0x0000003F`FFFFF000 </td>
    <td>
    <pre class="source">ULONGLONG PageFrameNumber : 24;</pre>
    </td>
    <td>5.0 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG PageFrameNumber : 26;</pre>
    </td>
    <td>5.1 and higher </td>
  </tr>
  <tr>
    <td rowspan="3">&nbsp;</td>
    <td>
    <pre class="source">ULONGLONG reserved1 : 28;</pre>
    </td>
    <td>5.0 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG reserved1 : 26;</pre>
    </td>
    <td>5.1 to 1607 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG reserved1 : 25;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x80000000`00000000 </td>
    <td>
    <pre class="source">ULONGLONG NoExecute : 1;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
</table>
<p>In the first PAE kernels, the <span class="member">PageFrameNumber</span> can 
describe 16M pages, as if for 36 address lines and 64GB of physical memory. Version 
5.1 raises this to 64M pages, as if for 38 address lines. This would allow 256GB 
of physical memory, even though 32-bit Windows cannot possibly support so much. 
(It has a long-standing architectural limit of 128GB caused by needing kernel-mode 
address space for an array of <span class="struct">
<a href="../../pfnlist/mmpfn/index.htm">MMPFN</a></span> structures, one per page 
of physical memory. At 0x1C bytes per <span class="struct">MMPFN</span>, even 128GB 
of physical memory requires 896MB for the <span class="struct">MMPFN</span> array 
when at most 1GB can be available.) </p>
<p>It is not known why <span class="member">NoExecute</span> is not defined for 
the PAE builds until a later Windows 10 release. The x64 builds have it from the 
start. </p>
<table class="Bits">
  <colgroup>
    <col class="Mask"><col class="Definition">
  </colgroup>
  <tr>
    <th>Mask (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td rowspan="2">0x000000FF`FFFFF000 (5.2 to early 6.0); <br>
    0x0000FFFF`FFFFF000 <br>
    </td>
    <td>
    <pre class="source">ULONGLONG PageFrameNumber : 28;</pre>
    </td>
    <td>late 5.2 to early 6.0 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG PageFrameNumber : 36;</pre>
    </td>
    <td>late 6.0 and higher </td>
  </tr>
  <tr>
    <td rowspan="3">&nbsp;</td>
    <td>
    <pre class="source">ULONGLONG reserved1 : 12;</pre>
    </td>
    <td>late 5.2 to early 6.0 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG reserved1 : 4;</pre>
    </td>
    <td>late 6.0 to 1607 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG ReservedForHardware : 4;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x7FF00000`00000000 (late 5.2 to 1607) </td>
    <td>
    <pre class="source">ULONGLONG SoftwareWsIndex : 11;</pre>
    </td>
    <td>late 5.2 to 1607 </td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>
    <pre class="source">ULONGLONG ReservedForSoftware : 4;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x0F000000`00000000 </td>
    <td>
    <pre class="source">ULONGLONG WsleAge : 4;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x70000000`00000000 </td>
    <td>
    <pre class="source">ULONGLONG WsleProtection : 3;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x80000000`00000000 </td>
    <td>
    <pre class="source">ULONGLONG NoExecute : 1;</pre>
    </td>
    <td>all (x64) </td>
  </tr>
</table>
<p>The first 64-bit kernels provide for 256M pages, as if for 40 address lines and 
1TB of physical memory. This was raised for the version 6.0 from Windows Vista SP1. 
The widened <span class="member">PageFrameNumber</span> allows 48 address lines 
and thus 256TB of physical memory. Note that the <span class="member">PageFrameNumber</span> 
in the otherwise very close <span class="struct"><a href="../hardware_pte.htm">HARDWARE_PTE</a></span> 
does not get this same widening until the version 6.1 from Windows 7 SP1. It is 
not known whether the lag in updating the <span class="struct">HARDWARE_PTE</span> 
had real-world consequence. </p>
<p>In the high dword, 64-bit Windows defines <span class="member">SoftwareWsIndex</span> 
as using all 11 bits that Intel leaves as available if the processor is not using 
protection keys. </p>
<h2>MMPTE_HARDWARE_LARGEPAGE </h2>
<p>The <span class="struct">MMPTE_HARDWARE</span> leaves unspecified that not all 
the bits of the <span class="member">PageFrameNumber</span> are meaningful in a 
PTE for a large page. In a PTE for a 2MB page—or, if you prefer, a PDE for which
<span class="member">LargePage</span> is set—the lowest bit of the
<span class="member">PageFrameNumber</span> is Intel’s <span class="bit">PAT</span> 
and the next eight are reserved, i.e., must be zero. This applies also in 64-bit 
Windows to a PTE for a 1GB page, i.e., a PDPTE for which <span class="member">LargePage</span> 
is set, except that nine more bits are reserved. </p>
<p>Early versions of the 64-bit kernel define an <span class="struct">MMPTE_HARDWARE_LARGEPAGE</span> 
to model this for 2MB pages: </p>
<table class="Bits">
  <colgroup>
    <col class="Mask"><col class="Definition">
  </colgroup>
  <tr>
    <th>Mask (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00000000`00001000 (late 5.2 to 6.0) </td>
    <td>
    <pre class="source">ULONGLONG PAT : 1;</pre>
    </td>
    <td>late 5.2 to 6.0 </td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>
    <pre class="source">ULONGLONG reserved1 : 8;</pre>
    </td>
    <td>late 5.2 to 6.0 </td>
  </tr>
  <tr>
    <td rowspan="2">0x000000FF`FFE00000 (5.2 to early 6.0); <br>
    0x0000FFFF`FFE00000 <br>
    </td>
    <td>
    <pre class="source">ULONGLONG PageFrameNumber : 19;</pre>
    </td>
    <td>late 5.2 to early 6.0 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG PageFrameNumber : 27;</pre>
    </td>
    <td>late 6.0 only </td>
  </tr>
  <tr>
    <td rowspan="2">0xFFFFFF00`00000000 (5.2 to early 6.0); <br>
    0xFFFF0000`00000000 </td>
    <td>
    <pre class="source">ULONGLONG reserved2 : 24;</pre>
    </td>
    <td>late 5.2 to early 6.0 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONGLONG reserved2 : 16;</pre>
    </td>
    <td>late 6.0 </td>
  </tr>
</table>
<p>This was discontinued for version 6.1, perhaps because it’s more trouble than 
it’s worth. It captures that the page frame number loses its low nine bits but it 
leaves the <span class="member">PageFrameNumber</span> no longer equal to the page 
frame number. </p>
<div class="Footer">
  <p class="Dates">This page was created on 16th July 2016 but was not published 
  until 13th <a href="../../../../../../../../new/19/10.htm">October 2019</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../../_include/c19.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="2272" -->
</div>

</body>

</html>
