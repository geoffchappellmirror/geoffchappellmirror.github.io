<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>HviGetHypervisorVendorAndMaxFunction</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>HviGetHypervisorVendorAndMaxFunction </h1>
  <p>The <span class="function">HviGetHypervisorVendorAndMaxFunction</span> function 
  obtains the output of a hypervisor’s <span class="instruction">
  <a href="../../../../cpu/cpuid/index.htm">cpuid</a></span> leaf 0x40000000.
  </p>
  <h2>Declaration </h2>
  <pre class="source">VOID HviGetHypervisorVendorAndMaxFunction (<a href="../../../inc/shared/hvgdk_mini/hv_vendor_and_max_function.htm">HV_VENDOR_AND_MAX_FUNCTION</a> *);</pre>
  <h3>Parameters </h3>
  <p>The one argument provides the address of a structure that is to receive the
  <span class="instruction">cpuid</span> output. </p>
  <h2>Availability </h2>
  <p>The <span class="function">HviGetHypervisorVendorAndMaxFunction</span> function 
  is exported by name from the kernel in version 10.0 and higher. </p>
  <h3>History </h3>
  <p>The version 6.3 kernel has an inline routine that is coded very similarly to 
  the version 10.0 <span class="function">HviGetHypervisorVendorAndMaxFunction</span>. 
  Public symbol files for the version 6.3 kernel confirm that this earlier kernel 
  has an inline routine that was already named <span class="internal routine">HviGetHypervisorVendorAndMaxFunction</span> 
  and had as its one argument a pointer to an <span class="struct">HV_VENDOR_AND_MAX_FUNCTION</span>. 
  That the inline routine in the binary is the same as named in the symbol files 
  which is in turn the origin of the exported function must be all but certain.
  </p>
  <h2>Documentation Status </h2>
  <p>The <span class="function">HviGetHypervisorVendorAndMaxFunction</span> function 
  is not documented. </p>
  <h2>Behaviour </h2>
  <p>If a hypervisor is present—see <span class="function">
  <a href="isanyhypervisorpresent.htm">HviIsAnyHypervisorPresent</a></span>—then 
  the function copies to the given address whatever <span class="instruction">cpuid</span> 
  leaf 0x40000000 produces in the <span class="register">eax</span>,
  <span class="register">ebx</span>, <span class="register">ecx</span> and
  <span class="register">edx</span> registers. </p>
  <p>Otherwise, the structure at the given address is zeroed. This, in effect, is 
  the function’s indication of failure. </p>
  <h3>Simplification </h3>
  <p>The kernel is largely unconcerned with the <span class="member">Vendor</span>. 
  This is consistent with the Hypervisor
  <a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/reference/tlfs">
  Top-Level Functional Specification</a> (TLFS), which advises that “The vendor 
  ID signature should be used only for reporting and diagnostic purposes” and recommends 
  “that software only base compatibility decisions on the interface signature reported 
  through leaf 0x40000001.” The <span class="member">MaxFunction</span>, by contrast, 
  is important to the kernel and surely also to external callers, for assurance 
  that output from a given <span class="instruction">cpuid</span> leaf is meaningful. 
  The kernel never executes any <span class="instruction">cpuid</span> leaf beyond 
  0x40000005 without checking that the leaf is no greater than
  <span class="member">MaxFunction</span>. </p>
  <p>In practice, then, the primary purpose of <span class="function">HviGetHypervisorVendorAndMaxFunction</span> 
  is to get the <span class="member">MaxFunction</span>. Public symbol files for 
  the version 6.3 kernel confirm that Microsoft’s programmers had an inline routine 
  that extracts just the <span class="member">MaxFunction</span>: </p>
  <pre class="source">UINT32 HvipGetMaxFunction (VOID);</pre>
  <p>This looks like it exists solely as a convenience. The only coding that looks 
  plausible for it in the binary is that it calls the inline routine
  <span class="inline routine">HviGetHypervisorVendorAndMaxFunction</span>, returns 
  the <span class="member">MaxFunction</span> and discards the
  <span class="member">Vendor</span>. This then would be a use (if not the use) 
  that gets <span class="inline routine">HviGetHypervisorVendorAndMaxFunction</span> 
  into the public symbol files. That <span class="inline routine">HvipGetMaxFunction</span> 
  is also in the public symbol files would follow from its use by the inline routine
  <span class="inline routine">HviGetHardwareFeatures</span>. This coding all continues 
  to Windows 10. That it doesn’t show in the public symbol files for any Windows 
  10 kernel pretty much proves that even though <span class="function">HviGetHypervisorVendorAndMaxFunction</span> 
  does still get inlined, it is no longer defined in a header, e.g.,
  <a href="../../../source/inc/hvgdk_mini.htm">hvgdk_mini.h</a>, that gets included 
  by the source file (<a href="../../../source/ntsym.htm">ntsym.c</a>) that’s used 
  for merging type information into the public symbols. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 19th
    <a href="../../../../../../../new/16/11.htm">November 2016</a> and was last 
    modified on 30th <a href="../../../../../../../new/22/10.htm">November 2022</a>.
    </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
