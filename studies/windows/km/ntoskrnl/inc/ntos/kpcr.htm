<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>KPCR</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="54033" -->
<h1>KPCR </h1>
<p>The name <span class="struct">KPCR</span> stands for (Kernel) Processor Control 
Region. The kernel keeps a <span class="struct">KPCR</span> (formally a
<span class="struct">_KPCR</span>) for each logical processor. The
<span class="struct">KPCR</span> for the boot processor is in space provided by 
the loader or is in the kernel’s own data, but the <span class="struct">KPCR</span> 
for each additional processor is at the start of a large-scale per-processor state 
that the kernel builds in one memory allocation. In version 6.0 and higher, these 
are laid out as follows: </p>
<ul>
  <li>the <span class="struct">KPCR</span> for the processor, ending with one
  <span class="struct">REQUEST_MAILBOX</span> per processor in applicable versions;
  </li>
  <li>a Task State Segment (TSS), defining the current task on the processor;
  </li>
  <li>(x64 only) an 8KB stack for use while handling the Double Fault exception 
  for the processor; </li>
  <li>(x64 only) an 8KB stack for use while handling the Machine Check exception 
  for the processor; </li>
  <li>(x64 only) an 8KB stack for use while handling the Non-Maskable Interrupt 
  (NMI) for this processor; </li>
  <li>an <span class="struct"><a href="ps/ethread/index.htm">ETHREAD</a></span>, 
  representing the system thread for the processor’s initial execution; </li>
  <li>(x86 only) a TSS for handling the Double Fault exception for the processor;
  </li>
  <li>(x86 only) a TSS for handling the NMI for the processor; </li>
  <li>(x86 only) a 12KB stack for use while handling NMIs, double faults and Machine 
  Check exceptions for the processor; </li>
  <li>the Global Descriptor Table (GDT) for the processor; </li>
  <li>the Interrupt Descriptor Table (IDT) for the processor. </li>
</ul>
<p>The precise arrangement of these items is plainly meant to be the kernel’s own 
business. Explicit use of them, wherever they are for any processor, doesn’t look 
to be intended for any software other than the kernel and the HAL. They are listed 
here just for the general background of knowing what sorts of large-scale structures 
Windows keeps for each processor and to elaborate the architectural point that the
<span class="struct">KPCR</span> is the means through which the kernel manages them.
</p>
<p>The <span class="struct">KPCR</span> is highly specific to the processor architecture. 
Indeed, public symbol files confirm that Microsoft differentiates the x86 and x64 
implementations not by conditional compilation but by defining them in separate 
headers. This note follows Microsoft and presents the <a href="i386_x/kpcr.htm">
x86 <span class="struct">KPCR</span></a> and <a href="amd64_x/kpcr.htm">x64
<span class="struct">KPCR</span></a> separately. </p>
<div class="Footer">
  <p class="Dates">This page was created on 29th December 2020 from material first 
  published on 21st May 2016. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c1620.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="55079" -->
</div>

</body>

</html>
