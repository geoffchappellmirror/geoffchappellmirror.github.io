<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EtwRegisterClassicProvider</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<!--webbot bot="Include" U-Include="../../../../_include/preview.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" endspan i-checksum="8381" -->
<h1>EtwRegisterClassicProvider </h1>
<p>This function registers a kernel-mode event provider that has the classic interface.
</p>
<h2>Declaration </h2>
<pre>NTSTATUS
NTKERNELAPI
EtwRegisterClassicProvider (
    LPCGUID ProviderId, 
    ULONG Type, 
    PETW_CLASSIC_CALLBACK EnableCallback,
    PVOID CallbackContext,
    REGHANDLE *RegHandle);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">ProviderGuid</span> argument is the address of a GUID 
that represents the event provider. </p>
<p>The <span class="argument">Type</span> argument </p>
<p>The <span class="argument">EnableCallback</span> argument is the address of a 
routine that is to be called back whenever a tracing session interacts with the 
provider. This argument can be <span class="constant">NULL</span> to mean that the 
caller does not want to be called back. </p>
<p>The <span class="argument">CallbackContext</span> argument is a caller-defined 
context that is to be passed back to the caller as one of the arguments of the callback 
routine. This argument is valid only if a callback routine is supplied. </p>
<p>The <span class="argument">RegHandle</span> argument is the address of a 64-bit 
variable that is to receive a registration handle to the provider. The caller may 
use this as an argument when calling other ETW functions, notably to write events 
through this provider, and ultimately to call <span class="function">EtwUnregister</span>.
</p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../../_include/ntstatus.htm" TAG="BODY" startspan -->

<p>The function returns <span class="constant">STATUS_SUCCESS</span> if successful, 
else a negative error code. </p>

<!--webbot bot="Include" endspan i-checksum="8" -->
<h3>Callback </h3>
<p>The callback routine has the prototype </p>
<pre class="source">VOID
<span class="placeholder">EnableCallback</span> (
    LPCGUID Guid,
    UCHAR ControlCode, 
    PVOID EnableContext, 
    PVOID CallbackContext);</pre>
<h2>Availability </h2>
<p>The <span class="function">EtwRegisterClassicProvider</span> function is exported 
by name from the kernel, starting with the version 6.0 from Windows Vista SP1.
</p>
<h2>Documentation Status </h2>
<p>The <span class="function">EtwRegisterClassicProvider</span> function is not 
documented. Declarations and even examples of use have, however, been in the plain 
sight of kernel-mode programmers all along. For all this function’s life, the function 
has been at the heart of initialising a driver’s use of Windows Pre-Processor (WPP) 
Tracing, a diagnostic technology that Microsoft introduced for Windows XP (and back-fitted 
into the later service packs of Windows 2000) and which is in some ways superior 
to anything that Microsoft has since tried to replace it with. A WPP tool pre-processes 
kernel-mode or user-mode source files and generates C-language headers to
<span class="directive">#include</span> in those source files. Starting with the 
Windows Driver Kit (WDK) for Windows 7, the generated headers use
<span class="function">EtwRegisterClassicProvider</span>, with the side-effect that 
declarations of both the function and the callback have been published in the WPP 
configuration files. </p>
<h2>Behaviour </h2>
<p><span class="alert">TO BE DONE</span> </p>
<div class="Footer">
  <p class="Dates">This page was created on 20th May 2020 and was last modified 
  on 28th <a href="../../../../../../../new/20/05.htm">May 2020</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5634" -->
</div>

</body>

</html>
