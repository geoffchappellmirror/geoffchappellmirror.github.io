<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CSR_REPLY_STATUS</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="54033" -->
<h1>CSR_REPLY_STATUS </h1>
<p>When an API routine in a server DLL is called from a client, the mechanism is 
that of sending sending a message and waiting for a reply (or at least for news 
that a reply is pending or is never coming). On the server side, the API routine 
is given the address of the received <span class="struct">
<a href="api_msg.htm">CSR_API_MSG</a></span> as its input. This
<span class="struct">CSR_API_MSG</span> is also ordinarily an output of the API 
routine in that it gets sent back to the client as the reply, at least with its
<span class="member">ReturnValue</span> set to the return value of the API 
routine, if not also with changes that were made by the API routine. The
<span class="enum">CSR_REPLY_STATUS</span> enumeration is an extra output that 
is just for interpretation by CSRSRV for varying the ordinary reply. </p>
<p>The <span class="enum">CSR_REPLY_STATUS</span> is not documented. Neither is 
Microsoft known to have disclosed a C-language definition in any header from any 
publicly released kit for any sort of software development. It is not even known 
from type information in public symbol files. Microsoft’s only known public 
release of type information for the <span class="enum">CSR_REPLY_STATUS</span> 
enumeration is not in any symbol file but is instead in a statically linked 
library, named GDISRVL.LIB, that was published with the Device Driver Kit (DDK) 
for Windows NT 3.51. That type information surives in this library—especially 
since it has the detail of what would ordinarily be called private 
symbols—surely was an oversight, but published it is. </p>
<p>In the absence of an up-to-date public source, Microsoft’s name for one of 
the <span class="enum">CSR_REPLY_STATUS</span> values that are known to have 
ever been meaningful is unknown: </p>
<table>
  <tr>
    <th>Value </th>
    <th>Symbol</th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0 </td>
    <td>
    <span class="constant">CsrReplyImmediate</span>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>1 </td>
    <td>
    <span class="constant">CsrReplyPending</span>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>2 </td>
    <td>
    <span class="constant">CsrClientDied</span>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>3 </td>
    <td>
    unknown
    </td>
    <td>5.0 and higher </td>
  </tr>
</table>
<p>The default is <span class="constant">CsrReplyImmediate</span> in two senses. 
First, the <span class="enum">CSR_REPLY_STATUS</span> whose address is given to 
the API routine is set to <span class="constant">CsrReplyImmediate</span> before 
calling the routine, such that it is the action to take if the routine does not 
explicitly say different. Second, an undefined value on return from the call is 
treated as <span class="constant">CsrReplyImmediate</span>. </p>
<p>The default behaviour is that the received <span class="struct">CSR_API_MSG</span>, 
now with whatever changes were made by the API routine and with its
<span class="member">ReturnValue</span> set from the return value of the API 
routine, is returned to the client as the reply. If the message came with a 
capture buffer in shared memory, the server itself and the API routine will have 
worked from a copy that the server captured to its own memory. This, with 
changes made by the API routine, is all copied back. Case 3 is a simplification 
that avoids the sight expense of a reply when none is wanted. The
<span class="struct">CSR_API_MSG</span> is not returned, but changes to the 
capture buffer are. </p>
<div class="Footer">
  <p class="Dates">This page was created on 21st June 2019 and was last modified 
  on 29th June 2019. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c19.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="62933" -->
</div>

</body>

</html>
