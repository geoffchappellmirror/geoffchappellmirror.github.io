<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Visual C++ Compiler Warning C4038</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>Visual C++ Compiler Warning C4038 </h1>
<h2>Message Text </h2>
<pre class="output">&#39;<span class="placeholder">modifier</span>&#39; : illegal class modifier</pre>
<p>The product documentation has “illegal ambient class modifier”. The inserted 
“ambient” is correct with respect to the circumstances of the warning, but incorrect 
as a representation of the text as actually produced by the compiler. </p>
<p>As discussed below, the text anyway misleads by speaking just of one modifier. 
The singular is correct only in the sense that multiple modifiers count collectively 
as one (compound) modifier. Moreover, if the message does cite more than one modifier, 
not all need be illegal. </p>
<p>While on the matter of precision in the message text, note now that “class” stands 
not just for <span class="keyword">class</span>, <span class="keyword">struct</span>,
<span class="keyword">union</span> or <span class="keyword">__interface</span>, 
as usual, but also for <span class="keyword">enum</span>. </p>
<h2>Severity </h2>
<p>This is a level 1 warning. </p>
<h2>Circumstances </h2>
<p>Warning C4038 is concerned with storage modifiers in the declarations of user-defined 
types (including enumerations), specifically where placed between the class-key 
or <span class="keyword">enum</span> and the name of the type. Such modifiers are 
said to be ambient because they affect the type, and thus all instances of the type. 
By contrast, modifiers placed before the class-key or <span class="keyword">enum</span> 
affect just the one instance of the type, and are discarded, with a warning (<a href="c4091.htm">C4091</a>), 
if it turns out that no instance is declared. </p>
<p>Thus (with enumerations counting as class types just for present purposes),
</p>
<pre class="source"><span class="placeholder">class-key</span> [<span class="placeholder">ambient-modifiers</span>] <span class="placeholder">class-name</span>;</pre>
<p>declares a type, optionally sets some storage attributes for the type and names 
the type, but does not completely define the type: no members are specified and 
instances of the type cannot yet be constructed. A member list can be given separately, 
and the ambient modifiers need not be repeated: </p>
<pre class="source"><span class="placeholder">class-key</span> [<span class="placeholder">ambient-modifiers</span>] <span class="placeholder">class-name</span>
{
    <span class="placeholder">member-list</span>
};</pre>
<p>Indeed, ambient modifiers can be added (subject to conflicts with ones already 
specified). They accumulate even while declaring an instance of the type: </p>
<pre class="source"><span class="placeholder">instance-modifiers</span> [<span class="placeholder">class-key</span> [<span class="placeholder">ambient-modifiers</span>]] <span class="placeholder">class-name</span> <span class="placeholder">instance-name</span>;</pre>
<p>At least, that’s the theory without complication by various keywords specific 
to Microsoft’s managed extensions, namely <span class="keyword">__abstract</span>,
<span class="keyword">__gc</span>, <span class="keyword">__nogc</span>,
<span class="keyword">__sealed</span> and <span class="keyword">__value</span>, 
and by <span class="keyword">__event</span>. All these must for some reason be placed 
before the class-key if they are to be recognised, yet all then have an ambient 
effect, seemingly in contradiction to what seems to have been the general principle 
(and would seem to be still the general principle as far as concerns the product 
documentation’s <span class="citation">Grammar of Classes</span>). </p>
<h3>Prohibition </h3>
<p>The following are not permitted as ambient modifiers: </p>
<ul>
  <li><span class="keyword">__declspec (allocate (&quot;</span><span class="placeholder">segname</span><span class="keyword">&quot;))</span>
  </li>
  <li><span class="keyword">__declspec (naked)</span> </li>
  <li><span class="keyword">__declspec (nothrow)</span> </li>
  <li><span class="keyword">__declspec (selectany)</span> </li>
  <li><span class="keyword">__declspec (thread)</span> </li>
  <li><span class="keyword">explicit</span> </li>
  <li><span class="keyword">friend</span> </li>
  <li><span class="keyword">inline</span> </li>
  <li><span class="keyword">mutable</span> </li>
  <li><span class="keyword">virtual</span> </li>
</ul>
<p>(plus one other that has not yet been identified). In practice however, only 
the <span class="keyword">__declspec</span> modifiers produce warning C4038 since 
the others trigger other warnings or errors before the validity of ambient modifiers 
gets tested. </p>
<p>If among the ambient modifiers any one is illegal, the message text will show 
as the <span class="placeholder">modifier</span> a selection of all the ambient 
modifiers, whether legal or not, according to the
<a href="../../../language/keywords/order.htm">standard representation of storage 
specifiers</a>. </p>
<p>The product documentation claims that a modifier becomes illegal (for warning 
C4038) because of its use “for classes with <span class="keyword">dllimport</span> 
or <span class="keyword">dllexport</span> attributes.” Whether this was ever correct, 
it is certainly rubbish now. Neither of those attributes is needed for the modifiers 
listed above to be illegal as ambient&nbsp; modifiers. </p>
<h2>Examples </h2>
<p>For a simple example of no practical relevance (and no meaningfulness even in 
theory), simply compile </p>
<pre class="source">enum __declspec (nothrow) Test;</pre>
<p>For a more elaborate and perhaps even plausible example, begin with the valid 
code </p>
<pre class="source">#pragma section (&quot;testseg&quot;)

__declspec (allocate (&quot;testseg&quot;)) class __declspec (novtable) Test {
    virtual void func (void);
} test1; </pre>
<p>This defines a class <span class="type">Test</span> with one virtual function 
but which is to have no virtual function table. The fragment simultaneously declares 
an instance of <span class="type">Test</span> and directs that this instance be 
stored in a particular section. </p>
<p>Practical value for the class and for its instantiation would come from giving
<span class="type">Test</span> other members and using it as a base class for two 
or more derived classes. The virtual members of <span class="type">Test</span> have 
the merit of ensuring that the derived classes have at least these functions in 
common. As long as all the virtual functions defined for <span class="type">Test</span> 
are called only through the derived classes, a virtual function table for
<span class="type">Test</span> is redundant and the compiler may as well be told 
of this intention. (It can then eliminate the table and simplify the
<span class="type">Test</span> constructor.) Though <span class="type">Test</span> 
is not wanted for its virtual functions, the other members of <span class="type">
Test</span> may be useful enough to make <span class="type">Test</span> worth instantiating 
in its own right, but perhaps the need is limited and the careful programmer decides 
to place instances of <span class="type">Test</span> in memory alongside other infrequently 
used data. Thus does the example become plausible. </p>
<p>Now suppose that the programmer has a weak understanding of the relevant syntax 
(as is also plausible, without insult, since the product documentation hardly touches 
this syntax) and has placed both the <span class="keyword">__declspec</span> modifiers 
together, after <span class="keyword">class</span>: </p>
<pre class="source">class __declspec (allocate (&quot;testseg&quot;)) __declspec (novtable) Test {        // C4038</pre>
<p>This attracts warning C4038 because <span class="keyword">allocate</span> is 
now an ambient modifier but is illegal as one. The warning message will cite both
<span class="keyword">allocate</span> and <span class="keyword">novtable</span> 
as illegal. </p>
<div class="Footer">
  <p class="Dates">This page was created on 20th March 2006 and was last modified 
  on 9th January 2010. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0610.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2010. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62416" endspan -->
</div>

</body>

</html>
