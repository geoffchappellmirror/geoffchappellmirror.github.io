<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>The #pragma Directive</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="35843" endspan -->
<h1>The #pragma Directive </h1>
<h2>Syntax </h2>
<blockquote>
  <p><span class="directive">#pragma </span>[<span class="directive"> </span>
  <span class="placeholder">pragma</span><span class="directive"> </span>[<span class="directive">
  </span><span class="placeholder">argument-list</span><span class="directive">
  </span>]] </p>
</blockquote>
<p>The general syntax of <a href="../index.htm">preprocessor directives</a> 
applies up to and including <span class="directive">pragma</span>. Though it is 
the convention of these notes to write <span class="directive">#pragma</span> as 
one unit, remember that there may be any amount of white space, including none, 
before and after the # sign. </p>
<p>Beyond the <span class="directive">#pragma</span>, the directive is 
interpreted as a stream of tokens continuing to the end of the line. Very little 
interpretation occurs if the compiler is limited to preprocessing (as by the
<span class="switch"><a href="../../../../cl/cl/options/e.htm">/E</a></span>,
<span class="switch"><a href="../../../../cl/cl/options/ep.htm">/EP</a></span> 
or
<span class="switch"><a href="../../../../cl/cl/options/p.htm">/P</a></span> 
options). Details are given separately below. No interpretation at all occurs if 
the
<span class="switch"><a href="../../../../cl/cl/options/z$g.htm">/Zg</a></span> 
option is active: any line that begins with a <span class="directive">#pragma</span> 
directive is simply ignored. </p>
<p>A <span class="directive">#pragma</span> directive that is alone on its line 
is trivial. Otherwise, the first token is expected to be an identifier, 
represented above by the <span class="placeholder">pragma</span> placeholder. </p>
<p>Generally speaking, a <span class="directive">#pragma</span> directive with 
incorrect syntax is ignored, except for a warning (C4081 or C4083). The warning 
tells what type of token was expected and what type was found instead. If what 
was found is an identifier, it is reproduced in the message text. All remaining 
tokens to the end of the line are then ignored. This treatment of incorrect 
syntax begins with deciding whether <span class="placeholder">pragma</span> is 
an identifier. The intention in these notes is to leave this treatment as 
understood for any case in which the stated syntax is not satisfied but no other 
treatment is specified. Also left as understood even for other conditions that 
attract a warning is that the directive is then ignored by discarding the 
remaining tokens on the line. </p>
<p>The meaning of a <span class="directive">#pragma</span> directive depends on 
which of many expected values are given for <span class="placeholder">pragma</span>. 
An unrecognised <span class="placeholder">pragma</span> causes a warning (<a href="../../../../cl/c1xx/warnings/c4068.htm">C4068</a>) 
at level 1. </p>
<p>It is conventional to talk of a <span class="directive">#pragma</span> 
directive with a particular <span class="placeholder">pragma</span> as a pragma 
and of any tokens that follow as this pragma’s <span class="placeholder">
argument-list</span>.
</p>
<p>Though implemented within the language as preprocessor directives, only very 
few pragmas are acted on immediately by the preprocessor (namely,
<span class="keyword">implementation_key</span>, <span class="keyword">
include_alias</span> 
and <span class="keyword">start_map_region</span>). In all other cases, the 
preprocessor instead tokenises the pragma for action by the compiler. 
Specifically, it creates one token to represent the pragma as a “compile time 
directive” and has this token carry as its value a token stream that represents 
the pragma’s
<span class="placeholder">argument-list</span>. This handling is how most 
pragmas can be given equivalently as preprocessor directives or through the 
compiler’s
<span class="keyword"><a href="../../../keywords/pragma.htm">__pragma</a></span> 
keyword. </p>
<h2>Recognised Pragmas </h2>
<p>In the following lists of syntactically valid keywords for the
<span class="directive">#pragma</span> directive in Microsoft Visual C++ version 
13.00.9466, those that are omitted from the list titled <span class="citation">
Pragma Directives</span> in the product documentation are highlighted yellow. 
Some others, though documented, have undocumented features. </p>
<ul>
  <li><span class="keyword">alloc_text</span> </li>
  <li><span class="keyword">auto_inline</span> </li>
  <li><span class="keyword"><a href="bss_seg.htm">bss_seg</a></span> </li>
  <li><span class="keyword">check_stack</span> </li>
  <li><span class="keyword"><a href="code_seg.htm">code_seg</a></span> </li>
  <li><span class="keyword">comment</span> </li>
  <li><span class="keyword"><a href="component.htm">component</a></span> </li>
  <li><span class="keyword"><a href="conform.htm">conform</a></span> </li>
  <li><span class="keyword"><a href="const_seg.htm">const_seg</a></span> </li>
  <li><span class="keyword"><a href="data_seg.htm">data_seg</a></span> </li>
  <li><span class="keyword"><a href="deprecated.htm">deprecated</a></span> </li>
  <li><span class="keyword">function</span> </li>
  <li><span class="keyword">hdrstop</span> </li>
  <li><span class="undocumented keyword">ident</span> </li>
  <li><span class="undocumented keyword"><a href="implementation_key.htm">
  implementation_key</a></span>
  </li>
  <li><span class="keyword">include_alias</span> </li>
  <li><span class="keyword">init_seg</span> </li>
  <li><span class="keyword">inline_depth</span> </li>
  <li><span class="keyword">inline_recursion</span> </li>
  <li><span class="keyword"><a href="intrinsic.htm">intrinsic</a></span> </li>
  <li><span class="keyword">managed</span> </li>
  <li><span class="keyword">message</span> </li>
  <li><span class="keyword"><a href="once.htm">once</a></span> </li>
  <li><span class="keyword"><a href="optimize.htm">optimize</a></span> </li>
  <li><span class="keyword"><a href="pack.htm">pack</a></span> </li>
  <li><span class="keyword">pointers_to_members</span> </li>
  <li><span class="keyword">pop_macro</span> </li>
  <li><span class="keyword">push_macro</span> </li>
  <li><span class="keyword">runtime_checks</span> </li>
  <li><span class="undocumented keyword">same_seg</span> </li>
  <li><span class="keyword">section</span> </li>
  <li><span class="undocumented keyword">segment</span> </li>
  <li><span class="keyword">setlocale</span> </li>
  <li><span class="undocumented keyword"><a href="start_map_region.htm">
  start_map_region</a></span>
  </li>
  <li><span class="undocumented keyword"><a href="stop_map_region.htm">
  stop_map_region</a></span>
  </li>
  <li><span class="undocumented keyword">string_pooling</span> </li>
  <li><span class="keyword">unmanaged</span> </li>
  <li><span class="keyword">vtordisp</span> </li>
  <li><span class="keyword">warning</span> </li>
</ul>
<p>The following are syntactically valid, but produce the “unknown pragma” 
warning (<a href="../../../../cl/c1xx/warnings/c4068.htm">C4068</a>) at level 4: </p>
<ul>
  <li><span class="undocumented keyword">check_pointer</span> </li>
  <li><span class="undocumented keyword">linesize</span> </li>
  <li><span class="undocumented keyword">loop_opt</span> </li>
  <li><span class="undocumented keyword">native_caller</span> </li>
  <li><span class="undocumented keyword">page</span> </li>
  <li><span class="undocumented keyword">pagesize</span> </li>
  <li><span class="undocumented keyword">plmf</span> </li>
  <li><span class="undocumented keyword">plmn</span> </li>
  <li><span class="undocumented keyword">subtitle</span> </li>
  <li><span class="undocumented keyword">skip</span> </li>
  <li><span class="undocumented keyword">switch_check</span> </li>
  <li><span class="undocumented keyword">title</span> </li>
</ul>
<p>Some more syntactically valid keywords also generate the “unknown pragma” 
warning (C4068), but at level 1, just as if unrecognised: </p>
<ul>
  <li><span class="undocumented keyword"><a href="acp_assume_not_defined.htm">
  acp_assume_not_defined</a></span>
  </li>
  <li><span class="undocumented keyword"><a href="acp_assume_not_type.htm">
  acp_assume_not_type</a></span>
  </li>
  <li><span class="undocumented keyword"><a href="acp_assume_type.htm">
  acp_assume_type</a></span>
  </li>
  <li><span class="undocumented keyword"><a href="acp_store.htm">acp_store</a></span>
  </li>
  <li><span class="undocumented keyword">address_safe</span> </li>
  <li><span class="undocumented keyword">force_align</span> </li>
  <li><span class="undocumented keyword">no_binary</span> </li>
  <li><span class="undocumented keyword">options</span> </li>
  <li><span class="undocumented keyword">parameter</span> </li>
  <li><span class="undocumented keyword">pointer_size</span> </li>
  <li><span class="undocumented keyword">pop</span> </li>
  <li><span class="undocumented keyword">proc_name</span> </li>
  <li><span class="undocumented keyword">push</span> </li>
  <li><span class="undocumented keyword">search_lib</span> </li>
  <li><span class="undocumented keyword">skipping</span> </li>
</ul>
<p>Note however that <span class="directive">acp_assume_not_defined</span>,
<span class="directive">acp_assume_not_type</span>, <span class="directive">
acp_assume_type</span> 
and <span class="directive">acp_store</span> are meaningful to the Front-End 
Auto-Complete Parser (FEACP). </p>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../../../_include/c0510.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2010. Geoff Chappell. All rights reserved.
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="3927" endspan -->
</div>

</body>

</html>