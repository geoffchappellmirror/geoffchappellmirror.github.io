<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Visual C++ Compiler Warning C4177</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>Visual C++ Compiler Warning C4177 </h1>
<h2>Message Text </h2>
<pre class="output">pragma <span class="placeholder">pragma</span> should be at global scope</pre>
<h2>Severity </h2>
<p>This is a level 1 warning. </p>
<h2>Circumstances </h2>
<p>There are two distinct cases for this warning. </p>
<h3>Data Segments </h3>
<p>One way this warning occurs is that a <span class="keyword">bss_seg</span>,
<span class="keyword">const_seg</span> or <span class="keyword">data_seg</span> 
pragma is inside a function definition. This case becomes an error (<a href="../errors/c2307.htm">C2307</a>) 
if incremental compilation is enabled. The following example is straightforward:
</p>
<pre class="source">void func (void)
{
    #pragma bss_seg (&quot;rubbish&quot;)                 // C4177 ordinarily, but C2307 if /Gm
}</pre>
<p>Note that the message text overstates the requirement. It is not that the pragma 
must be at global scope, just that it mustn’t be inside a function definition. Placement 
inside a class definition causes no warning. </p>
<h3>Browser State </h3>
<p>Another cause of this warning is that a <span class="keyword">component</span> 
pragma is inside a class definition or function definition and has the very particular 
syntax </p>
<blockquote>
  <p><span class="directive">#pragma component ( browser , </span>
  <span class="placeholder">state</span><span class="directive"> )</span> </p>
</blockquote>
<p>where <span class="placeholder">state</span> is <span class="keyword">on</span> 
or <span class="keyword">off</span>. To attract the warning, the token after
<span class="placeholder">state</span> must be the closing parenthesis: as in the 
fragment </p>
<pre class="source">class Test
{
    #pragma component (browser, on)             // C4177
};</pre>
<p>but not in its slight elaboration </p>
<pre class="source">class Test
{
    #pragma component (browser, on, references)
};</pre>
<h4>Coding Error </h4>
<p>The message text in the <span class="keyword">component</span> case is blighted 
by a coding error of that common kind in which the function for displaying the message 
is not given as many arguments as required by the format specifiers in the corresponding 
resource string. What gets cited as the <span class="placeholder">pragma</span> 
is essentially unpredictable. </p>
<p>That said, in the particular coding of version 13.00.9466, there is a high likelihood 
that <span class="placeholder">pragma</span> will be the first identifier that is 
not a keyword and which occurs after but not before the first
<span class="identifier">browser</span> in the current compilation unit. For example,
</p>
<pre class="source">int nothing;
void func (int browser, short nothing, long rubbish);

class Test
{
    #pragma component (browser, on)             // C4177
};</pre>
<p>produces the warning message </p>
<pre class="output">TEST.CPP(6) : warning C4177: pragma rubbish should be at global scope</pre>
<h2>Documentation Status </h2>
<p>The warning has an entry in the product documentation. One example is given, 
using <span class="keyword">bss_seg</span>. So far, so good, if not exhaustive. 
The criticism here is that if it’s a rule that such-and-such pragma “should be at 
global scope”, then why not say something about it in the documentation of the pragma?
</p>
<div class="Footer">
  <p class="Dates">This page was created on 13th November 2006 and was last modified 
  on 10th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62552" endspan -->
</div>

</body>

</html>
