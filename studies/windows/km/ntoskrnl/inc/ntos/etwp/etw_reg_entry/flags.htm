<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Flags in the ETW_REG_ENTRY</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="33595" -->
<div class="Main">
  <h1>Flags in the ETW_REG_ENTRY </h1>
  <p>The small <span class="member">Index</span>, <span class="member">Flags</span> 
  and <span class="member">EnableMask</span> members of the <span class="struct">
  <a href="index.htm">ETW_REG_ENTRY</a></span> leave 3 bytes of unused alignment 
  space in both 32-bit and 64-bit Windows versions 6.0 and 6.1 The
  <span class="member">Flags</span> were then a <span class="type">USHORT</span> 
  with bits presumably defined by macro. Only seven bits are known to have been 
  in use, but apparently in two sets: 0x0001 to 0x0010 and then 0x1000 to 0x2000. 
  When Windows 8 moved all three members further into the structure, it not only 
  defined the flags formally as bit fields but redefined two of them so that all 
  fit into an 8-bit <span class="member">Flags</span>. The concurrent addition of
  <span class="member">DbgModernRegistration</span> meant that the 8-bit
  <span class="member">Flags</span> started full. Inevitably, more bits got defined 
  and so the <span class="member">Flags</span> have since been restored to 16 bits:
  </p>
  <table class="Bits">
    <colgroup>
      <col class="Mask"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td rowspan="2">0x01 (6.2 to 1511); <br>
        0x0001 </td>
        <td>
        <pre class="source">UCHAR DbgKernelRegistration : 1;</pre>
        </td>
        <td>6.2 to 1511 </td>
        <td>same bit in <span class="member">Flags</span> in 6.0 to 6.1 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">USHORT DbgKernelRegistration : 1;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x02 (6.2 to 1511); <br>
        0x0002 </td>
        <td>
        <pre class="source">UCHAR DbgUserRegistration : 1;</pre>
        </td>
        <td>6.2 to 1511 </td>
        <td>same bit in <span class="member">Flags</span> in 6.0 to 6.1 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">USHORT DbgUserRegistration : 1;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x04 (6.2 to 1511); <br>
        0x0004 </td>
        <td>
        <pre class="source">UCHAR DbgReplyRegistration : 1;</pre>
        </td>
        <td>6.2 to 1511 </td>
        <td>same bit in <span class="member">Flags</span> in 6.0 to 6.1 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">USHORT DbgReplyRegistration : 1;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x08 (6.2 to 1511); <br>
        0x0008 </td>
        <td>
        <pre class="source">UCHAR DbgClassicRegistration : 1;</pre>
        </td>
        <td>6.2 to 1511 </td>
        <td>same bit in <span class="member">Flags</span> in 6.0 to 6.1 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">USHORT DbgClassicRegistration : 1;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x10 (6.2 to 1511); <br>
        0x0010 </td>
        <td>
        <pre class="source">UCHAR DbgSessionSpaceRegistration : 1;</pre>
        </td>
        <td>6.2 to 1511 </td>
        <td>same bit in <span class="member">Flags</span> in 6.1 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">USHORT DbgSessionSpaceRegistration : 1;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x20 (6.2 to 1511); <br>
        0x0020 </td>
        <td>
        <pre class="source">UCHAR DbgModernRegistration : 1;</pre>
        </td>
        <td>6.2 to 1511 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">USHORT DbgModernRegistration : 1;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x40 (6.2 to 1511); <br>
        0x0040 </td>
        <td>
        <pre class="source">UCHAR DbgClosed : 1;</pre>
        </td>
        <td>6.2 to 1511 </td>
        <td>0x1000 bit in <span class="member">Flags</span> in 6.0 to 6.1 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">USHORT DbgClosed : 1;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x80 (6.2 to 1511); <br>
        0x0080 </td>
        <td>
        <pre class="source">UCHAR DbgInserted : 1;</pre>
        </td>
        <td>6.2 to 1511 </td>
        <td>0x2000 bit in <span class="member">Flags</span> in 6.0 to 6.1 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">USHORT DbgInserted : 1;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0100 </td>
        <td>
        <pre class="source">USHORT DbgWow64 : 1;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0200 </td>
        <td>
        <pre class="source">USHORT DbgUseDescriptorType;</pre>
        </td>
        <td>1709 and higher </td>
        <td>previously as <span class="type">BOOLEAN</span> </td>
      </tr>
      <tr>
        <td>0x0400 </td>
        <td>
        <pre class="source">USHORT DbgDropProviderTraits;</pre>
        </td>
        <td>1709 and higher </td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">DbgKernelRegistration</span> and
  <span class="member">DbgUserRegistration</span> bits of course distinguish whether 
  the <span class="struct">ETW_REG_ENTRY</span> was created because a registration 
  was made by a kernel-mode or user-mode caller. A set <span class="member">DbgReplyRegistration</span> 
  marks that the <span class="struct">ETW_REG_ENTRY</span> exists not to record 
  any sort of registration of any sort of event provider but to help with an event 
  provider’s reply to a notification. These mutually exclusive bits affect the interpretation 
  of some <span class="struct">ETW_REG_ENTRY</span> members. </p>
  <h2>Kernel Registration </h2>
  <p>Kernel-mode registrations can have a <span class="member">Callback</span> routine 
  that executes in kernel mode, such that its address and whatever
  <span class="member">Context</span> is to be passed as an argument are kept in 
  the <span class="struct">ETW_REG_ENTRY</span>. That the <span class="member">Callback</span> 
  is formally a pointer to <span class="type">void</span> is here thought to allow 
  for the routine’s two different prototypes. The pointer is in fact a
  <span class="type">PETWENABLECALLBACK</span> or a <span class="type">PETW_CLASSIC_CALLBACK</span>, 
  depending on whether <span class="member">DbgClassicRegistration</span> is clear 
  or set. </p>
  <p>The first of these pointer types is defined in WDM.H and appears in documentation 
  of the <span class="function">EtwRegister</span> function. The corresponding routine 
  has its own page of documentation, as ETWENABLECALLBACK, which is odd since this 
  name appears nowhere in any headers for the Windows Driver Kit (WDK). Still, documented 
  it plainly is. </p>
  <p>The second pointer type has the same relationship to the
  <span class="function">EtwRegisterClassicProvider</span> function as does the 
  first to <span class="function">EtwRegister</span>, but the means of registering 
  a classic provider has never been formally documented. The <span class="type">
  PETW_CLASSIC_CALLBACK</span> type has no C-language definition in any WDK header 
  except for the NTOSP.H which Microsoft published, plausibly by oversight, in the 
  original and 1511 editions of the WDK for Windows 10. The headers are not everything, 
  however. A C-language definition has instead been in the configuration files for 
  Windows Pre-Processor (WPP) Tracing, starting with the WDK for Windows Vista SP1.
  </p>
  <h2>User Registration </h2>
  <p>User-mode registrations can have callback routines too, but although their 
  execution in user mode may occur because of kernel-mode action, the calling back 
  is not itself the kernel’s to arrange. The <span class="member">Callback</span> 
  and <span class="member">Context</span> have no meaning for an
  <span class="struct">ETW_REG_ENTRY</span> that was created for a user-mode registration. 
  Their place is taken instead by the <span class="member">Process</span> from which 
  the registration was made and in which any user-mode callback would execute. Within 
  that process, NTDLL has an <span class="struct">ETW_REGISTRATION_ENTRY</span> 
  and the user-mode callback and context are there. The kernel never knows of them.
  </p>
  <h2>Reply Registration </h2>
  <p>The <span class="function">
  <a href="../../../../api/etw/traceapi/control/index.htm">NtTraceControl</a></span> 
  function provides for user-mode software to send notifications to the user-mode 
  registrations of an event provider. These notifications can request replies. The 
  sender is then given a handle to poll for replies. The object that’s referenced 
  by this handle is a highly specialised <span class="struct">ETW_REG_ENTRY</span>. 
  There may be no more reason than some programmer’s economy with object types: 
  Event Tracing for Windows (ETW) already makes a formal object, the EtwRegistration, 
  of each <span class="struct">ETW_REG_ENTRY</span> for a user-mode registration, 
  so why not just adapt that? Further study looks to be required. </p>
  <p>In an <span class="struct">ETW_REG_ENTRY</span> that is created as a reply 
  object, with <span class="member">DbgReplyRegistration</span> set, very few of 
  the defined members are meaningful. The most important is that where the
  <span class="struct">ETW_REG_ENTRY</span> for each user-mode registration that 
  receives the notification has a <span class="member">ReplySlot</span> array, the
  <span class="struct">ETW_REG_ENTRY</span> that is created for receiving the replies 
  from these registrations has a <span class="member">ReplyQueue</span> pointer.
  </p>
  <div class="Footer">
    <p class="Dates">This page was created on 24th
    <a href="../../../../../../../../new/20/05.htm">May 2020</a> from material first 
    published on 27th <a href="../../../../../../../../new/16/11.htm">November 2016</a> 
    It was last modified on 17th October 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="14250" -->
  </div>
</div>

</body>

</html>
