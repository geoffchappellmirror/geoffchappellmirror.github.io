<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SHGetViewStatePropertyBag</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js">
</script>
<script type="text/javascript" src="../../../../../../_scripts/document.js">
</script>
<script type="text/javascript" src="../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="55064" endspan -->
<!--webbot bot="Include" U-Include="../../../_include/preview.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" i-checksum="8381" endspan -->
<h1>SHGetViewStatePropertyBag </h1>
<p>This function presents a folder’s view state as a property bag. </p>
<h2>Declaration </h2>
<pre class="source">HRESULT
SHGetViewStatePropertyBag (
    LPCITEMIDLIST pidl,
    LPCWSTR pszBagName,
    DWORD dwFlags,
    REFIID riid,
    void **ppv);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">pidl</span> argument provides the address of an 
Item Identifier List that represents the folder for which properties are sought. 
This argument may be NULL. </p>
<p>The <span class="argument">pszBagName</span> argument provides the address of 
a null-terminated Unicode string that names the desired property bag. </p>
<p>The <span class="argument">dwFlags</span> argument provides bit flags: </p>
<blockquote>
  <table class="Constants">
    <tr>
      <td><span class="constant">SHGVSPB_PERUSER</span> (0x00000001) </td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td><span class="constant">SHGVSPB_ALLUSERS</span> (0x00000002) </td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td><span class="constant">SHGVSPB_PERFOLDER</span> (0x00000004) </td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td><span class="constant">SHGVSPB_ALLFOLDERS</span> (0x00000008) </td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td><span class="constant">SHGVSPB_INHERIT</span> (0x00000010) </td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td><span class="constant">SHGVSPB_ROAM</span> (0x00000020) </td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td><span class="constant">SHGVSPB_NOAUTODEFAULTS</span> (0x80000000) </td>
      <td>&nbsp;</td>
    </tr>
  </table>
</blockquote>
<p>The <span class="argument">riid</span> argument is a reference to an IID for 
the requested interface to the property bag. </p>
<p>The <span class="argument">ppv</span> argument addresses a variable that is 
to receive the interface pointer. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../_include/hresult.htm" TAG="BODY" startspan -->

<p>The function returns zero for success, else an error code. </p>

<!--webbot bot="Include" i-checksum="1551" endspan -->
<h2>Behaviour </h2>
<p>In the general case, each call to this function creates a property bag for 
the given folder, bag name and flags. However, the function remembers the 
property bag created most recently (per-process), so that a series of calls for 
the same folder, bag name and flags therefore do not create multiple bags. </p>
<p>View states are not supported for folders on removable drives. If
<span class="argument">pidl</span> identifies a folder on a removable drive, the 
function fails, returning <span class="constant">E_FAIL</span>. </p>
<p>Creation of a view-state property bag is just a matter of obtaining memory 
and saving the arguments. If this fails for lack of memory or because
<span class="argument">pszBagName</span> is NULL, then the function fails, 
returning
<span class="constant">E_OUTOFMEMORY</span>. </p>
<p>With the property bag either remembered or created, the function queries it 
for the interface given by <span class="argument">riid</span>, returning the 
interface pointer at the address given by <span class="argument">ppv</span>. The 
property bag implements the <span class="interface">IPropertyBag</span> and
<span class="interface">IPropertyBag2</span> interfaces. However, the
<span class="interface">IPropertyBag2</span> methods are all implemented to 
fail, returning <span class="constant">E_NOTIMPL</span>. </p>
<p>The value of the function lies almost entirely in what can be done 
subsequently with what the function has created. Except for the brief checks 
noted above, about removable drives and a non-NULL bag name, the function does 
nothing with the arguments except to save them for later, when the bag is read 
or written. Note especially that (contrary to the documentation) the function 
imposes no requirements on various combinations of bits in <span class="argument">
dwFlags</span>. Of course, some combinations are very nearly useless, in the 
sense that the <span class="method">Read</span> 
and <span class="method">Write</span> methods of the returned property bag must 
in almost cases fail, but no combination causes the function itself to fail. </p>
<h3>View States </h3>
<p>A property bag created by <span class="function">SHGetViewStatePropertyBag</span> 
provides highly generalised storage of essentially arbitrary properties for any 
shell folder. Different clients can store their properties for a folder in 
differently named bags. Microsoft’s clients of this function use the names 
“Desktop” and “Shell”. Those clients are concerned primarily with the visual 
presentation of folders when browsed, hence the name View State, but the 
interface is in no way restricted just to visual appearance. </p>
<p>One restriction does apply, however, and is significant. The storage arranged 
by SHLWAPI persists in most-recently-used (MRU) lists and can get discarded. 
This is clearly intended as a property of the interface. Indeed, pretty much all 
that the documentation says usefully about this function is to warn that it not 
be used for storing critical information: “if a folder is not visited for a long 
time, its view state is eventually deleted.” </p>
<p>The implementation details of how view states are supported through MRU lists 
have been a long-running problem, all the way back to the original Windows 95 
and reports of desktop icons seeming to rearrange spontaneously when the desktop 
was returned to after browsing many other folders. Even Windows XP sometimes 
treats users to large icons despite their having set some other viewing option 
to “Apply to All Folders”. </p>
<h4>Writing </h4>
<p>SHLWAPI provides two broadly distinct implementations for writing a view 
state: one by SHELL32.DLL, which is perhaps maintained only for backwards 
compatibility; and one by SHLWAPI itself with support from SHDOCVW for the MRU 
lists. </p>
<h3>Bag of Bags </h3>
<p>What this function creates is (typically) a property bag of property bags. 
The inner bags are not created until required for a read or write of the outer 
bag.
</p>
<p>The general idea is that for some folder, the current user’s preference for 
some property may be stored in any of several places perhaps with very different 
implementations and even under the control of different executables. For 
instance, if the property is not stored specifically for that folder and that 
user (in the so-called Pidl bag), perhaps it is covered by that user’s 
preference for all folders (in the User Defaults bag). The following inner bags 
are available, in the following order:
</p>
<ul>
  <li>the Pidl bag, containing per-user per-folder properties </li>
  <li>the Desktop Upgrade bag, of historical interest </li>
  <li>the Inherit bag, which infers per-user per-folder properties from higher 
  up the folder hierarchy </li>
  <li>the User Defaults bag, containing per-user properties for all folders </li>
  <li>the Folder Defaults bag, containing per-folder properties for all users
  </li>
  <li>the Global Defaults bag, containing properties for all folders and all 
  users
  </li>
</ul>
<p>The choice of which inner bags are consulted depends mostly on which bits 
were set in <span class="argument">dwFlags</span>. </p>
<h4>The Pidl Bag </h4>
<p>The inner bag that is most closely associated with a particular user’s 
preferences for a particular folder’s presentation is apparently called the Pidl 
bag. To have it be consulted for reading a property through the outer bag, set 
both&nbsp;
<span class="constant">SHGVSPB_PERUSER</span> and <span class="constant">
SHGVSPB_PERFOLDER</span> 
in <span class="argument">dwFlags</span>. </p>
<p>For a given bag name, the Pidl bag distinguishes both users and folders. The 
properties in a Pidl bag are stored as registry values under the key </p>
<blockquote>
  <p><span class="regkey">
  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\ShellNoRoam\Bags\<span class="placeholder">slot</span>\<span class="placeholder">bag</span></span>
  </p>
</blockquote>
<p>where <span class="placeholder">bag</span> is the bag’s name as given by the
<span class="argument">pszBagName</span> argument and the folder identified by 
the
<span class="argument">pidl</span> argument is represented by the decimal number
<span class="placeholder">slot</span> according to the folder’s place in an MRU 
list. Further details of this MRU list, which is implemented in SHDOCVW.DLL, are 
beyond the scope of this article. </p>
<h4>The Desktop Upgrade Bag </h4>
<p>One inner bag is perhaps of historical interest only, since it exists solely 
for reading properties of the desktop from an old format. This inner bag is 
accessible only if the (case-sensitive) bag name given by the <span class="argument">
pszBagName</span> 
argument is “Desktop”. The <span class="argument">pidl</span> and
<span class="argument">dwFlags</span> arguments are irrelevant, except that
<span class="constant">SHGVSPB_NOAUTODEFAULTS</span> and <span class="constant">
SHGVSPB_INHERIT</span> must be clear (as for all the inner bags). </p>
<p>The old format has values stored in different subkeys of <span class="regkey">
Software\Microsoft\Windows\CurrentVersion\Explorer</span> in the
<span class="regkey">HKEY_CURRENT_USER</span> branch of the registry. A request 
to read any property whose name begins with <span class="property">ItemPos</span> 
is handled by extracting from the data for the value <span class="regvalue">
ViewView2</span>, if it exists and is not empty, else <span class="regvalue">
ViewView</span>, in the
<span class="regkey">Streams\Desktop</span> subkey. A request to read a property 
named <span class="property">FFlags</span> is handled by extracting from the 
data for the value <span class="regvalue">Settings</span> in the <span class="regkey">
DeskView</span> subkey. Further details of interpretation are beyond the scope 
of this article. </p>
<h4>The Inherit Bag </h4>
<p>Properties for a folder and user may be inferred from the per-folder per-user 
properties of an ancestor folder through the action of the Inherit bag. As for 
the Pidl bag, the <span class="constant">SHGVSPB_PERUSER</span> and
<span class="constant">SHGVSPB_PERFOLDER</span> bits must both be set in the
<span class="argument">dwFlags</span> argument. </p>
<h4>The User Defaults Bag </h4>
<p>For the User Defaults bag to be read through the outer bag, the
<span class="constant">SHGVSPB_PERUSER</span> flag must be set in
<span class="argument">dwFlags</span>, along with either (or both) of
<span class="constant">SHGVSPB_PERFOLDER</span> or <span class="constant">
SHGVSPB_ALLFOLDERS</span>.
</p>
<p>For a given bag name, the User Defaults bag distinguishes users but not 
folders. The properties for a User Defaults bag are stored as registry values 
under the key
</p>
<blockquote>
  <p><span class="regkey">
  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\ShellNoRoam\Bags\AllFolders\<span class="placeholder">bag</span></span>
  </p>
</blockquote>
<p>where <span class="placeholder">bag</span> is the bag’s name as given by the
<span class="argument">pszBagName</span> argument. The <span class="argument">
pidl</span> 
argument is irrelevant. </p>
<h4>The Folder Defaults Bag </h4>
<p>Inclusion of the Folder Defaults bag requires either of the following 
combinations for set bits of <span class="argument">dwFlags</span>: </p>
<ul>
  <li><span class="constant">SHGVSPB_PERFOLDER</span> with either
  <span class="constant">SHGVSPB_PERUSER</span> or <span class="constant">
  SHGVSPB_ALLUSERS</span>
  </li>
  <li>or <span class="constant">SHGVSPB_ALLFOLDERS</span> with
  <span class="constant">SHGVSPB_PERUSER</span> </li>
</ul>
<p>Also, the folder identified by the <span class="argument">pidl</span> 
argument must be a so-called system folder, in the sense tested by the 
documented
<span class="function">PathIsSystemFolder</span> function and meaning 
specifically a file system directory that has either (or both) of the read-only 
and system attributes. This requirement arises because the per-folder defaults 
are handled by SHELL32.DLL using DESKTOP.INI files, and although you might 
search long and hard through Microsoft’s documentation to find a clear statement 
of this, DESKTOP.INI files are recognised as significant to the shell only if 
they are in directories that have either the read-only or system attribute. 
Further details of how SHELL32 implements per-folder defaults are beyond the 
scope of this article. </p>
<p>The point to the Folder Defaults bag is presumably that it distinguishes 
folders but not users (though this makes a mystery of the involvement of the 
all-folders and per-user flags in the conditions for access). The implementation 
of these per-folder defaults is external to SHLWAPI and the same implementation 
is invoked whatever the bag name, i.e., the <span class="argument">pszBagName</span> 
argument is irrelevant.
</p>
<h4>The Global Defaults Bag </h4>
<p>The type of inner bag that provides the least specific storage of folder 
properties is the Global Defaults bag. To include it in reads through the outer 
bag, set
</p>
<ul>
  <li>either <span class="constant">SHGVSPB_PERUSER</span> or
  <span class="constant">SHGVSPB_ALLUSERS</span> </li>
  <li>and either <span class="constant">SHGVSPB_PERFOLDER</span> or
  <span class="constant">SHGVSPB_ALLFOLDERS</span> </li>
</ul>
<p>For a given bag name, the Global Defaults bag distinguishes neither the 
folder nor the user. The properties for a Global Defaults bag are stored as 
registry values under the key </p>
<blockquote>
  <p><span class="regkey">
  HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\Shell\Bags\AllFolders\<span class="placeholder">bag</span></span>
  </p>
</blockquote>
<p>where <span class="placeholder">bag</span> is the bag’s name as given by the
<span class="argument">pszBagName</span> argument. The <span class="argument">
pidl</span> 
argument is irrelevant. </p>
<h2>Availability </h2>
<p>The <span class="function">SHGetViewStatePropertyBag</span> function is 
exported from SHLWAPI as ordinal 515 in version 6.00 and higher. </p>
<p>This function was documented among the
<a target="_top" href="http://msdn.microsoft.com/library/ms807073.aspx">
Settlement Program Interfaces</a> in late 2002. It appears in a section headed
<span class="citation">Shell Functions</span> whose other entries are all 
implemented in SHELL32. The documentation for the function itself correctly 
assigns the function to SHLWAPI but declares it as requiring “version 5.0 or 
later”. </p>
<div class="Footer">
  <p class="Dates">This page was created on 8th March 2007 and was last modified 
  on 16th March 2007. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c07.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2007. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62613" endspan -->
</div>

</body>

</html>