<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>FVE_DATUM_KEY</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="43332" -->
<!--webbot bot="Include" U-Include="../../../_include/sketch.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">SKETCH OF HOW RESEARCH MIGHT CONTINUE AND RESULTS BE PRESENTED
  </p>
</div>

<!--webbot bot="Include" endspan i-checksum="5204" -->
<div class="Main">
  <h1>FVE_DATUM_KEY </h1>
  <p>The <span class="struct">FVE_DATUM_KEY</span> structure (formally
  <span class="struct">_FVE_DATUM_KEY</span>) is a fixed-size header for a BitLocker 
  datum that is specifically an encryption key or similar input to a cryptography 
  algorithm. </p>
  <h2>Documentation Status </h2>
  <p>No documentation of the <span class="struct">FVE_DATUM_KEY</span> structure 
  is known from Microsoft, but the name is Microsoft’s. It is known from public 
  symbol files for FVEAPI.DLL. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">FVE_DATUM_KEY</span> structure is 0x0C bytes: </p>
  <table class="Struct">
    <thead>
      <tr>
        <th>Offset </th>
        <th>Size </th>
        <th>Description </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x08 </td>
        <td>an <span class="struct"><a href="index.htm">FVE_DATUM</a></span> as 
        the fixed-size header common to all type-specific headers </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>word </td>
        <td>key type </td>
      </tr>
      <tr>
        <td>0x0A </td>
        <td>word </td>
        <td>bit flags </td>
      </tr>
    </tbody>
  </table>
  <p>In the <span class="struct">FVE_DATUM</span>, the type at offset 0x04 is necessarily 
  1 for an <span class="struct">FVE_DATUM_KEY</span>, except if the
  <span class="struct">FVE_DATUM_KEY</span> is in turn the base of a larger header 
  for a stretch key (type 3) or use key (type 4). </p>
  <p>The header is followed by the bytes of the key as the whole of the datum’s
  <span class="definition">data segment</span>. The size of the key can be inferred 
  from the size at offset 0x00 in the header, this being the total of the header 
  and the key. </p>
  <h3>Key Type </h3>
  <p>Much of the point of packaging a key into a BitLocker datum is to associate 
  the typically random bytes of the key with some notion of how it is meant to be 
  used. The single most important signifier is the key type at offset 0x08. These 
  look to be defined in disjoint ranges. Though many values are known, much further 
  study is yet required. </p>
  <h4>Inputs for Derived Keys </h4>
  <p>For some key types, the data segment is not exactly a key in the sense of being 
  directly the secret input to an algorithm for converting between plain text and 
  cipher text, but is instead input for preparing such a key or for varying the 
  behaviour of such an algorithm. </p>
  <!-- table>
    <thead>
      <tr>
        <th>Key Type </th>
        <th>Description </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x1000 </td>
        <td>&nbsp;</td>
        <td>6.0 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x1002 </td>
        <td>salt for key stretching </td>
        <td>6.0 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x1004 </td>
        <td>&nbsp;</td>
        <td>6.0 </td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p -->
  <h4>Keys for Authenticated Encryption </h4>
  <p>For key types 0x2000 to 0x2FFF inclusive, the data segment is a key for authenticated 
  encryption. The plain text, typically for being pseudo-random, has little intrinsic 
  support for recognising whether it is recovered correctly from a supposed decryption 
  of the cipher text. The encryption is therefore performed to produce both the 
  cipher text and a MAC. If decryption recovers the MAC, then some assurance is 
  obtained that the plain text also has been correctly recovered. Such assurance 
  is specially important when the encrypted data is itself a key, notably the FVEK 
  which encrypts the disk sectors. </p>
  <p>Whether the range from 0x2000 to 0x2FFF also specifies an algorithm is unclear. 
  In all known cases, the algorithm is 256-bit AES in CCM mode. The library routine 
  that public symbol files name as <span class="internal routine">FveDatumAesCcmEncCreate</span> 
  creates an <span class="struct">FVE_DATUM_AESCCM_ENC</span> as a package of the 
  encrypted data (as the data segment) with a nonce and MAC. The key for the encryption 
  must be provided as an <span class="struct">FVE_DATUM_KEY</span> in which the 
  key type can be anything between 0x2000 and 0x2FFF. </p>
  <!-- table>
    <thead>
      <tr>
        <th>Key Type </th>
        <th>Description </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x2000 </td>
        <td>VMK composite </td>
        <td>6.0 </td>
      </tr>
      <tr>
        <td>0x2001 </td>
        <td>stretch key </td>
        <td>6.0 </td>
      </tr>
      <tr>
        <td>0x2002 </td>
        <td>external key </td>
        <td>6.0 </td>
      </tr>
      <tr>
        <td>0x2003 </td>
        <td>VMK </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x2004 </td>
        <td>PIN </td>
        <td>6.0 </td>
      </tr>
      <tr>
        <td>0x2005 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x2006 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x2007 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x2008 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x2009 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>&nbsp;</p -->
  <h4>Keys for Encrypting Disk Sectors </h4>
  <p>Some keys, notably those for encrypting disk sectors, are for algorithms that 
  convert between plain text and cipher text without authentication. Encryption 
  takes a key and plain text as input to produce cipher text. Decryption takes the 
  same key and the cipher text as input to recover the plain text. The plain text 
  and the cipher text have the same size. For a key that has this intended use, 
  the key is the data segment of the <span class="struct">FVE_DATUM_KEY</span> and 
  the key type at offset 0x08 tells which algorithm the key is intended for. </p>
  <p>For all known key types in this range at 0x8000, the data segment is specifically 
  an FVEK. There is some suggestion that these values of the key type are thought 
  of at Microsoft as an FVEK type. For instance, an internal routine (actually a 
  member function of a class) that produces them for FVEAPI is named by public symbol 
  files as <span class="internal routine">MapFveMethodToFvekType</span>. </p>
  <table>
    <thead>
      <tr>
        <th>Key Type </th>
        <th>Description </th>
        <th>Key Size </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x8000 </td>
        <td>128-bit AES with Elephant diffuser </td>
        <td>0x40 </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x8001 </td>
        <td>256-bit AES with Elephant diffuser </td>
        <td>0x40 </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x8002 </td>
        <td>128-bit AES in CBC mode </td>
        <td>0x10 </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x8003 </td>
        <td>256-bit AES in CBC mode </td>
        <td>0x20 </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x8004 </td>
        <td>128-bit AES in XTS mode </td>
        <td>0x20 </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td>0x8005 </td>
        <td>256-bit AES in XTS mode </td>
        <td>0x40 </td>
        <td>1511 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>For both the 128-bit and 256-bit Elephant algorithms, the key is 0x40 bytes. 
  In version 6.2 and higher, FVEAPI does not accept the corresponding key types 
  when creating an FVEK, but since disks that were encrypted with algorithms from 
  old Windows versions should remain usable, new Windows versions retain code for 
  these algorithms. An <span class="struct">FVE_DATUM_KEY</span> that has 0x8000 
  or 0x8001 for its key type continues to be recognised. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 31st May 2020 but was not published 
    until 29th <a href="../../../../../../new/21/06.htm">July 2021</a> (and only 
    then as a rough sketch). </p>
    <!--webbot bot="Include" U-Include="../../../_include/c21.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2021. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="61973" -->
  </div>
</div>

</body>

</html>
