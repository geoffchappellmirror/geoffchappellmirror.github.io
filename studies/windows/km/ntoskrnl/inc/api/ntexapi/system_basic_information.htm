<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SYSTEM_BASIC_INFORMATION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>SYSTEM_BASIC_INFORMATION </h1>
  <p>The <span class="struct">SYSTEM_BASIC_INFORMATION</span> structure (formally
  <span class="struct">_SYSTEM_BASIC_INFORMATION</span> ) is what a successful call 
  to <span class="function"><a href="../../../api/ex/sysinfo/query.htm">ZwQuerySystemInformation</a></span> 
  or <span class="function">NtQuerySystemInformation</span> produces in its output 
  buffer when given the information classes <span class="constant">SystemBasicInformation</span> 
  (0x00), <span class="constant">SystemEmulationBasicInformation</span> (0x3E) or
  <span class="constant">SystemNativeBasicInformation</span> (0x72). </p>
  <p>The 32-bit kernel fills the <span class="struct">SYSTEM_BASIC_INFORMATION</span> 
  exactly the same for all three information classes. The x64 builds treat
  <span class="constant">SystemEmulationBasicInformation</span> differently. This 
  allows 64-bit code, notably in WOW64.DLL, to obtain the slightly different information 
  that’s to be seen by a process’s 32-bit code. </p>
  <h2>Usage </h2>
  <p>The primary use by Microsoft of the <span class="constant">SystemBasicInformation</span> 
  case of <span class="function">NtQuerySystemInformation</span> is to support the 
  KERNEL32 function <span class="function">GetSystemInfo</span>, specifically to 
  obtain values for the following members of that function’s
  <span class="struct">SYSTEM_INFO</span> structure: </p>
  <ul>
    <li><span class="member">dwPageSize</span>; </li>
    <li><span class="member">lpMinimumApplicationAddress</span>; </li>
    <li><span class="member">lpMaximumApplicationAddress</span>; </li>
    <li><span class="member">dwActiveProcessorMask</span>; </li>
    <li><span class="member">dwNumberOfProcessors</span>; </li>
    <li><span class="member">dwAllocationGranularity</span>. </li>
  </ul>
  <p>If these are all that is wanted, then use <span class="function">GetSystemInfo</span> 
  instead. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">SYSTEM_BASIC_INFORMATION</span> structure is defined 
  in WINTERNL.H from the Software Development Kit (SDK). The definition there provides 
  only for <span class="member">NumberOfProcessors</span>, with padding to put it 
  at the right offset. Documentation of <span class="function">NtQuerySystemInformation</span> 
  describes the <span class="constant">SystemBasicInformation</span> case as returning 
  the number of processors in the system, and directs that
  <span class="function">GetSystemInfo</span> be used instead. </p>
  <!--webbot bot="Include" U-Include="_include/true_definition.htm" TAG="BODY" startspan -->

<p>This note is instead concerned with what might reasonably be called the structure’s 
true definition. Since at least WIndows 8—and, for specificity, certainly in the 
original Windows 10—this definition that Microsoft itself works with is in an unpublished 
header named <a href="../../../source/inc/ntexapi.htm">ntexapi.h</a>. </p>

<!--webbot bot="Include" endspan i-checksum="24300" -->
  <!--webbot bot="Include" U-Include="../_include/type_info_urlmon.htm" TAG="BODY" startspan -->

<p>Microsoft does publish the practical equivalent of a C-language definition as 
type information in symbol files—not for the kernel, where the structure is prepared, 
nor even for low-level user-mode DLLs that interpret the structure, but for a handful 
of higher-level DLLs that might ordinarily be thought very distant from any involvement 
with the structure. Perhaps only by oversight, but starting as long ago as Windows 
8, Microsoft’s downloadable packages of public symbols have included a smattering 
of private symbol files and these continue to be available through the public symbol 
server. Precisely which DLLs have the type information varies between versions. 
COMBASE.DLL is among the more reliable nowadays. Disclosure in symbol files for 
URLMON.DLL stopped for the 1803 release of Windows 10 but is specially notable 
because of this DLL’s origins in Internet Explorer and thence for the strong suggestion 
that Microsoft’s programmers of Internet Explorer had access to more details of 
low-level Windows programming than Microsoft publishes for wider use (including 
by the programmers of competing web browsers). </p>

<!--webbot bot="Include" endspan i-checksum="12783" -->
  <!--webbot bot="Include" U-Include="../_include/type_info_ddklibs.htm" TAG="BODY" startspan -->

<p>Type information for the structure has also seeped out at the other end of the 
Windows timeline, though not in symbol files but in statically linked libraries: 
GDISRVL.LIB from the Device Driver Kit (DDK) for Windows NT 3.51; and SHELL32.LIB 
from the DDK for Windows NT 4.0. </p>

<!--webbot bot="Include" endspan i-checksum="3859" -->
  <h2>Layout </h2>
  <p>The <span class="struct">SYSTEM_BASIC_INFORMATION</span> is 0x2C or 0x40 bytes 
  in 32-bit and 64-bit Windows, respectively, in all known versions. For 32-bit 
  Windows, the structure from 64-bit Windows is defined separately as
  <span class="struct">SYSTEM_BASIC_INFORMATION64</span>. This starts at least with 
  version 6.2 but may be older. No definition is known of a <span class="struct">
  SYSTEM_BASIC_INFORMATION32</span> for 64-bit Windows. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">ULONG Reserved;</pre>
        </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x04 </td>
        <td>
        <pre class="source">ULONG TimerResolution;</pre>
        </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">ULONG PageSize;</pre>
        </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>0x0C </td>
        <td>
        <pre class="source">ULONG NumberOfPhysicalPages;</pre>
        </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">ULONG LowestPhysicalPageNumber;</pre>
        </td>
      </tr>
      <tr>
        <td>0x14 </td>
        <td>0x14 </td>
        <td>
        <pre class="source">ULONG HighestPhysicalPageNumber;</pre>
        </td>
      </tr>
      <tr>
        <td>0x18 </td>
        <td>0x18 </td>
        <td>
        <pre class="source">ULONG AllocationGranularity;</pre>
        </td>
      </tr>
      <tr>
        <td>0x1C </td>
        <td>0x20 </td>
        <td>
        <pre class="source">ULONG_PTR MinimumUserModeAddress;</pre>
        </td>
      </tr>
      <tr>
        <td>0x20 </td>
        <td>0x28 </td>
        <td>
        <pre class="source">ULONG_PTR MaximumUserModeAddress;</pre>
        </td>
      </tr>
      <tr>
        <td>0x24 </td>
        <td>0x30 </td>
        <td>
        <pre class="source">KAFFINITY ActiveProcessorsAffinityMask;</pre>
        </td>
      </tr>
      <tr>
        <td>0x28 </td>
        <td>0x38 </td>
        <td>
        <pre class="source">CHAR NumberOfProcessors;</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">Reserved</span> member is not so much reserved as 
  obsolete. It is originally the source of the <span class="member">dwOemId</span> 
  member of the user-mode <span class="struct">SYSTEM_INFO</span>. In that structure,
  <span class="member">dwOemId</span> has been marked by a comment as “Obsolete 
  field...do not use” ever since version 3.51 repurposed its low word as the
  <span class="member">wProcessorArchitecture</span>. Whether the original higher-level 
  interpretation was ever modelled by a different name for <span class="member">
  Reserved</span> is not known. Even the version 3.10 kernel sets
  <span class="member">Reserved</span> to zero. </p>
  <p>The <span class="member">TimerResolution</span> is what kernel-mode programmers 
  know as the time increment in the sense of its being what the
  <span class="function">KeQueryTimeIncrement</span> function returns. It is the 
  period, in the usual kernel-mode time-keeping unit of 100ns, of an idealised timer 
  interrupt. Through the course of the kernel’s execution, the interrupt period 
  is allowed to vary but the kernel still keeps count of idealised timer ticks that 
  have this <span class="member">TimerResolution</span>. </p>
  <p>Initially, it happened to be true that the basic information is constant—given 
  that the kernel has completed its initialisation—for as long as the system keeps 
  running. When Windows 2000 provided the <span class="function">MmAddPhysicalMemory</span> 
  function, the <span class="member">NumberOfPhysicalPages</span> and the
  <span class="member">HighestPhysicalPageNumber</span> became capable of seemingly 
  instantaneous change: even the <span class="struct">SYSTEM_BASIC_INFORMATION</span> 
  is among the many reports that callers can rely on only as having been correct 
  at some indeterminate time before receipt. </p>
  <p>The <span class="member">MinimumUserModeAddress</span> and
  <span class="member">MaximumUserModeAddress</span> are intended as the lowest 
  and highest addresses that the kernel may ever allow for user-mode access. It 
  need not be that these addresses or any between them are usable, only that all 
  addresses outside the range are not usable and never will be. Possible exclusion 
  at either or both the start and end of what might otherwise be thought of as the 
  platform’s theoretical allowance for user-mode address space is plainly architectural. 
  Kernel-mode programmers have always had this minimum and maximum defined for them 
  in the DDK as <span class="macro">MM_LOWEST_USER_ADDRESS</span> and
  <span class="macro">MM_HIGHEST_USER_ADDRESS</span>. User-mode programmers learn 
  of them as basic system information. </p>
  <p>The <span class="member">MaximumUserModeAddress</span> is ordinarily from the 
  exported variable <span class="variable">MmHighestUserAddress</span> and is constant 
  after the kernel has completed its initialisation, but what’s produced as the
  <span class="member">MaximumUserModeAddress</span> for the 64-bit
  <span class="constant">SystemEmulationBasicInformation</span> depends on who asks. 
  The necessarily 64-bit caller does not seek the maximum address for its own user-mode 
  access. For this it has plain old <span class="constant">SystemBasicInformation</span> 
  or even the new <span class="constant">SystemNativeBasicInformation</span>. What’s 
  wanted instead is the maximum for 32-bit code in the same process, but this depends 
  on what executable image started the 32-bit process. The function gets its answer 
  as one byte less than the <span class="member">HighestUserAddress</span> in the 
  current process’s <span class="struct">
  <a href="../../ntos/ps/eprocess/index.htm">EPROCESS</a></span>. </p>
  <p>In version 6.1 and higher, the <span class="member">ActiveProcessorsAffinityMask</span> 
  and <span class="member">NumberOfProcessors</span> also depend on who asks. The
  <span class="member">ActiveProcessorsAffinityMask</span> is only of the active 
  processors in the current processor group and <span class="member">NumberOfProcessors</span> 
  counts only those active processors. The precise intention to the different handling 
  for the 64-bit <span class="constant">SystemEmulationBasicInformation</span> must 
  presently wait for this note’s next revision. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 9th July 2016 but was not published 
    until 24th <a href="../../../../../../../new/16/10.htm">October 2016</a> and 
    was last modified on 20th February 2023. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1623.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4941" -->
  </div>
</div>

</body>

</html>
