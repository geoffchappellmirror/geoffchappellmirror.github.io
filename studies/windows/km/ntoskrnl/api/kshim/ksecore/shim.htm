<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>KSE_SHIM</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>KSE_SHIM </h1>
<p>The <span class="struct">KSE_SHIM</span> structure provides input to and receives 
some output from the <span class="function"><a href="registershim.htm">KseRegisterShim</a></span> 
and <span class="function"><a href="registershimex.htm">KseRegisterShimEx</a></span> 
functions. It is the top-level description of a driver shim. A shim provider calls 
these functions to register the shim with the Kernel Shim Engine (KSE) for eventual 
application to one or more drivers. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">KSE_SHIM</span> structure is not documented. Microsoft’s 
name for it is known from symbol files for a driver (NDIS.SYS) that registers a 
shim and uses C++ for instantiating its <span class="struct">KSE_SHIM</span> as 
statically allocated data: the C++ decoration names the type. Microsoft’s names 
and types are not known for members, there being no type information in the symbol 
file. </p>
<h2>Layout </h2>
<p>The <span class="struct">KSE_SHIM</span> is 0x1C and 0x38 bytes in 32-bit and 
64-bit Windows 10, respectively. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Size"><col class="Remarks">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Size </th>
    <th>Description </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>dword </td>
    <td>ignored; <br>
    observed to be size of structure </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>pointer </td>
    <td>address of non-optional identifier for shim, as <span class="struct">GUID</span> 
    structure </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>0x10 </td>
    <td>pointer </td>
    <td>ignored; <br>
    observed to be address of friendly name for shim as null-terminated Unicode 
    string&nbsp; </td>
  </tr>
  <tr>
    <td>0x0C </td>
    <td>0x18 </td>
    <td>pointer </td>
    <td>after successful registration: <br>
    address of callback-routines structure in kernel </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>0x20 </td>
    <td>pointer </td>
    <td>address of optional routine for notification when shim is removed from a 
    driver </td>
  </tr>
  <tr>
    <td>0x14 </td>
    <td>0x28 </td>
    <td>pointer </td>
    <td>address of optional routine for notification when shim is applied to driver
    </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>0x30 </td>
    <td>pointer </td>
    <td>address of non-optional <span class="struct"><a href="collection.htm">KSE_HOOK_COLLECTION</a></span> 
    array </td>
  </tr>
</table>
<p>Each shim is assumed to have its own GUID. The KSE does not permit concurrent 
registration of two shims that have the same GUID. The first dword of the GUID is 
used to identify the shim in logs. </p>
<p>Each shim must have a <span class="struct">KSE_HOOK_COLLECTION</span> array. 
If instead the pointer is <span class="constant">NULL</span>, the shim cannot be 
registered. </p>
<h2>Callbacks To The Kernel </h2>
<p>When a shim is registered, the KSE edits the <span class="struct">KSE_SHIM</span> 
so that the registrant has access to helper routines. If only for now, the structure 
whose address is entered into the <span class="struct">KSE_SHIM</span> provides 
for two routines and both are specifically for hooks of I/O requests and related 
driver routines. Microsoft’s names for the structure and its members are not known. 
However, there’s just the one implementation and the members are pointers to kernel 
routines that are named in symbol files. These are the names given below: </p>
<table class="Struct">
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">VF_DRIVER_IO_CALLBACKS * 
(*KseGetIoCallbacks) (
    PDRIVER_OBJECT);</pre>
    </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>
    <pre class="source">NTSTATUS 
(*KseSetCompletionHook) (
    PDEVICE_OBJECT, 
    PIRP, 
    PIO_COMPLETION_ROUTINE, 
    PVOID);</pre>
    </td>
  </tr>
</table>
<p>A shim provider that hooks a driver’s handling of I/O requests will typically 
need to forward the dispatch phase of a request to wherever it would have gone in 
that driver if not hooked. These original addresses for the handling are collected 
into a structure that the KSE associates with the shimmed driver’s
<span class="struct">DRIVER_OBJECT</span>. The linkage works through the
<span class="member">KseCallbacks</span> member of the <span class="struct">
<a href="../../../inc/ntos/io_x/driver_extension.htm">DRIVER_EXTENSION</a></span> but 
shim providers are not meant to know that, let alone depend on it. Instead, they 
use <span class="member">KseGetIoCallbacks</span>. </p>
<p>The collection of addresses that a shim provider gets from
<span class="member">KseGetIoCallbacks</span> is named above as
<span class="struct">VF_DRIVER_IO_CALLBACKS</span>. This is Microsoft’s name for 
an undocumented structure that is used by the Driver Verifier for so similar a purpose 
that its members have one-to-one correspondence with those of whatever structure 
the KSE uses. Perhaps this is the Driver Verifier’s structure taken as ready-made. 
Perhaps it’s renamed to something like <span class="struct">KSE_DRIVER_IO_CALLBACKS</span>. 
Who knows. Whatever it’s named, shim providers must know the layout: </p>
<table class="Struct">
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">PDRIVER_INITIALIZE DriverInit;</pre>
    </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>
    <pre class="source">PDRIVER_STARTIO DriverStartIo;</pre>
    </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>0x10 </td>
    <td>
    <pre class="source">PDRIVER_UNLOAD DriverUnload;</pre>
    </td>
  </tr>
  <tr>
    <td>0x0C </td>
    <td>0x18 </td>
    <td>
    <pre class="source">PDRIVER_ADD_DEVICE AddDevice;</pre>
    </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>0x20 </td>
    <td>
    <pre class="source">PDRIVER_DISPATCH MajorFunction [IRP_MJ_MAXIMUM_FUNCTION + 1];</pre>
    </td>
  </tr>
</table>
<p>A shim provider that hooks a driver’s handling of I/O requests will often also 
want to learn of a request’s completion. While handling the request on its way to 
the shimmed driver, the shim provider may call <span class="member">KseSetCompletionHook</span> 
to prepare the request’s current I/O stack location so that the shim provider will 
be notified of completion after any notification is handled by the shimmed driver. 
No matter whether the request completes as successful or failed, or is cancelled, 
the shim provider’s completion routine is called with the device object and context 
that were given to <span class="member">KseSetCompletionHook</span>. </p>
<h2>Callbacks From The Kernel </h2>
<p>A <span class="struct">KSE_SHIM</span> may also provide the addresses of routines 
for the KSE to call whenever the shim that is described by the
<span class="struct">KSE_SHIM</span> is applied to a driver or removed from a driver. 
Microsoft’s two built-in shim providers that supply these routines give them names 
that end in <span class="member">HookDriverTargeted</span> and
<span class="member">HookDriverUntargeted</span>, respectively. Taking these as 
plausibly Microsoft’s names for the members, the following would be their definitions:
</p>
<pre class="source">VOID 
(*HookDriverUntargeted) (
    PVOID);

VOID 
(*HookDriverTargeted) (
    PUNICODE_STRING, 
    PVOID, 
    ULONG, 
    ULONG, 
    ULONG);</pre>
<p>The <span class="struct">UNICODE_STRING</span> is for the driver’s so-called 
base name. The <span class="type">PVOID</span> for each callback is the base address 
of the driver’s image in memory. The three <span class="type">ULONG</span> arguments 
are respectively the size of the image, and the <span class="member">TimeDateStamp</span> 
and <span class="member">CheckSum</span> from the driver’s <span class="struct">
IMAGE_NT_HEADERS</span>. </p>
<div class="Footer">
  <p class="Dates">This page was created on 9th
  <a href="../../../../../../../new/16/08.htm">August 2016</a> and was last modified 
  on 6th August 2018. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1618.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2018. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5013" -->
</div>

</body>

</html>
