<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Interrupt 2Fh Function 1687h</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/notes.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/notes.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript Header" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="20600" -->
<div class="Main">
  <h1>Interrupt 2Fh Function 1687h </h1>
  <p>This function provides a prospective client of the DOS Protected Mode Interface 
  (DPMI) with an address to call for stepping up to protected-mode execution. The 
  subfunction number, 87h, is defined symbolically as <span class="constant">W386_Get_PM_Switch_Addr</span> 
  in a header named INT2FAPI.INC which Microsoft distributed with the Device Driver 
  Kit at least as early as for Windows 3.1. </p>
  <p>Among Microsoft’s DPMI hosts, <span class="instruction">int 2Fh</span> function 
  1687h is implemented by both the DOS extenders that Microsoft distributed with 
  Windows: </p>
  <ul>
    <li>DOSX.EXE from Windows 3.1 (explicitly not 3.0); </li>
    <li>the Virtual Machine Manager (VMM) from Windows 3.0 and higher. </li>
  </ul>
  <h2>Parameters </h2>
  <p>The function uses registers for both input and output. Far pointers have real-mode 
  addressing. </p>
  <h3>Input </h3>
  <table>
    <tbody>
      <tr>
        <td><span class="register">ax</span> </td>
        <td>1687h </td>
      </tr>
    </tbody>
  </table>
  <h3>Success </h3>
  <table>
    <tbody>
      <tr>
        <td><span class="register">ax</span> </td>
        <td>0000h </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><span class="register">bx</span> </td>
        <td>bit flags </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><span class="register">cl</span> </td>
        <td>processor type </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><span class="register">ch</span> </td>
        <td>processor flags </td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td><span class="register">dx</span> </td>
        <td>DPMI version number; <br>
        major and minor version in high and low byte, respectively&nbsp; </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><span class="register">si</span> </td>
        <td>size of private data area, in 16-byte paragraphs </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><span class="register">es</span>:<span class="register">di</span>
        </td>
        <td>address to call for protected-mode execution </td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>A DPMI host must support 16-bit protected-mode execution. If it also supports 
  32-bit DPMI clients, <span class="register">bx</span> on output has the 0001h 
  bit set. </p>
  <p>The processor type can be 02h for an 80286, 03h for an 80386, else is 04h for 
  any more advanced processor. Continuation of the series for specific advances 
  was perhaps anticipated but is not known in any Windows implementation. Lesser 
  processors, of course, have no protected mode. </p>
  <p>The VMM from Windows 95 extends the function by clearing
  <span class="register">ch</span> ordinarily but setting its 01h bit if the processor 
  has the <span class="instruction">cpuid</span> instruction. This is presently 
  thought not to have been documented anywhere. </p>
  <p>All Windows implementations produce 005Ah for the output in
  <span class="register">dx</span>, meaning DPMI version 0.90. </p>
  <p>The amount of memory described by <span class="register">si</span> on output 
  is required by the DPMI host in the DPMI client’s real-mode address space. Where 
  this memory is placed is up to the DPM client, who tells of its real-mode segment 
  address when switching to protected mode. </p>
  <h2>Behaviour </h2>
  <p>DOSX implements <span class="instruction">int 2Fh</span> function 1687h only 
  in its hook of the real-mode interrupt vector. Its handler of
  <span class="instruction">int 2Fh</span> as set into the protected-mode Interrupt 
  Descriptor Table (IDT) does not know this function and returns the interrupt with 
  no registers changed. </p>
  <p>The VMM has common handling of <span class="instruction">int 2Fh</span> function 
  1687h in a V86 Interrupt Chain or as a PM Fault. This handling distinguishes the 
  interrupt’s origin according to the <span class="constant">VMSTAT_PM_EXEC</span> 
  flag in the <span class="member">CB_VM_Status</span> member of the Virtual Machine 
  Control Block (VMCB but formally a <span class="struct">cb_s</span>) for the current 
  VM. If the flag is set, the caller already executes with protected-mode addressing 
  and the VMM returns the interrupt with no registers changed. </p>
  <h3>Processor Type </h3>
  <p>Neither DPMI host knows of any processor more capable than the 80486, which 
  is distinguished from the 80386 by having a working <span class="bit">AC</span> 
  bit (18) in the <span class="register">eflags</span>. The VMM takes as granted 
  that it executes on at least an 80386, this having been established by the DOS-hosted 
  loader, e.g., WIN386.EXE. Indeed, the VMM does none of this processor identification 
  by itself. </p>
  <p>Detection of the <span class="instruction">cpuid</span> instruction in Windows 
  95 is also carried through to the VMM from the loader, which checks for a working
  <span class="bit">ID</span> bit (21) in the <span class="register">eflags</span> 
  but does not use the <span class="instruction">cpuid</span> instruction for distinguishing 
  processors even by family. </p>
  <h3>Host Data </h3>
  <p>DOSX keeps its own data about its one DPMI client and thus returns
  <span class="register">si</span> as zero. </p>
  <p>The VMM has possibly many DPMI clients. It keeps data separately for each as 
  a Protected Mode Application Control Block and allows that each Virtual Device 
  Driver (VxD) can add to it by calling the <span class="function">Allocate_PM_App_CB_Area</span> 
  service during initialisation. The total size is fixed by the time that any DPMI 
  client can execute. This size, rounded up to a mulitple of 16, is returned in
  <span class="register">si</span>. It is perhaps not obvious in the VMM documentation 
  but this control block must be in the DPMI client’s virtual-8086 address space. 
  The DPMI client gets to choose where and must provide the address when calling 
  for the transition to protected mode. </p>
  <h3>Callback Routine </h3>
  <p>The address that <span class="instruction">int 2Fh</span> function 1687h returns 
  in <span class="register">es</span>:<span class="register">di</span> is for the 
  DPMI client to execute, when ready, by a far <span class="instruction">call</span>. 
  The DPMI client executes this <a href="pmswitch.htm">Switch to Protected Mode</a> 
  with real-mode addressing. If the called routine succeeds, the client continues 
  with protected-mode addressing. The segment registers on output now hold protected-mode 
  selectors. For <span class="register">cs</span>, <span class="register">ds</span> 
  and <span class="register">ss</span>, the selectors describe the same memory that 
  these registers addressed before the switch. The <span class="register">es</span> 
  register now addresses the caller’s Program Segment Prefix (PSP). </p>
  <p>The VMM allocates the returned address during the VMM’s initialisation before 
  even any VxD executes in protected mode. This one address is returned for all 
  DPMI clients for all remaining VMM execution. This behaviour is presumably an 
  implementation detail. The interface itself would seem to allow different addresses 
  for different DPMI clients (but the one address for all calls by any one DPMI 
  client). </p>
  <div class="Footer">
    <p class="Dates">This page was created on 26th
    <a href="../../../../../new/22/01.htm">January 2022</a> and was last modified 
    on 1st February 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c22.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="46751" -->
  </div>
</div>

</body>

</html>
