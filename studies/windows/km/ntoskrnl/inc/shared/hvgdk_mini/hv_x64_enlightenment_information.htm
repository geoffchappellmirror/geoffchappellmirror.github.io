<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>HV_X64_ENLIGHTENMENT_INFORMATION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>HV_X64_ENLIGHTENMENT_INFORMATION </h1>
  <p>The <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> structure 
  (formally <span class="struct">_HV_X64_ENLIGHTENMENT_INFORMATION</span>) collects 
  the flags that a Microsoft-compatible hypervisor’s <span class="instruction">
  <a href="../../../../cpu/cpuid/index.htm">cpuid</a></span> leaf 0x40000004 produces 
  in the <span class="register">eax</span>, <span class="register">ebx</span>,
  <span class="register">ecx</span> and <span class="register">edx</span> registers.
  </p>
  <h2>Availability </h2>
  <p>The <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> is defined 
  for Windows 10. It supersedes the <span class="struct">
  <a href="hv_enlightenment_information.htm">HV_ENLIGHTENMENT_INFORMATION</a></span> 
  from Windows 8.1, which in turn developed from an unnamed structure for the
  <span class="member">MsHvEnlightenmentInformation</span> member of the
  <span class="union"><a href="hv_cpuid_result.htm">HV_CPUID_RESULT</a></span> union. 
  Though the new name suggests a specialisation to the x64 processor, the structure 
  is defined identically for both 32-bit and 64-bit Windows. Version 10.0 also defines 
  an <span class="struct">HV_ARM64_ENLIGHTENMENT_INFORMATION</span>, but what this 
  represents on the applicable processors lies (far) outside the scope of this article.
  </p>
  <p>It is here thought that <span class="macro">HV_ENLIGHTENMENT_INFORMATION</span> 
  is retained in version 10.0 and higher as a macro for the appropriate processor-specific 
  structure: <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> when building 
  for the x86 and x64 processors; but <span class="struct">HV_ARM64_ENLIGHTENMENT_INFORMATION</span> 
  for the 32-bit and 64-bit ARM processors. </p>
  <h3>Access </h3>
  <p>The kernel provides two ways to get the whole output from
  <span class="instruction">cpuid</span> leaf 0x40000004 into a caller-supplied
  <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span>: </p>
  <ul>
    <li>in kernel mode, as the output from <span class="function">
    <a href="../../../api/hvilib/hviintel/getenlightenmentinformation.htm">HviGetEnlightenmentInformation</a></span>;
    </li>
    <li>in user mode too, as the <span class="member">EnlightenmentInfo</span> member 
    of the <span class="struct">
    <a href="../../api/ntexapi/system_hypervisor_detail_information.htm">SYSTEM_HYPERVISOR_DETAIL_INFORMATION</a></span> 
    that is the output of a successful call to <span class="function">
    <a href="../../../api/ex/sysinfo/query.htm">ZwQuerySystemInformation</a></span> 
    when given the information class <span class="constant">SystemHypervisorDetailInformation</span> 
    (0x9F). </li>
  </ul>
  <p>Both are available only in version 10.0 or higher. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> is not documented. 
  Some of its members, having previously been defined in the <span class="union">
  HV_CPUID_RESULT</span>, are documented in the Windows Driver Kit (WDK) for Windows 
  7, which also provided a C-language definition (of the structure’s unnamed ancestor) 
  in the HVGDK.H header file. Except that documentation continued to a separately 
  downloadable package for merging into Visual Studio 2012, later kits have neither 
  the documentation nor the header. </p>
  <p>The structure anyway repackages material that Microsoft does document—or represents 
  as documented—in the
  <a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/reference/tlfs">
  Hypervisor Top-Level Functional Specification</a> (TLFS). If the structure or 
  its members’ previous definitions have become undocumented, it may be just that 
  Microsoft regards the structure as no more than a convenience for Microsoft’s 
  own programming in the loader and kernel, if not in the hypervisor itself. </p>
  <p>That said, the Specification that is offered today, 12th November 2016, as 
  the most recent version is a PDF that is three years old (version 4.0b, dated 
  August 2013). Flags that were added for Windows 10 were left undocumented in the 
  Specification until version 5.0a, dated February 2017. Better late than never, 
  perhaps, but the reality behind the superficially fine words of the Microsoft 
  Open Specification Promise is that the Hyper-V implementation, and presumably 
  Microsoft’s use of it to Microsoft’s advantage for Microsoft’s purposes, runs 
  ahead of the documentation that Microsoft opens for general use. </p>
  <p>As for the <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> as 
  Microsoft’s particular expression of the output from <span class="instruction">
  cpuid</span> leaf 0x40000004, disclosure by Microsoft is conspicuously thin. The 
  practical equivalent of a C-language definition is published as type information 
  in symbol files, but in the downloadable packages of public symbols for 32-bit 
  and 64-bit Windows 10, type information for <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> 
  appears <span class="emphasis">only</span> in the symbol files for URLMON.DLL. 
  This is a user-mode DLL that originated as a component of Internet Explorer (and 
  still follows Internet Explorer’s version numbering). Well might you wonder what 
  this DLL has to do with the hypervisor such that its symbol files have type information 
  for this structure but the kernel’s don’t! Symbol files for URLMON.DLL starting 
  with Windows 8, both in packages of Windows symbols and when downloaded from Microsoft’s 
  public symbol server, happen to be private symbols. This surely was an oversight, 
  but however this disclosure came about, Microsoft stopped it for Version 1803. 
  That URLMON.DLL knows of the <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> 
  is because some URLMON.DLL source code has a <span class="directive">#include</span> 
  for a header named <a href="../../../source/inc/hvgdk_mini.htm">hvgdk_mini.h</a>. 
  Microsoft is known to use his header for its own programming of the Windows kernel 
  but is not known to have ever made it available for use by programmers in general 
  (let alone by the programmers of competing web browsers). </p>
  <p>Type information for the <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> 
  turns out to have been also disclosed in the relatively plain sight of two statically 
  linked libraries. I say relatively plain because even experts tend to overlook 
  that libraries can hold type information. Beware anyway that type information 
  in statically linked libraries does not always match the operating system that 
  the library is supposedly intended for. One of the libraries, named CLFSMGMT.LIB, 
  is among the many that are supplied with the Software Development Kit (SDK) for 
  user-mode programming. Type information for the <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> 
  drops out of this library in Version 2004. The other is more obviously related 
  to hypervisors. It is named KDHV.LIB. Microsoft distributes it among the programming 
  samples in the Debugging Tools for Windows. It has type information for the
  <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> for all versions 
  of Windows 10 at least to the 2004 release. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> is 0x10 bytes 
  in both 32-bit and 64-bit Windows. Offsets and definitions in the tabulation below 
  are from type information in symbol files for URLMON.DLL before Version 1803 and 
  then in KDHV.LIB. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">/*  bit fields for EAX, see below  */</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>
        <pre class="source">UINT32 LongSpinWaitCount;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x08 </td>
        <td>
        <pre class="source">UINT32 ReservedEcx;</pre>
        </td>
        <td>10.0 to 1803 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">/*  bit fields for ECX, see below  */</pre>
        </td>
        <td>1809 and higher </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>
        <pre class="source">UINT32 ReservedEdx;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">LongSpinWaitCount</span> is previously in the
  <span class="struct">HV_ENLIGHTENMENT_INFORMATION</span> and in the even earlier 
  anonymous structure as far back as Windows Vista SP1. </p>
  <h3>Offset 0x00 (<span class="register">EAX</span>) </h3>
  <p>What <span class="instruction">cpuid</span> leaf 0x40000004 produces in
  <span class="register">eax</span> was evolving as late as the 2004 release of 
  Windows 10: </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>&nbsp;0x00000001 </td>
        <td>
        <pre class="source">UINT32 UseHypercallForAddressSpaceSwitch : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000002 </td>
        <td>
        <pre class="source">UINT32 UseHypercallForLocalFlush : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000004 </td>
        <td>
        <pre class="source">UINT32 UseHypercallForRemoteFlush : 1;</pre>
        </td>
        <td>10.0 to 1709 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 UseHypercallForRemoteFlushAndLocalFlushEntire : 1;</pre>
        </td>
        <td>1803 and higher </td>
      </tr>
      <tr>
        <td>0x00000008 </td>
        <td>
        <pre class="source">UINT32 UseApicMsrs : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000010 </td>
        <td>
        <pre class="source">UINT32 UseHvRegisterForReset : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000020 </td>
        <td>
        <pre class="source">UINT32 UseRelaxedTiming : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000040 </td>
        <td>
        <pre class="source">UINT32 UseDmaRemapping : 1;</pre>
        </td>
        <td>10.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 UseDmaRemapping_Deprecated : 1;</pre>
        </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000080 </td>
        <td>
        <pre class="source">UINT32 UseInterruptRemapping : 1;</pre>
        </td>
        <td>10.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 UseInterruptRemapping_Deprecated : 1;</pre>
        </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td>0x00000100 </td>
        <td>
        <pre class="source">UINT32 UseX2ApicMsrs : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000200 </td>
        <td>
        <pre class="source">UINT32 DeprecateAutoEoi : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000400 </td>
        <td>
        <pre class="source">UINT32 UseSyntheticClusterIpi : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000800 </td>
        <td>
        <pre class="source">UINT32 UseExProcessorMasks : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00001000 </td>
        <td>
        <pre class="source">UINT32 Nested : 1;</pre>
        </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td>0x00002000 </td>
        <td>
        <pre class="source">UINT32 UseIntForMbecSystemCalls : 1;</pre>
        </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td>0x00004000 </td>
        <td>
        <pre class="source">UINT32 UseVmcsEnlightenments : 1;</pre>
        </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td>0x00008000 </td>
        <td>
        <pre class="source">UINT32 UseSyncedTimeline : 1;</pre>
        </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td rowspan="3">0x00010000 </td>
        <td>
        <pre class="source">UINT32 UseReferencePageForSyncedTimeline : 1;</pre>
        </td>
        <td>1703 to 1709 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Available : 1;</pre>
        </td>
        <td>1803 to 1903 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 CoreSchedulerRequested : 1;</pre>
        </td>
        <td>2004 and higher </td>
      </tr>
      <tr>
        <td>0x00020000 </td>
        <td>
        <pre class="source">UINT32 UseDirectLocalFlushEntire : 1;</pre>
        </td>
        <td>1803 and higher </td>
      </tr>
      <tr>
        <td>0x00040000 </td>
        <td>
        <pre class="source">UINT32 NoNonArchitecturalCoreSharing : 1;</pre>
        </td>
        <td>1809 and higher </td>
      </tr>
      <tr>
        <td rowspan="5">&nbsp;</td>
        <td>
        <pre class="source">UINT32 Reserved : 20;</pre>
        </td>
        <td>10.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved : 17;</pre>
        </td>
        <td>1511 to 1607 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved : 15;</pre>
        </td>
        <td>1703 to 1709 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved : 14;</pre>
        </td>
        <td>1803 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved : 13;</pre>
        </td>
        <td>1809 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Bits from 0x00000001 to 0x00000200 have earlier definitions, some with name 
  changes, in the <span class="struct">HV_ENLIGHTENMENT_INFORMATION</span> for version 
  6.3 and even before then in an unnamed structure nested in the
  <span class="union">HV_CPUID_RESULT</span>. One of these old flags,
  <span class="member">UseX2ApicMsrs</span>, is documented in the TLFS versions 
  4.0b through to 5.0c but becomes Reserved in version 6.0b from February 2020.
  </p>
  <p>The <span class="member">UseSyncedTimeline</span> flag was apparently defined 
  too late into 2017 for coverage in the TLFS version 5.0a from February 2017. It 
  is documented in version 5.0c from July 2018 (and was perhaps in 5.0b, no copy 
  of which has yet been found for inspection). By then, its contemporary,
  <span class="member">UseReferencePageForSyncedTimeline</span>, had already been 
  discontinued. Its slot is marked explicitly as Reserved and remains so, its reuse 
  as <span class="member">CoreSchedulerRequested</span> for Version 2004 apparently 
  coming too early in 2020 for the TLFS version 6.0b which is the latest at Microsoft’s 
  website even in November 2022. </p>
  <h3>Offset 0x08 (<span class="register">ECX</span>) </h3>
  <p>The kernel in the 1809 release of Windows 10 starts using bit fields in the
  <span class="register">ecx</span> output too: </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0000007F </td>
        <td>
        <pre class="source">UINT32 ImplementedPhysicalAddressBits : 7;</pre>
        </td>
        <td>1809 and higher </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>
        <pre class="source">UINT32 ReservedEcx : 25;</pre>
        </td>
        <td>1809 and higher </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 12th
    <a href="../../../../../../../new/16/11.htm">November 2016</a> and was last 
    modified on 10th December 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
