<html>

<head>
<title>Header for Demonstrating Profiling Crash</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>Header for Demonstrating Profiling Crash </h1>
<p>There follows a header, PROFILE.H, to use with the one source file,
<a href="procrash.cpp.htm">PROCRASH.CPP</a>, for a small console application that 
demonstrates a <a href="bugdemo.htm">Bug Check From User Mode By Profiling</a>.
</p>
<pre>/*  ************************************************************************  *
 *                                 profile.h                                  *
 *  ************************************************************************  */

/*  This header defines various programming elements that support profiling
    but which are not ordinarily available in headers from the Windows SDK.  */

#pragma once

/*  Keep the Visual Studio text editor happy. Perhaps it doesn't even try to 
    work out that all use of this header in its project - or in the whole 
    solution it comes from - includes WINDOWS.H first.  */

#ifdef      __INTELLISENSE__
#include    &lt;windows.h&gt;
#endif

/*  ************************************************************************  */
/*  From Microsoft's headers for kernel-mode programming  */

extern "C" {

/*  The demonstration is of a coding error in the undocumented functions
    for profiling. Being low-level, these work with the well-known
    kernel-mode status code, not the Win32 error code. There are SDK headers 
    that define the NTSTATUS and some selection of related macros, but 
    arguably not naturally.  */

typedef __success (return &gt;= 0) LONG NTSTATUS;

#define NT_SUCCESS(Status)  ((NTSTATUS) (Status) &gt;= 0)

#define STATUS_SUCCESS      ((NTSTATUS) 0)

/*  The functions that create a profile object take among their arguments a 
    profile source that is defined in headers from the Windows Driver Kit 
    (WDK) and which may as well be reproduced whole.  */

typedef enum _KPROFILE_SOURCE {
    ProfileTime,
    ProfileAlignmentFixup,
    ProfileTotalIssues,
    ProfilePipelineDry,
    ProfileLoadInstructions,
    ProfilePipelineFrozen,
    ProfileBranchInstructions,
    ProfileTotalNonissues,
    ProfileDcacheMisses,
    ProfileIcacheMisses,
    ProfileCacheMisses,
    ProfileBranchMispredictions,
    ProfileStoreInstructions,
    ProfileFpInstructions,
    ProfileIntegerInstructions,
    Profile2Issue,
    Profile3Issue,
    Profile4Issue,
    ProfileSpecialInstructions,
    ProfileTotalCycles,
    ProfileIcacheIssues,
    ProfileDcacheAccesses,
    ProfileMemoryBarrierCycles,
    ProfileLoadLinkedIssues,
    ProfileMaximum
} KPROFILE_SOURCE;

/*  Another argument specifies processors. Again, the type is defined in the 
    WDK.  */

typedef ULONG_PTR KAFFINITY;

/*  The functions themselves have been undocumented for two decades but 
    nowadays have declarations in a header from an Enterprise WDK for 
    Windows 10.  */

NTSYSAPI
NTSTATUS
NTAPI
NtCreateProfile (
    HANDLE *ProfileHandle,
    HANDLE Process,
    PVOID ProfileBase,
    SIZE_T ProfileSize,
    ULONG BucketSize,
    ULONG *Buffer,
    ULONG BufferSize,
    KPROFILE_SOURCE ProfileSource,
    KAFFINITY Affinity);

NTSYSAPI
NTSTATUS
NTAPI
NtStartProfile (
    HANDLE ProfileHandle);

NTSYSAPI
NTSTATUS
NTAPI
NtStopProfile (
    HANDLE ProfileHandle);

/*  A helpful macro that Microsoft defines in WDK headers but omits from the
    SDK  */

#ifndef     ALIGN_UP_BY
#define     ALIGN_UP_BY(x,n)    (((ULONG_PTR) (x) + (n) - 1) &amp; ~((n) - 1))
#endif

}   // extern "C"

/*  ************************************************************************  */</pre>
<p>The only reason this is presented as a separate header is so that the source 
file is more easily read just for what’s particular to what it demonstrates. </p>
<div class="Footer">
  <p class="Dates">This page was created on 14th July 2018 from material that was 
  first published on 14th <a href="../../../../../../../new/17/01.htm">January 2017</a>.
  </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1718.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017-2018. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5141" -->
</div>

</body>

</html>
