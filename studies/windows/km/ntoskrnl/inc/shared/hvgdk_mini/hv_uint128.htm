<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>HV_UINT128</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>HV_UINT128 </h1>
  <div class="Abstract">
    <p>From one perspective, this page’s existence to point out one small thing 
    about one small structure—well, union—is undeniably petty. From another, it’s 
    the simplest imaginable example that the real-world practice of reverse engineering 
    Windows, even by its top practitioners, is deeply deficient as scholarly research.
    </p>
    <p>Almost all study of Windows is much more aptly described as hacking than 
    as research. If hacking is what you aim for or think is all the world needs 
    for knowing about the extant operating system for the computing to which our 
    ready and safe access is increasingy just assumed, then please do write off 
    this page as petty. </p>
  </div>
  <p>The <span class="union">HV_UINT128</span> (formally <span class="union">_HV_UINT128</span>) 
  is a small type in the tradition of the age-old and well-known
  <span class="union">LARGE_INTEGER</span>. It packages as a little like an integer 
  something that is too large for the compiler of the time to treat as an actual 
  integer. When the <span class="union">LARGE_INTEGER</span> was devised, evidently 
  well ahead of the release of Windows NT 3.1, Microsoft’s compiler did not yet 
  have a 64-bit integral type, but the new Windows kernel needed to be able to work 
  with physical (memory) addresses and byte offsets (into disk storage) that exceed 
  the 4GB of a 32-bit integer. For a semblance of a 64-bit integer, Microsoft defined 
  an aggregate of two 32-bit integers, one as the <span class="member">LowPart</span>, 
  the other as the <span class="member">HighPart</span>, and made a union of their 
  structure with a <span class="member">QuadPart</span>. This was at first defined 
  as a <span class="type">double</span>, perhaps primarily in anticipation of eventually 
  having a 64-bit integer to use instead but immediately as a quick-and-dirty means 
  of getting 8-byte alignment for their 64-bit pseudo-integer (the compiler being 
  still many years from having a <span class="keyword">__declspec</span> for specifying 
  unusual alignment requirements). The <span class="union">HV_UINT128</span> is 
  similar in that it composes a 128-bit type from two 64-bit integers with the intention 
  that the whole may be treated vaguely like an integer. </p>
  <p>The first publication that I know of the <span class="struct">HV_UINT128</span> 
  by Microsoft is in a header named HVGDK.H which Microsoft distributed in the Windows 
  Driver Kit (WDK) for Windows 7. It was then a structure: </p>
  <pre class="source">typedef struct DECLSPEC_ALIGN (16) _HV_UINT128 {

    UINT64 Low64;
    UINT64 High64;

} HV_UINT128, *PHV_UINT128;</pre>
  <p>The Windows 7 WDK looks to be the last that programmers in general got to see 
  HVGDK.H from Microsoft. For the Windows 8 WDK, documentation was not included 
  but was separately downloadable to merge with Visual Studio 2012. The reference 
  pages for the Hypervisor mention the <span class="struct">HV_UINT128</span> in 
  documentation of larger (actually interesting) types. Throughout this documentation, 
  programmers are directed to HVGDK.H as the header to <span class="directive">#include</span> 
  for use of these types in their code, but the WDK itself has no such header. The 
  oversight may have been not that the header was missing but that documentation 
  was retained: it’s gone from what Microsoft supplied for merging with Visual Studio 
  2013. </p>
  <p>Ask Google today, 24th November 2022, to search the web for mention of “hvgdk.h” 
  and what you get first is nothing from Microsoft but is instead an attempted reconstruction 
  (in 2018 and since) of an updated
  <a href="https://github.com/ionescu007/hdk/blob/master/hvgdk.h">HVGDK.H</a> by 
  Alex Ionescu for an <a href="https://ionescu007.github.io/hdk/">(unofficial) Hyper-V 
  Development Kit</a>. Of course this can only have been worth Alex’s trouble because 
  he too sees that Microsoft’s original programmatic support has been withdrawn. 
  Others of Google’s search results confirm that programmers, though surely not 
  many, have indeed wondered where Microsoft’s header has disappeared to. The answer 
  has even picked up some sense of pursuit and rumour, what with talk of updated 
  versions in something called the Singularity OS (whose availability is restricted 
  in ways that do not ordinarily count as publication) and at the other end of the 
  history a report that HVGDK.H dates from the “WDK 6.0” (not that I can find it 
  in my archived copy of this kit). Whatever. Even if Microsoft’s HVGDK.H had wider 
  distribution than just the Windows 7 WDK, the thing evidently has been unavailable 
  for long enough that someone who wants programmatic interaction with modern versions 
  of Hyper-V has found it worthwhile to write and publish an “unofficial” replacement. 
  We might even call the effort public-spirited. </p>
  <p>So, what’s my point of criticism? </p>
  <p>First, the facts of the matter. The reconstructed HVGDK.H reproduces the definition 
  from Microsoft’s HVGDK.H such as it’s known from the Windows 7 WDK. And what else 
  would anyone do without evidence of a change! But as long ago as Windows 8 in 
  2012, Microsoft had not only moved <span class="union">HV_UINT128</span> to a 
  new header, named <a href="../../../source/inc/hvgdk_mini.htm">HVGDK_MINI.H</a>, 
  but had changed it from a <span class="keyword">struct</span> to a
  <span class="keyword">union</span> and given it a third member. The C-language 
  definition ever since must be something very like: </p>
  <pre class="source">typedef union DECLSPEC_ALIGN (16) _HV_UINT128 {
    
    struct {
        UINT64 Low64;
        UINT64 High64;
    };

    UINT32 Dword [4];

} HV_UINT128;</pre>
  <p>This is knowable from a statically linked library named CLFSMGMT.LIB which 
  Microsoft distributes with the Software Development Kit (SDK), starting as long 
  ago as Windows Vista. This library even tells that the two opening braces in the 
  definition are two lines apart in Windows 8 through to the 1511 release of Windows 
  10 (by which time they’re on lines 82 and 84) but then become three lines apart. 
  The distance to the definition of the next type (<span class="struct">HV_UINT256</span>) 
  strongly suggests another two lines of white space around the new member. </p>
  <p>Second, my appraisal. Does it matter that Alex’s reconstruction misses this 
  change? Almost certainly not, especially if we assess the reconstruction less 
  for whether it’s thorough as reverse engineering than for whether it’s useful 
  to its target audience of programmers and security researchers. Definitions in 
  the reconstructed header can stray in all sorts of ways from Microsoft’s without 
  any programmer being much put out—even for types that are much more important 
  than <span class="union">HV_UINT128</span>. Not having Microsoft’s extra member 
  for alternatively accessing the two qwords as four dwords is in practice neither 
  here nor there. </p>
  <p>Neither does it matter that the reconstruction was written and presented without 
  scouring all of Microsoft’s published output for obscure references to every type 
  that has anything to do with Hyper-V. Type information in libraries for static 
  linking surely does count as obscure. Even I tend to look for it only when pursuing 
  some detail about Windows versions that predate Microsoft’s inclusion of
  <a href="../../../source/typeinfo.htm">type information in public symbol files</a>.
  </p>
  <p>My gripe is not with deficiency from overlooking a rich source of openly published 
  information. That happens. None of us can be on top of finding everything. It 
  is instead with deficiency in citing sources. Readers, whether programmers, reviewers 
  or other researchers, have a reasonable interest in knowing where the information 
  came from. What passes for the literature on reverse engineering Windows has too 
  much mystery to it. No matter how useful or desperately needed may be the information, 
  even if it’s correct down to every extractable detail, nobody really gains from 
  its appearing as if by magic. </p>
  <p>Different readers will have different expectations of what counts as reliable 
  or legitimate. Different writers will draw their lines differently about what 
  needs to be disclosed. I, for instance, don’t spell out my methods of reading 
  type information in symbol files or libraries, or of any other technique to my 
  reverse engineering, any more than I would expect that a paper in higher mathematics 
  will labour over how its author does basic algebra. I write for an advanced readership 
  and I think that if anything about the technique looks like magic to a less advanced 
  reader, then it’s for them to learn more and practise harder. There’s no mystery 
  if what’s missing is skill, experience or perseverance. Conversely, I do not appear 
  skillful to my readers if they suspect that my achievement owes anything to accessing 
  secret sources. It’s one thing if readers have to work hard to keep up. It’s another 
  if they can’t verify my work for not knowing what sources to check against or 
  if they waste their time retreading my analyses for not knowing what I already 
  covered. </p>
  <p>These, and much more, are just standard arguments for openness in research. 
  How they apply to published research into Windows internals is that it’s nowhere 
  near sufficient to say just that you got your information from public symbols 
  but you mean mainly to contrast with having got your information from private 
  symbols or source code. Do so if your aim is to discourage the attention of copyright 
  lawyers. Cite just public symbols if the only ones you mean are those of the binary 
  that’s studied. Otherwise, good citation practice is to specify which other symbols 
  your work relied on. </p>
  <p>Alex’s reconstructed HVGDK.H itself makes no more informative disclosure than 
  “Changes made based on symbols” and then “Changes made based on new symbol source”. 
  Not only are possibly obscure symbol sources left unspecified but “based on” leaves 
  the reader to differentiate what in the published research has come directly from 
  symbols and what has been invented to fill gaps in what can be known from symbols. 
  The separate page of introduction says more, and is indeed much better about citation 
  practice than is almost any other work I’ve seen in this field, and yet “modified 
  with”, “inferred data” and “certain user-mode binaries” can hardly be thought 
  specific enough to advance the research. I’ll even venture that the reconstruction 
  would already be more accurate as reverse engineering had its sources been better 
  cited, if only for spurring readers to look wider for other sources with some 
  assurance that they won’t just be reworking the seams that Alex has already mined.
  </p>
  <p>Everyone who works in this field, me included, would better lift their game 
  on this. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 24th
    <a href="../../../../../../../new/22/10.htm">November 2022</a> and was last 
    modified on 26th February 2023. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c2223.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2022-2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4493" -->
  </div>
</div>

</body>

</html>
