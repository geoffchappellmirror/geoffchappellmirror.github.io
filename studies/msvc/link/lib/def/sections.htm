<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SECTIONS and SEGMENTS</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>SECTIONS and SEGMENTS </h1>
<p><span class="def">SECTIONS</span> and <span class="def">SEGMENTS</span> are 
aliases, except that if LIB is not given the <span class="switch">/vxd</span> 
switch,
<span class="def">SEGMENTS</span> causes a warning (LNK4236) about being 
obsolete. Throughout this note, <span class="def">SECTIONS</span> serves as 
shorthand for both. </p>
<h2>Syntax </h2>
<p><span class="def">SECTIONS</span> is a multi-line statement. An empty 
statement is valid. The <span class="def">SECTIONS</span> tag must run to the 
end of the line, else be followed by a space or tab. If the first definition is 
on the same line as the tag, then the space or tab may be followed by any amount 
of white space, including none, before the definition. Definitions other than 
the first must each start on a new line. </p>
<p>Each definition has the general form: </p>
<blockquote>
  <p><span class="placeholder">section_token</span><span class="def"> </span>[<span class="def">CLASS
  </span><span class="placeholder">classname</span>]<span class="def"> </span>[<span class="placeholder">attributes</span>]<span class="def">
  </span></p>
</blockquote>
<p>The <span class="placeholder">section_token</span> extends up to but not 
including a space or tab (or to the end of the line). However, if this token is 
a recognised statement tag, then the <span class="def">SECTION</span> statement 
is considered to have ended with the preceding definition (if any), so that the 
token does not name a section but is instead the beginning of a new statement. </p>
<h3>Section Name </h3>
<p>The <span class="placeholder">section_token</span> is ordinarily the
<span class="placeholder">section</span> name. However, the
<span class="placeholder">section</span> may be enclosed in quotes. 
Specifically, if the <span class="placeholder">section_token</span> begins with 
either a single- or double-quote, then the <span class="placeholder">section</span> 
actually begins with the next character and extends up to but not including the 
next quote of the same type (or to the end of the token). Excess characters in 
the token are irrelevant and are ignored. </p>
<p>It is a fatal error (LNK1185) if the <span class="placeholder">section</span> 
contains a dollar sign. (The present coding also provides for this error if the
<span class="placeholder">section</span> contains a space, but this case is 
impossible since a space would have terminated the <span class="placeholder">
section_token</span> 
from which the <span class="placeholder">section</span> is taken.) </p>
<h3>Class Name </h3>
<p>The <span class="placeholder">section_token</span> may be followed by at 
least one space or tab before the case-insensitive keyword <span class="keyword">
CLASS</span> 
or the first of the <span class="placeholder">attributes</span> (described 
below).
</p>
<p>If the <span class="keyword">CLASS</span> keyword does not end the line, it 
must be followed by a space or tab. There may then be any number of spaces or 
tabs (or single-quotes, if building for a VxD), including none, before the
<span class="placeholder">classname</span>, which either ends the line or is 
itself followed by a space or tab (or single-quote, if building for a VxD). </p>
<h3>Attributes </h3>
<p>The <span class="placeholder">attributes</span> complete the line. This 
argument is compound. Each attribute is a single case-insensitive keyword. 
Successive attributes are separated by spaces and tabs. The following are the 
recognised attributes:
</p>
<blockquote>
  <p><span class="keyword">CONFORMING</span>, <span class="keyword">DISCARDABLE</span>,
  <span class="keyword">EXECUTE</span>, <span class="keyword">EXECUTEONLY</span>,
  <span class="keyword">EXECUTEREAD</span>, <span class="keyword">FIXED</span>,
  <span class="keyword">IMPURE</span>, <span class="keyword">IOPL</span>,
  <span class="keyword">LOADONCALL</span>, <span class="keyword">MOVABLE</span>,
  <span class="keyword">MOVEABLE</span>, <span class="keyword">MULTIPLE</span>,
  <span class="keyword">NOIOPL</span>, <span class="keyword">NONCONFORMING</span>,
  <span class="keyword">NONDISCARDABLE</span>, <span class="keyword">NONE</span>,
  <span class="keyword">NONSHARED</span>, <span class="keyword">PURE</span>,
  <span class="keyword">PRELOAD</span>, <span class="keyword">READ</span>,
  <span class="keyword">READONLY</span>, <span class="keyword">READWRITE</span>,
  <span class="keyword">RESIDENT</span>, <span class="keyword">SHARED</span>,
  <span class="keyword">SINGLE</span>, <span class="keyword">WRITE</span> </p>
</blockquote>
<p>It is a fatal error (LNK1118) to have anything else among the
<span class="placeholder">attributes</span>. </p>
<h4>Unsupported Attributes </h4>
<p>The following attributes are recognised but not supported: </p>
<blockquote>
  <p><span class="keyword">FIXED</span>, <span class="keyword">IMPURE</span>,
  <span class="keyword">LOADONCALL</span>, <span class="keyword">MOVABLE</span>,
  <span class="keyword">MOVEABLE</span>, <span class="keyword">MULTIPLE</span>,
  <span class="keyword">NOIOPL</span>, <span class="keyword">NONCONFORMING</span>,
  <span class="keyword">NONE</span>, <span class="keyword">PURE</span>,
  <span class="keyword">SINGLE</span> </p>
</blockquote>
<p>plus, if not building for a VxD: </p>
<blockquote>
  <p><span class="keyword">CONFORMING</span>, <span class="keyword">IOPL</span>,
  <span class="keyword">NONDISCARDABLE</span>, <span class="keyword">PRELOAD</span>,
  <span class="keyword">RESIDENT</span> </p>
</blockquote>
<p>The presence of any of these among the <span class="placeholder">attributes</span> 
causes a warning (LNK4017), after which the unsupported attribute is ignored.
</p>
<h4>Ignored Attributes </h4>
<p>The following attribute is recognised but ignored without complaint: </p>
<blockquote>
  <p><span class="keyword">NONSHARED</span> </p>
</blockquote>
<h2>Command-Line Translation </h2>
<p>Each non-trivial definition in a non-empty <span class="def">SECTIONS</span> 
statement is translated into a <span class="switch">/section</span> option for 
the export-file command line and also one or more <span class="switch">/merge</span> 
options if building for a VxD. </p>
<p>By non-trivial it is meant here that the definition provides either a
<span class="placeholder">classname</span> (if building for a VxD) or at least 
one of the following among the <span class="placeholder">attributes</span>: </p>
<blockquote>
  <p><span class="keyword">DISCARDABLE</span>, <span class="keyword">EXECUTE</span>,
  <span class="keyword">EXECUTEONLY</span>, <span class="keyword">EXECUTEREAD</span>,
  <span class="keyword">NONDISCARDABLE</span> (if building for a VxD),
  <span class="keyword">PRELOAD</span> (if building for a VxD),
  <span class="keyword">READ</span>, <span class="keyword">READONLY</span>,
  <span class="keyword">READWRITE</span>, <span class="keyword">RESIDENT</span> 
  (if building for a VxD), <span class="keyword">SHARED</span>,
  <span class="keyword">WRITE</span> </p>
</blockquote>
<p>Although <span class="keyword">CONFORMING</span> and <span class="keyword">
IOPL</span> 
are supported attributes when building for a VxD, they act trivially unless 
given in combination with at least one of the others. </p>
<h3>Ordinary Build </h3>
<p>When not building for a VxD, the form for the <span class="switch">/section</span> 
option is: </p>
<blockquote>
  <p><span class="switch">/SECTION:</span><span class="placeholder">section</span><span class="switch">,</span>[<span class="placeholder">flags</span>]<span class="switch">
  </span></p>
</blockquote>
<p>where the <span class="placeholder">section</span> in the command-line option 
is exactly the <span class="placeholder">section</span> from the definition. The
<span class="placeholder">flags</span> are added in the following order, 
according to whether any of the corresponding <span class="placeholder">
attributes</span> 
appear in the definition: </p>
<table>
  <tr>
    <td>D </td>
    <td><span class="keyword">DISCARDABLE</span> </td>
  </tr>
  <tr>
    <td>E </td>
    <td><span class="keyword">EXECUTE</span>, <span class="keyword">EXECUTEONLY</span> 
    or <span class="keyword">EXECUTEREAD</span> </td>
  </tr>
  <tr>
    <td>R </td>
    <td><span class="keyword">EXECUTEREAD</span>, <span class="keyword">READ</span>,
    <span class="keyword">READONLY</span> or <span class="keyword">READWRITE</span>
    </td>
  </tr>
  <tr>
    <td>S </td>
    <td><span class="keyword">SHARED</span> </td>
  </tr>
  <tr>
    <td>W </td>
    <td><span class="keyword">READWRITE</span> or <span class="keyword">WRITE</span>
    </td>
  </tr>
</table>
<p>Note that when not building for a VxD, <span class="placeholder">classname</span> 
does not contribute to the translation and is, in effect, ignored. </p>
<h3>VxD Build </h3>
<p>The <span class="placeholder">classname</span> is significant when building a 
VxD. The <span class="placeholder">classname</span> and
<span class="placeholder">attributes</span> together name a super-section that 
the
<span class="placeholder">section</span> is then merged into. Thus, the
<span class="def">SECTIONS</span> definition translates to at least the 
following two options for the export-file command line: </p>
<blockquote>
  <p><span class="switch">/SECTION:</span><span class="placeholder">supersection</span><span class="switch">,</span>[<span class="placeholder">flags</span>]<span class="switch">
  </span></p>
  <p><span class="switch">/MERGE:</span><span class="placeholder">section</span><span class="switch">=</span><span class="placeholder">supersection</span><span class="switch">
  </span></p>
</blockquote>
<p>where the <span class="placeholder">supersection</span> is constructed as:
</p>
<blockquote>
  <p>[<span class="placeholder">classname</span><span class="def">_</span>]<span class="def">vxd</span>[<span class="placeholder">qualifiers</span>]<span class="def">
  </span></p>
</blockquote>
<p>The <span class="placeholder">classname</span> and underscore are included 
only if a <span class="placeholder">classname</span> is known from the 
definition. The
<span class="placeholder">qualifiers</span> are added in the following order, 
according to whether any of the corresponding <span class="placeholder">
attributes</span> 
appear in the definition: </p>
<table>
  <tr>
    <td>p </td>
    <td><span class="keyword">PRELOAD</span> </td>
  </tr>
  <tr>
    <td>e </td>
    <td><span class="keyword">EXECUTE</span>, <span class="keyword">EXECUTEONLY</span> 
    or <span class="keyword">EXECUTEREAD</span> </td>
  </tr>
  <tr>
    <td>r </td>
    <td><span class="keyword">EXECUTEREAD</span>, <span class="keyword">READ</span>,
    <span class="keyword">READONLY</span> or <span class="keyword">READWRITE</span>
    </td>
  </tr>
  <tr>
    <td>w </td>
    <td><span class="keyword">READWRITE</span> or <span class="keyword">WRITE</span>
    </td>
  </tr>
  <tr>
    <td>s </td>
    <td><span class="keyword">SHARED</span> </td>
  </tr>
  <tr>
    <td>d </td>
    <td><span class="keyword">DISCARDABLE</span> </td>
  </tr>
  <tr>
    <td>n </td>
    <td><span class="keyword">NONDISCARDABLE</span> </td>
  </tr>
  <tr>
    <td>i </td>
    <td><span class="keyword">IOPL</span> </td>
  </tr>
  <tr>
    <td>c </td>
    <td><span class="keyword">CONFORMING</span> </td>
  </tr>
  <tr>
    <td>x </td>
    <td><span class="keyword">RESIDENT</span> </td>
  </tr>
</table>
<p>The <span class="placeholder">flags</span> are each added in the following 
order, according to whether any of the corresponding <span class="placeholder">
attributes</span> 
appear in the definition: </p>
<table>
  <tr>
    <td>D </td>
    <td><span class="keyword">DISCARDABLE</span> </td>
  </tr>
  <tr>
    <td>E </td>
    <td><span class="keyword">EXECUTE</span>, <span class="keyword">EXECUTEONLY</span> 
    or <span class="keyword">EXECUTEREAD</span> </td>
  </tr>
  <tr>
    <td>R </td>
    <td><span class="keyword">EXECUTEREAD</span>, <span class="keyword">READ</span>,
    <span class="keyword">READONLY</span> or <span class="keyword">READWRITE</span>
    </td>
  </tr>
  <tr>
    <td>S </td>
    <td><span class="keyword">SHARED</span> </td>
  </tr>
  <tr>
    <td>W </td>
    <td><span class="keyword">READWRITE</span> or <span class="keyword">WRITE</span>
    </td>
  </tr>
  <tr>
    <td>L </td>
    <td><span class="keyword">PRELOAD</span> </td>
  </tr>
  <tr>
    <td>X </td>
    <td><span class="keyword">RESIDENT</span> </td>
  </tr>
  <tr>
    <td>I </td>
    <td><span class="keyword">IOPL</span> </td>
  </tr>
  <tr>
    <td>C </td>
    <td><span class="keyword">CONFORMING</span> </td>
  </tr>
  <tr>
    <td>!D </td>
    <td><span class="keyword">NONDISCARDABLE</span> </td>
  </tr>
</table>
<p>The comma follows the <span class="placeholder">supersection</span> even if 
there are no <span class="placeholder">flags</span> to append. </p>
<h4>Standard Sections </h4>
<p>If the <span class="placeholder">section</span> is recognised as a standard 
section for code or data in the old Object Module Format (OMF), its definition 
applies also to the standard section that corresponds to it in the new Common 
Object File Format (COFF). This is arranged by one more <span class="switch">
/merge</span> option for the export-file command line: </p>
<blockquote>
  <p><span class="switch">/MERGE:</span><span class="placeholder">coffsection</span><span class="switch">=</span><span class="placeholder">supersection</span><span class="switch">
  </span></p>
</blockquote>
<p>In the following table, the <span class="placeholder">section</span> from the 
definition is on the left and the corresponding <span class="placeholder">
coffsection</span> 
is on the right. </p>
<table>
  <tr>
    <td>_TEXT </td>
    <td>.text </td>
  </tr>
  <tr>
    <td>_DATA </td>
    <td>.data </td>
  </tr>
  <tr>
    <td>_BSS </td>
    <td>.bss </td>
  </tr>
  <tr>
    <td>CONST </td>
    <td>.rdata </td>
  </tr>
</table>
<h3>Buffer Overruns </h3>
<p>The <span class="switch">/section</span> and <span class="switch">/merge</span> 
options for the export-file command line are each generated in the same 128-byte 
buffer on the stack. The <span class="placeholder">supersection</span> (relevant 
only when building for a VxD) is constructed in another 128-byte buffer on the 
stack. None of the code checks the lengths of any strings it copies to either 
buffer. A sufficiently long <span class="placeholder">section</span> or
<span class="placeholder">classname</span>, with sufficiently many
<span class="placeholder">attributes</span>, can therefore induce an overrun and 
corrupt the stack, including to overwrite the relevant procedure’s return 
address.
</p>
<p>In practice, of course, the <span class="placeholder">section</span> and
<span class="placeholder">classname</span> are not nearly long enough to exceed 
these assumed limits and cause a problem. Moreover, it happens that in the 
version studied for these notes, namely 7.00.9466, the buffer for the 
command-line option runs into the buffer for the <span class="placeholder">
supersection</span>, which then runs into the guard that the Buffer Security 
Check places before the procedure’s return address. So, except when building a 
VxD, the <span class="placeholder">section</span> 
name must be very long indeed before the overrun affects anything that matters. 
Still, demonstrations are easy enough. </p>
<h4>Ordinary Build </h4>
<p>Prepare a module definition file, named TEST.DEF, containing the following 
two lines: </p>
<pre class="source">SECTIONS
12345678901234567890...12345 EXECUTE</pre>
<p>where the ellipsis stands for as many repetitions of 1234567890 as needed for 
the <span class="placeholder">section</span> argument to count to 245. With 9 
bytes for the characters of the <span class="switch">/section</span> switch and 
its colon, and another two for the comma and the one-character flag that 
corresponds to the
<span class="keyword">EXECUTE</span> attribute, the null byte at the end of the 
string will be one byte too many, for both the intended 128-byte buffer and the 
128-byte buffer that follows it (but which isn’t needed when not building for a 
VxD). Running </p>
<pre class="input">lib /def:test.def /machine:x86</pre>
<p>triggers the Buffer Security Check. Repeat with <span class="placeholder">
section</span> 
reduced by one byte, and the buffer overrun is inconsequential. </p>
<p>The cut-off at 245 can be lowered by adding attributes, but only to 241 
(since the <span class="placeholder">flags</span> at the end of the
<span class="switch">/section</span> switch can run only to five characters).
</p>
<h4>VxD Build </h4>
<p>The same demonstration works when the <span class="switch">/vxd</span> switch 
is added to the LIB command, but with different calculations. For one thing, the 
ridiculously long <span class="placeholder">section</span> is added to different 
characters (for a <span class="switch">/merge</span> option, not
<span class="switch">/section</span>). For another, the overrun of the intended 
128-byte buffer now corrupts data that is still in use. Indeed, it corrupts the
<span class="placeholder">supersection</span> that must yet complete the
<span class="switch">/merge</span> option. Since the <span class="switch">/merge</span> 
switch and its colon take 7 bytes, the <span class="placeholder">section</span> 
need be just 121 bytes long to cause the <span class="switch">/merge</span> 
option to be generated incorrectly in the export file (however many attributes 
are given in the definition). Moreover, at 184 bytes, the corrupted
<span class="placeholder">supersection</span> becomes large enough that 
completing the <span class="switch">/merge</span> option overruns the
<span class="placeholder">supersection</span> buffer and triggers the Buffer 
Security Check. </p>
<p>The easiest triggering of the Buffer Security Check when building for a VxD 
is to give too long a <span class="placeholder">classname</span>, since the 
buffer it is used for is the higher-placed. Prepare a module definition file, 
again named TEST.DEF, containing the following two lines: </p>
<pre class="source">SECTIONS
DUMMY CLASS &#39;12345678901234567890...123&#39; DISCARDABLE</pre>
<p>where the ellipsis now stands for as many repetitions of 1234567890 as needed 
for the <span class="placeholder">classname</span> to count to 123. The
<span class="placeholder">supersection</span> is formed by adding 4 bytes for 
the characters of <span class="keyword">_vxd</span> and 1 byte for the 
one-character qualifier that corresponds to the <span class="keyword">
DISCARDABLE</span> attribute. The null byte at the end of the string will be one 
byte too many for the 128-byte buffer. Running </p>
<pre class="input">lib /def:test.def /machine:x86 /vxd</pre>
<p>triggers the Buffer Security Check. Repeat with a longer
<span class="placeholder">classname</span>, and the buffer overrun persists. 
Repeat with <span class="placeholder">classname</span> reduced to 122 bytes, and 
there is no buffer overrun. </p>
<div class="Footer">
  <p class="Dates">This page was created on 8th May 1999 and was last modified 
  on 7th January 2010. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c9910.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 1999-2010. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="63648" endspan -->
</div>

</body>

</html>