<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SYSTEM_PROCESSOR_INFORMATION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>SYSTEM_PROCESSOR_INFORMATION </h1>
<p>The <span class="struct">SYSTEM_PROCESSOR_INFORMATION</span> structure is what 
a successful call to <span class="function"><a href="query.htm">ZwQuerySystemInformation</a></span> 
or <span class="function">NtQuerySystemInformation</span> produces in its output 
buffer when given the information classes <span class="constant">SystemProcessorInformation</span> 
(0x01) or <span class="constant">SystemEmulationProcessorInformation</span> (0x3F).
</p>
<h2>Usage </h2>
<p>The primary use of the <span class="constant">SystemProcessorInformation</span> 
case of <span class="function">NtQuerySystemInformation</span> is to support the 
KERNEL32 function <span class="function">GetSystemInfo</span>, specifically to obtain 
values for the following members of that function’s <span class="struct">SYSTEM_INFO</span> 
structure: </p>
<ul>
  <li><span class="member">wProcessorArchitecture</span>; </li>
  <li><span class="member">wProcessorLevel</span>; </li>
  <li><span class="member">wProcessorRevision</span>. </li>
</ul>
<p>If these are all that is wanted, then use <span class="function">GetSystemInfo</span> 
instead. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">SYSTEM_PROCESSOR_INFORMATION</span> structure is not 
documented. </p>
<!--webbot bot="Include" U-Include="_include/type_info_urlmon.htm" TAG="BODY" startspan -->

<p>Microsoft does publish the practical equivalent of a C-language definition as 
type information in public symbol files, though not for the kernel, where the structure 
is prepared, nor even for low-level user-mode DLLs that interpret the structure, 
but for various higher-level user-mode DLLs such as URLMON.DLL and only then starting 
with version 6.2. </p>

<!--webbot bot="Include" endspan i-checksum="38013" -->
<!--webbot bot="Include" U-Include="_include/type_info_ddklibs.htm" TAG="BODY" startspan -->

<p>Two earlier disclosures of type information are known, though not in symbol files 
but in statically linked libraries: GDISRVL.LIB from the Device Driver Kit (DDK) 
for Windows NT 3.51; and SHELL32.LIB from the DDK for Windows NT 4.0. </p>

<!--webbot bot="Include" endspan i-checksum="55883" -->
<h2>Layout </h2>
<p>The <span class="struct">SYSTEM_PROCESSOR_INFORMATION</span> is 0x0C bytes in 
both 32-bit and 64-bit Windows in version 3.51 and higher. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>
    <pre class="source">USHORT ProcessorArchitecture;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td>0x02 </td>
    <td>
    <pre class="source">USHORT ProcessorLevel;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>
    <pre class="source">USHORT ProcessorRevision;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x06 </td>
    <td>
    <pre class="source">USHORT Reserved;</pre>
    </td>
    <td>3.51 to 6.1 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">USHORT MaximumProcessors;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>
    <pre class="source">ULONG ProcessorFeatureBits;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
</table>
<p>In 32-bit Windows, the structure is filled exactly the same for both information 
classes. The x64 builds treat <span class="constant">SystemEmulationBasicInformation</span> 
differently, which allows WOW64.DLL, executing 64-bit code for a 32-bit process, 
to get processor information that’s suited to its 32-bit caller. </p>
<p>With attention restricted just to x86 and x64 builds, the
<span class="member">ProcessorArchitecture</span> can be: </p>
<ul>
  <li>0 for <span class="constant">PROCESSOR_ARCHITECTURE_INTEL</span>; </li>
  <li>9 for <span class="constant">PROCESSOR_ARCHITECTURE_AMD64</span>. </li>
</ul>
<p>These are the native values produced for <span class="constant">SystemBasicInformation</span> 
on 32-bit and 64-bit Windows, respectively. For <span class="constant">SystemEmulationBasicInformation</span>, 
the <span class="member">ProcessorArchitecture</span> is 0 even for 64-bit Windows.
</p>
<p>The <span class="member">ProcessorLevel</span> is what Intel’s literature refers 
to as the family. For each processor, the family is saved in the
<span class="struct"><a href="../../../inc/ntos/kprcb.htm">KPRCB</a></span> 
as the <span class="member">CpuType</span>. What goes into the structure is the 
numerically lowest family for all processors. </p>
<p>The <span class="member">ProcessorRevision</span> combines the model and stepping, 
as saved in the <span class="struct">KPRCB</span> as <span class="member">CpuStep</span>.
</p>
<p>Not until Windows 8 does the kernel compute a value for <span class="member">
MaximumProcessors</span>. Earlier versions set it to zero. Type information from 
libraries for versions 3.51 and 4.0 confirm that this member started as formally 
reserved. </p>
<p>The <span class="member">ProcessorFeatureBits</span> are retrieved directly from 
an internal variable in which the kernel accumulates its record of which features 
are identified for use on all processors. This variable is widened to 64 bits in 
64-bit Windows 8.1 and 32-bit Windows 10, but this structure continues to produce 
just the low 32 bits. The variable’s whole value is produced in the new structure
<span class="struct"><a href="processor_features.htm">SYSTEM_PROCESSOR_FEATURES_INFORMATION</a></span> 
for the information class <span class="constant">SystemProcessorFeaturesInformation</span> 
(0x9A). </p>
<h2>Archaeology </h2>
<p>Interpretation of the <span class="struct">SYSTEM_PROCESSOR_INFORMATION</span> 
is known to be different before version 3.51. The output buffer must be large enough 
for an array of these structures, one per processor, though only the first is filled 
in and only then incompletely. </p>
<p>The only member that is filled in is the dword at the start. It is perhaps named 
ProcessorType for it is the immediate origin of the <span class="member">dwProcessorType</span> 
that is documented for the user-mode <span class="struct">SYSTEM_INFO</span> structure 
as an “obsolete member that is retained for compatibility”. Documented values are:
</p>
<ul>
  <li>386 for <span class="constant">PROCESSOR_INTEL_386</span>; </li>
  <li>486 for <span class="constant">PROCESSOR_INTEL_486</span>; </li>
  <li>586 for <span class="constant">PROCESSOR_INTEL_PENTIUM</span>. </li>
</ul>
<p>These are computed by taking the <span class="member">CpuType</span> from the 
corresponding <span class="struct">KPRCB</span>, multiplying by 100 and adding 86, 
and would therefore continue to an undocumented 686, etc., on almost any x86 computer 
made since the late 90s. </p>
<p>In these early versions, the user-mode <span class="struct">SYSTEM_INFO</span> 
also is different. In place of the later <span class="member">wProcessorArchitecture</span> 
is a 32bit <span class="member">dwOemId</span> obtained from the
<span class="member">Reserved</span> member of the <span class="struct">
<a href="basic.htm">SYSTEM_BASIC_INFORMATION</a></span>. Its
<span class="member">wProcessorLevel</span> and <span class="member">wProcessorRevision</span> 
are both zero. </p>
<div class="Footer">
  <p class="Dates">This page was created on 9th July 2016 but was not published 
  until 25th <a href="../../../../../../../new/16/10.htm">October 2016</a>. It was 
  last modified on 6th January 2020. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1620.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4893" -->
</div>

</body>

</html>
