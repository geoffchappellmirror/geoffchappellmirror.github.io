<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>KDPC_DATA</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<h1>KDPC_DATA </h1>
<p>The <span class="struct">KDPC_DATA</span> structure is an internal detail of 
the kernel’s implementation of <a href="index.htm">Deferred Procedure Calls</a>. 
Though the <span class="member">DpcData</span> member of a <span class="struct">
<a href="../../../inc/ntos/ntosdef_x/kdpc.htm">KDPC</a></span> in version 5.2 and higher is declared as pointing 
to <span class="type">void</span>, what it actually points to is a
<span class="struct">KDPC_DATA</span> structure. </p>
<p>Before version 5.2, each processor has one list of DPCs. The list’s head and 
lock and other control data are in the processor’s <span class="struct">
<a href="../../../inc/ntos/kprcb.htm">KPRCB</a></span>, as the
<span class="member">DpcListHead</span>, <span class="member">DpcLock</span>,
<span class="member">DpcQueueDepth</span> and <span class="member">DpcCount</span> 
members. To support threaded DPCs, version 5.2 introduces a second per-processor 
DPC list. The two are handled so very nearly identically that the same control data 
works for both, in separate instantiations for independent operation. </p>
<p>Thus did the previously separate members get collected into the new
<span class="struct">DPC_DATA</span> structure, which every <span class="struct">
KPRCB</span> has two of, in an array that is also named <span class="member">DpcData</span>. 
While a <span class="struct">KDPC</span> is inserted in the per-processor list of 
ordinary DPCs or of threaded DPCs, its <span class="member">DpcData</span> points 
to the first or second element, respectively, of the <span class="member">DpcData</span> 
array in the <span class="struct">KPRCB</span>. The macro definitions
<span class="macro">DPC_NORMAL</span> (0) and <span class="macro">DPC_THREADED</span> 
(1) in WDM.H, which might otherwise seem mysterious for being referenced from nowhere 
among all the WDK headers, correspond to the array indices. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">KDPC_DATA</span> structure is not documented. </p>
<h2>Layout </h2>
<p>The <span class="struct">KDPC_DATA</span> is 0x14 and 0x20 bytes in 32-bit and 
64-bit Windows, respectively, until expansion for Windows 8.1 brings the sizes to 
0x18 and 0x28. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Definition"><col class="Versions">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td rowspan="2">0x00 </td>
    <td rowspan="2">0x00 </td>
    <td>
    <pre class="source">LIST_ENTRY DpcListHead;</pre>
    </td>
    <td>5.2 to 6.1 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">KDPC_LIST DpcList;</pre>
    </td>
    <td>6.3 and higher </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>0x10 </td>
    <td>
    <pre class="source">KSPIN_LOCK DpcLock;</pre>
    </td>
    <td>5.2 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x0C </td>
    <td rowspan="2">0x18 </td>
    <td>
    <pre class="source">ULONG volatile DpcQueueDepth;</pre>
    </td>
    <td>5.2 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">LONG volatile DpcQueueDepth;</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>0x1C </td>
    <td>
    <pre class="source">ULONG DpcCount;</pre>
    </td>
    <td>5.2 and higher </td>
  </tr>
  <tr>
    <td>0x14 </td>
    <td>0x20 </td>
    <td>
    <pre class="source">KDPC * volatile ActiveDpc;</pre>
    </td>
    <td>6.3 and higher </td>
  </tr>
</table>
<h3>KDPC_LIST </h3>
<p>To make space in the <span class="struct">KDPC</span> for the
<span class="member">ProcessorHistory</span>, Windows 8.1 changes the link in each
<span class="struct">KDPC</span> from double to single. Accessing a particular
<span class="struct">KDPC</span> at its arbitrary position in the list is necessarily 
less efficient with single linkage, but is needed only for the
<span class="function">KeRemoveQueueDpc</span> function, whose use is relatively 
infrequent in practice. Quick access to the last <span class="struct">KDPC</span> 
in the list, is another matter, being needed at every insertion of a
<span class="struct">KDPC</span> that doesn’t have <span class="constant">HighImportance</span>. 
Where the <span class="struct">DPC_DATA</span> had a double-linked list head it 
instead has separate single links to both head and tail, modelled together as the
<span class="struct">DPC_LIST</span> structure: </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Definition"><col class="Versions">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">SINGLE_LIST_ENTRY ListHead;</pre>
    </td>
    <td>6.3 and higher </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>
    <pre class="source">SINGLE_LIST_ENTRY *LastEntry;</pre>
    </td>
    <td>6.3 and higher </td>
  </tr>
</table>
<div class="Footer">
  <p class="Dates">This page was created on 23rd December 2016 from a page that 
  was created on 25th June 2016. It was last modified on 23rd May 2017. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c16.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6338" -->
</div>

</body>

</html>
