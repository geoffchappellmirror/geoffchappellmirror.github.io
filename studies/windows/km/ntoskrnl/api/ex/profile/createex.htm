<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>ZwCreateProfileEx</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>ZwCreateProfileEx </h1>
<p>This function creates an object for profiling a process’s execution within a 
specified range of addresses. </p>
<h2>Declaration </h2>
<pre class="source">NTSTATUS 
NtCreateProfileEx (
    HANDLE *ProfileHandle, 
    HANDLE Process, 
    PVOID ProfileBase, 
    SIZE_T ProfileSize, 
    ULONG BucketSize, 
    ULONG *Buffer, 
    ULONG BufferSize, 
    <a href="../../ke/profobj/kprofile_source.htm">KPROFILE_SOURCE</a> ProfileSource, 
    USHORT GroupCount, 
    GROUP_AFFINITY *AffinityArray);</pre>
<h3>Parameters </h3>
<!--webbot bot="Include" U-Include="_include/create_common.htm" TAG="BODY" startspan -->

<p>The <span class="argument">ProfileHandle</span> argument is the address of a 
variable that is to receive a handle to the created <a href="eprofile.htm">profile 
object</a>. This handle can then be given to the <span class="function">
<a href="start.htm">NtStartProfile</a></span> and <span class="function">
<a href="stop.htm">NtStopProfile</a></span> functions to start and stop the profiling 
that this function sets up. </p>
<p>The <span class="argument">Process</span> argument limits the profiling to a 
specified process. This argument can be <span class="constant">NULL</span> to profile 
globally. </p>
<p>The <span class="argument">ProfileBase</span> and <span class="argument">ProfileSize</span> 
arguments are respectively the address and size, in bytes, of a region of address 
space to profile. The 32-bit builds allow a special case in which the
<span class="argument">ProfileBase</span> is instead a segment address: this applies 
if the <span class="argument">BucketSize</span> argument is zero. </p>
<p>The <span class="argument">BucketSize</span> argument selects a granularity for 
the profiling. Think of the profiled region as an array of buckets. Profiling produces 
a count of executions that are discovered within each bucket. The function supports 
buckets whose size in bytes is a power of two. As an argument, the
<span class="argument">BucketSize</span> is not in bytes but is instead the logarithm 
base 2 of the size in bytes. </p>
<p>The <span class="argument">Buffer</span> and <span class="argument">BufferSize</span> 
arguments are respectively the address and size, in bytes, of a buffer that is to 
receive the <span class="type">ULONG</span> execution counts for successive buckets 
while profiling is started but not stopped. </p>
<p>The <span class="argument">ProfileSource</span> argument limits the profiling 
to the specified source. </p>

<!--webbot bot="Include" endspan i-checksum="10106" -->
<p>The <span class="argument">GroupCount</span> is the number of elements in the 
array whose start address is given by <span class="argument">AffinityArray</span>. 
Together they limit the profiling to the specified processors, which must be active. 
The <span class="argument">GroupCount</span> can be 0 to stand for all active processors. 
In this case, the <span class="argument">AffinityArray</span> is ignored. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../../_include/ntstatus.htm" TAG="BODY" startspan -->

<p>The function returns <span class="constant">STATUS_SUCCESS</span> if successful, 
else a negative error code. </p>

<!--webbot bot="Include" endspan i-checksum="8" -->
<h2>Availability </h2>
<p>The <span class="function">NtCreateProfileEx</span> function and its alias
<span class="function">ZwCreateProfileEx</span> are exported by name from NTDLL 
in version 6.1 and higher. In kernel mode, where <span class="function">ZwCreateProfileEx</span> 
is a stub and <span class="function">NtCreateProfileEx</span> is the implementation, 
neither is exported until the 1607 release of Windows 10 exports the stub. </p>
<h2>Documentation Status </h2>
<p>Neither <span class="function">NtCreateProfileEx</span> nor its alias is documented. 
As <span class="function">ZwCreateProfileEx</span>, it is declared in the ZWAPI.H 
file from an Enterprise edition of the Windows Driver Kit (WDK) for the 1511 release 
of Windows 10. </p>
<p>Unusually for native API functions, no repackaging of <span class="function">
NtCreateProfileEx</span>, documented or not, is known in any higher-level user-mode 
module that is distributed as standard with Windows. </p>
<h2>Behaviour </h2>
<!--webbot bot="Include" U-Include="../../_include/win10.htm" TAG="BODY" startspan -->

<p>The following implementation notes come mainly from inspection of the kernel 
from the original release of Windows 10. They may some day get revised to account 
for other versions. Where anything is written about earlier versions, take it not 
as an attempt at presenting a comprehensive history but as a bonus from my being 
unable to resist a quick trip down memory lane. I have no programme of revisiting 
this analysis for later releases. Updates mean just that I happen to have noticed 
something and to have found time to add it. </p>

<!--webbot bot="Include" endspan i-checksum="60685" -->
<h3>Parameter Validation </h3>
<p>The function has no purpose except to create a profile object that can be made 
to store execution counts in the given buffer. If <span class="argument">BufferSize</span> 
is zero, the function returns <span class="constant">STATUS_INVALID_PARAMETER_7</span>.
</p>
<p>The 32-bit implementation allows that <span class="argument">BucketSize</span> 
can be zero, apparently to indicate that <span class="argument">ProfileBase</span> 
is not an address but a segment selector. Provided that the
<span class="argument">ProfileBase</span> has its high word clear and that
<span class="argument">BufferSize</span> is at least 4, the function computes a
<span class="argument">BucketSize</span> to adopt by default. It perhaps suffices 
just to say that the computation aims for the smallest bucket that can span the 
given <span class="argument">ProfileSize</span> without needing more counters than 
are allowed for in the given <span class="argument">BufferSize</span>. </p>
<p>The smallest allowed bucket is 4 bytes, represented by 2 for the
<span class="argument">BucketSize</span>. The largest is 2GB, represented by 0x1F 
for the <span class="argument">BucketSize</span>. Given a <span class="argument">
BucketSize</span> outside this range, the function returns
<span class="constant">STATUS_INVALID_PARAMETER</span>. </p>
<p>The buckets span the <span class="argument">ProfileSize</span> bytes that are 
to be profiled. If the <span class="argument">BufferSize</span> is too small to 
allow one <span class="type">ULONG</span> counter for each such bucket, the function 
returns <span class="constant">STATUS_BUFFER_TOO_SMALL</span>. Beware, however, 
that the coding of this defence is defective in all known versions from 3.10 until 
Microsoft corrected it for the 1703 release of Windows 10 (and perhaps in roughly 
contemporaneous updates of other releases), having been notified during this article’s 
development in December 2016 and January 2017. Among the implications is that unpriviliged 
user-mode software can reliably induce the kernel to bug-check while handling some 
subsequent profile interrupt. Details are presented separately, with source code 
to demonstrate how this coding error can be abused to cause a
<a href="bugdemo.htm">Bug Check From User Mode By Profiling</a>. </p>
<p>If the <span class="argument">ProfileBase</span> is too high for
<span class="argument">ProfileSize</span> bytes to follow, the function returns
<span class="constant">STATUS_BUFFER_OVERFLOW</span>. </p>
<p>Profiling is coordinated with the Hardware Abstraction Layer (HAL), which has 
the job of arranging for an interrupt at each occurrence of some event that acts 
as the profile source. Starting with version 6.2, the function checks that the given
<span class="argument">ProfileSource</span> is one that the HAL supports. This is 
done via the <span class="member">HalQuerySystemInformation</span> pointer in the 
kernel’s <span class="struct"><a href="../../../inc/ntos/hal/hal_dispatch.htm">HAL_DISPATCH</a></span>, 
specifically for the information class <span class="constant">HalProfileSourceInformation</span> 
(0x01). If the HAL does not support the given <span class="argument">ProfileSource</span>, 
the function returns <span class="constant">STATUS_NOT_SUPPORTED</span>. </p>
<h4>User-Mode Defence </h4>
<p>If executing for a user-mode request, the function has some general defensiveness 
about addresses that it is given for input or output. Failure at any of these defences, 
whose descriptions follow in the next paragraph, is failure for the function, typically 
showing as a return of <span class="constant">STATUS_DATATYPE_MISALIGNMENT</span> 
or <span class="constant">STATUS_ACCESS_VIOLATION</span>. </p>
<p>The variable at <span class="argument">ProviderHandle</span> must start in user-mode 
address space and be writable. The <span class="argument">Buffer</span> must be 
entirely in user-mode address space, have 4-byte alignment at its start and be writable 
both at the start and at every page boundary within. Unless
<span class="argument">GroupCount</span> is zero, the <span class="argument">AffinityArray</span> 
must be entirely in user-mode address space and have 4-byte alignment at its start.
</p>
<h4>Processors </h4>
<p>The <span class="argument">GroupCount</span> and <span class="argument">AffinityArray</span> 
must correctly describe only active processors, else the function returns
<span class="constant">STATUS_INVALID_PARAMETER</span>. Specifically, the processor 
specification is rejected if any <span class="struct">GROUP_AFFINITY</span> in the 
array has an invalid <span class="member">Group</span>, an empty
<span class="member">Mask</span>, a <span class="member">Mask</span> that has a 
bit set for a processor that is not active in the group, or has any non-zero
<span class="member">Reserved</span> member. </p>
<h4>Specific Process </h4>
<p>If a handle is given as the <span class="argument">Process</span> argument, the 
function fails unless the handle references a process object (not some other type 
of object) and has the <span class="constant">PROCESS_QUERY_INFORMATION</span> permission.
</p>
<h4>Global Profiling </h4>
<p>The <span class="argument">Process</span> argument can be
<span class="constant">NULL</span> to profile execution in the given range no matter 
by which process, but with two constraints. </p>
<p>The first applies only to the 32-bit implementation. If
<span class="argument">BucketSize</span> was defaulted, then
<span class="constant">NULL</span> for the <span class="argument">Process</span> 
implies that <span class="argument">ProfileBase</span> must be
<span class="constant">NULL</span> too, else the function returns
<span class="constant">STATUS_INVALID_PARAMETER</span>. The reasoning for this is 
not understood, though the effect is plainly that profiling execution in a segment 
is supported only if profiling a specific process. </p>
<p>Second, <span class="constant">SeSystemProfilePrivilege</span> is required of 
any user-mode request that would profile all processes but specifies a
<span class="argument">ProfileBase</span> in user-mode address space. Without this 
privilege, the function returns <span class="constant">STATUS_PRIVILEGE_NOT_HELD</span>. 
The intention is presumably that an unprivileged caller should not be able to specify
<span class="constant">NULL</span> for the <span class="argument">Process</span> 
as a way to learn even indirectly about the user-mode execution of processes that 
it would not be permitted to profile explicitly. </p>
<h4>Profiling Kernel-Mode Execution </h4>
<p>See that a user-mode caller does not need <span class="constant">SeSystemProfilePrivilege</span> 
to profile kernel-mode execution. This is a potentially huge leak of information 
about the distribution of kernel-mode software. There’s not much point to defences 
such as Address Space Layout Randomisation (ASLR) if an attacker who wants a kernel-mode 
location at which to exploit a vulnerability can get a good guess just by starting 
some well-chosen activity and observing where kernel-mode execution changes in response. 
Starting in version 6.3, this is closed off to
<a href="../restricted_callers.htm">restricted callers</a> (meaning, essentially, 
those that have low integrity). Whatever the <span class="argument">Process</span> 
argument, if a user-mode request from a restricted caller asks to profile a region 
that reaches into kernel-mode address space, the function returns
<span class="constant">STATUS_ACCESS_DENIED</span>. </p>
<h3>Profile Object </h3>
<p>Given that the parameters are not rejected, the function transfers them to an 
executive profile object. This is a formal object in the kernel’s namespace of objects, 
though instances are not named. Microsoft’s name for the object as a C-language 
structure is not known, though there would be no surprise if it turned out to be
<span class="struct"><a href="eprofile.htm">EPROFILE</a></span>. If the object cannot 
be created, the function fails. If a handle cannot be created for the object, granting 
whatever permission is represented by 0x00000001, the function fails. </p>
<p>Ordinarily, however, the function returns the handle via the address given as
<span class="argument">ProfileHandle</span> and returns <span class="constant">STATUS_SUCCESS</span>. 
The handle can then be used in pairs of calls to the <span class="function">NtStartProfile</span> 
and <span class="function">NtStopProfile</span> functions to start and stop the 
profiling as configured from this function’s parameters, any number of times before 
being closed, e.g., through <span class="function">CloseHandle</span>. </p>
<p>Special mention must be made of an indirect effect. See that the
<span class="function">NtCreateProfileEx</span> function’s validated parameters 
are not acted on until some later call to <span class="function">NtStartProfile</span> 
or until the even later occurrence of hardware interrupts that the kernel handles 
as calls from the HAL to the kernel’s <span class="function">
<a href="../../ke/profobj/profileinterruptwithsource.htm">KeProfileInterruptWithSource</a></span> 
function. A reworking of this <span class="function">KeProfileInterruptWithSource</span> 
function for version 6.2 introduced a coding error to its interpretation of the 
profile’s parameters, as validated by <span class="function">NtCreateProfileEx</span> 
for saving in the profile object. Even a correctly validated combination of
<span class="argument">ProfileSize</span>, <span class="argument">BucketSize</span> 
and <span class="argument">BufferSize</span> can cause the same bug check that versions 
before the 1703 release of Windows 10 make possible by incorrectly validating these 
parameters during <span class="function">NtCreateProfileEx</span>. Microsoft will 
presumably fix this error some time in 2018, having been notified not only during 
this article’s preparation but again in June 2018. </p>
<div class="Footer">
  <p class="Dates">This page was created on 23rd
  <a href="../../../../../../../new/16/12.htm">December 2016</a> and was last modified 
  on 6th October 2018. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1618.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2018. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5013" -->
</div>

</body>

</html>
