<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>TRACE_LOGFILE_HEADER</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <p class="alert">This page is being prepared for a substantial reworking. Some 
  content may be temporarily missing. Temporarily may turn into indefinitely. New 
  content may be more than usually defective. The page is now published only as 
  a revision in progress. Use with caution. </p>
  <h1>TRACE_LOGFILE_HEADER </h1>
  <p>The <span class="struct">TRACE_LOGFILE_HEADER</span> is one of many types of 
  fixed-size header that begin the event-specific data for an event as held in a 
  trace buffer or flushed to an Event Trace Log (ETL) file. </p>
  <p>The type of event for which the <span class="struct">TRACE_LOGFILE_HEADER</span> 
  can be the event-specific data is the system event <span class="constant">WMI_LOG_TYPE_HEADER</span> 
  (0x0000). </p>
  <h2>Usage </h2>
  <p>The <span class="constant">WMI_LOG_TYPE_HEADER</span> event is the very first 
  in every ETL file, beginning immediately after the first <span class="struct">
  <a href="../../api/ntwmi/wmi_buffer_header/index.htm">WMI_BUFFER_HEADER</a></span>. 
  It records which logger recorded the file, and under what conditions. Interpretation 
  of all the events in the rest of the file can depend on what’s recorded in the
  <span class="constant">WMI_LOG_TYPE_HEADER</span> event. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">TRACE_LOGFILE_HEADER</span> is documented. Of course, 
  this is not so that it can be inspected in an ETL file. What is documented is 
  the translation that is presented to callers of the documented
  <span class="function">OpenTrace</span> function as output in the
  <span class="member">LogfileHeader</span> member of the <span class="struct">EVENT_TRACE_LOGFILE</span> 
  structure whose address is passed to the function as its one argument. </p>
  <p>This article is concerned only with the raw <span class="struct">TRACE_LOGFILE_HEADER</span> 
  as it appears in trace buffers or ETL files, as prepared by the kernel, and only 
  then to note where this differs from what is documented. </p>
  <h2>Layout </h2>
  <p>Data for the <span class="constant">WMI_LOG_TYPE_HEADER</span> event comprises:
  </p>
  <ul>
    <li>a <span class="struct">
    <a href="../../api/ntwmi/traceheaders/system_trace_header.htm">SYSTEM_TRACE_HEADER</a></span>;
    </li>
    <li>the <span class="struct">TRACE_LOGFILE_HEADER</span>; </li>
    <li>a null-terminated Unicode string that names the logger; </li>
    <li>a null-terminated Unicode string that names the log file. </li>
  </ul>
  <h3>Trace Header </h3>
  <p>In the <span class="member">Marker</span> that begins the
  <span class="struct">SYSTEM_TRACE_HEADER</span>, the <span class="member">Flags</span> 
  are 0xC0, the <span class="member">HeaderType</span> is 0x01 or 0x02 for a 32-bit 
  or 64-bit trace session, respectively, and the <span class="member">Version</span> 
  is nowadays 0x02 but is 0x01 in traces written by Windows versions before 6.0. 
  The <span class="member">Size</span> is the total in bytes of all the components, 
  both the fixed-size headers and the variable-size strings. The
  <span class="member">HookId</span> is <span class="constant">WMI_LOG_TYPE_HEADER</span>.
  </p>
  <p>Note that the <span class="member">HeaderType</span> matters since the
  <span class="struct">TRACE_LOGFILE_HEADER</span> has different 32-bit and 64-bit 
  forms (named <span class="struct">TRACE_LOGFILE_HEADER32</span> and
  <span class="struct">TRACE_LOGFILE_HEADER64</span>). A 32-bit trace session on 
  64-bit Windows writes the 32-bit form. Whether an ETL file was made by a 32-bit 
  or 64-bit trace session, it may be interpreted on either 32-bit or 64-bit Windows.
  </p>
  <h3>Event-Specific Data </h3>
  <p>The <span class="struct">TRACE_LOGFILE_HEADER</span> is 0x0110 or 0x0118 bytes 
  in its 32-bit and 64-bit forms, respectively, in all known versions that have 
  it. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">ULONG BufferSize;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x04 </td>
        <td>
        <pre class="source">union {
    ULONG Version;
    struct {
        UCHAR MajorVersion;
        UCHAR MinorVersion;
        UCHAR SubVersion;
        UCHAR SubMinorVersion;
    } VersionDetail;
};</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">ULONG ProviderVersion;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>0x0C </td>
        <td>
        <pre class="source">ULONG NumberOfProcessors;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">LARGE_INTEGER EndTime;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x18 </td>
        <td>0x18 </td>
        <td>
        <pre class="source">ULONG TimerResolution;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x1C </td>
        <td>0x1C </td>
        <td>
        <pre class="source">ULONG MaximumFileSize;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x20 </td>
        <td>0x20 </td>
        <td>
        <pre class="source">ULONG LogFileMode;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x24 </td>
        <td>0x24 </td>
        <td>
        <pre class="source">ULONG BuffersWritten;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x28 </td>
        <td rowspan="2">0x28 </td>
        <td>
        <pre class="source">union {
    GUID LogInstanceGuid;
    struct {
        ULONG StartBuffers;
        ULONG PointerSize;
        ULONG EventsLost;
        ULONG Reserved32;
    };
};</pre>
        </td>
        <td>5.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    GUID LogInstanceGuid;
    struct {
        ULONG StartBuffers;
        ULONG PointerSize;
        ULONG EventsLost;
        ULONG CpuSpeedInMHz;
    };
};</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td>0x38 </td>
        <td>0x38 </td>
        <td>
        <pre class="source">PWSTR LoggerName;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x3C </td>
        <td>0x40 </td>
        <td>
        <pre class="source">PWSTR LogFileName;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x40 </td>
        <td rowspan="2">0x48 </td>
        <td>
        <pre class="source"><a href="../../../api/ex/systime/rtl_time_zone_information.htm">RTL_TIME_ZONE_INFORMATION</a> TimeZone;</pre>
        </td>
        <td>5.0 to 5.2 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">TIME_ZONE_INFORMATION TimeZone;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0xF0 </td>
        <td>0xF8 </td>
        <td>
        <pre class="source">LARGE_INTEGER BootTime;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0xF8 </td>
        <td>0x0100 </td>
        <td>
        <pre class="source">LARGE_INTEGER PerfFreq;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x0100 </td>
        <td>0x0108 </td>
        <td>
        <pre class="source">LARGE_INTEGER StartTime;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x0108 </td>
        <td>0x0110 </td>
        <td>
        <pre class="source">ULONG ReservedFlags;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x010C </td>
        <td>0x0114 </td>
        <td>
        <pre class="source">ULONG BuffersLost;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>It arguably was only ever a curiosity with no practical effect, and now it 
  is only a historical curiosity, but there is significance to Microsoft’s comments 
  in EVNTRACE.H when introducing the C-language definition of the
  <span class="struct">TRACE_LOGFILE_HEADER</span>: </p>
  <pre class="source">// TRACE_LOGFILE_HEADER32 and TRACE_LOGFILE_HEADER64 structures
// are also provided to simplify cross platform decoding of the
// header event.</pre>
  <p>Microsoft added this comment for Windows 7. The separate formal definitions 
  were apparently not just newly provided to the world but newly devised even within 
  Microsoft, and not just for interpreting the structure but also for the kernel’s 
  writing of it. Versions 5.2 and 6.0 trust that a set <span class="member">Wow</span> 
  flag in the <span class="struct">
  <a href="../../../api/etw/traceapi/wmi_logger_information/index.htm">WMI_LOGGER_INFORMATION</a></span> 
  that the kernel receives when starting a logger means that 32-bit forms of various 
  structures are wanted instead of 64-bit. For the <span class="struct">TRACE_LOGFILE_HEADER</span> 
  this means using a 32-bit form that is eight bytes smaller than the 64-bit form 
  that would be native to the 64-bit kernel. The 32-bit kernels for these versions 
  also have code for preparing a reduced structure—which is then eight bytes smaller 
  than the already smaller 32-bit structure. </p>
  <p>The <span class="member">BufferSize</span> is in bytes, not kilobytes, no matter 
  that Microsoft says differently in both the documentation and the EVNTRACE.H comments. 
  That it should be bytes, if only for the <span class="struct">TRACE_LOGFILE_HEADER</span> 
  as prepared by the kernel for flushing to an ETL file, was plainly intended from 
  the start. The version 5.0 kernel prepares the structure directly from the
  <span class="struct">WMI_LOGGER_INFORMATION</span>. The latter’s
  <span class="member">BufferSize</span> is in KB and the kernel explicitly multiplies 
  by 1024 to get the <span class="member">BufferSize</span> for the
  <span class="struct">TRACE_LOGFILE_HEADER</span>. </p>
  <p>In the <span class="member">VersionDetail</span>, all versions set the
  <span class="member">MajorVersion</span> and <span class="member">MinorVersion</span> 
  to those of Windows itself. The following are known for the
  <span class="member">SubVersion</span> and <span class="member">SubMinorVersion</span>:
  </p>
  <ul>
    <li>1.0 in versions 5.0 and 5.1; </li>
    <li>1.2 in version 5.2; </li>
    <li>1.4 in version 6.0; </li>
    <li>1.5 in version 6.1 and higher; </li>
    <li>2.0 in version 6.2 and higher, if the logger is sufficiently advanced (see 
    below). </li>
  </ul>
  <p>See that the <span class="member">SubVersion</span> and
  <span class="member">SubMinorVersion</span> nowadays tell a little of the logger’s 
  capability. Sufficiently advanced means any of the following: </p>
  <ul>
    <li>the logger is in compressed mode, i.e., has <span class="constant">EVENT_TRACE_COMPRESSED_MODE</span> 
    (0x04000000) set in the <span class="member">LogFileMode</span>; </li>
    <li>the <span class="member">BufferSize</span> exceeds 1MB; </li>
    <li>the <span class="member">NumberOfProcessors</span> exceeds 256. </li>
  </ul>
  <p>A header file, named NTWMI.H, which Microsoft is known to have published only 
  with the original and Version 1511 editions of the Windows Driver Kit (WDK) for 
  Windows 10 describes these version numbers in comments: </p>
  <pre class="source">// The following two are used for defining LogFile layout version.
//
//  1.2 -- Add per-processor event streams.
//  1.3 -- Remove rundown and context/switch streams.
//  1.4 -- Add header stream.
//  1.5 -- Include QPC and Platform clock source in the header.
//
//  2.0 -- Larger Buffers (over 1MB) / 256+ Processors / Compression (Win8).
//</pre>
  <p>Whether this comment’s start at version 1.2 means that Microsoft regards earlier 
  versions as prehistory, it may be as well to note one case for showing how important 
  these version numbers were and may still be. Not that version 1.1 is known in 
  any released build, it is (still) the cut-off for deciding which format the logger 
  used for events that came through the <span class="function">TraceEventInstance</span> 
  function. If the version is at least 1.1 (but, before Windows 7, as a coding error, 
  if the major and minor version numbers are both at least 1), then these events 
  are interpreted as beginning with the new <span class="struct">
  <a href="../../api/ntwmi/traceheaders/event_instance_guid_header.htm">EVENT_INSTANCE_GUID_HEADER</a></span>. 
  Otherwise, they have the old, smaller, <span class="struct">
  <a href="event_instance_header.htm">EVENT_INSTANCE_HEADER</a></span>. </p>
  <p>In version 6.1 and higher, if the logger is configured for the
  <span class="constant">EVENT_TRACE_NO_PER_PROCESSOR_BUFFERING</span> (0x10000000) 
  mode, then the <span class="member">NumberOfProcessors</span> is 1 no matter how 
  many processors are active. </p>
  <p>The <span class="member">LogFileMode</span> reported in this structure is not 
  exactly what was ever specified for the logger as a <span class="member">LogFileMode</span> 
  nor even what the logger keeps as its <span class="member">LoggerMode</span> in 
  the <span class="struct">
  <a href="../../ntos/etwp/wmi_logger_context/index.htm">WMI_LOGGER_CONTEXT</a></span>. 
  The following flags are cleared from it: </p>
  <ul>
    <li><span class="constant">EVENT_TRACE_REAL_TIME_MODE</span> (0x00000100);
    </li>
    <li><span class="constant">EVENT_TRACE_STOP_ON_HYBRID_SHUTDOWN</span> (0x00400000) 
    in version 6.2 and higher; </li>
    <li><span class="constant">EVENT_TRACE_PERSIST_ON_HYBRID_SHUTDOWN</span> (0x00800000) 
    in version 6.2 and higher. </li>
  </ul>
  <p>Though Microsoft’s C-language definition of the <span class="struct">TRACE_LOGFILE_HEADER</span> 
  has provided for a <span class="member">CpuSpeedInMHz</span> since Windows XP, 
  it is not until Windows Vista that the kernel sets this member. </p>
  <p>The null-terminated Unicode strings that are otherwise suggested for the
  <span class="member">LoggerName</span> and <span class="member">LogFileName</span> 
  simply follow the structure. Before version 6.1, the <span class="member">LoggerName</span> 
  and <span class="member">LogFileName</span> actually are saved as pointers to 
  these strings. They have since been repurposed and now take values from the
  <span class="enum"><a href="../../ntos/hal/hal_platform_timer_source.htm">HAL_PLATFORM_TIMER_SOURCE</a></span> 
  enumeration to tell of what hardware produces the clock interrupt and performance 
  counter, respectively. </p>
  <p>Microsoft’s C-language definition of the <span class="struct">TRACE_LOGFILE_HEADER</span> 
  for kernel-mode programming in all versions provides conditionally that the
  <span class="member">TimeZone</span> can be an <span class="struct">RTL_TIME_ZONE_INFORMATION</span> 
  whose definition Microsoft provides in no other headers. This differs from the 
  documented <span class="struct">TIME_ZONE_INFORMATION</span> only in having the 
  kernel-mode <span class="struct">TIME_FIELDS</span> instead of the user-mode
  <span class="struct">SYSTEMTIME</span>. Versions before 6.0 do not translate the
  <span class="member">TimeZone</span> from the undocumented
  <span class="struct">RTL_TIME_ZONE_INFORMATION</span> to a plain old
  <span class="struct">TIME_ZONE_INFORMATION</span>. </p>
  <p>Before version 6.0, the <span class="member">ReservedFlags</span> are 1 if 
  the logger uses the performance counter, but are otherwise 0. In modern versions, 
  the <span class="member">ReservedFlags</span> record the logger’s
  <span class="member">ClockType</span>, which is again 1 if the logger uses the 
  performance counter, but is 2 for the system time and 3 for the CPU cycle counter.
  </p>
  <div class="Footer">
    <p class="Dates">This page was created on 15th
    <a href="../../../../../../../new/16/12.htm">December 2016</a> and was last 
    modified on 31st <a href="../../../../../../../new/22/10.htm">October 2022</a>.
    </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
