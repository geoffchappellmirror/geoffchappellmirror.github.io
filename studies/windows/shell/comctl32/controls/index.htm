<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Common Controls</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/shell.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="30135" endspan -->
<h1>Common Controls </h1>
<p>From the beginning, COMCTL32 has been less a library of functions than of window 
classes. Indeed, these window classes are what give COMCTL32 its name, because their 
typical use is not for the sort of windows that users are aware of as windows, but 
as controls in other windows to help with common user-interface tasks. The I/O performed 
through these controls can be quite sophisticated and is clearly best done in a 
standard way by all Windows applications. So standard are these common controls 
that it would be a very rare Windows program of any substance that does not use 
them, even if the program makes no other formal use of the Windows Shell. </p>
<p class="draft">The common controls were sufficiently important to the look and 
feel of better-quality Windows programs that they became an important tool for leveraging 
the Windows monopoly to favour Internet Explorer. Several new controls and many 
expansions of the existing controls’ feature sets first became available to third-party 
Windows programs not as natural progress from users installing the latest Windows 
version but by their installing Internet Explorer. </p>
<p>In the ancient history of 16-bit Windows, controls were a built-in feature of 
the windowing system. Not only were their class names pre-defined but the controls 
even had their own window messages in the reserved range below
<span class="message">WM_USER</span>. Other child windows might do similar work 
to the built-in controls, and be called custom controls, but were to some extent 
discouraged. See for instance <span class="citation">The Windows Interface: An Application 
Design Guide</span> from the Windows 3.1 SDK: </p>
<blockquote>
  <p>Applications may also contain custom controls, but widespread use of such controls 
  defeats the benefits of consistency. Before deciding to use custom controls, application 
  designers should carefully consider whether existing controls can be used instead.
  </p>
</blockquote>
<p>Of course, a system manufacturer who can write this will want to be sure that 
the existing controls really do suffice for the generality of what application designers 
might imagine for their user interfaces. Once programmers are writing custom controls 
in any quantity, it becomes in everybody’s interests for the system manufacturer 
to provide additional controls with enough versatility to meet the need, not necessarily 
as more built-in controls but at least as standard extensions for common use. A 
library of such controls from Microsoft first saw the light of a retail release 
as COMMCTRL.DLL in Windows for Workgroups 3.11 late in 1993. With hindsight, the 
following from the SDK at the time is somewhere between quaint and curious: </p>
<blockquote>
  <p><b>Warning</b>&nbsp;&nbsp; Use of common controls is not recommended. Microsoft 
  provides no guarantee that the common controls and the programming interface described 
  in this chapter will be supported in future versions of Windows. </p>
</blockquote>
<p>Only a few months later, <span class="citation">Microsoft Systems Journal</span> 
(February 1994) carried an article titled <span class="citation">Seventeen Techniques 
for Preparing Your 16-bit Applications for Chicago</span> which left no room for 
doubt that the new common controls were not just sure to stay in Windows but were 
essential to the commercial future of all Windows programmers. </p>
<p>Thus did Windows come to have some built-in controls implemented in USER32.DLL 
and the so-called common controls in COMCTL32.DLL. Microsoft’s warning from 1993 
is a reminder that the interfaces and even some controls did change in some details. 
The very earliest of the common controls each have their own exported function for 
creating an instance of that control. Though these mostly persist in the 32-bit 
implementations, the interface settled to each control having a well-known class 
name, defined symbolically in the SDK header file COMMCTRL.H. One function,
<span class="function"><a href="../api/commctrl/initcommoncontrolsex.htm">InitCommonControlsEx</a></span>, 
is exported so that programs can direct COMCTL32 to register the window classes 
for the controls they want. The controls can thereafter be created, over and over, 
by calling the standard API functions <span class="function">CreateWindow</span> 
or <span class="function">CreateWindowEx</span>. </p>
<p>The following table lists the common controls and shows which COMCTL32 versions 
support them. The controls are listed in alphabetical order of their window classes. 
The symbolic name for use in program code is shown, if COMMCTRL.H defines one. The 
third column gives the heading under which Microsoft documents the control in the 
section <span class="citation">Individual Control Information</span>. Where no common 
name is given, it may be that Microsoft documents the control elsewhere or that 
the control is in some sense internal. More notes follow the table. </p>
<table class="Constants">
  <colgroup>
    <col class="Name" span="3"><col class="Versions">
  </colgroup>
  <tr>
    <th>Class Name </th>
    <th>Symbolic Name </th>
    <th>Common Name </th>
    <th>Applicable Versions </th>
  </tr>
  <tr>
    <td>Button </td>
    <td><span class="constant">WC_BUTTON</span> </td>
    <td>Button Controls </td>
    <td>6.00 and higher </td>
  </tr>
  <tr>
    <td>ComboBox </td>
    <td><span class="constant">WC_COMBOBOX</span> </td>
    <td>ComboBox Controls </td>
    <td>6.00 and higher </td>
  </tr>
  <tr>
    <td>ComboBoxEx32 </td>
    <td><span class="constant">WC_COMBOBOXEX</span> </td>
    <td>ComboBoxEx Controls </td>
    <td>4.00 (NT) and higher </td>
  </tr>
  <tr>
    <td>ComboLBox </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>6.00 and higher </td>
  </tr>
  <tr>
    <td>DropDown </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>6.10 and higher </td>
  </tr>
  <tr>
    <td>Edit </td>
    <td><span class="constant">WC_EDIT</span> </td>
    <td>Edit Controls </td>
    <td>6.00 and higher </td>
  </tr>
  <tr>
    <td>ImageDrag </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>6.10 and higher </td>
  </tr>
  <tr>
    <td>ListBox </td>
    <td><span class="constant">WC_LISTBOX</span> </td>
    <td>List Box Controls </td>
    <td>6.00 and higher </td>
  </tr>
  <tr>
    <td>msctls_hotkey32 </td>
    <td><span class="constant">HOTKEY_CLASS</span> </td>
    <td>Hot Key Controls </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>msctls_progress32 </td>
    <td><span class="constant">PROGRESS_CLASS</span> </td>
    <td>Progress Bar Controls </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>msctls_statusbar32 </td>
    <td><span class="constant">STATUSCLASSNAME</span> </td>
    <td>Status Bars </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>msctls_trackbar32 </td>
    <td><span class="constant">TRACKBAR_CLASS</span> </td>
    <td>Trackbar Controls </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>msctls_updown32 </td>
    <td><span class="constant">UPDOWN_CLASS</span> </td>
    <td>Up-Down Controls </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>NativeFontCtl </td>
    <td><span class="constant">WC_NATIVEFONTCTL</span> </td>
    <td>&nbsp;</td>
    <td>4.71 and higher </td>
  </tr>
  <tr>
    <td>ReaderModeCtl </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>6.00 and higher </td>
  </tr>
  <tr>
    <td>ReBarWindow32 </td>
    <td><span class="constant">REBARCLASSNAME</span> </td>
    <td>Rebar Controls </td>
    <td>4.70 and higher </td>
  </tr>
  <tr>
    <td>ScrollBar </td>
    <td><span class="constant">WC_SCROLLBAR</span> </td>
    <td>Scroll Bars </td>
    <td>6.00 and higher </td>
  </tr>
  <tr>
    <td>Static </td>
    <td><span class="constant">WC_STATIC</span> </td>
    <td>Static Controls </td>
    <td>6.00 and higher </td>
  </tr>
  <tr>
    <td>SysAnimate32 </td>
    <td><span class="constant">ANIMATE_CLASS</span> </td>
    <td>Animation Controls </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>SysDateTimePick32 </td>
    <td><span class="constant">DATETIMEPICK_CLASS</span> </td>
    <td>Date and Time Picker Controls </td>
    <td>4.00 (NT) and higher </td>
  </tr>
  <tr>
    <td>SysHeader32 </td>
    <td><span class="constant">WC_HEADER</span> </td>
    <td>Header Controls </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>SysIPAddress32 </td>
    <td><span class="constant">WC_IPADDRESS</span> </td>
    <td>IP Address Controls </td>
    <td>4.71 and higher </td>
  </tr>
  <tr>
    <td>SysLink </td>
    <td><span class="constant">WC_LINK</span> </td>
    <td>SysLink Controls </td>
    <td>6.00 and higher </td>
  </tr>
  <tr>
    <td>SysListView32 </td>
    <td><span class="constant">WC_LISTVIEW</span> </td>
    <td><a href="listview/index.htm">List-View Controls</a> </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>SysMonthCal32 </td>
    <td><span class="constant">MONTHCAL_CLASS</span> </td>
    <td>Month Calendar Controls </td>
    <td>4.00 (NT) and higher </td>
  </tr>
  <tr>
    <td>SysPager </td>
    <td><span class="constant">WC_PAGESCROLLER</span> </td>
    <td>Pager Controls </td>
    <td>4.71 and higher </td>
  </tr>
  <tr>
    <td>SysTabControl32 </td>
    <td><span class="constant">WC_TABCONTROL</span> </td>
    <td>Tab Controls </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>SysTreeView32 </td>
    <td><span class="constant">WC_TREEVIEW</span> </td>
    <td>Tree-View Controls </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>ToolbarWindow32 </td>
    <td><span class="constant">TOOLBARCLASSNAME</span> </td>
    <td>Toolbar Controls </td>
    <td>3.50 and higher </td>
  </tr>
  <tr>
    <td>tooltips_class32 </td>
    <td><span class="constant">TOOLTIPS_CLASS</span> </td>
    <td>ToolTip Controls </td>
    <td>3.50 and higher </td>
  </tr>
</table>
<p>Note that in version 6.00 and higher, COMCTL32 re-implements some of the built-in 
controls. The implementations in USER32 remain. Both implementations use the same 
class names. Whether a given control is implemented through COMCTL32 or USER32 depends 
on the current activation context when the control is created. The affected controls 
are: </p>
<ul>
  <li>Button, ComboBox, ComboLBox, Edit, ListBox, ScrollBar and Static </li>
</ul>
<p>The ComboLBox control is obscure. Microsoft documents it as being “available 
only for use by the system” (yet MSHTML knows of it, admittedly to subclass an existing 
control, not to create one). The ComboLBox control is essentially a ListBox, with 
the same window procedure but different class styles, intended to exist only as 
a child of a ComboBox. </p>
<p>Redirection of window classes according to the current activation context is 
supported by USER32 in Windows XP and higher. Part of the feature is that any module, 
such as COMCTL32.DLL, that implements window classes can declare its support through 
an assembly manifest. If a window cannot be created because the requested class 
is not yet registered, but the class is supported by the module associated with 
the current activation context, then USER32 can call that module to get the class 
registered, and then retry the window creation. The module must export a function 
named <span class="function"><a href="../api/commctrl/registerclassnamew.htm">RegisterClassNameW</a></span>. 
COMCTL32 does this in versions 5.82 and 6.0 from Windows XP SP2, but not Windows 
XP SP3, and higher, with the effect that <span class="function">InitCommonControlsEx</span> 
becomes unnecessary. </p>
<p>Version 6.10 takes this one step further. The ImageDrag control, new for version 
6.10, is outside the machinery of <span class="function">InitCommonControlsEx</span>. 
Its class name can only be registered through <span class="function">RegisterClassNameW</span>. 
However, the only use known at present is internal, for COMCTL32 to enhance image 
lists. </p>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../_include/c0809.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2008-2009. Geoff Chappell. All rights reserved. 
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="5603" endspan -->
</div>

</body>

</html>
