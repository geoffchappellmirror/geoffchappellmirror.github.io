<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Declaration Specifier (__declspec)</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>Declaration Specifier (__declspec) </h1>
<p>The <span class="keyword">__declspec</span> keyword starts a declaration 
specifier. It is intended for use in a declaration, where it specifies so-called 
extended storage-class attributes for the object that is being declared. </p>
<h2>Syntax </h2>
<blockquote>
  <p><span class="keyword">__declspec ( </span>[[[<span class="keyword">,</span>]<span class="keyword">
  </span><span class="placeholder">attribute</span><span class="keyword"> </span>
  ]...]<span class="keyword"> )</span> </p>
</blockquote>
<p>It is an error (<a href="../../../cl/c1xx/errors/c2054.htm">C2054</a>, with 
message text that is at best cryptic) if the first token after the <span class="keyword">
__declspec</span> is not a left parenthesis. There may then be any number of 
attributes, including none. Before, after, between or instead of attributes, 
there may be any number of commas, including none. The declaration specifier 
ends with the first right parenthesis that is not interpreted as belonging to an
<span class="placeholder">attribute</span>. </p>
<p>Where an <span class="placeholder">attribute</span> is expected, it is an 
ordinary syntax error (C2059) if the first token is not an identifier and a more 
specific error (C2485) if the identifier is not recognised as introducing one of 
the supported attributes. The syntax requirements then vary with the attribute. </p>
<h3>Extended Attributes </h3>
<p>In the following list of extended attributes for the <span class="keyword">
__declspec</span> 
keyword in Microsoft Visual C++ version 13.00.9466, those that seem to be 
missing from the product documentation are highlighted yellow. </p>
<ul>
  <li><span class="keyword"><a href="align.htm">align</a></span> </li>
  <li><span class="keyword"><a href="allocate.htm">allocate</a></span> </li>
  <li><span class="keyword"><a href="deprecated.htm">deprecated</a></span> </li>
  <li><span class="keyword"><a href="dllexport.htm">dllexport</a></span> </li>
  <li><span class="keyword"><a href="dllimport.htm">dllimport</a></span> </li>
  <li><span class="undocumented keyword"><a href="implementation_key.htm">
  implementation_key</a></span> 
  (C++ only) </li>
  <li><span class="undocumented keyword">inline</span> (C only) </li>
  <li><span class="undocumented keyword"><a href="intrin_type.htm">intrin_type</a></span>
  </li>
  <li><span class="undocumented keyword"><a href="managed.htm">managed</a></span> 
  and <span class="undocumented keyword"><a href="managed.htm">__managed</a></span>
  </li>
  <li><span class="keyword"><a href="naked.htm">naked</a></span> </li>
  <li><span class="undocumented keyword"><a href="no_tail_padding.htm">
  no_tail_padding</a></span>
  </li>
  <li><span class="keyword"><a href="noinline.htm">noinline</a></span> </li>
  <li><span class="keyword"><a href="noreturn.htm">noreturn</a></span> </li>
  <li><span class="keyword"><a href="nothrow.htm">nothrow</a></span> (C++ only)
  </li>
  <li><span class="keyword"><a href="novtable.htm">novtable</a></span> </li>
  <li><span class="keyword"><a href="property.htm">property</a></span> (C++ 
  only)
  </li>
  <li><span class="undocumented keyword"><a href="sealed.htm">sealed</a></span> 
  (C++ only) </li>
  <li><span class="keyword"><a href="selectany.htm">selectany</a></span> </li>
  <li><span class="keyword"><a href="thread.htm">thread</a></span> </li>
  <li><span class="undocumented keyword"><a href="unmanaged.htm">unmanaged</a></span> 
  and <span class="undocumented keyword"><a href="unmanaged.htm">__unmanaged</a></span>
  </li>
  <li><span class="keyword"><a href="uuid.htm">uuid</a></span> (C++ only) </li>
</ul>
<p>Of these, only <span class="keyword">align</span>, <span class="keyword">
allocate</span>,
<span class="keyword">implementation_key</span>, <span class="keyword">property</span> 
and <span class="keyword">uuid</span> have non-trivial syntactic expectations. 
For all others, the <span class="placeholder">attribute</span> is just the one 
identifier.
</p>
<h2>Standard Order </h2>
<p>There is no prescribed ordering of extended attributes, whether they are 
placed all in one <span class="keyword">__declspec</span> or each in its own or 
in any arrangement in-between. The closest to a standard order, of sorts, is 
given by the compiler’s own practice when listing extended attributes </p>
<ul>
  <li>in function prototypes written to standard output because of the
  <span class="switch">/Zg</span> option </li>
  <li>and in the message text for various warnings and errors (C2059, C2720,
  <a href="../../../cl/c1xx/warnings/c4038.htm">C4038</a>,
  <a href="../../../cl/c1xx/warnings/c4091.htm">C4091</a> and C4518). </li>
</ul>
<p>Not all of an object’s extended attributes get listed in these cases, but 
those that do are listed all in the one <span class="keyword">__declspec</span> 
in the order: </p>
<ul>
  <li><span class="keyword">dllimport</span> </li>
  <li><span class="keyword">dllexport</span> </li>
  <li><span class="keyword">naked</span> </li>
  <li><span class="keyword">thread</span> </li>
  <li><span class="keyword">allocate(&quot;</span><span class="placeholder">segname</span><span class="keyword">&quot;)</span>
  </li>
  <li><span class="keyword">uuid(&quot;</span><span class="placeholder">ComObjectGUID</span><span class="keyword">&quot;)</span>
  </li>
  <li><span class="keyword">nothrow</span> </li>
  <li><span class="keyword">selectany</span> </li>
  <li><span class="keyword">novtable</span> </li>
</ul>
<p>each with a trailing space. Not only does the compiler not itself use commas 
when listing extended attributes, but the product documentation seems not to 
mention anywhere that commas are permitted. </p>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../../_include/c0510.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2010. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62288" endspan -->
</div>

</body>

</html>