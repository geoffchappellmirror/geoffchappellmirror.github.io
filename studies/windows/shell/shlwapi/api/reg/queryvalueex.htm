<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SHQueryValueEx</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="55064" endspan -->
<h1>SHQueryValueEx </h1>
<p>This function queries a value in an open registry key. </p>
<h2>Declaration </h2>
<pre class="source">DWORD
SHQueryValueEx (
    HKEY hKey,
    LPCTSTR pszValue,
    LPDWORD pdwReserved,
    LPDWORD pdwType,
    LPVOID pvData,
    LPDWORD pcbData);</pre>
<!--webbot bot="Include" U-Include="../_include/aw.htm" TAG="BODY" startspan -->

<p>The function exists in ANSI and Unicode forms. </p>

<!--webbot bot="Include" i-checksum="40026" endspan -->
<h3>Parameters </h3>
<p>The <span class="argument">hKey</span> argument provides a handle to an open 
key. </p>
<!--webbot bot="Include" U-Include="_include/value.htm" TAG="BODY" startspan -->

<p>The <span class="argument">pszValue</span> argument provides the address of a 
null-terminated string that names the value to query within the key, or is NULL 
to query the key’s default value. </p>

<!--webbot bot="Include" i-checksum="64447" endspan -->
<!--webbot bot="Include" U-Include="_include/type.htm" TAG="BODY" startspan -->

<p>The <span class="argument">pdwType</span> argument provides the address of a 
variable that is to receive the data type, e.g., <span class="constant">REG_SZ</span> 
or <span class="constant">REG_DWORD</span>. This argument can be NULL to mean that 
the data type is not wanted. </p>

<!--webbot bot="Include" i-checksum="7590" endspan -->
<!--webbot bot="Include" U-Include="_include/data.htm" TAG="BODY" startspan -->

<p>The <span class="argument">pvData</span> argument provides the address of a buffer 
that is to receive the data. This argument can be NULL to mean that there is no 
buffer and that the data is not wanted. </p>

<!--webbot bot="Include" i-checksum="63841" endspan -->
<!--webbot bot="Include" U-Include="_include/cb.htm" TAG="BODY" startspan -->

<p>The <span class="argument">pcbData</span> argument provides the address of a 
variable that plays different roles on input and output. On input, the variable 
provides the size of the buffer, in bytes. This size is ignored if
<span class="argument">pvData</span> is NULL, because there is then no buffer. On 
output, the variable receives the size of the data, in bytes. This argument can 
be NULL to mean that the size of the buffer is zero (if a buffer is even given) 
and that the size of the data is not wanted. </p>

<!--webbot bot="Include" i-checksum="51819" endspan -->
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../_include/ec.htm" TAG="BODY" startspan -->

<p>The function returns zero for success, else an error code. </p>

<!--webbot bot="Include" i-checksum="1551" endspan -->
<!--webbot bot="Include" U-Include="_include/error_more_data.htm" TAG="BODY" startspan -->

<p>Of particular interest are the cases in which the value is accessible but has 
more data than can fit in the given buffer, including because there is no buffer:
</p>
<ul>
  <li>If <span class="argument">pvData</span> is NULL, the caller did not ask for 
  data and is not denied anything that was asked for. The function therefore succeeds. 
  If <span class="argument">pcbData</span> is not NULL, the variable at
  <span class="argument">pcbData</span> receives the size of the data. </li>
  <li>If <span class="argument">pvData</span> is not NULL, the caller asked for 
  data, which the function cannot deliver. The function therefore fails. The error 
  code is <span class="constant">ERROR_MORE_DATA</span>. The contents of the buffer 
  at <span class="argument">pvData</span> are undefined. If
  <span class="argument">pcbData</span> is not NULL, the variable at
  <span class="argument">pcbData</span> receives the size of the data. </li>
</ul>

<!--webbot bot="Include" i-checksum="52352" endspan -->
<h2>Behaviour </h2>
<p>Although this function and the standard API function <span class="function">RegQueryValueEx</span> 
have exactly the same prototype, the two do not behave identically. A call to the 
SHLWAPI function is essentially a call to the standard function but with post-processing, 
presumably with the idea of improving or even correcting the standard function. 
There are two general aims: </p>
<ul>
  <li>to fix <span class="constant">REG_SZ</span> or <span class="constant">REG_EXPAND_SZ</span> 
  data that is not properly null-terminated; </li>
  <li>to expand <span class="constant">REG_EXPAND_SZ</span> data and return it as
  <span class="constant">REG_SZ</span> data. </li>
</ul>
<p>The ANSI form <span class="function">SHQueryValueExA</span> post-processes
<span class="function">RegQueryValueExA</span>. The Unicode form
<span class="function">SHQueryValueExW</span> post-processes
<span class="function">RegQueryValueExW</span>, if running on an NT version of Windows. 
The other versions have no functioning <span class="function">RegQueryValueExW</span>. 
When running on these, <span class="function">SHQueryValueExW</span> translates 
through <span class="function">SHQueryValueExA</span>, converting the value to ANSI 
beforehand and converting <span class="constant">REG_SZ</span>,
<span class="constant">REG_EXPAND_SZ</span> and <span class="constant">REG_MULTI_SZ</span> 
data to Unicode afterwards. Constraints arising from these conversions are beyond 
the scope of this article. </p>
<p>Since the function is very much interested in the type and size of available 
data, the internal call to <span class="function">RegQueryValueEx</span> is made 
with local variables to receive this type and size, even if the
<span class="function">SHQueryValueEx</span> caller does not want them, i.e., even 
if either or both of <span class="argument">pdwType</span> or
<span class="argument">pcbData</span> are NULL. This has a possibly unintended consequence 
for the case in which <span class="argument">pvData</span> is not NULL but
<span class="argument">pcbData</span> is NULL. Though this case is not completely 
meaningless, it is at best redundant. The standard API function,
<span class="function">RegQueryValueEx</span>, would reject it, returning
<span class="constant">ERROR_INVALID_PARAMETER</span>. This is not discovered by
<span class="function">SHQueryValueEx</span>, which tells <span class="function">
RegQueryValueEx</span> of a zero-byte buffer at <span class="argument">pvData</span>. 
If data exists for the given value, it is too much for the zero-byte buffer and 
the function returns <span class="constant">ERROR_MORE_DATA</span> despite having 
no means to communicate how much data. </p>
<h3>String Data </h3>
<p>If the call to <span class="function">RegQueryValueEx</span> succeeds at getting
<span class="constant">REG_SZ</span> data, then the function follows the advice 
that the official documentation gives to all callers of <span class="function">RegQueryValueEx</span>: 
it checks whether the returned data is properly null-terminated. It does this by 
inspecting the last whole character in the data. In the Unicode case, this is just 
the last aligned word, i.e., the last word that is a whole number of words into 
the buffer. In the ANSI case, the sense meant is simply the last byte of data (which 
is presumably reasonable because zero is not a trail byte in any multi-byte character).
</p>
<p>If the last whole character is not a null, including because the data is not 
large enough for a whole character, then provided that the buffer has sufficient 
capacity, the function discards any partial character at the end of the data (applicable 
only to <span class="function">SHQueryValueExW</span>), appends a null and arranges 
that the size returned at <span class="argument">pcbData</span> increases to include 
what is now the terminating null. If the buffer does not have the extra one or two 
bytes of space in which to make this correction, the function changes from succeeding 
to failing, with <span class="constant">ERROR_MORE_DATA</span> as the error code. 
Presumably as an oversight, the function does not then increase the size returned 
at <span class="argument">pcbData</span> to report what extra space is needed.
</p>
<p>For <span class="function">SHQueryValueExW</span> only, if the last whole character 
is a null but the data continues for another byte, then the function adjusts the 
size returned at <span class="argument">pcbData</span> to lose the extra byte.
</p>
<h3>Expandable String Data </h3>
<p>If the call to <span class="function">RegQueryValueEx</span> succeeds at getting
<span class="constant">REG_EXPAND_SZ</span> data, the function first fixes any improper 
termination of the string, as above. It then expands the environment variables in 
the data. Whether or not the buffer is large enough to hold the whole expansion, 
the function adjusts the size at <span class="argument">pcbData</span> to match 
whatever is needed for the expansion, and sets the data type at
<span class="argument">pdwType</span> as <span class="constant">REG_SZ</span> (if
<span class="argument">pdwType</span> is not NULL). If the expansion would be too 
large for the given buffer, the function changes from succeeding to failing, with
<span class="constant">ERROR_MORE_DATA</span> as the error code. </p>
<p>If the call to <span class="function">RegQueryValueEx</span> reveals that there 
is <span class="constant">REG_EXPAND_SZ</span> data to get but there is too much 
of it to fit the given buffer, including because no buffer is given, then if
<span class="argument">pcbData</span> is not NULL, the function aims to discover 
how big the buffer needs to be for the expanded data. It repeats the registry query 
but using a temporary buffer that is large enough for the expected size of data 
plus a null terminator. If this second query succeeds at getting data, the function 
expands the environment variables in this data. If the size needed for the expansion 
is greater than the size of the unexpanded data, the function sets the expanded 
size as the size to be returned at <span class="argument">pcbData</span>. </p>
<p>In all cases, if the given value turns out to have <span class="constant">REG_EXPAND_SZ</span> 
data and <span class="argument">pdwType</span> is not NULL, this function reports 
the data type as <span class="constant">REG_SZ</span>. </p>
<h3>Early Implementations </h3>
<p>The preceding implementation details are from inspection of SHLWAPI version 6.0 
from Windows XP SP1. The following variations are known from earlier versions. Note 
that the function was born fully formed in terms of its intended functionality. 
All its history is of fixing bugs. There are more than might be expected (and I 
do not swear that the list below is complete), and most of them did not get attended 
to until a substantial recoding for version 6.0. </p>
<p>In version 4.70, string-type data retrieved by <span class="function">SHQueryValueExW</span> 
when not running on NT is still in ANSI, having been retrieved that way through
<span class="function">SHQueryValueExA</span> but then not converted to Unicode.
</p>
<p>In the case where <span class="argument">pvData</span> is not NULL but
<span class="argument">pcbData</span> is NULL, versions before 5.0 fault because 
the function dereferences a NULL pointer when learning the buffer’s size. The first 
builds of version 5.0, from before Windows 2000, do not fix 
this correctly. When the function calls <span class="function">RegQueryValueEx</span>, 
the local variable it uses for passing the buffer’s size and learning the amount 
of available data is uninitialised. A more or less random amount of memory at the 
address given by <span class="argument">pvData</span> may be corrupted. </p>
<p>Versions before 6.0 have a very simple notion of ensuring that
<span class="constant">REG_SZ</span> data is properly null-terminated. If the buffer 
has space for one more character, the function appends a null to the data. In the 
Unicode case, the appended null is aligned, so that any odd byte in the data is 
discarded. In no case is the size returned at <span class="argument">pcbData</span> 
affected. </p>
<p>In version 4.70, if <span class="function">SHQueryValueExW</span> succeeds at 
getting <span class="constant">REG_EXPAND_SZ</span> data, then the expansion of 
environment variables in the data is defective. For its call to
<span class="function">ExpandEnvironmentStringsW</span>, the function passes the 
buffer’s size as a number of bytes (instead of characters) and interprets the return 
value as counting bytes (instead of characters). Among the consequences may be an 
overflow of the temporary buffer or copying only half the expansion to the given 
buffer. </p>
<p>Versions before 6.0 assume that <span class="constant">REG_EXPAND_SZ</span> 
data is null-terminated, i.e., does not need a null appended for safety before passing 
to <span class="function">ExpandEnvironmentStrings</span>. </p>
<p>In versions before 6.0, if the function succeeds at getting
<span class="constant">REG_EXPAND_SZ</span> data but the expansion would be too 
large for the given buffer, the return value is the last error code set by
<span class="function">ExpandEnvironmentStrings</span>. This is
<span class="constant">ERROR_INSUFFICIENT_BUFFER</span>, not
<span class="constant">ERROR_MORE_DATA</span>. </p>
<p>In versions before 6.0, if <span class="argument">pvData</span> is not NULL 
but there is too much <span class="constant">REG_EXPAND_SZ</span> data to fit the 
given buffer, then the size returned at <span class="argument">pcbData</span> is 
the size of the unexpanded data. No attempt is made to determine the size that would 
be needed for the data with environment variables expanded. </p>
<p>In versions before 5.0, if <span class="argument">pvData</span> is NULL and
<span class="constant">REG_EXPAND_SZ</span> data is available, then the size returned 
at <span class="argument">pcbData</span> is the size needed for the data with environment 
variables expanded. If expansion actually shortens the data (as when variables have 
long names but short evaluations), then this returned size would not in fact have 
been large enough for the function’s success, which requires the given buffer to 
be large enough first for the data as obtained from the registry and then for the 
data after expanding environment variables. </p>
<h3>Replacement </h3>
<p>In version 6.0 from Windows XP SP2, and higher, <span class="function">SHQueryValueEx</span> is re-implemented in terms 
of the new function <span class="function">SHRegGetValue</span>:
</p>
<pre class="source">SHRegGetValue (hKey, NULL, pszValue, SRRF_RT_ANY | SRRF_RM_ANY, pdwType, pvData, pcbData);</pre>
<h2>Comment </h2>
<p>Since <span class="function">SHQueryValueEx</span> has exactly the same prototype 
as the standard API function <span class="function">RegQueryValueEx</span>, either 
it is superfluous or the whole point to its existence is to behave a little differently 
from the standard function, presumably in some way that someone thought useful. 
Yet the documentation does not even hint at what this different behaviour might 
be. The most detail that Microsoft seems to offer on the point is in SHLWAPI.H, 
specifically in comments immediately before the declarations of
<span class="function">SHQueryValueExA</span> and <span class="function">SHQueryValueExW</span>:
</p>
<pre class="source">// These functions behave just like RegQueryValueEx(), except if the data
// type is REG_SZ, REG_EXPAND_SZ or REG_MULTI_SZ then the string is
// guaranteed to be properly null terminated.
//
// Additionally, if the data type is REG_EXPAND_SZ these functions will
// go ahead and expand out the string, and &quot;massage&quot; the returned *pdwType
// to be REG_SZ.</pre>
<p>Why is this left as an obscurity? </p>
<p>Even after finding these comments, what is the programmer to make of this talk 
that a string found by <span class="function">RegQueryValueEx</span> might not be 
properly terminated? Microsoft’s documentation of <span class="function">RegQueryValueEx</span> 
notes that string data “may not have been stored with the proper null-terminating 
characters”, but it doesn’t explain how this happens, let alone advise how one should 
compensate for it. </p>
<h3>Demonstrations </h3>
<p>For <span class="emphasis">some</span> indication of how this is non-trivial, 
consider the following experiment (with the Unicode versions of the functions, running 
on Windows XP SP1). </p>
<p>Imagine that the string “AB” has been set into the registry (by someone else) 
and that you have the job of querying it (without knowing for sure what to expect). 
With the terminating null, as Unicode, this string runs to six bytes. </p>
<h4>The Control Case </h4>
<p>Ordinarily, the value will have been set by calling <span class="function">RegSetValueExW</span> 
and providing all six bytes as the <span class="constant">REG_SZ</span> data. If 
you query for fewer than six bytes, you are told that six bytes are available. If 
you query for six bytes or more, you get the six bytes. </p>
<p>It also works if the value was set by calling <span class="function">RegSetValueExW</span> 
with a buffer containing all six bytes but with the size specified as only four 
bytes. This ought not to have got done. Microsoft has long documented that “if the 
data is of type <span class="constant">REG_SZ</span>, <span class="constant">REG_EXPAND_SZ</span>, 
or <span class="constant">REG_MULTI_SZ</span>, <span class="argument">cbData</span> 
must include the size of the terminating null character.” However, all NT versions 
of ADVAPI32 since at least the original Windows NT 4.0 provide for
<span class="function">RegSetValueExW</span> to correct a size that does not include 
the expected terminating null for string-type data. In this case, though only four 
bytes were specified, a terminating null did follow them and all six bytes got set 
into the registry. If you query for fewer than six bytes, you are told that six 
bytes are available. If you query for six bytes or more, you get the six bytes.
</p>
<p>So far, so good. Where can it go wrong? </p>
<h4>Problem Case One </h4>
<p>Suppose that whoever set the value never intended the “AB” as a null-terminated 
string, such that now the A and B are followed by something other than a null character, 
perhaps by random data or even by nothing (as when the address after the B is invalid). 
This would be mischievous, but the fact is that <span class="function">RegSetValueExW</span> 
will have accepted it and set just the four bytes into the registry. What happens 
when you query the value? </p>
<p>If you call <span class="function">RegQueryValueExW</span> and provide no buffer, 
the function reports that there are four bytes of data it could deliver to you. 
If you repeat the call to <span class="function">RegQueryValueExW</span> but now 
provide four or even five bytes for the data, the four bytes you get are the A and 
the B. It’s good that you get back whatever it was that someone put in, but it is 
not null-terminated. </p>
<p>If you call <span class="function">RegQueryValueExW</span> and allow six bytes 
or more for the data, then although the size is still returned as four, the buffer 
actually receives six bytes for the A, the B and a terminating null. What happens 
is that <span class="function">RegQueryValueExW</span> itself notices that the data 
is not null-terminated but the buffer has enough unused space for slipping in a 
null character. True, the null character isn’t formally part of the string data, 
but at least the buffer does contain a null-terminated string. This safety provision 
is made by all NT versions of ADVAPI32 since the original Windows NT 4.0. </p>
<h4>Problem Case Two </h4>
<p>Suppose now that the value was set mistakenly by calling
<span class="function">RegSetValueExW</span> with the six-byte string “AB” in the 
buffer but providing the byte count as three. This may seem exotic, but it is neither 
mischievous nor unrealistic: it just needs that the programmer carelessly specified 
the size as a count of characters instead of bytes. Believe it or not, but although 
an odd number is surely and obviously implausible as a byte count for a Unicode 
string, <span class="function">RegSetValueExW</span> will have accepted it and succeeded. 
Moreover, because the two bytes that follow the last whole character within the 
given size were not both zero, no correction will have been attempted: the string 
data will have been set into the registry as three bytes. </p>
<p>If you call <span class="function">RegQueryValueExW</span> and provide no buffer, 
the function reports that there are three bytes of data it could deliver to you. 
If you repeat the call but now provide three or even four bytes for the data, the 
three bytes you get are the whole of the A and the low byte of the B. Again, it’s 
good that you get back whatever it was that someone put in, but you demonstrably 
cannot rely on registry data of type <span class="constant">REG_SZ</span> to be 
a whole number of characters, let alone for the last to be a null. </p>
<p>If you call <span class="function">RegQueryValueExW</span> and allow five bytes 
or more for the data, then the three bytes you receive are now the whole of the 
A and a null byte. Again, <span class="function">RegQueryValueExW</span> has noticed 
that the data has no terminating null but that one can be appended since the buffer 
contains enough unused space. Indeed, the buffer contains more than enough unused 
space, since the appending is aligned to follow the last whole character. Though 
the size is returned as three, the buffer actually receives four bytes and does 
contain a null-terminated string. But there is now an even worse problem: is there 
a partial B in the string data or not? </p>
<h4>Problem Case Three </h4>
<p>Something similar, though less problematic, occurs if the string “AB” was passed 
to <span class="function">RegSetValueExW</span> with the size specified as five 
bytes. This too is most likely an error in counting, but again
<span class="function">RegSetValueExW</span> is not troubled by the odd size. In 
this case however, the two bytes immediately after the last whole character within 
the given size were both zero, and the function will have corrected the size by 
adding two. What actually will have got set into the registry is the six bytes of 
the string, plus whatever byte followed. </p>
<p>If you call <span class="function">RegQueryValueExW</span> and provide no buffer, 
the function reports that there are seven bytes of data available. If you call
<span class="function">RegQueryValueExW</span> and provide seven bytes or more to 
receive the data, you do indeed get seven bytes: the A, the B, a null Unicode character 
and an undefined extra byte. A well-formed string is in there, but ought a careful 
programmer trust data that is supposedly a Unicode string but has an odd size?
</p>
<h4>Corrections by SHQueryValueEx </h4>
<p>The first problem case is perhaps the easiest. If you call
<span class="function">SHQueryValueExW</span>. and provide no buffer, you are told 
that four bytes are available. Unfortunately, if you call <span class="function">
SHQueryValueExW</span> and provide four or five bytes, you get
<span class="constant">ERROR_MORE_DATA</span> and a suggestion to provide a buffer 
of four bytes, which is hardly helpful: this is the bug noted above. If you call
<span class="function">SHQueryValueExW</span> and provide six bytes or more, you 
get the six bytes for “AB” as a properly null-terminated string. </p>
<p>In the second problem case above, the data is plainly ill-defined. Inasmuch as 
the coding in <span class="function">SHQueryValueExW</span> anticipates this case, 
it opts for believing the data that <span class="function">RegQueryValueExW</span> 
returns when given more than the minimum space. If you call
<span class="function">SHQueryValueExW</span> and provide no buffer, you are told 
that three bytes are available. If you call <span class="function">SHQueryValueExW</span> 
and provide exactly three bytes, you get told to provide a buffer of three bytes, 
again because of an oversight in coding. If you provide at least four bytes, then 
what you get is the A and a terminating null. In no case do you ever see the incomplete 
B. </p>
<p>The third problem case is handled best. If you call <span class="function">SHQueryValueExW</span> 
and provide no buffer, you are told that seven bytes of data are available. If you 
provide seven bytes or more to receive the data, then <span class="function">SHQueryValueExW</span> 
gives you six bytes of unambiguously well-formed string data: the A, the B and the 
terminating null. </p>
<p>Some may say that the best solution to this mess is that all users of
<span class="function">RegQueryValueExW</span> should reject any supposedly successful 
result that seems implausible, e.g., because the size is odd or because the last 
whole Unicode character is not null. The purpose of this article is not to advise 
on this, but to point out that retrieving Unicode strings from the registry is problematic 
in ways that Microsoft’s documentation hints at only vaguely, and that Microsoft 
has put <span class="function">SHQueryValueEx</span> through several bug fixes and 
recodings in some attempt to standardise some sort of solution, only to have it 
all pass without comment in Microsoft’s documentation. </p>
<h2>Availability </h2>
<p>Both ANSI and Unicode forms of the <span class="function">SHQueryValueEx</span> 
function are exported by name from SHLWAPI version 4.70 and higher. In other words, 
it is an original SHLWAPI function, exported from all known SHLWAPI versions.
</p>
<p>The <span class="function">SHQueryValueEx</span> function has long been documented, 
though tersely and with the claim that it is available only from version 4.71.
</p>
<p>SHLWAPI version 6.0 from Windows XP SP2, and higher, have a function 
named <span class="function">SHRegGetValue</span>, again with ANSI and Unicode forms, 
which arguably supersedes <span class="function">SHQueryValueEx</span>. </p>
<div class="Footer">
  <p class="Dates">This page was created on 21st September 2004 and was last modified 
  on 27th December 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0409.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2004-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="3935" endspan --></div>

</body>

</html>
