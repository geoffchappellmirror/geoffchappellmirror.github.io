<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Visual C++ Compiler Error C2338</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>Visual C++ Compiler Error C2338 </h1>
<h2>Message Text </h2>
<pre class="output"><span class="placeholder">text</span></pre>
<h2>Circumstances (External) </h2>
<p>This error serves mainly as a placeholder for errors generated externally to 
the compiler. The message text is entirely in the hands of the external component, 
which is why it is shown simply as <span class="placeholder">text</span> above. 
For this mechanism to be useful, the <span class="placeholder">text</span> would 
describe the error in some detail, perhaps even with its own scheme of error numbers.
</p>
<p>The external component will be an attribute provider DLL, such as ATLPROV. Indeed, 
since Microsoft does not document how to write attribute providers, ATLPROV is in 
practice the only cause of externally generated C2338 errors. </p>
<h3>ATL Errors </h3>
<p>All ATL errors generated by ATLPROV feed back to the compiler as C2338. The complete 
error message is: </p>
<pre class="output"><span class="placeholder">position</span> : error C2338: <span class="placeholder">attribute</span>
        Atl Attribute Provider : error ATL<span class="placeholder">number</span>: <span class="placeholder">message</span></pre>
<p>where <span class="placeholder">position</span> (the file name and line number) 
is generated by the compiler, as usual, but everything from
<span class="placeholder">attribute</span> onwards is from ATLPROV, including most 
notably the ATL error number and message text. </p>
<h2>Circumstances (Internal) </h2>
<p>Three cases exist in which the compiler may itself raise error C2338, with the 
compiler’s own message text. </p>
<h3>Boxing by Dynamic Cast </h3>
<p>The history is not known, but it seems that the cloning of a value type into 
a managed object may once upon a time have been done by casting, perhaps before 
(and prompting) invention of the <span class="keyword">__box</span> keyword. In 
this case of an internally generated C2338, the message text is </p>
<pre class="output">deprecated use of dynamic_cast: use __box instead to box a value type</pre>
<p>To see this admittedly obscure (and certainly undocumented) error, compile the 
following with the <span class="switch">/clr</span> option: </p>
<pre class="source">#using  &lt;mscorlib.dll&gt;
using namespace System;

Object *box (int x)
{
    return dynamic_cast &lt;Object *&gt; (x);         // C2338
}</pre>
<h3>Bad Input to the Attribute Provider Provider </h3>
<p>The other cases of internally generated C2338 both arise from misuse of the attribute 
provider provider (ProvProv). This special attribute provider is implemented within 
the compiler to help other attribute providers define their own attributes, most 
notably to standardise the grammar. </p>
<h4>Bad Group Attribute </h4>
<p>Error C2338 occurs with the message text </p>
<pre class="output">&#39;<span class="placeholder">group</span>&#39;: incorrect format for attribute &#39;group&#39;</pre>
<p>when the <span class="placeholder">group</span> given as the value of the
<span class="attribute">group</span> attribute is not one of: </p>
<blockquote>
  <p><span class="keyword">eComGroup</span>, <span class="keyword">eCompilerGroup</span>,
  <span class="keyword">eComPlusMetaDataGroup</span>, <span class="keyword">eControlGroup</span>,
  <span class="keyword">eCPlusPlusGroup</span>, <span class="keyword">eDBConsumerGroup</span>,
  <span class="keyword">eDBProviderGroup</span>, <span class="keyword">eDebugGroup</span>,
  <span class="keyword">eDHTMLGroup</span>, <span class="keyword">eHPS</span>,
  <span class="keyword">eIDLGroup</span>, <span class="keyword">eInterfaceGroup</span>,
  <span class="keyword">eModuleGroup</span>, <span class="keyword">eRegistryGroup</span>,
  <span class="keyword">eStockPMEGroup</span>, <span class="keyword">eUserDefinedGroup</span> 
  or <span class="keyword">eWindowGroup</span> </p>
</blockquote>
<p>Because this validation is performed as part of ProvProv’s parsing of the group 
attribute, this case of error C2338 does not require real-world use of the ProvProv 
attributes, just that they be activated and that the <span class="attribute">group</span> 
attribute be given with an invalid value. Even the following suffices: </p>
<pre class="source">[
    provider (&quot;ProvProv&quot;, &quot;6462678A-83F5-11D2-B8DA-00C04F799BBB&quot;)
];

[
    group = rubbish
];                              // C2338 and (most likely) C1903</pre>
<h4>Bad Usage Attribute </h4>
<p>Error C2338 occurs with the message text </p>
<pre class="output">&#39;<span class="placeholder">usage</span>&#39;: incorrect format for attribute &#39;usage&#39;</pre>
<p>when the <span class="placeholder">usage</span> given as the value of the
<span class="attribute">usage</span> attribute is not one of the following or a 
bit-wise OR of more than one: </p>
<blockquote>
  <p><span class="keyword">eAnonymousUsage</span>, <span class="keyword">eAnyIDLUsage</span>,
  <span class="keyword">eAnyUsage</span>, <span class="keyword">eAsynchronousUsage</span>,
  <span class="keyword">eClassUsage</span>, <span class="keyword">eCoClassMemberUsage</span>,
  <span class="keyword">eCoClassMethodUsage</span>, <span class="keyword">eCoClassUsage</span>,
  <span class="keyword">eCOMInterfaceUsage</span>, <span class="keyword">eDefineTagUsage</span>,
  <span class="keyword">eEnumUsage</span>, <span class="keyword">eEventUsage</span>,
  <span class="keyword">eGlobalDataUsage</span>, <span class="keyword">eGlobalMethodUsage</span>,
  <span class="keyword">eIDLModuleUsage</span>, <span class="keyword">eIllegalUsage</span>,
  <span class="keyword">eInterfaceUsage</span>, <span class="keyword">eInterfaceMethodUsage</span>,
  <span class="keyword">eInterfaceParameterUsage</span>, <span class="keyword">eLocalUsage</span>,
  <span class="keyword">eMemberUsage</span>, <span class="keyword">eMethodParameterUsage</span>,
  <span class="keyword">eMethodUsage</span>, <span class="keyword">eModuleUsage</span>,
  <span class="keyword">ePropertyUsage</span>, <span class="keyword">eStructUsage</span>,
  <span class="keyword">eTemplateUsage</span>, <span class="keyword">eTypedefUsage</span>, 
  or <span class="keyword">eUnionUsage</span> </p>
</blockquote>
<p>However, this validation is not performed unless ProvProv injects code for the
<span class="method">GetAttributeList</span> method of the
<span class="interface">IAttributeGrammar</span> interface. Such injection is attempted 
only in response to the <span class="attribute">implement_grammar</span> attribute 
and requires source code that is at least suggestive of real-world use. For a roughly 
minimal example, create empty header files named </p>
<ul>
  <li>fake_p1.h </li>
  <li>quickhash.h </li>
  <li>usage.h </li>
</ul>
<p>and compile </p>
<pre class="source">[
    provider (&quot;ProvProv&quot;, &quot;6462678A-83F5-11D2-B8DA-00C04F799BBB&quot;),
];

[
    provider_name = {&quot;test&quot;, &quot;00000000-0000-0000-0000-000000000000&quot;},
    implement_grammar
]
class Test
{
    [
        define_attribute = &quot;rubbish&quot;,
        usage = rubbish
    ];
}                               // C2338 and (most likely) C1903</pre>
<h4>Coding Error </h4>
<p>Note that in both the <span class="attribute">group</span> and
<span class="attribute">usage</span> cases, error C2338 is most likely followed 
by fatal error <a href="../fatals/c1903.htm">C1903</a>. This is no orderly exit. 
It is instead the most likely outcome of a coding error in the compiler. The code 
that asks for error C2338 assumes there will be no return, as if C2338 were fatal. 
Since there is a return, the compiler soon executes whatever code happens to follow 
in memory. The best and most likely outcome is a CPU fault, such as would ordinarily 
be presented as an internal compiler error (<a href="../fatals/c1001.htm">C1001</a>), 
but is presented instead as C1903 because of the previous error. To let the CPU 
exception escape the compiler for easy viewing, add the <span class="switch">
<a href="../../cl/options/b$d.htm">/Bd</a></span> option when compiling the examples.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 3rd August 2006 and was last modified 
  on 10th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62552" endspan -->
</div>

</body>

</html>
