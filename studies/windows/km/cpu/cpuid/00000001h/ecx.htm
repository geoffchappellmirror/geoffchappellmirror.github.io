<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>ECX From CPUID Leaf 1</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="43332" -->
<div class="Main">
  <!--webbot bot="Include" U-Include="../../../_include/draft.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">DRAFT: Take more than your usual care. </p>
</div>

<!--webbot bot="Include" endspan i-checksum="34080" -->
  <h1>ECX From CPUID Leaf 1 </h1>
  <p>Executing the <span class="instruction"><a href="../index.htm">cpuid</a></span> 
  instruction with 1 in <span class="register">eax</span> produces a second set 
  of feature flags in <span class="register">ecx</span>, which are here treated 
  as elaborating the feature flags in <a href="edx.htm"><span class="register">edx</span> 
  from <span class="instruction">cpuid</span> leaf 1</a>. </p>
  <p>Intel’s Application Node 485, which seems to be no longer available online 
  from Intel, dates Intel’s documentation of these <span class="register">ecx</span> 
  flags, if not their introduction to the processor, to November 2002. The Windows 
  kernel doesn’t care about any of them until roughly four years later, for Windows 
  Vista. Of the three <span class="register">ecx</span> flags that Microsoft started 
  with, one had only very short-lived support and seems never to have been documented 
  by either Microsoft or Intel. </p>
  <table class="Constants">
    <tr>
      <th>Mask </th>
      <th>Symbolic Name </th>
      <th>Versions </th>
    </tr>
    <tr>
      <td>0x00000001 </td>
      <td><span class="bit">SSE3</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td>0x00000002 </td>
      <td><span class="bit">PCLMULQDQ</span> </td>
      <td>6.3 and higher </td>
    </tr>
    <tr>
      <td>0x00000004 </td>
      <td><span class="bit">DTES64</span> </td>
      <td>6.2 and higher (x86 only) </td>
    </tr>
    <tr>
      <td>0x00000020 </td>
      <td><span class="bit">VMX</span> </td>
      <td>6.2 and higher </td>
    </tr>
    <tr>
      <td>0x00000200 </td>
      <td><span class="bit">SSSE3</span> </td>
      <td>6.3 and higher </td>
    </tr>
    <tr>
      <td>0x00002000 </td>
      <td><span class="bit">CMPXCHG16B</span> </td>
      <td>6.0 and higher (x64 only) </td>
    </tr>
    <tr>
      <td>0x00010000 </td>
      <td>Reserved </td>
      <td>6.0 only </td>
    </tr>
    <tr>
      <td>0x02000000 </td>
      <td><span class="bit">AESNI</span> </td>
      <td>6.3 and higher </td>
    </tr>
    <tr>
      <td>0x04000000 </td>
      <td><span class="bit">XSAVE</span> </td>
      <td>6.1 and higher </td>
    </tr>
    <tr>
      <td>0x08000000 </td>
      <td><span class="bit">OSXSAVE</span> </td>
      <td>10.0 and higher </td>
    </tr>
    <tr>
      <td>0x10000000 </td>
      <td><span class="bit">AVX</span> </td>
      <td>10.0 and higher </td>
    </tr>
    <tr>
      <td>0x40000000 </td>
      <td><span class="bit">RDRAND</span> </td>
      <td>6.3 and higher </td>
    </tr>
    <tr>
      <td>0x80000000 </td>
      <td>Reserved </td>
      <td>6.0 and higher </td>
    </tr>
  </table>
  <!-- h2><span class="bit">SSE3</span> (Bit 0) </h2>
  <p>Tested for <span class="internal routine">SymCryptDetectCpuFeaturesByCpuid</span>. </p>
  <p>This bit translates to 0x00080000 (bit 19) in the <span class="member">
  FeatureFlags</span> member of the <span class="struct">KPRCB</span> for 64-bit Windows version 6.0 and higher. </p>
  <h2><span class="bit">PCLMULQDQ</span> (Bit 1) </h2>
  <p>Tested for <span class="internal routine">SymCryptDetectCpuFeaturesByCpuid</span>. </p>
  <h2><span class="bit">DTES64</span> (Bit 2) </h2>
  <p>AMD’s documentation has this bit as reserved. </p -->
  <h2><span class="bit">MONITOR</span> (Bit 3) </h2>
  <p>The Windows kernel is not known to use this feature flag. </p>
  <h2><span class="bit">DS-CPL</span> (Bit 4) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <!-- h2><span class="bit">VMX</span> (Bit 5) </h2>
  <p>AMD’s documentation has this bit as reserved. </p>
  <p>In version 6.2 and higher, 64-bit Windows interprets this bit as a necessary 
  condition for two features on processors whose vendor string is GenuineIntel. 
  Further identification is from Model Specific Registers. The two features 
  translate to 0x04000000 and 0x08000000 in the <span class="member">FeatureBits</span> 
  in the <span class="struct">KPRCB</span>. </p -->
  <h2><span class="bit">SMX</span> (Bit 6) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <h2><span class="bit">EIST</span> (Bit 7) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <p>Early Intel documentation named this <span class="bit">EST</span>. </p>
  <h2><span class="bit">TM2</span> (Bit 8) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <!-- h2><span class="bit">SSSE3</span> (Bit 9) </h2>
  <p>Tested for <span class="internal routine">SymCryptDetectCpuFeaturesByCpuid</span>. </p -->
  <h2><span class="bit">CNXT-ID</span> (Bit 10) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <h2><span class="bit">SDBG</span> (Bit 11) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <h2><span class="bit">FMA</span> (Bit 12) </h2>
  <p>The Windows kernel is not known to use this feature flag. </p>
  <h2><span class="bit">CMPXCHG16B</span> (Bit 13) </h2>
  <p>Early Intel documentation named this <span class="bit">CX16</span>. It signifies 
  the availability of the <span class="instruction">cmpxchg16b</span> instruction. 
  The 32-bit kernel does not even look for this. The 64-bit kernel has come to regard 
  it as essential. Without it, versions 6.3 and higher of the x64 kernel stop Windows 
  with the bug check <span class="constant"><a href="../../../bugchecks/5d.htm">
  UNSUPPORTED_PROCESSOR</a></span> (0x5D). </p>
  <!-- p>This bit translates to 0x00100000 (bit 20) in the <span class="member">
  FeatureFlags</span> member of the <span class="struct">KPRCB</span> for 64-bit 
  Windows in versions 6.0 to 6.2. If the vendor is GenuineIntel, then version 6.0 
  sets the bit in the <span class="member">FeatureFlags</span> even if the bit is 
  not set in the <span class="instruction">cpuid</span> output. </p -->
  <h2><span class="bit">xTPR</span> (Bit 14) </h2>
  <p>AMD’s documentation has this bit as reserved. Current Intel documentation gives 
  “xTPR Update Control” as this bit’s mnemonic. The simpler <span class="bit">xTPR</span> 
  is from early documentation. Whatever the name, the Windows kernel is not known 
  to use this feature flag. </p>
  <h2><span class="bit">PDCM</span> (Bit 15) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <h2>Reserved Bit 16 </h2>
  <p>This bit is known to the 32-bit and 64-bit kernels for Windows Vista even though 
  Intel and AMD both have it as reserved. Provided that the vendor is GenuineIntel, 
  the bit translates to 0x00100000 (bit 20) or 0x00200000 (bit 21) in the
  <span class="member">FeatureFlags</span> member of the <span class="struct">KPRCB</span> 
  for 32-bit and 64-bit Windows respectively. If it is set for all processors, it 
  passes into the internal variable <span class="internal variable">KeFeatureFlags</span> 
  and to the <span class="constant">PF_CHANNELS_ENABLED</span> member of the
  <span class="member">ProcessorFeatures</span> array in the
  <span class="struct">KUSER_SHARED_DATA</span>. It there becomes documented by 
  Microsoft as telling that the “processor channels are enabled.” </p>
  <p>For both the 32-bit and 64-bit kernels the essential reaction to this reserved
  <span class="instruction">cpuid</span> feature flag is to set what is nowadays 
  documented as the <span class="bit">UMIP</span> bit (11) in
  <span class="register">cr4</span>. According to Intel, this now prevents the
  <span class="instruction">sgdt</span>, <span class="instruction">sidt</span>,
  <span class="instruction">sldt</span>, <span class="instruction">smsw</span> and
  <span class="instruction">str</span> instructions from executing in user mode. 
  Intel’s documentation from 2006, however, had this <span class="register">cr4</span> 
  bit as reserved. The mechanism for the 32-bit kernel sets this bit in
  <span class="register">cr4</span> bit from a callback routine to execute on each 
  processor. Symbol files name the routine as <span class="internal routine">Ki386EnableChannels</span>, 
  surely confirming that whatever was in Intel’s public documentation at the time, 
  or has been since, the 0x00010000 bit in <span class="register">ecx</span> from
  <span class="instruction">cpuid</span> leaf 1 was at least thought by Microsoft 
  to tell of processor channels. </p>
  <h2><span class="bit">PCID</span> (Bit 17) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <h2><span class="bit">DCA</span> (Bit 18) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <h2><span class="bit">SSE4.1</span> (Bit 19) </h2>
  <p>The Windows kernel is not known to use this feature flag. </p>
  <h2><span class="bit">SSE4.2</span> (Bit 20) </h2>
  <p>The Windows kernel is not known to use this feature flag. </p>
  <h2><span class="bit">x2APIC</span> (Bit 21) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <h2><span class="bit">MOVBE</span> (Bit 22) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <!-- p>Tested for <span class="internal routine">SymCryptDetectCpuFeaturesByCpuid</span>. </p -->
  <h2><span class="bit">POPCNT</span> (Bit 23) </h2>
  <p>The Windows kernel is not known to use this feature flag. </p>
  <h2><span class="bit">TSC-Deadline</span> (Bit 24) </h2>
  <p>AMD’s documentation has this bit as reserved. The Windows kernel is not known 
  to use this feature flag. </p>
  <!-- h2><span class="bit">AESNI</span> (Bit 25) </h2>
  <p>AMD literature names this bit simply as <span class="instruction">AES</span>. </p>
  <p>Tested for <span class="internal routine">SymCryptDetectCpuFeaturesByCpuid</span>. </p>
  <h2><span class="bit">XSAVE</span> (Bit 26) </h2>
  <p>As Intel says: “A value of 1 indicates that the processor supports the 
  XSAVE/XRSTOR processor extended states feature, the XSETBV/XGETBV instructions, 
  and XCR0.” </p>
  <p>See <span class="internal routine">KiGetXSaveSupportedFeatures</span> in 
  version 6.1 and higher of 64-bit Windows. </p>
  <h2><span class="bit">OSXSAVE</span> (Bit 27) </h2>
  <p>As Intel says: “A value of 1 indicates that the OS has set CR4.OSXSAVE[bit 
  18] to enable XSETBV/XGETBV instructions to access XCR0 and to support processor 
  extended state management using XSAVE/XRSTOR.” </p>
  <h2><span class="bit">AVX</span> (Bit 28) </h2>
  <p>&nbsp;</p -->
  <h2><span class="bit">F16C</span> (Bit 29) </h2>
  <p>The Windows kernel is not known to use this feature flag. </p>
  <!-- h2><span class="bit">RDRAND</span> (Bit 30) </h2>
  <p>AMD’s documentation has this bit as reserved. </p>
  <p>This bit translates to 0x00000001`00000000 (bit 32) in
  the <span class="member">FeatureFlags</span> member of the <span class="struct">
  KPRCB</span> for 64-bit Windows version 
  10.0 and higher. </p>
  <p>Tested for <span class="internal routine">SymCryptDetectCpuFeaturesByCpuid</span>. </p -->
  <h2><span class="bit">RAZ</span> (Bit 31) </h2>
  <p>Intel’s documentation has this bit as reserved but with the unusually specific 
  note that it “Always returns 0.” To AMD, it is “Reserved for use by hypervisor 
  to indicate guest status.” Reserved or not, named or not—the name
  <span class="bit">RAZ</span> is AMD’s—both the 32-bit and 64-bit kernels rely 
  on it for discovering whether Windows is running under a hypervisor. The exported 
  (but undocumented) function <span class="function">
  <a href="../../../ntoskrnl/api/hvilib/hviintel/isanyhypervisorpresent.htm">HviIsAnyHypervisorPresent</a></span> 
  is nothing but a test for this reserved bit. Given that this bit is set, executing
  <span class="instruction">cpuid</span> with <span class="register">eax</span> 
  in a range starting at 0x40000000 may then identify the hypervisor and discover 
  its capabilities, and thus influence how (or even whether) the kernel wants to 
  execute under it. </p>
  <p>Microsoft has documented this feature flag’s importance to hypervisors. The
  <span class="struct">
  <a href="../../../ntoskrnl/api/hvilib/hviintel/cpuid_result.htm">HV_CPUID_RESULT</a></span> 
  structure, which Microsoft documents in the Windows Driver Kit (WDK) for Windows 
  7, marks out bit 31 of these <span class="register">ecx</span> feature flags as
  <span class="member">VersionAndFeatures.HypervisorPresent</span>. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 2nd
    <a href="../../../../../../new/19/12.htm">January 2020</a> and was last modified 
    on 26th January 2020. </p>
    <!--webbot bot="Include" U-Include="../../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="61845" -->
  </div>
</div>

</body>

</html>
