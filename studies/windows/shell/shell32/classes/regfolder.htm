<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>RegFolder</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/shell.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="30135" endspan -->
<!--webbot bot="Include" U-Include="../../_include/sketch.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">SKETCH OF HOW RESEARCH MIGHT CONTINUE AND RESULTS BE PRESENTED
  </p>
</div>

<!--webbot bot="Include" i-checksum="5204" endspan -->
<h1>RegFolder </h1>
<p>The <span class="class">RegFolder</span> class is one of many that SHELL32 exposes 
through its exported <span class="function">DllGetClass</span> function. Instances 
can therefore be created using such well-documented COM functions as
<span class="function">CoCreateInstance</span>, by anyone who knows the CLSID:
</p>
<table>
  <tr>
    <td><span class="constant">CLSID_RegFolder</span> </td>
    <td><span class="iid">{0997898B-0713-11D2-A4AA-00C04F8EEB3E}</span> </td>
  </tr>
</table>
<p>The class implements the following interfaces: </p>
<ul>
  <li><span class="interface"><a href="../interfaces/ibackreferencedobject.htm">
  IBackReferencedObject</a></span> (version 6.00 from Windows Vista, and higher)
  </li>
  <li><span class="interface">IContextMenuCB</span> </li>
  <li><span class="interface">
  <a href="../interfaces/idelegatehostitemcontainer.htm">IDelegateHostItemContainer</a></span> 
  (version 6.00 from Windows Vista, and higher) </li>
  <li><span class="interface">
  <a href="../interfaces/iobjectwithbackreferences.htm">IObjectWithBackReferences</a></span> 
  (version 6.00 from Windows Vista, and higher) </li>
  <li><span class="interface"><a href="../interfaces/iregitemfolder.htm">IRegItemFolder</a></span> 
  (version 6.00 from Windows Vista, and higher) </li>
  <li><span class="interface">IShellFolder2</span> and its base
  <span class="interface">IShellFolder</span> </li>
  <li><span class="interface">IShellIconOverlay</span> </li>
  <li><span class="interface"><a href="../interfaces/itransferprovider.htm">ITransferProvider</a></span> 
  (version 6.00 from Windows Vista, and higher) </li>
</ul>
<p>A <span class="class">RegFolder</span> is intended to exist as an aggregated 
object. It is the inner object for the following other creatable SHELL32 classes:
</p>
<ul>
  <li><span class="class"><a href="commonplacesfolder.htm">CommonPlacesFolder</a></span><span class="draft">, implemented internally as
  <span class="class">CCommonPlaceFolder</span></span> </li>
  <li><span class="class"><a href="controlpanel.htm">ControlPanel</a></span><span class="draft">, implemented internally as
  <span class="class">CControlPanelFolder</span></span> </li>
  <li><span class="class">ControlPanelTasks</span><span class="draft">, implemented internally as
  <span class="class">CTasksFolder</span></span> </li>
  <li><span class="class"><a href="mycomputer.htm">MyComputer</a></span><span class="draft">, implemented internally as
  <span class="class">CDrivesFolder</span></span> </li>
  <li><span class="class"><a href="networkplaces.htm">NetworkPlaces</a></span><span class="draft">, implemented internally as
  <span class="class">CNetFolder</span></span> </li>
  <li><span class="class"><a href="printers.htm">Printers</a></span><span class="draft">, implemented internally as
  <span class="class">CPrinterFolder</span></span> </li>
  <li><span class="class"><a href="shelldesktop.htm">ShellDesktop</a></span><span class="draft">, implemented internally as
  <span class="class">CDesktopFolder</span></span> </li>
  <li><span class="class"><a href="usersfilesfolder.htm">UsersFilesFolder</a></span><span class="draft">, implemented internally as
  <span class="class">CUsersFilesFolder</span></span> </li>
</ul>
<p>Use of the <span class="class">RegFolder</span> class as the inner object for 
all these others gives them a common format for their PIDLs and a shared handling 
of much of their basic behaviour. For present purposes, all these outer objects 
are referred to collectively as registry folders. </p>
<h2>Namespaces </h2>
<p>Registry folders have common treatment of their namespaces. Put another way, 
there is a common mechanism for populating registry folders. This is perhaps 
even what gives the class its name, since the population is defined through 
registry settings. When each registry folder is initialised (through the
<span class="method">Initialize</span> method of its <span class="interface">
IRegItemFolder</span> interface), it can be given a registry path in which 
subkeys define items in the folder’s namespace: </p>
<table>
  <tr>
    <th>Registry Folder </th>
    <th>Registry Path for Namespace Definition </th>
  </tr>
  <tr>
    <td><span class="class">CommonPlacesFolder</span> </td>
    <td><span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\CommonPlaces\Namespace</span>
    </td>
  </tr>
  <tr>
    <td><span class="class">ControlPanel</span> </td>
    <td><span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel\NameSpace</span>
    <br>
    <span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanelWOW64\NameSpace</span>
    </td>
  </tr>
  <tr>
    <td><span class="class">ControlPanelTasks</span> </td>
    <td><span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\ApplicationsWithTasks\NameSpace</span>
    </td>
  </tr>
  <tr>
    <td><span class="class">MyComputer</span> </td>
    <td><span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace</span>
    </td>
  </tr>
  <tr>
    <td><span class="class">NetworkPlaces</span> </td>
    <td><span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\EntireNetwork\NameSpace</span>
    <br>
    <span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\NetworkNeighborhood\NameSpace</span>
    <br>
    <span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\RemoteComputer\NameSpace</span>
    </td>
  </tr>
  <tr>
    <td><span class="class">Printers</span> </td>
    <td><span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\PrintersAndFaxes\NameSpace</span>
    </td>
  </tr>
  <tr>
    <td><span class="class">ShellDesktop</span> </td>
    <td><span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace</span>
    </td>
  </tr>
  <tr>
    <td><span class="class">UsersFilesFolder</span> </td>
    <td><span class="regkey">
    Software\Microsoft\Windows\CurrentVersion\Explorer\UsersFiles\NameSpace</span>
    </td>
  </tr>
</table>
<p>Of the two namespace paths for the <span class="class">ControlPanel</span> 
class, the second applies if the current process is running as a 32-bit process 
on 64-bit Windows. For the <span class="class">NetworkPlaces</span> class, one 
namespace path is selected according to whatever is specified as the resource 
display type when initialising the object (through the <span class="method">
Initialize</span> method of its <span class="interface">IInitializeNetworkFolder</span> 
interface). The paths are listed for <span class="constant">
RESOURCEDISPLAYTYPE_ROOT</span>, <span class="constant">
RESOURCEDISPLAYTYPE_GENERIC</span> and <span class="constant">
RESOURCEDISPLAYTYPE_SERVER</span> respectively. </p>
<p>Each registry folder is initialised from </p>
<ul>
  <li>a hard-coded list of required items, which is empty for most folder 
  classes; </li>
  <li>subkeys of the namespace path in <span class="regkey">HKEY_LOCAL_MACHINE</span>;
  </li>
  <li>subkeys of the namespace path in <span class="regkey">HKEY_CURRENT_USER</span>;
  </li>
  <li>subkeys of the <span class="regkey">DelegateFolders</span> subkey of the 
  namespace path in <span class="regkey">HKEY_LOCAL_MACHINE</span>; </li>
  <li>subkeys of the <span class="regkey">DelegateFolders</span> subkey of the 
  namespace path in <span class="regkey">HKEY_CURRENT_USER</span>; </li>
  <li>subkeys of the per-session namespace path; </li>
  <li>subkeys of the <span class="regkey">DelegateFolders</span> subkey of the 
  per-session namespace path. </li>
</ul>
<p>The per-session namespace path is the same as the namespace path but relative 
to the session key instead of to the Explorer key. The session key is </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">
    HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\SessionInfo\<span class="placeholder">session</span></span>
    </td>
  </tr>
</table>
<p>in which <span class="placeholder">session</span> is a decimal representation 
of the current session ID. </p>
<h2>PIDLs </h2>
<p>Items in registry folders have a shared format when represented as an item ID 
(more formally, an <span class="struct">SHITEMID</span> structure). As with all 
such structures, the first word is the size in bytes of the ID. The bytes from 
offset 0x02 and onwards are whatever the folder wants. For registry folders, </p>
<table class="Struct">
  <tr>
    <th>Offset </th>
    <th>Size </th>
    <th>Description </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>word </td>
    <td>size of item ID, in bytes, as defined for all item IDs&nbsp; </td>
  </tr>
  <tr>
    <td>0x02 </td>
    <td>byte </td>
    <td>identifies folder class (see below) </td>
  </tr>
  <tr>
    <td>0x03 </td>
    <td>byte </td>
    <td>sort order index (see below) </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>varies </td>
    <td>item data; <br>
    interpretation varies with folder class; <br>
    presently used only for <span class="class">ControlPanel</span> items </td>
  </tr>
  <tr>
    <td>varies </td>
    <td>0x10 </td>
    <td>CLSID for item </td>
  </tr>
</table>
<p>The signature byte at offset 0x02 is convenient as an immediate description 
of the folder that contains the item: </p>
<table>
  <tr>
    <th>Identifier </th>
    <th>Folder </th>
  </tr>
  <tr>
    <td>0x1F </td>
    <td><span class="class">ShellDesktop</span> </td>
  </tr>
  <tr>
    <td>0x2E </td>
    <td><span class="class">MyComputer</span> </td>
  </tr>
  <tr>
    <td>0x4D </td>
    <td><span class="class">NetworkPlaces</span> if resource display type is 
    generic or root </td>
  </tr>
  <tr>
    <td>0x4E </td>
    <td><span class="class">NetworkPlaces</span> if resource display type is 
    server </td>
  </tr>
  <tr>
    <td>0x70 </td>
    <td><span class="class">ControlPanel</span>, but item has no item data at 
    offset 0x04 </td>
  </tr>
  <tr>
    <td>0x71 </td>
    <td><span class="class">ControlPanel</span> <br>
    <span class="class">ControlPanelTasks</span> </td>
  </tr>
  <tr>
    <td>0x72 </td>
    <td><span class="class">Printers</span> </td>
  </tr>
  <tr>
    <td>0x73 </td>
    <td><span class="class">CommonPlacesFolder</span> </td>
  </tr>
  <tr>
    <td>0x74 </td>
    <td><span class="class">UsersFilesFolder</span> </td>
  </tr>
</table>
<p>The sort order index at offset 0x03 helps determine the ordering of items in 
the folder. For required items, such as the <span class="class">MyComputer</span> 
object in the <span class="class">ShellDesktop</span> object, the sort order 
index is fixed. (Only the <span class="class">ShellDesktop</span> and
<span class="class">ControlPanel</span> clases have required items.) For other 
items, except delegates, the sort order index is read from the registry: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_CLASSES_ROOT\CLSID\{<span class="placeholder">clsid</span>}</span>
    </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">SortOrderIndex</span> </td>
  </tr>
  <tr>
    <td>Default: </td>
    <td>0x80 </td>
  </tr>
</table>
<p>The data is presumably meant to be <span class="constant">REG_DWORD</span>, 
but data of any type is accepted, to a maximum of 4 bytes. If the current 
application has the <span class="regvalue">MYCOMPUTERFIRST</span> compatibility 
flag (in the sense of the undocumented <span class="function">
<a href="../../shlwapi/api/util/getappcompatflags.htm">SHGetAppCompatFlags</a></span> 
function), then whatever is read from the registry is ignored and the sort order 
index is forced to 0x51, placing it just higher than the sort order index that 
is hard-coded for the <span class="class">MyComputer</span> object. </p>
<h3>Delegate Items </h3>
<p>The preceding description of PIDL format does not apply to items in delegate 
folders. For these, the PIDL is a <span class="struct">DELEGATEITEMID</span>. </p>
<table class="Struct">
  <tr>
    <th>Offset </th>
    <th>Size </th>
    <th>Description </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>word </td>
    <td>size of item ID, in bytes, as defined for all item IDs&nbsp; </td>
  </tr>
  <tr>
    <td>0x02 </td>
    <td>word </td>
    <td>identifies folder class (see below) </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>word </td>
    <td>size, in bytes, of delegate folder’s data for item </td>
  </tr>
  <tr>
    <td>0x06 </td>
    <td>varies </td>
    <td>delegate folder’s data for item </td>
  </tr>
  <tr>
    <td>varies </td>
    <td>0x10 </td>
    <td>the CLSID <span class="clsid">{5E591A74-DF96-48D3-8D67-1733BCEE28BA}</span>
    </td>
  </tr>
  <tr>
    <td>varies </td>
    <td>0x10 </td>
    <td>CLSID for item </td>
  </tr>
</table>
<p>The identifier at offset 0x02 is the same as in the registry folder’s own 
PIDL. The first CLSID confirms for the registry folder that this PIDL is for a 
delegate folder. Microsoft’s name for this CLSID is not known. </p>
<h2>Availability </h2>
<p>The <span class="class">RegFolder</span> class is implemented in SHELL32 version 
5.00 and higher. </p>
<!--webbot bot="Include" U-Include="_include/undoc500.htm" TAG="BODY" startspan -->

<p>Though this class dates from 1999, it was still not documented by Microsoft as 
late as the January 2007 edition of the Windows Vista Software Development Kit (SDK). 
</p>

<!--webbot bot="Include" i-checksum="1696" endspan -->
<div class="Footer">
  <p class="Dates">This page was created on 4th August 2009 and was last 
  modified on 20th August 2009. </p>
  <!--webbot bot="Include" U-Include="../../_include/c09.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="53291" endspan -->
</div>

</body>

</html>
