<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>LOADER_PARAMETER_BLOCK</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>LOADER_PARAMETER_BLOCK </h1>
  <p>The <span class="struct">LOADER_PARAMETER_BLOCK</span> (formally
  <span class="struct">_LOADER_PARAMETER_BLOCK</span>) is the structure through 
  which the kernel and HAL learn the initialisation data that was gathered by the 
  loader. </p>
  <p>Historically, and for most practical purposes even in recent Windows versions, 
  there is only ever the one instance of this structure. It is prepared by the loader 
  as its means of handing over to the kernel. When the loader calls the kernel’s 
  initialisation routine, the address of the loader block is the one argument. The 
  kernel saves the address for a while in the exported variable
  <span class="variable">KeLoaderBlock</span>. At the end of the kernel’s initialisation, 
  the structure gets freed and the variable gets cleared. During the system’s initialisation, 
  however, knowledge of this structure can be very helpful when debugging. </p>
  <h2>Availability </h2>
  <p>The <span class="struct">LOADER_PARAMETER_BLOCK</span> is ancient, being already 
  well established for Windows NT 3.1. </p>
  <h2>Documentation Status </h2>
  <p>Microsoft is not known ever to have documented the <span class="struct">LOADER_PARAMETER_BLOCK</span>.
  </p>
  <p>For many years, Microsoft’s names for the <span class="struct">LOADER_PARAMETER_BLOCK</span> 
  members were known from type information in public symbol files for the kernel 
  (and sometimes also the HAL) but only for occasional Windows versions: first for 
  Windows 2000 SP3 and SP4, and then for all releases of Windows Vista and Windows 
  7. How the type information gets into the public symbols for some versions but 
  not others is not known. </p>
  <p>Then Windows 10 brought something new. For the original Windows 10 and its 
  1511 revision, the Windows Driver Kit (WDK) supplies a header file named
  <a href="../../../source/inc/arc.htm">arc.h</a> which contains a C-language definition 
  of the <span class="struct">LOADER_PARAMETER_BLOCK</span>. This appears to be 
  Microsoft’s first formal disclosure of the structure’s layout. It comes with no 
  conditional compilation blocks for accommodating earlier versions. As supplied, 
  it is immediately useful only for programming that targets a specific release 
  of Windows 10, yet doesn’t say so. Add that the header is beneath a subdirectory 
  named “um”, presumably to mean user-mode, but that the <span class="struct">LOADER_PARAMETER_BLOCK</span> 
  is long gone by the time any user-mode software gets to execute, and one might 
  wonder if this structure’s definition was published by mistake. </p>
  <p>Still, published it is. Then, just as that seemed to be the end of disclosure, 
  perhaps forever, Microsoft’s names and types returned to the public symbol files 
  for the kernel in the 1803 release of Windows 10. </p>
  <h3>Archaeology </h3>
  <p>At the other end of the timeline, type information for the
  <span class="struct">LOADER_PARAMETER_BLOCK</span> turns out to have been published 
  by Microsoft even for version 4.0, just not in symbol files but instead in statically 
  linked libraries. One is LIBCNTPR.LIB from the Device Driver Kit (DDK) for Windows 
  NT 4.0. For no reason that is yet understood, this library’s archive of tidtable.obj 
  has unusually much type information (42KB, against 8KB for the next most), including 
  for such otherwise obscure types as the <span class="struct">LOADER_PARAMETER_BLOCK</span>. 
  Though this type information predates the kernel for the original Windows NT 4.0 
  (12th July 1996 versus 5th October), it agrees with the structure’s use as known 
  from inspection of the binary code. </p>
  <p>Arguably more interesting is a library that Microsoft supplied with source 
  code for the Dr. Watson sample in a Platform Software Development Kit (SDK) from 
  January 1998. This library is named craShlib.Lib—yes, with this mixture of upper 
  and lower case—and was built on 12th September 1997. Its archived object files 
  have type information for each of the processor architectures that Microsoft supported 
  at the time. Type information for the x86 <span class="struct">LOADER_PARAMETER_BLOCK</span> 
  is from 24th August 1997. This is months later than the build date for the Windows 
  NT 4.0 SP3 kernel (11th May 1997) but more than a year earlier than SP4 (13th 
  October 1998). From inspection of these kernels, it looks like type information 
  from this library can be taken as reliable for Windows NT 4.0 SP3. Presumably, 
  this library was distributed with some range of SDK editions, perhaps with type 
  information to find for more versions. </p>
  <p>With the archaeology broadened to type information in statically linked libraries 
  as far afield as the SDK—which, remember, is for user-mode programming and thus 
  nothing that anyone would ordinarily think relevant to a structure that isn’t 
  present even for most kernel-mode execution—it turns out that type information 
  for the <span class="struct">LOADER_PARAMETER_BLOCK</span> was pubilshed in CLFSMGMT.LIB 
  for all 32-bit versions since Windows Vista and all 64-bit versions since Windows 
  8. For no reason yet known, this type information is gone from this library in 
  the SDK for Version 2004. </p>
  <h2>Variability </h2>
  <p>Perhaps because the <span class="struct">LOADER_PARAMETER_BLOCK</span> is accessible 
  through an exported variable and is vital as shared data between the loader, kernel 
  and HAL, it was highly stable for many Windows versions, certainly in comparison 
  with other undocumented structures. Version 6.0, however, reworked the loading 
  of Windows, and then each change even of the minor version number brings a change 
  of size: </p>
  <table class="Sizes">
    <colgroup>
      <col class="Version"><col class="Size" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Version </th>
        <th>Size (x86) </th>
        <th>Size (x64) </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>3.10 to early 4.0 (before SP3) </td>
        <td>0x64 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>late 4.0 to 5.2 </td>
        <td>0x68 </td>
        <td>0xC8 </td>
      </tr>
      <tr>
        <td>6.0 </td>
        <td>0x7C </td>
        <td>0xE8 </td>
      </tr>
      <tr>
        <td>6.1 </td>
        <td>0x88 </td>
        <td>0xF0 </td>
      </tr>
      <tr>
        <td>6.2 </td>
        <td>0xA0 </td>
        <td>0x0118 </td>
      </tr>
      <tr>
        <td>6.3 </td>
        <td>0xAC </td>
        <td>0x0128 </td>
      </tr>
      <tr>
        <td>10.0 to 1709 </td>
        <td>0xBC </td>
        <td>0x0148 </td>
      </tr>
      <tr>
        <td>1803 to 2004 </td>
        <td>0xC8 </td>
        <td>0x0160 </td>
      </tr>
    </tbody>
  </table>
  <p>Some of these changes in size overstate the variability. As far as concerns 
  the structure’s own members, the growth within version 4.0 and again from 6.2 
  to 6.3 involves no additions, removals or rearrangements, just growth within the 
  member that was at the time the structure’s last. Version 6.0 brought a straightforward 
  appending of one member. The change for Version 1803 is similar but of three members. 
  Such growth only at the end allows for backwards compatibility. A new loader can 
  prepare the structure in its new layout but safely pass it to an old kernel. This 
  was indeed depended on for multi-boot configurations in the days when the one 
  NTLDR in the root directory of the bootable partition might load the kernel of 
  any earlier Windows version (if not of a later one). </p>
  <p>Version 6.0 separated the booting of Windows into a boot manager, e.g., BOOTMGR, 
  and a boot loader, e.g., WINLOAD. The boot manager selects which of the installed 
  Windows versions (or different configurations) to proceed with. Each Windows version 
  provides its own boot loader. This, not the boot manager, is what prepares the
  <span class="struct">LOADER_PARAMETER_BLOCK</span> and it only has to do so for 
  the matching kernel. Backwards compatibility is no longer an issue for the structure. 
  Changes for versions 6.1, 6.2 and 10.0 are not just from growing at the end: members 
  are inserted and removed without regard for continuity. Notably, version 6.1 inserted 
  version numbers and a size at the structure’s very start, surely to provide some 
  easy and reliable means for future kernels to validate that the structure received 
  from the loader is plausibly what that kernel expects. This defence was apparently 
  thought important enough to warrant its own bug-check, <span class="constant">
  <a href="../../../../bugchecks/0100.htm">LOADER_BLOCK_MISMATCH</a></span> (0x0100).
  </p>
  <h2>Layout </h2>
  <p>The following table of offsets, names, types for the <span class="struct">LOADER_PARAMETER_BLOCK</span> 
  is from the published C-language definition in ARC.H for the original and 1511 
  releases of Windows 10. For these and other versions, the layout is confirmed 
  or augmented from type information in public symbols and libraries, if available, 
  as described above. Names, types and offsets for all other versions are something 
  of a guess from assuming continuity except where inspection of the loader or kernel 
  shows that members have come and gone. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">ULONG OsMajorVersion;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x04 </td>
        <td>
        <pre class="source">ULONG OsMinorVersion;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">ULONG Size;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x0C </td>
        <td rowspan="2">0x0C </td>
        <td>
        <pre class="source">ULONG Reserved;</pre>
        </td>
        <td>6.1 to 10.0 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG OsLoaderSecurityVersion;</pre>
        </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td>0x00 (3.10 to 6.0); <br>
        0x10 </td>
        <td>0x00 (5.2 to 6.0); <br>
        0x10 </td>
        <td>
        <pre class="source">LIST_ENTRY LoadOrderListHead;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x08 (3.10 to 6.0); <br>
        0x18 </td>
        <td>0x10 (5.2 to 6.0); <br>
        0x20 </td>
        <td>
        <pre class="source">LIST_ENTRY MemoryDescriptorListHead;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x10 (3.10 to 6.0); <br>
        0x20 </td>
        <td>0x20 (5.2 to 6.0); <br>
        0x30 </td>
        <td>
        <pre class="source">LIST_ENTRY BootDriverListHead;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x28 </td>
        <td>0x40 </td>
        <td>
        <pre class="source">LIST_ENTRY EarlyLaunchListHead;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x30 </td>
        <td>0x50</td>
        <td>
        <pre class="source">LIST_ENTRY CoreDriverListHead;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x38 </td>
        <td>0x60 </td>
        <td>
        <pre class="source">LIST_ENTRY CoreExtensionsDriverListHead;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x40 </td>
        <td>0x70 </td>
        <td>
        <pre class="source">LIST_ENTRY TpmCoreDriverListHead;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x18 (3.10 to 6.0); <br>
        0x28 (6.1); <br>
        0x38 (6.2 to 6.3); <br>
        0x48 </td>
        <td>0x30 (5.2 to 6.0); <br>
        0x40 (6.1); <br>
        0x60 (6.2 to 6.3); <br>
        0x80 </td>
        <td>
        <pre class="source">ULONG_PTR KernelStack;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x1C (3.10 to 6.0); <br>
        0x2C (6.1); <br>
        0x3C (6.2 to 6.3); <br>
        0x4C </td>
        <td>0x38 (5.2 to 6.0); <br>
        0x48 (6.1); <br>
        0x68 (6.2 to 6.3); <br>
        0x88 </td>
        <td>
        <pre class="source">ULONG_PTR Prcb;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x20 (3.10 to 6.0); <br>
        0x30 (6.1); <br>
        0x40 (6.2 to 6.3); <br>
        0x50 </td>
        <td>0x40 (5.2 to 6.0); <br>
        0x50 (6.1); <br>
        0x70 (6.2 to 6.3); <br>
        0x90 </td>
        <td>
        <pre class="source">ULONG_PTR Process;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x24 (3.10 to 6.0); <br>
        0x34 (6.1); <br>
        0x44 (6.2 to 6.3); <br>
        0x54 </td>
        <td>0x48 (5.2 to 6.0); <br>
        0x58 (6.1); <br>
        0x78 (6.2 to 6.3); <br>
        0x98 </td>
        <td>
        <pre class="source">ULONG_PTR Thread;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x48 (6.2 to 6.3); <br>
        0x58 </td>
        <td>0x80 (6.2 to 6.3); <br>
        0xA0 </td>
        <td>
        <pre class="source">ULONG KernelStackSize;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x28 (3.10 to 6.0); <br>
        0x38 (6.1); <br>
        0x4C (6.2 to 6.3); <br>
        0x5C </td>
        <td>0x50 (5.2 to 6.0); <br>
        0x60 (6.1); <br>
        0x84 (6.2 to 6.3); <br>
        0xA4 </td>
        <td>
        <pre class="source">ULONG RegistryLength;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x2C (3.10 to 6.0); <br>
        0x3C (6.1); <br>
        0x50 (6.2 to 6.3); <br>
        0x60 </td>
        <td>0x58 (5.2 to 6.0); <br>
        0x68 (6.1); <br>
        0x88 (6.2 to 6.3); <br>
        0xA8 </td>
        <td>
        <pre class="source">PVOID RegistryBase;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x30 (3.10 to 6.0); <br>
        0x40 (6.1); <br>
        0x54 (6.2 to 6.3); <br>
        0x64 </td>
        <td>0x60 (5.2 to 6.0); <br>
        0x70 (6.1); <br>
        0x90 (6.2 to 6.3); <br>
        0xB0 </td>
        <td>
        <pre class="source">CONFIGURATION_COMPONENT_DATA *ConfigurationRoot;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x34 (3.10 to 6.0); <br>
        0x44 (6.1); <br>
        0x58 (6.2 to 6.3); <br>
        0x68 </td>
        <td>0x68 (5.2 to 6.0); <br>
        0x78 (6.1); <br>
        0x98 (6.2 to 6.3); <br>
        0xB8 </td>
        <td>
        <pre class="source">PSTR ArcBootDeviceName;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x38 (3.10 to 6.0); <br>
        0x48 (6.1); <br>
        0x5C (6.2 to 6.3); <br>
        0x6C </td>
        <td>0x70 (5.2 to 6.0); <br>
        0x80 (6.1); <br>
        0xA0 (6.2 to 6.3); <br>
        0xC0 </td>
        <td>
        <pre class="source">PSTR ArcHalDeviceName;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x3C (3.10 to 6.0); <br>
        0x4C (6.1); <br>
        0x60 (6.2 to 6.3); <br>
        0x70 </td>
        <td>0x78 (5.2 to 6.0); <br>
        0x88 (6.1); <br>
        0xA8 (6.2 to 6.3); <br>
        0xC8 </td>
        <td>
        <pre class="source">PSTR NtBootPathName;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x40 (3.10 to 6.0); <br>
        0x50 (6.1); <br>
        0x64 (6.2 to 6.3); <br>
        0x74 </td>
        <td>0x80 (5.2 to 6.0); <br>
        0x90 (6.1); <br>
        0xB0 (6.2 to 6.3); <br>
        0xD0 </td>
        <td>
        <pre class="source">PSTR NtHalPathName;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x44 (3.10 to 6.0); <br>
        0x54 (6.1); <br>
        0x68 (6.2 to 6.3); <br>
        0x78 </td>
        <td>0x88 (5.2 to 6.0); <br>
        0x98 (6.1); <br>
        0xB8 (6.2 to 6.3); <br>
        0xD8 </td>
        <td>
        <pre class="source">PSTR LoadOptions;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x48 (3.10 to 6.0); <br>
        0x58 (6.1); <br>
        0x6C (6.2 to 6.3); <br>
        0x7C </td>
        <td>0x90 (5.2 to 6.0); <br>
        0xA0 (6.1); <br>
        0xC0 (6.2 to 6.3); <br>
        0xE0 </td>
        <td>
        <pre class="source">NLS_DATA_BLOCK *NlsData;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x4C (3.10 to 6.0); <br>
        0x5C (6.1); <br>
        0x70 (6.2 to 6.3); <br>
        0x80 </td>
        <td>0x98 (5.2 to 6.0); <br>
        0xA8 (6.1); <br>
        0xC8 (6.2 to 6.3); <br>
        0xE8 </td>
        <td>
        <pre class="source">ARC_DISK_INFORMATION *ArcDiskInformation;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x50 (3.10 to 6.0); <br>
        0x60 (6.1) </td>
        <td>0xA0 (5.2 to 6.0); <br>
        0xB0 (6.1) </td>
        <td>
        <pre class="source">PVOID OemFontFile;</pre>
        </td>
        <td>3.10 to 6.1 </td>
      </tr>
      <tr>
        <td>0x54 (3.10 to 6.0) </td>
        <td>0xA8 (5.2 to 6.0) </td>
        <td>
        <pre class="source">SETUP_LOADER_BLOCK *SetupLoaderBlock;</pre>
        </td>
        <td>3.10 to 6.0 </td>
      </tr>
      <tr>
        <td rowspan="2">0x58 (3.10 to 6.0); <br>
        0x64 (6.1); <br>
        0x74 (6.2 to 6.3); <br>
        0x84 </td>
        <td rowspan="2">0xB0 (5.2 to 6.0); <br>
        0xB8 (6.1); <br>
        0xD0 (6.2 to 6.3); <br>
        0xF0 </td>
        <td>
        <pre class="source">ULONG Spare1;</pre>
        </td>
        <td>3.10 to 4.0 </td>
      </tr>
      <tr>
        <td>
        <pre class="source"><a href="loader_parameter_extension/index.htm">LOADER_PARAMETER_EXTENSION</a> *Extension;</pre>
        </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td>0x5C (3.10 to 6.0); <br>
        0x68 (6.1); <br>
        0x78 (6.2 to 6.3); <br>
        0x88 </td>
        <td>0xB8 (5.2 to 6.0); <br>
        0xC0 (6.1); <br>
        0xD8 (6.2 to 6.3); <br>
        0xF8 </td>
        <td>
        <pre class="source">union {
    /*  changing members, see below  */
} u;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x68 (6.0); <br>
        0x74 (6.1); <br>
        0x84 (6.2 to 6.3); <br>
        0x94 </td>
        <td>0xC8 (6.0); <br>
        0xD0 (6.1); <br>
        0xE8 (6.2 to 6.3); <br>
        0x0108 </td>
        <td>
        <pre class="source"><a href="firmware_information_loader_block.htm">FIRMWARE_INFORMATION_LOADER_BLOCK</a> FirmwareInformation;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0xBC </td>
        <td>0x0148 </td>
        <td>
        <pre class="source">PSTR OsBootstatPathName;</pre>
        </td>
        <td>1803 and higher </td>
      </tr>
      <tr>
        <td>0xC0 </td>
        <td>0x0150 </td>
        <td>
        <pre class="source">PSTR ArcOSDataDeviceName;</pre>
        </td>
        <td>1803 and higher </td>
      </tr>
      <tr>
        <td>0xC4 </td>
        <td>0x0158 </td>
        <td>
        <pre class="source">PSTR ArcWindowsSysPartName;</pre>
        </td>
        <td>1803 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>The only <span class="member">OsLoaderSecurityVersion</span> that is yet known 
  is 1. The briefly published ARC.H shows that Microsoft defines this symbolically 
  as <span class="constant">OSLOADER_SECURITY_VERSION_CURRENT</span>. </p>
  <p>The name <span class="member">Spare1</span>, known with certainty from type 
  information for version 4.0, invites the question of whether there was a
  <span class="member">Spare0</span> or <span class="member">Spare2</span>. The 
  latter looks impossible: it surely would follow <span class="member">Spare1</span>, 
  not precede it, but all eight bytes that follow in version 4.0 have the same use 
  all the way back to version 3.10. If a <span class="member">Spare0</span> ever 
  was defined, it may have been in the space that is later given to
  <span class="member">SetupLoaderBlock</span>. This certainly is defined for version 
  4.0, but unlike for all other members no use is yet known of it in version 3.10 
  (by NTLDR, SETUPLDR or the kernel). </p>
  <p>The three new members for the 1803 release elaborate the ancient
  <span class="member">ArcBootDeviceName</span> and <span class="member">ArcHalDeviceName</span> 
  members, now adding ARC paths for the Boot Status Data (BSD) log and for whatever 
  devices are given by the <span class="bcdopt">osdatadevice</span> and
  <span class="bcdopt">windowssyspart</span>
  <a href="../../../../../../../notes/windows/boot/bcd/elements.htm">boot options</a>.
  </p>
  <h3>Processor-Specific Loader Blocks </h3>
  <p>The <span class="member">u</span> union is of small structures for each of 
  the different processor architectures that were supported at the time. This support 
  was wider in the early versions, but which processors had explicit support in 
  this union—or even if it was originally a union—cannot be known from any inspection 
  of only the x86 and x64 binaries, and is therefore left alone for these notes. 
  It is even a guess that there must always have been an <span class="member">I386</span> 
  member. Other members are known with certainty only for the incomplete range of 
  versions for which type information is available: </p>
  <table class="Struct">
    <colgroup>
      <col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
        <pre class="source"><a href="i386_loader_block.htm">I386_LOADER_BLOCK</a> I386;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>
        <pre class="source">MIPS_LOADER_BLOCK Mips;</pre>
        </td>
        <td>4.0 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ALPHA_LOADER_BLOCK Alpha;</pre>
        </td>
        <td>4.0, 5.0, 6.0 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">PPC_LOADER_BLOCK Ppc;</pre>
        </td>
        <td>4.0 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ARM_LOADER_BLOCK Arm;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>
        <pre class="source">IA64_LOADER_BLOCK Ia64;</pre>
        </td>
        <td>5.0, 6.0 to 6.2 </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 28th
    <a href="../../../../../../../new/16/04.htm">April 2016</a> and was last modified 
    on 19th <a href="../../../../../../../new/23/01.htm">January 2023</a>. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1623.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4941" -->
  </div>
</div>

</body>

</html>
