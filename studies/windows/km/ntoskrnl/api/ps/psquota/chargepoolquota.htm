<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>PsChargePoolQuota</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>PsChargePoolQuota </h1>
<p>This function charges a process for its use of memory from either type of pool.
</p>
<h2>Declaration </h2>
<pre class="source">VOID
PsChargeProcessPoolQuota (
    <a href="../../../inc/ntos/ps/eprocess/index.htm">EPROCESS</a> *Process,
    POOL_TYPE PoolType,
    SIZE_T Amount);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">Process</span> argument is the address of the process 
that is to be charged. </p>
<p>The <span class="argument">PoolType</span> is either <span class="constant">NonPagedPool</span> 
(0) or <span class="constant">PagedPool</span> (1), to denote the type of pool usage 
to charge the process for. Or so seems to be the intention nowadays and the assumption 
originally. See notes below. </p>
<p>The <span class="argument">Amount</span> argument is the amount, in bytes, to 
charge. </p>
<h3>Return Value </h3>
<p>That this function returns at all means success. To fail, it raises an exception.
</p>
<p>Nowadays, the explicitly raised exception code for failure, in contrast to 
faulting, is <span class="constant">STATUS_QUOTA_EXCEEDED</span> (0xC0000044). If 
given suitable input, versions 5.1 and 5.2 may explicitly raise
<span class="constant">STATUS_PAGEFILE_QUOTA_EXCEEDED</span> (0xC000012C). Also 
depending on input, these and older versions may cause other exceptions 
as unhandled faults. See notes below. </p>
<h2>Availability </h2>
<p>The <span class="function">PsChargePoolQuota</span> function is exported by name 
from the kernel in all versions, i.e., 3.10 and higher. </p>
<h2>Documentation Status </h2>
<p>The first known documentation of <span class="function">PsChargePoolQuota</span> 
is in the Installable File System (IFS) Kit for Windows 2000. Microsoft’s documentation 
does not date the function’s availability. Since at least the Windows Driver Kit 
(WDK) for Windows Vista, the function’s declaration in NTIFS.H is in a conditional 
compilation block that restricts the function’s availability to Windows 2000 and 
higher. </p>
<h3>Documentation Errors </h3>
<p>Even today, 17th October 2017, Microsoft’s documentation states plainly that 
the <span class="argument">PoolType</span> can be not just
<span class="constant">NonPagedPool</span> (0) or <span class="constant">PagedPool</span> 
(1) but also <span class="constant">NonPagedPoolCacheAligned</span> (4) or
<span class="constant">PagedPoolCacheAligned</span> (5). It compounds this 
misinformation by specifying two more, <span class="constant">
NonPagedPoolMustSucceed</span> (2) and <span class="constant">
NonPagedPoolCacheAlignedMustS</span> (6), as obsolete and thus as having once 
worked even if they “should no longer be used”. In version 6.0 and higher, 
all these higher values—and, indeed, all values other than <span class="constant">PagedPool</span>—select 
the non-paged pool. Though this may charge the amount against the wrong quota, i.e., 
non-paged when paged was intended, at least it’s not immediately harmful. Before 
version 6.0, calling the function with anything 
other than <span class="constant">NonPagedPool</span> or <span class="constant">
PagedPool</span> can cause undefined behaviour. </p>
<p>It’s entirely possible that these quirks never have been seen in real-world practice, 
simply because nobody ever does take the documentation at its word and call the 
function with pool types other than <span class="constant">NonPagedPool</span> and
<span class="constant">PagedPool</span>. Some of the undefined behaviour that can 
result from “bad” input before version 6.0 would anyway have been hidden by the 
arguably poor design of raising an exception to show failure. If the undefined behaviour is 
an access violation while the function executes, in contrast to corruption that 
isn’t noticed until possibly much later, then the fault will show as an 
exception and plausibly not get 
distinguished from failure. </p>
<h2>Behaviour </h2>
<p>In version 5.1 and higher, the <span class="function">PsChargePoolQuota</span> 
function is superseded by <span class="function">
<a href="chargeprocesspoolquota.htm">PsChargeProcessPoolQuota</a></span> or would 
surely be said to be except that the latter is not documented. The old function 
calls the new with the same arguments but with the one extra step that a negative
<span class="type">NTSTATUS</span> from the new function is not returned as an error 
code but is instead raised as an exception. </p>
<p>Conspicuously, Microsoft’s AFD.SYS and MSFS.SYS drivers call the documented
<span class="function">PsChargePoolQuota</span> in version 5.0 but the undocumented
<span class="function">PsChargeProcessPoolQuota</span> or even
<span class="function"><a href="chargeprocesspagedpoolquota.htm">PsChargeProcessPagedPoolQuota</a></span> 
in version 5.1 and ever since. Indeed, no later Microsoft driver that charges a 
pool quota, as does HTTP.SYS for instance, uses the documented function. If avoiding 
the exception on failure is useful for Microsoft’s driver programmers, why is it 
kept from other programmers? </p>
<p>For versions 5.1 and higher, description of the old <span class="function">PsChargePoolQuota</span> 
just by reference to the new <span class="function">PsChargeProcessPoolQuota</span> 
might pass as complete. But it’s as well to collect here, with the old but documented 
function, the different interpretations of the <span class="argument">PoolType</span> 
argument through the whole history. </p>
<h3>Pool Type </h3>
<p>Versions 3.10 to 5.0 simply assume that <span class="argument">PoolType</span> 
is <span class="constant">NonPagedPool</span> or <span class="constant">PagedPool</span>. 
The function operates on <span class="struct">EPROCESS</span> and
<span class="struct"><a href="block.htm">EPROCESS_QUOTA_BLOCK</a></span> members 
such as <span class="member">QuotaPoolUsage</span> which are arrays with only two elements, 
one for each pool type. When called with higher values for
<span class="argument">PoolType</span>, the function will read or write beyond one 
or another such array. This access may be at an invalid address and cause an exception 
immediately, but it may 
instead corrupt memory, with effects that may not be apparent until long after the 
functions returns. </p>
<p>Versions 5.1 and 5.2 interpret <span class="argument">PoolType</span> as if from 
the <span class="enum"><a href="type.htm">PS_QUOTA_TYPE</a></span> enumeration and 
simply assume that it is one of <span class="constant">PsNonPagedPool</span> (0),
<span class="constant">PsPagedPool</span> (1) or <span class="constant">PsPageFile</span> 
(2). In these versions, <span class="struct">EPROCESS</span> members such as
<span class="member">QuotaPoolUsage</span> are extended to three elements, one for 
each quota type, and the <span class="struct">EPROCESS_QUOTA_BLOCK</span> has a
<span class="member">QuotaEntry</span> member that is an array of three
<span class="struct"><a href="entry.htm">EPROCESS_QUOTA_ENTRY</a></span> structures. 
When called with a higher <span class="argument">PoolType</span>, the function will 
read or write beyond one or another of these arrays, again with generally unpredictable 
consquences. </p>
<p>Defence against higher values of <span class="argument">PoolType</span> eventually 
came with version 6.0. As noted above, higher values are not rejected but everything 
other than <span class="constant">PagedPool</span> is treated as
<span class="constant">NonPagedPool</span>. How Microsoft eventually limited the
<span class="argument">PoolType</span> without making some corresponding change 
in the documentation of the function may forever be a mystery. </p>
<div class="Footer">
  <p class="Dates">This page was created on 17th
  <a href="../../../../../../../new/17/10.htm">October 2017</a> and was last modified 
  on 13th November 2017. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c17.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6466" -->
</div>

</body>

</html>
