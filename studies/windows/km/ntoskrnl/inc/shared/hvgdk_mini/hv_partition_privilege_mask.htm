<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>HV_PARTITION_PRIVILEGE_MASK</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>HV_PARTITION_PRIVILEGE_MASK </h1>
  <p>The <span class="union">HV_PARTITION_PRIVILEGE_MASK</span> (formally
  <span class="union">_HV_PARTITION_PRIVILEGE_MASK</span>) collects the flags that 
  a Microsoft-compatible hypervisor’s <span class="instruction">
  <a href="../../../../cpu/cpuid/index.htm">cpuid</a></span> leaf 0x40000003 produces 
  in the <span class="register">eax</span> and <span class="register">ebx</span> 
  registers. </p>
  <h2>Availability </h2>
  <p>The <span class="union">HV_PARTITION_PRIVILEGE_MASK</span> is defined for version 
  6.0 and higher. </p>
  <p>Being only part of the output from the corresponding
  <span class="instruction">cpuid</span> leaf, the <span class="union">HV_PARTITION_PRIVILEGE_MASK</span> 
  has all along been nested in a structure that has the whole output. Specifically, 
  it is the type of the <span class="member">PartitionPrivileges</span> in: </p>
  <ul>
    <li>the unnamed structure for the <span class="member">MsHvFeatures</span> member 
    of the <span class="union"><a href="hv_cpuid_result.htm">HV_CPUID_RESULT</a></span> 
    in versions 6.0 to 6.2; </li>
    <li>the <span class="struct"><a href="hv_hypervisor_features.htm">HV_HYPERVISOR_FEATURES</a></span> 
    structure in version 6.3; </li>
    <li>the <span class="struct"><a href="hv_x64_hypervisor_features.htm">HV_X64_HYPERVISOR_FEATURES</a></span> 
    in version 10.0 and higher (both 32-bit and 64-bit, despite the name). </li>
  </ul>
  <p>The distinctiveness of the partition privileges in <span class="register">eax</span> 
  and <span class="register">ebx</span> has long been important enough to Microsoft’s 
  programmers that they have an inline routine that retrieves just the partition 
  privileges rather than the whole feature set that <span class="instruction">cpuid</span> 
  leaf 0x40000003 produces in <span class="register">eax</span>,
  <span class="register">ebx</span>, <span class="register">ecx</span> and
  <span class="register">edx</span>. Public symbol files for the kernel, even as 
  recently as for the 2004 edition of Windows 10, confirm that this inline routine 
  is </p>
  <pre class="source">VOID HviGetPartitionPrivileges (HV_PARTITION_PRIVILEGE_MASK *);</pre>
  <h2>Documentation Status </h2>
  <p>The <span class="union">HV_PARTITION_PRIVILEGE_MASK</span> is documented in 
  the Windows Driver Kit (WDK) for Windows 7, which was the last to have documentation 
  included. This kit also provides a C-language definition in the HVGDK.H header 
  file. Except that documentation continued to a separately downloadable package 
  for merging into Visual Studio 2012, later kits have neither the documentation 
  nor the header. A search through Google today, 12th November 2016, produces just 
  five results for the name, none from Microsoft. </p>
  <p>A C-language definition of <span class="struct">HV_PARTITION_PRIVILEGE_MASK</span> 
  is presented in the text of the
  <a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/reference/tlfs">
  Hypervisor Top-Level Functional Specification</a> (TLFS). It is adapted, not simply 
  reproduced, from what Microsoft apparently uses in its own programming, but it 
  is helpfully followed by a table of descriptions that are more than just an English 
  rewording of the symbolic names. </p>
  <p>That said, the Specification that is offered at Microsoft’s website today, 
  12th November 2016, as the most recent version is a PDF that is three years old 
  (version 4.0b, dated August 2013). Flags that were added for Windows 10 were left 
  undocumented in the Specification until version 5.0a, dated February 2017. By 
  then, one flag that had been documented was marked instead as Reserved. The reality 
  behind the superficially fine words of the Microsoft Open Specification Promise 
  is that the Hyper-V implementation, and presumably Microsoft’s use of it to Microsoft’s 
  advantage for Microsoft’s purposes, runs ahead of the documentation that Microsoft 
  opens for general use. </p>
  <h2>Layout </h2>
  <p>The <span class="union">HV_PARTITION_PRIVILEGE_MASK</span> is 8 bytes in both 
  32-bit and 64-bit Windows. Formally, the <span class="union">HV_PARTITION_PRIVILEGE_MASK</span> 
  is a union of an 8-byte integer and a structure of 8-byte bit fields. The integer 
  eases the accessing of all flags together: </p>
  <pre class="source">union {
    UINT64 AsUINT64;
    struct {
        /*  changing bit fields, see below  */
    };
};</pre>
  <p>Of most interest, of course, are the bit fields. These change as Microsoft’s 
  hypervisor becomes ever more capable. Masks and definitions are from: type information 
  in a statically linked library named CLFSMGMT.LIB for (32-bit) Windows Vista; 
  the published C-language definition for Windows 7; and type information in symbol 
  files for URLMON.DLL in Windows 8 and for the kernel in Windows 8.1 and higher.
  </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td rowspan="2">0x00000000`00000001 </td>
        <td>
        <pre class="source">UINT64 AccessVpRunTimeMsr : 1;</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessVpRunTimeReg : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00000002 </td>
        <td>
        <pre class="source">UINT64 AccessPartitionReferenceCounter : 1;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000000`00000002 (6.0); <br>
        0x00000000`00000004 </td>
        <td>
        <pre class="source">UINT64 AccessSynicMsrs : 1;</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessSynicRegs : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000000`00000008 </td>
        <td>
        <pre class="source">UINT64 AccessSyntheticTimerMsrs : 1;</pre>
        </td>
        <td>6.1 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessSyntheticTimerRegs : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000000`00000010 </td>
        <td>
        <pre class="source">UINT64 AccessApicMsrs : 1;</pre>
        </td>
        <td>6.1 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessIntrCtrlRegs : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00000020 </td>
        <td>
        <pre class="source">UINT64 AccessHypercallMsrs : 1;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00000040 </td>
        <td>
        <pre class="source">UINT64 AccessVpIndex : 1;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000000`00000080 </td>
        <td>
        <pre class="source">UINT64 AccessResetMsr : 1;</pre>
        </td>
        <td>6.1 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessResetReg : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000000`00000100 </td>
        <td>
        <pre class="source">UINT64 AccessStatsMsr : 1;</pre>
        </td>
        <td>6.1 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessStatsReg : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00000200 </td>
        <td>
        <pre class="source">UINT64 AccessPartitionReferenceTsc : 1;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000000`00000400 </td>
        <td>
        <pre class="source">UINT64 AccessGuestIdleMsr : 1;</pre>
        </td>
        <td>6.1 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessGuestIdleReg : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000000`00000800 </td>
        <td>
        <pre class="source">UINT64 AccessFrequencyMsrs : 1;</pre>
        </td>
        <td>6.2 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessFrequencyRegs : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000000`00001000 </td>
        <td>
        <pre class="source">UINT64 AccessDebugMsrs : 1;</pre>
        </td>
        <td>6.2 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessDebugRegs : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00002000 </td>
        <td>
        <pre class="source">UINT64 AccessReenlightenmentControls : 1;</pre>
        </td>
        <td>1607 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00004000 </td>
        <td>
        <pre class="source">UINT64 AccessRootSchedulerReg : 1;</pre>
        </td>
        <td>1709 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00008000 </td>
        <td>
        <pre class="source">UINT64 AccessTscInvariantControls : 1;</pre>
        </td>
        <td>2004 and higher </td>
      </tr>
      <tr>
        <td rowspan="6">&nbsp;</td>
        <td>
        <pre class="source">UINT64 Reserved1 : 30;</pre>
        </td>
        <td>6.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 Reserved1 : 21;</pre>
        </td>
        <td>6.1 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 Reserved1 : 19;</pre>
        </td>
        <td>6.3 to 1511 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 Reserved1 : 18;</pre>
        </td>
        <td>1607 to 1703 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 Reserved1 : 17;</pre>
        </td>
        <td>1709 to 1903 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 Reserved1 : 16;</pre>
        </td>
        <td>2004 and higher </td>
      </tr>
      <tr>
        <td>0x00000001`00000000 </td>
        <td>
        <pre class="source">UINT64 CreatePartitions : 1;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000002`00000000 </td>
        <td>
        <pre class="source">UINT64 AccessPartitionId : 1;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000004`00000000 </td>
        <td>
        <pre class="source">UINT64 AccessMemoryPool : 1;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000008`00000000 </td>
        <td>
        <pre class="source">UINT64 AdjustMessageBuffers : 1;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000010`00000000 </td>
        <td>
        <pre class="source">UINT64 PostMessages : 1;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000020`00000000 </td>
        <td>
        <pre class="source">UINT64 SignalEvents : 1;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000040`00000000 </td>
        <td>
        <pre class="source">UINT64 CreatePort : 1;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000080`00000000 </td>
        <td>
        <pre class="source">UINT64 ConnectPort : 1;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000100`00000000 (6.0) </td>
        <td>
        <pre class="source">UINT64 IteratePhysicalHardware : 1;</pre>
        </td>
        <td>6.0 only </td>
      </tr>
      <tr>
        <td>0x00000200`00000000 (6.0); <br>
        0x00000100`00000000 </td>
        <td>
        <pre class="source">UINT64 AccessStats : 1;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">&nbsp;</td>
        <td>
        <pre class="source">UINT64 Reserved2 : 22;</pre>
        </td>
        <td>6.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 Reserved2 : 2;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x00000800`00000000 </td>
        <td>
        <pre class="source">UINT64 Debugging : 1;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x00001000`00000000 </td>
        <td>
        <pre class="source">UINT64 CpuManagement : 1;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x00002000`00000000 </td>
        <td>
        <pre class="source">UINT64 ConfigureProfiler : 1;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00004000`00000000 </td>
        <td>
        <pre class="source">UINT64 EnableExpandedStackwalking : 1;</pre>
        </td>
        <td>6.3 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 AccessVpExitTracing : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00008000`00000000 </td>
        <td>
        <pre class="source">UINT64 EnableExtendedGvaRangesForFlushVirtualAddressList : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00010000`00000000 </td>
        <td>
        <pre class="source">UINT64 AccessVsm : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00020000`00000000 </td>
        <td>
        <pre class="source">UINT64 AccessVpRegisters : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>
        <pre class="source">UINT64 UnusedBit : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00080000`00000000 </td>
        <td>
        <pre class="source">UINT64 FastHypercallOutput : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00100000`00000000 </td>
        <td>
        <pre class="source">UINT64 EnableExtendedHypercalls : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00200000`00000000 </td>
        <td>
        <pre class="source">UINT64 StartVirtualProcessor : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00400000`00000000 </td>
        <td>
        <pre class="source">UINT64 Isolation : 1;</pre>
        </td>
        <td>1809 and higher </td>
      </tr>
      <tr>
        <td rowspan="4">&nbsp;</td>
        <td>
        <pre class="source">UINT64 Reserved3 : 18;</pre>
        </td>
        <td>6.1 to 6.2 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 Reserved3 : 17;</pre>
        </td>
        <td>6.3 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 Reserved3 : 10;</pre>
        </td>
        <td>10.0 to 1803 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT64 Reserved3 : 9;</pre>
        </td>
        <td>1809 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Comments in the C-language definition from Windows 7 make clear that there 
  has all the while been a logic to which of the 8-byte bit fields are in which 
  dword. The low dword, i.e., the output in <span class="register">eax</span>, provides 
  for “Access to virtual MSRs” but the output in <span class="register">ebx</span> 
  is for “Access to hypercalls”. </p>
  <p>Some abbreviations are perhaps not well-known: Vp is Virtual processor; Synic 
  is Synthetic Interrupt Controller. </p>
  <p>A CLFSMGMT.LIB that is targeted for Windows 7 does not define
  <span class="member">AccessGuestIdleMsr</span> or <span class="member">ConfigureProfiler</span>. 
  They may have been defined only shortly before the final build for Windows 7: 
  the library in the Windows 7 SDK was built a month before the Windows 7 kernel 
  (11th June 2009 versus 14th July). </p>
  <p>Though <span class="member">ConfigureProfiler</span> dates from Windows 7 and 
  remains defined according to the symbol files, the TLFS version 4.0b dated August 
  2013 has it in the C-language definition but not among the plain-text descriptions, 
  and all later TLFS versions have it merely as Reserved even in the C-language 
  definition. </p>
  <p>The original Windows 10 renamed most of the bits for <span class="register">
  eax</span>, mostly on the pattern of changing Msr to Reg, but added none. For
  <span class="register">ebx</span>, by contrast, one flag was repurposed and six 
  were added. The <span class="member">EnableExpandedStackwalking</span> flag had 
  anyway been added only recently (for Windows 8.1). The TLFS version 4.0b had it 
  too in the C-language definition but not among the plain-text descriptions. In 
  Windows 10, it is instead <span class="member">AccessVpExitTracing</span> and 
  again all later TLFS versions denote it as Reserved in the C-language definition.
  </p>
  <p>Of the additions for the original Windows 10, <span class="member">EnableExtendedGvaRangesForFlushVirtualAddressList</span> 
  and <span class="member">FastHypercallOutput</span> similarly have their names 
  replaced by Reserved in the C-language definition and <span class="member">AccessVpRegisters</span> 
  is allowed in the definiton but has no descriptive text even as late as the TLFS 
  version 5.0c dated July 2018. That version is too early for
  <span class="member">Isolation</span>, which isn’t in the symbol files until the 
  second half-yearly release for 2018, but it is omitted entirely even from the 
  TLFS version 6.0b dated February 2020 which is the latest I have found at Microsoft’s 
  website today, 15th November 2022. </p>
  <p>For <span class="register">eax</span>, the <span class="member">AccessReenlightenmentControls</span> 
  flag is in the symbol files for the update from mid-2016 but gets no mention in 
  the TLFS version 5.0a dated February 2017. It scrapes into the C-language definition 
  in the TLFS version 5.0c dated July 2018. It got a plain-text description in time 
  for the TLFS version 6.0b dated February 2020. Even this version says nothing 
  of <span class="member">AccessRootSchedulerReg</span>, which has been in the symbol 
  files since late 2017. The <span class="member">AccessTscInvariantControls</span> 
  flag is new for the first half-yearly release of 2020: when might documentation 
  be expected? </p>
  <div class="Footer">
    <p class="Dates">This page was created on 12th
    <a href="../../../../../../../new/16/11.htm">November 2016</a> and was last 
    modified on 10th December 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
