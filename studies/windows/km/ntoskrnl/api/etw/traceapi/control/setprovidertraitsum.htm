<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Set Provider Traits</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="42787" -->
<h1>Set Provider Traits </h1>
<p>When given 0x1E as its <span class="argument">FunctionCode</span> argument, the
<span class="function"><a href="index.htm">NtTraceControl</a></span> function in 
version 10.0 and higher set traits for a provider. Microsoft’s name for this function 
code is not known. This note deals only with the function’s behaviour that is specific 
to this function code. The function’s general behaviour is here taken as assumed 
knowledge. </p>
<h2>Access </h2>
<p>Well-behaved user-mode software does not call <span class="function">NtTraceControl</span>. 
The documented user-mode API for reaching this functionality is
<span class="function">EventSetInformation</span>, which is exported by name from 
ADVAPI32.DLL in version 6.2 and higher, though only ever as a forward to the undocumened 
NTDLL function <span class="function">EtwEventSetInformation</span>. These higher-level 
functions vary their behaviour according to an <span class="argument">InformationClass</span> 
argument. The case that sets provider traits is <span class="constant">EventProviderSetTraits</span> 
(2). Before version 10.0, this case is not supported. </p>
<p>Kernel-mode software does not call <span class="function">NtTraceControl</span> 
to set provider traits. The documented API is more efficient (and behaves a little 
differently). It is <span class="function">EtwSetInformation</span>, which is exported 
by name from the kernel in version 10.0 and higher. Microsoft declares it in WDM.H 
but does not document it. The kernel-mode function takes the same
<span class="argument">InformationClass</span> argument. For
<span class="constant">EventProviderSetTraits</span>, it cuts through to a similar 
internal routine as does <span class="function">NtTraceControl</span> from user 
mode. Kernel-mode access through <span class="function">NtTraceControl</span> is 
not just unwanted but is even unexpected: the handle that is expected in the input 
(see below) has its access checked as if for a user-mode caller and the traits information 
that is pointed to from this input is required to be in user-mode address space.
</p>
<h2>Behaviour </h2>
<p>If the input buffer does not provide exactly 0x18 bytes or the output buffer 
does not allow for between 0x78 and 0x00010000 bytes inclusive, the function returns
<span class="constant">STATUS_INVALID_PARAMETER</span>. </p>
<p>Though Microsoft surely has a structure for the expected input, its name is not 
known. It has the same size in both 32-bit and 64-bit Windows because its handle 
and pointer are padded to 64 bits: </p>
<table class="Struct">
  <tr>
    <th>Offset </th>
    <th>Description </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>handle to event registration object </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>address of traits information </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>16-bit size of traits information </td>
    <td>10.0 and higher </td>
  </tr>
</table>
<p>Traits information is required. If the address is <span class="constant">NULL</span> 
or the size is zero, the function returns <span class="constant">STATUS_INVALID_PARAMETER</span>. 
The handle must refer to an event registration object, i.e., an
<span class="struct"><a href="../../register/reg_entry/index.htm">ETW_REG_ENTRY</a></span>, 
that grants <span class="constant">TRACELOG_REGISTER_GUIDS</span> access to user-mode 
callers. Failure to reference an event registration object from the supposed handle 
is failure for the function. Provider traits are new functionality which is not 
back-fitted to classic providers. if the registration is for a classic provider, 
the function returns <span class="constant">STATUS_INVALID_PARAMETER</span>. Traits 
can be set only once for each registration. (This is even documented in almost exactly 
those words.) If the registration already has traits, the function returns
<span class="constant">STATUS_UNSUCCESSFUL</span>. </p>
<p>The traits information must be in user-mode address space, else the function 
returns <span class="constant">STATUS_ACCESS_VIOLATION</span>. All the function’s 
access to the traits information is subject to exception handling. The traits information 
is eventually to be saved in paged pool pointed to by the <span class="member">Traits</span> 
member of the <span class="struct">ETW_REG_ENTRY</span>. The form is an
<span class="struct"><a href="../../provtraits/provider_traits.htm">ETW_PROVIDER_TRAITS</a></span> 
structure as the fixed-size header to a copy of the given traits information. If 
the function cannot get this memory for the header and copy, it returns
<span class="constant">STATUS_INSUFFICIENT_RESOURCES</span>. </p>
<p>The traits information begins with a 16-bit size and a null-terminated string 
of single-byte characters. There may then be any number of descriptors of individual 
traits. Each has its own 16-bit size and 8-bit type (from the <span class="enum">
ETW_PROVIDER_TRAIT_TYPE</span> enumeration), to be followed immediately by type-specific 
data. The function returns <span class="constant">STATUS_FILE_CORRUPT_ERROR</span> 
if any of the following are true: </p>
<ul>
  <li>the size in the input is not at least three (for the 16-bit size and null 
  byte) or does not exactly equal the size at the start of the traits information;
  </li>
  <li>there is no null byte in what remains of the traits information; </li>
  <li>the sizes, if any, of the individual traits do not exactly account for the 
  size from the input. </li>
</ul>
<p>When the same traits are set for multiple provider registrations, the kernel 
keeps just the one <span class="struct">ETW_PROVIDER_TRAITS</span>. The kernel keeps 
a tree of these structures for different traits. If it turns out that the traits 
are already in the tree, then the existing structure is used instead: its reference 
count is incremented and the newly created structure is freed. Whichever structure 
is used, its address goes into the registration as the <span class="member">Traits</span> 
member. If this has got set meanwhile, the function returns
<span class="constant">STATUS_UNSUCCESSFUL</span>. </p>
<p>In the original Windows 10, the only provider trait that yet matters to the kernel 
is that which assigns the registration to a provider group. For this, the 8-bit 
type is <span class="constant">EtwProviderTraitTypeGroup</span> (1) and the type-specific 
data is the <span class="struct">GUID</span> of the group, making a total size of 
0x13 bytes for the trait. Adding a registration to a provider group is non-trivial 
and is left to be presented elsewhere. Failure to add the registration to the given 
provider group is failure for the function. </p>
<p>If the function succeeds, even at setting trivial traits, it marks the registration 
as reliably using the <span class="member">Type</span> member in its
<span class="struct">EVENT_DATA_DESCRIPTOR</span> structures when writing events.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 22nd April 2020 from material first 
  published on 31st <a href="../../../../../../../../new/18/12.htm">December 2018</a>. 
  It was last modified on 28th <a href="../../../../../../../../new/20/05.htm">May 
  2020</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../../_include/c1820.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2018-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="14474" -->
</div>

</body>

</html>
