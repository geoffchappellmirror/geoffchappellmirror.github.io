<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>New in September 2016</title>
<link rel="stylesheet" type="text/css" href="../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/tree.css">
<script type="text/javascript" src="../../_scripts/master.js"></script>
<script type="text/javascript" src="../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/tree.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript Header" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="14880" -->
<div class="Main">
  <h1>New in September 2016 </h1>
  <p>The topic that was my diversion for <a href="08.htm">August</a> got ever more 
  involving. I really could do without such diversion. I have well over a hundred 
  other pages that have been in the limbo of “in preparation” for months now and 
  which I must complete before next month, when I stop this research and writing 
  and instead start in earnest to look for paid work as a consulting programmer. 
  Yet I could not let go of
  <a href="../../studies/windows/win32/apphelp/sdb/index.htm">Shim Database (SDB) 
  Files</a>. As I contemplated completing my write-up of the
  <a href="../../studies/windows/km/ntoskrnl/api/kshim/index.htm">Kernel Shim Engine</a> 
  in its relatively new role of involving Windows itself in the hooking of calls 
  to and from kernel-mode drivers, there was always at the back of my mind that 
  although this particular aspect to the topic offers no particular difficulty in 
  the research, something outside my write-up was leaving me deeply dissatisfied.
  </p>
  <p>The problem was partly the practical one of keeping the write-up to the interesting, 
  and even vital, material on the integrity of kernel-mode drivers without getting 
  drawn into the sprawling topic of Application Compatibility. As much, though, 
  was that I disliked what I could find on the Internet as other people’s research 
  and, indeed, what some of those other people wrote to tell me about, perhaps as 
  if I should not only know of it but appreciate it. Add that this subject has been 
  around for 15 years or so, with obvious implications for computer security but 
  an apparent lack of high-quality attention despite its being the subject of a 
  few conference presentations, and it got me thinking again about the nature of 
  reverse engineering and its current state as academic research. </p>
  <p>Oh, and along the way, I did my first writing in twenty years or so for anywhere 
  other than my own website. It is titled <span class="citation">Where Is ShimDBC.exe?</span> 
  and is published separately as <a href="../../external/pocorgtfo.htm">PoC||GTFO 
  13:9</a>. </p>
  <h2>Kernel-Mode Windows </h2>
  <p>Discovery of Microsoft’s Shim Database Compiler—that’s the ShimDBC of the preceding 
  title—opened the prospect of de-compiling real-world SDB files not to XML that 
  some reverse engineer just makes up but to XML that re-compiles. As far as I can 
  tell, nobody has yet attempted this. To do it in all the imaginable generality 
  would be a huge amount of work, not so much for the de-compiler as an exercise 
  in programming but for working out what to de-compile to. The DRVMAIN.SDB file, 
  however, uses only a small subset of the defined SDB tags, such that de-compiling 
  it specifically is just about manageable. </p>
  <div class="Tree">
    <ul>
      <li class="Expanded Branch">Kernel
      <ul>
        <li class="Expanded Branch">API
        <ul>
          <li class="Expanded Branch">Kernel Shim Engine
          <ul>
            <li><a href="../../studies/windows/km/ntoskrnl/api/kshim/drvmain.htm">DRVMAIN.SDB</a> </li>
          </ul>
          </li>
        </ul>
        </li>
      </ul>
      </li>
    </ul>
  </div>
  <h2>User-Mode Windows (Win32) </h2>
  <p>On the way to understanding what sort of XML might be Microsoft’s “source code” 
  for SDB files—or even, to begin with, whether Microsoft actually does prepare 
  SDB files from XML input—it helped to understand some undocumented APPHELP functionality 
  that prepares a properly formatted XML file from information obtained as SDB tags.
  </p>
  <div class="Tree">
    <ul>
      <li class="Expanded Branch">APPHELP
      <ul>
        <li class="Expanded Branch">Functions
        <ul>
          <li class="Expanded Branch">Matching Information
          <ul>
            <li class="Expanded Branch">Functions
            <ul>
              <li><a href="../../studies/windows/win32/apphelp/api/grabmi/sdbgrabmatchinginfo.htm">SdbGrabMatchingInfo</a> </li>
              <li><a href="../../studies/windows/win32/apphelp/api/grabmi/sdbgrabmatchinginfoex.htm">SdbGrabMatchingInfoEx</a> </li>
            </ul>
            </li>
            <li class="Expanded Branch">Constants
            <ul>
              <li><a href="../../studies/windows/win32/apphelp/api/grabmi/filter.htm">Filter</a> </li>
            </ul>
            </li>
          </ul>
          </li>
        </ul>
        </li>
      </ul>
      </li>
    </ul>
  </div>
  <h2>Reverse Engineering </h2>
  <p>Reverse engineering certainly has come along in leaps and bounds over the last 
  five years or so, at least for work that meets the needs of the computer security 
  industry. But reverse engineering of operating systems, just as a technique that 
  programmers might do well to have in their arsenal so that their programs can 
  be developed with more confidence and less trial-and-error, seems to be as much 
  in the Dark Ages as ever. And I anyway can’t shake the feeling that although the 
  computer security industry may be doing well at picking up the lowest-hanging 
  fruit in the greatest quantity for the least cost, it is perhaps not developing 
  the subject either for deep understanding or wide public utility. </p>
  <p>Take the SDB file format. Since this governs an increasing variety of run-time 
  changes that Windows itself makes to programs, and now drivers, you might think 
  that security implications are plain. Microsoft certainly thought so, apparently 
  right from the beginning. Microsoft’s TechNet article
  <a href="https://technet.microsoft.com/library/bb457032.aspx">Windows XP Application 
  Compatibility Technologies</a> from 2001 notes of the SYSMAIN.SDB file that
  </p>
  <blockquote>
    While software vendors, IT managers, and developers can use the existing fixes, 
    they are not permitted to create new ones. This limitation is by design and 
    is intended to reduce the risk to system security posed by allowing non-Microsoft 
    parties to inject potentially harmful code into the loading process.</blockquote>
  <p><span class="highlight">If those words of Microsoft’s don’t count as announcing 
  to the computer security industry that SDB files should be watched closely and 
  understood well, then whatever would?</span> How much of Microsoft’s “not permitted” 
  is down to keeping the file format hidden behind an API? Isn’t even the suspicion 
  of security by obscurity supposed to be a red flag? In this context I think it’s 
  entirely fair to say that surprisingly little has ever been published about the 
  SDB file format, and then to ask how come. </p>
  <p>Some of the answer will be that those who have the skill and support are spread 
  too thin. As much as reverse engineering has developed commercially, the practice 
  of it is directed at very particular software, as for malware analysis, and very 
  particular problems such as vulnerabilities. Much of it is commercially viable 
  only because that which can’t at least be semi-automated is kept to a very narrow 
  scope. For the very different work of hunting down details over the relatively 
  large scale of an operating-system feature and then writing them up for general 
  consumption, the number of reverse engineers who are ready, willing and able—including 
  being well-funded and free to publish—is perhaps not much greater than it ever 
  was. They can’t cover everything. </p>
  <p>Yet where operating-system features do get covered in public, I wonder about 
  the interests, priorities and incentives. The relatively little that seems yet 
  to have been published about the SDB file format arguably falls into two broad 
  categories. First, there are programs out and about on the Internet which dump 
  an SDB file into more or less plain text, typically into XML, for easier review. 
  (Perhaps also out there, but kept secret by hackers, are tools that then convert 
  an edited dump to a valid SDB file to install on an “owned” computer.) Second 
  are the extant projects that attempt to create some type of substitute Windows. 
  These each support a selection of APPHELP functions but also attempt to reproduce 
  Microsoft’s implementation in terms of SDB files. In all these cases, source code 
  is provided, and it is clear that the authors know at least something, even quite 
  a lot, of the file format. But none of this actually does document the file format.
  </p>
  <p><span class="alert">ESSAY IN PROGRESS</span> </p>
  <div class="Footer">
    <!--webbot bot="Include" U-Include="../../_include/c16.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016. Geoff Chappell. All rights reserved.  
<a href="../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="40420" -->
  </div>
</div>

</body>

</html>
