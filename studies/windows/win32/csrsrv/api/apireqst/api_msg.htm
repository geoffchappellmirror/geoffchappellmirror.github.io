<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CSR_API_MSG</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="54033" -->
<h1>CSR_API_MSG </h1>
<p>The <span class="struct">CSR_API_MSG</span> structure is a container for input 
and output (mostly but not only) to the API routines of server DLLs in the CSRSS.EXE 
process. The ordinary means—indeed, in version 4.0 and higher, the only means—of 
communication is a Local Procedure Call (LPC) through a port. Parameters for the 
call are marshalled into messages. The <span class="struct">CSR_API_MSG</span> is 
what the server receives. It has a system-defined <span class="struct">PORT_MESSAGE</span> 
header and some allowance for message data whose interpretation is up to the API 
routine. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">CSR_API_MSG</span> structure is not documented. Neither 
is Microsoft known to have disclosed a C-language definition in any header from 
any publicly available kit for any sort of software development. </p>
<p>Type information 
for the <span class="struct">CSR_API_MSG</span> is in public symbol files for CSRSS.EXE 
in Windows Vista only. Earlier type information is known in a statically linked 
library, named GDISRVL.LIB, which Microsoft published with the Device Driver Kit 
(DDK) for Windows NT 3.51. </p>
<p>Members, but not types, are also listed by the <span class="command">!dso</span> 
command as implemented in the USEREXTS debugger extension from the 
DDK for Windows 2000. </p>
<h2>Variability </h2>
<p>Being exchanged between multiple components, albeit all written by Microsoft, 
the <span class="struct">CSR_API_MSG</span> is better not to change much. Indeed, 
the only change in the whole history is a recurring increase in how large may be 
that part whose interpretation is specific to each API routine. The following changes 
of size therefore suggest more variability than there arguably is: </p>
<table class="Sizes">
  <colgroup>
    <col class="Version"><col class="Size" span="2">
  </colgroup>
  <tr>
    <th>Version </th>
    <th>Size (x86) </th>
    <th>Size (x64) </th>
  </tr>
  <tr>
    <td>3.10 to 4.0 </td>
    <td>0xA0 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.0 </td>
    <td>0xA8 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.1 to 5.2 </td>
    <td>0xC8 </td>
    <td>0x0178 </td>
  </tr>
  <tr>
    <td>6.0 to 10.0 </td>
    <td>0xE0 </td>
    <td>0x01B0 </td>
  </tr>
</table>
<h2>Layout </h2>
<p>These sizes and the names and types in the table that follows are from type information 
in public symbol files (or such as would ordinarily be in public symbol files) for 
versions 3.51 and 6.0. What’s known of Microsoft’s names and types for other versions 
is something of a guess, being inferred from what use CSRSRV is seen to make of 
the structure. Where use of a member corresponds closely with that of a version 
for which Microsoft’s symbols are available, it seems reasonable to suppose continuity. 
Some use, however, has no correspondence, the code having changed too much. Even 
where the use hasn’t changed, tracking it down exhaustively would be difficult, 
if not impossible, even with source code. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">PORT_MESSAGE h;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>0x28 </td>
    <td>
    <pre class="source">union {
    <a href="api_connectinfo.htm">CSR_API_CONNECTINFO</a> ConnectionRequest;
    struct {
        /*  individual members, see below  */
    };
};</pre>
    </td>
    <td>all </td>
  </tr>
</table>
<p>The kernel’s support for ports requires that the message for connecting through 
a port is a system-defined <span class="struct">PORT_MESSAGE</span> followed immediately 
by port-specific data whose interpretation is up to the server. Before version 6.0, 
when CSRSRV changed from using <span class="function">NtCreatePort</span> to
<span class="function">NtAlpcCreatePort</span>, the size to expect for this connection 
information is told to the kernel when the port is created. The
<span class="member">ConnectionRequest</span> is this data for connecting through 
the API port. The unnamed structure in union with the <span class="member">ConnectionRequest</span> 
is similarly for interpretation by the server but for distributing to API routines 
that get called through the port once connected: </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>0x28 </td>
    <td>
    <pre class="source">CSR_CAPTURE_HEADER *CaptureBuffer;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x1C </td>
    <td>0x30 </td>
    <td>
    <pre class="source">ULONG ApiNumber;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x20 </td>
    <td>0x34 </td>
    <td>
    <pre class="source">ULONG ReturnValue;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x24 </td>
    <td>0x38 </td>
    <td>
    <pre class="source">ULONG Reserved;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">union {
    /*  changing members, see below  */
} u;</pre>
    </td>
    <td>all </td>
  </tr>
</table>
<p>The <span class="member">ApiNumber</span> must be meaningful on input. Its high 
word is the 0-based index of the server DLL. The low word selects from this server 
DLL’s API routines (which can be numbered from a base other than zero). </p>
<p>The union <span class="member">u</span> has zero or more bytes of data whose 
interpretation is specific to the selected API routine: </p>
<table class="Union">
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">CSR_NULLAPICALL_MSG NullApiCall;</pre>
    </td>
    <td>3.10 to 4.0 </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">CSR_CLIENTCONNECT_MSG ClientConnect;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">CSR_THREADCONNECT_MSG ThreadConnect;</pre>
    </td>
    <td>3.10 to 5.1 </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">CSR_PROFILE_CONTROL_MSG ProfileControl;</pre>
    </td>
    <td>3.10 to 5.1 </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">CSR_IDENTIFY_ALERTABLE_MSG IndentifyAlertable;</pre>
    </td>
    <td>3.10 to 5.1 </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">CSR_SETPRIORITY_CLASS_MSG PriorityClass;</pre>
    </td>
    <td>3.10 to 5.1 </td>
  </tr>
  <tr>
    <td rowspan="4">0x28 </td>
    <td rowspan="4">0x40 </td>
    <td>
    <pre class="source">ULONG ApiMessageData [0x1E];</pre>
    </td>
    <td>3.10 to 4.0&nbsp; </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONG ApiMessageData [0x20];</pre>
    </td>
    <td>5.0 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONG_PTR ApiMessageData [0x27];</pre>
    </td>
    <td>5.1 to 5.2 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONG_PTR ApiMessageData [0x2E];</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
</table>
<p>The six special cases of this API message data are for the API routines in CSRSRV 
itself. They are arranged in increasing order of <span class="member">ApiNumber</span>, 
starting with zero. CSRSRV trivially fails the messages for <span class="member">
ThreadConnect</span> and <span class="member">ProfileControl</span> in version 4.0 
and higher, and for <span class="member">ProfileControl</span> and
<span class="member">IndentifyAlertable</span> in version 5.2 and higher. In contrast, 
version 5.0 removes all support for <span class="member">NullApiCall</span> (and 
renumbers the API routines). By the way, the spelling of <span class="member">IndentifyAlertable</span> 
is Microsoft’s. </p>
<p>The <span class="struct">CSR_API_MSG</span> in the x86 builds of versions 5.1 
to 5.2 has enough space for the <span class="member">ApiMessageData</span> to have 
0x28 elements. It is here thought that the last of these is unlabelled padding created 
by the structure’s 8-byte alignment (picked up from the <span class="struct">PORT_MESSAGE</span>), 
with the merit of matching the x64 implementation which has space for only 0x27.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 21st
  <a href="../../../../../../new/19/06.htm">June 2019</a> and was last modified 
  on 24th June 2019. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c19.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="62933" -->
</div>

</body>

</html>
