<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>New Page 1</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<!--webbot bot="Include" U-Include="../../_include/draft.htm" TAG="BODY" startspan -->

<p class="alert">ROUGH DRAFT </p>

<!--webbot bot="Include" i-checksum="20300" endspan -->
<h1>The Active Template Library (ATL) </h1>
<p>Among the libraries that Microsoft supplies with Visual C++ is one that can be 
used productively just from its header files, without linking a library file. A 
notable feature of these header files is their heavy use of the C++ language element 
known as a template. The templated classes and functions defined in the ATL headers 
arrange that various concepts have their general characteristics standardised in 
terms of black boxes that represent whatever is specific to the programmer’s own 
work. </p>
<h2>ATL Attributes </h2>
<p>Much of the (typically substantial) boilerplate for an ATL project can be generated 
as if by the compiler in response to concise specifications given as blocks of C++
<a href="../../language/attributes/index.htm">attributes</a> delineated by square 
brackets and attached to programming elements such as classes and interface methods. 
The compiler supports various
<a href="../../language/attributes/providers/builtin/index.htm">built-in attributes</a>, 
but these have no particular knowledge of the ATL. Support for ATL Programming is 
arranged both by extending the functionality of some built-in attributes and by 
defining ATL-specific attributes. This work is done externally to the compiler, 
by the ATL Attribute Provider (ATLPROV.DLL). </p>
<p>Please beware that much of this work is rough and incomplete. I publish it even 
so, since it seems better that it be available to all, even to be used with more 
than ordinary caution, than to be left hidden and wasting in a virtual drawer awaiting 
my next opportunity to work at it again. </p>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="58117" endspan -->
</div>

</body>

</html>
