<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CL /ZM</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>CL /ZM </h1>
<h2>Syntax </h2>
<p>positive: </p>
<blockquote>
  <p><span class="switch">/ZM</span> </p>
</blockquote>
<p>negative: </p>
<blockquote>
  <p><span class="switch">/ZM-</span> </p>
</blockquote>
<h3>Relations </h3>
<p>The positive form is enabled by default, being provided by CL as an initial option. 
The positive and negative forms override each other, but weakly. Additionally, the
<span class="switch">/ZM</span> option weakly overrides <span class="switch">
<a href="y$c.htm">/Yc</a></span> and <span class="switch"><a href="yx.htm">/YX</a></span>, 
and is overridden by them. </p>
<h2>Behaviour </h2>
<p>The <span class="switch">/ZM</span> option, positive or negative, affects how 
CL proceeds through the various stages of compilation when presented with more than 
one compilable source file. The possible stages are: </p>
<ol>
  <li>compiling (done by C1 or C1XX, for C or C++ source files respectively, else 
  by modules named with <span class="switch"><a href="b1.htm">/B1</a></span> or
  <span class="switch"><a href="b$x.htm">/Bx</a></span>); </li>
  <li>processing (not ordinarily enabled, else done by whatever module is named 
  with <span class="switch"><a href="b1_5.htm">/B1_5</a></span>); </li>
  <li>generating code (done by C2, else by whatever module is named with
  <span class="switch"><a href="b2.htm">/B2</a></span>). </li>
</ol>
<p>Whether all these stages are wanted depends on other options. The
<span class="switch"><a href="bk.htm">/BK</a></span> option disables the first (though 
with requirements that make it not at all useful for a batch operation). The
<span class="switch"><a href="e.htm">/E</a></span>, <span class="switch">
<a href="ep.htm">/EP</a></span>, <span class="switch"><a href="p.htm">/P</a></span>,
<span class="switch"><a href="z$g.htm">/Zg</a></span> and <span class="switch">
<a href="z$s.htm">/Zs</a></span> options enable the first but disable the others. 
Complete compilation to an object file requires the first and last stage, which 
are enabled by default. </p>
<h3>Basic Sequence </h3>
<p>The basic behaviour, as obtained with <span class="switch">/ZM-</span>, is to 
put each compilable source file through each applicable stage before proceeding 
to the next source file. The given ordering of the compilable source files is respected 
absolutely: if source file A precedes source file B on the CL command line, then 
source file A goes through all its compilation stages before source file B goes 
through any. </p>
<p>Consider, for example, a batch that would compile two C source files, TEST1.C 
and TEST2.C, two C++ source files, TEST3.CPP and TEST4.CPP, and two more C source 
files, TEST5.C and TEST6.C, all the way to object files. The command </p>
<pre class="input">cl [<span class="placeholder">options</span>] /ZM- test1.c test2.c test3.cpp test4.cpp test5.c test6.c </pre>
<p>(with it assumed that the <span class="placeholder">options</span> include none 
that suppress any stages or name alternative modules) is handled in the order
</p>
<ul>
  <li>C1 and then C2, both for TEST1.C, producing TEST1.OBJ&nbsp; </li>
  <li>C1 and then C2, both for TEST2.C, producing TEST2.OBJ </li>
  <li>C1XX and then C2, both for TEST3.CPP, producing TEST3.OBJ </li>
  <li>C1XX and then C2, both for TEST4.CPP, producing TEST4.OBJ </li>
  <li>C1 and then C2, both for TEST5.C, producing TEST5.OBJ </li>
  <li>C1 and then C2, both for TEST6.C, producing TEST6.OBJ </li>
</ul>
<p>The <span class="switch">/ZM-</span> order has the advantage of economy with 
disk space. Because all work with one source file is completed before doing anything 
with the next source file, the intermediate files that C1 or C1XX produce as input 
to C2 while working on the one source file can be deleted before any more intermediate 
files are created for the next source file. The demand for disk space is just for 
the largest set of intermediate files needed for any one source file. (In reality, 
CL is not quite this efficient.) </p>
<p>Against this economy is the waste of repeatedly reloading the compiler modules 
C1, C1XX and C2. These are moderately large, such that (if only historically) the 
loading of one has a non-negligible chance of displacing another, whether from a 
disk cache or from physical memory, and the reloading then suffers from time spent 
on disk access. A reordering that reloads less often may be expected to work faster, 
which may have been the motivation for <span class="switch">/ZM</span>. </p>
<h3>Modular Sequence </h3>
<p>The behaviour enabled by <span class="switch">/ZM</span> favours persisting with 
each compilation stage for multiple source files before proceeding to the next stage. 
The given ordering of the compilable source files is respected only for the first 
stage: if source file A precedes source file B on the CL command line, then source 
file A goes through its first stage of compilation before source file B goes through 
its first. </p>
<p>The present algorithm splits the given sequence of compilable source files into 
subsequences (batches) such that </p>
<ul>
  <li>all source files in the same batch require the same modules for their applicable 
  compilation stages </li>
  <li>and each batch is the longest possible up to some maximum (dependent on free 
  disk space, discussed below). </li>
</ul>
<p>The source files in each subsequence are put one by one through the first applicable 
compilation stage, then one by one through the second stage, etc, for as many stages 
as apply. Each progression to another stage omits source files that failed the previous 
stage. It also reverses the ordering of source files, presumably to increase the 
chance that the source files and corresponding intermediate files to be worked with 
near the start of one stage are still cached from the work done on them near the 
end of the previous stage. </p>
<p>For the example given above, but now with <span class="switch">/ZM</span>, the 
order changes to </p>
<ul>
  <li>C1 for TEST1.C and then TEST2.C </li>
  <li>C2 for TEST2.C and then TEST1.C, producing TEST2.OBJ and TEST1.OBJ respectively
  </li>
  <li>C1XX for TEST3.CPP and then TEST4.CPP </li>
  <li>C2 for TEST4.CPP and then TEST3.CPP, producing TEST4.OBJ and TEST3.OBJ respectively
  </li>
  <li>C1 for TEST5.C and then TEST6.C </li>
  <li>C2 for TEST5.C and then TEST6.C, producing TEST5.OBJ and TEST6.OBJ respectively
  </li>
</ul>
<p>The <span class="switch">/ZM</span> order is more economical with reloading compiler 
modules than is the <span class="switch">/ZM-</span> order, but requires more disk 
space for intermediate files. With a batch of source files being put to C1 or C1XX 
before any of that batch are put to C2, there must be sufficient free disk space 
to save one set of intermediate files for each source file in the batch. The present 
limit on the batch size is one source file plus one more for every 3 million bytes 
of free space on whatever drive is to hold the intermediate files, up to a maximum 
of 20. </p>
<div class="Footer">
  <p class="Dates">This page was created on 27th October 2005 and was last modified 
  on 14th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0509.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62424" endspan -->
</div>

</body>

</html>
