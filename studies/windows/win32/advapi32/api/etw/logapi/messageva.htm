<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>TraceMessageVa</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<!--webbot bot="Include" U-Include="../../../../_include/draft.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">DRAFT: Take more than your usual care. </p>
</div>

<!--webbot bot="Include" endspan i-checksum="34080" -->
<h1>TraceMessageVa </h1>
<p>This function writes a message event to an event tracing session from user mode.
</p>
<h2>Declaration </h2>
<pre>ULONG
TraceMessageVa (
    TRACEHANDLE SessionHandle,
    ULONG MessageFlags,
    GUID *MessageGuid,
    USHORT MessageNumber, 
    va_list MessageArgList);</pre>
<h3>Parameters </h3>
<!--webbot bot="Include" U-Include="_include/sessionhandle.htm" TAG="BODY" startspan -->

<p>The required <span class="argument">SessionHandle</span> selects the event tracing 
session, also called a logger, to which the event is to be written. </p>

<!--webbot bot="Include" endspan i-checksum="47660" -->
<!--webbot bot="Include" U-Include="_include/messageflags.htm" TAG="BODY" startspan -->

<p>The <span class="argument">MessageFlags</span> argument directs the logger to 
add items to the event in addition to the message arguments. The following bits 
are recognised: </p>
<table>
  <tr>
    <th>Value </th>
    <th>Name </th>
    <th>Meaning </th>
  </tr>
  <tr>
    <td>0x00000001 </td>
    <td><span class="constant">TRACE_MESSAGE_SEQUENCE</span> </td>
    <td>include sequence number as event-specific data </td>
  </tr>
  <tr>
    <td>0x00000002 </td>
    <td><span class="constant">TRACE_MESSAGE_GUID</span> </td>
    <td>include GUID as event-specific data </td>
  </tr>
  <tr>
    <td>0x00000004 </td>
    <td><span class="constant">TRACE_MESSAGE_COMPONENTID</span> </td>
    <td>include component ID as event-specific data </td>
  </tr>
  <tr>
    <td>0x00000008 </td>
    <td><span class="constant">TRACE_MESSAGE_TIMESTAMP</span> </td>
    <td>include time stamp as event-specific data </td>
  </tr>
  <tr>
    <td>0x00000010 </td>
    <td><span class="constant">TRACE_MESSAGE_PERFORMANCE_TIMESTAMP</span> </td>
    <td>use performance counter for time stamp </td>
  </tr>
  <tr>
    <td>0x00000020 </td>
    <td><span class="constant">TRACE_MESSAGE_SYSTEMINFO</span> </td>
    <td>include thread and process IDs as event-specific data </td>
  </tr>
</table>
<p>The optional <span class="argument">MessageGuid</span> argument supplies either 
a component ID or a GUID to add to the event as an identifier. </p>
<p>The <span class="argument">MessageNumber</span> argument is the primary identifier 
of the event. The plain intention is that events that have the same
<span class="argument">MessageNumber</span>, perhaps in combination with the identifier 
from <span class="argument">MessageGuid</span>, are recurrences of the one event 
and have the same interpretation of message arguments. </p>

<!--webbot bot="Include" endspan i-checksum="10406" -->
<p>The optional <span class="argument">MessageArgList</span> is the address of an 
array of pointer-sized elements that present the message arguments. Successive pairs 
in the array each provide respectively the address and size of one message argument. 
This sequence ends with an array element that would represent a
<span class="constant">NULL</span> address. The concatenation of these message arguments 
becomes event-specific data to add to the event. The function does not interpret 
the message arguments. </p>
<h3>Return Value </h3>
<p>The function returns zero for success, else a Win32 error code. </p>
<p>The return value is also set as the thread’s last error, such that it can be 
retrieved by calling <span class="function">GetLastError</span>. </p>
<h2>Availability </h2>
<p>The <span class="function">TraceMessageVa</span> function is exported by name 
from ADVAPI32 in version 5.1 and higher. Starting with version 5.2, it is merely 
a forward to the NTDLL export <span class="function">EtwTraceMessageVa</span> in 
its versions 5.2 and higher. For the NTDLL implementation, which behaves differently 
in ways that may be significant, follow the link: this note is concerned only with 
the function as implemented in ADVAPI32. </p>
<h2>Usage </h2>
<p>Very similar functionality can be arranged in version 5.0 through the
<span class="function"><a href="event.htm">TraceEvent</a></span> function with an
<span class="struct">MOF_FIELD</span> array for the message arguments, but
<span class="function">TraceMessageVa</span> provides distinctly new functionality 
in one important sense: the events that it writes get a distinctive type of trace 
header, a <span class="struct">
<a href="../../../../../km/ntoskrnl/api/etw/tracelog/message_trace_header.htm">MESSAGE_TRACE_HEADER</a></span>, 
in contrast to the <span class="struct">
<a href="../../../../../km/ntoskrnl/api/etw/tracelog/event_trace_header.htm">EVENT_TRACE_HEADER</a></span>.
</p>
<!--webbot bot="Include" U-Include="_include/wpp.htm" TAG="BODY" startspan -->

<p>This new functionality looks to have been devised as special support for Windows 
Pre-Processor (WPP) Tracing. This is diagnostic magic that turns drivers, services, 
DLLs and other low-level program code into event providers that write events for 
seemingly no more trouble than calling a programmer-defined function in the familiar 
style of <span class="function">printf</span> from the C Run-Time library. Each 
source file is assigned a <span class="argument">MessageGuid</span> and the trace 
statements within a source file are each assigned a <span class="argument">MessageNumber</span>. 
The format strings for the trace statements go to the PDB file (with the happy side-effect 
that the tracing neither bloats the executable nor helps reverse engineers). Interpretation 
of the message arguments for each combination of <span class="argument">MessageGuid</span> 
and <span class="argument">MessageNumber</span> is done by an event consumer that 
has the PDB file. </p>

<!--webbot bot="Include" endspan i-checksum="37400" -->
<h2>Documentation Status </h2>
<p>The <span class="function">TraceMessageVa</span> function is documented. </p>
<h2>Behaviour </h2>
<p>Broadly, the <span class="function">TraceMessageVa</span> function creates an 
event from the function’s inputs and sends it into whichever of the kernel-mode 
or user-mode event tracing machinery is appropriate for the session. </p>
<p>All the function’s work is subject to exception handling. If an exception occurs, 
the exception code is converted to a Win32 error code and becomes the function’s 
result. </p>
<p>If the <span class="argument">SessionHandle</span> has the 0x01000000 bit set, 
the tracing session is a user-mode logger—in this version,
<span class="emphasis">the</span> user-mode logger, only one being permitted per 
process—and the event is written to trace buffers that are maintained by NTDLL. 
Otherwise, the event goes to trace buffers that are maintained by the kernel. The
<span class="argument">SessionHandle</span> is then a 16-bit logger ID. Zero and 
0xFFFF are explicitly invalid and cause the function to return
<span class="constant">ERROR_INVALID_HANDLE</span>. </p>
<p>Communication with the kernel is through <span class="function">
<a href="../../../../../km/ntoskrnl/api/etw/traceapi/event/index.htm">NtTraceEvent</a></span> 
(with <span class="constant">ETW_NT_FLAGS_TRACE_MESSAGE</span> set in the
<span class="argument">Flags</span>). To form the inputs for this call, the function 
assembles its own inputs into a single packet of event data on the heap. This packet 
begins as a fixed-size <span class="struct">
<a href="../../../../../km/ntoskrnl/api/etw/traceapi/message_trace_user.htm">MESSAGE_TRACE_USER</a></span> 
header whose <span class="member">Data</span> member in turn begins the variable-size 
message arguments all assembled into one byte array. The <span class="member">Data</span> 
member is at offset 0x2C but the header’s size is 0x30 bytes. If the total of 0x30 
bytes for the header and of all bytes for the message arguments exceeds 8KB, the 
function fails, returning <span class="constant">ERROR_BUFFER_OVERFLOW</span>. The 
function also fails, returning <span class="constant">ERROR_NOT_ENOUGH_MEMORY</span> 
(which the documentation says is “Not supported”), if sufficient space cannot be 
obtained on the heap. </p>
<p>Wherever the event goes, the handling is similar and whatever results is success 
or failure for the function. Aside from <span class="constant">ERROR_NOACCESS</span> 
from the kernel’s probes of what it expects to be user-mode addresses, the most 
notable failures are: </p>
<ul>
  <li>the selected logger is not running (<span class="constant">ERROR_INVALID_HANDLE</span>);
  </li>
  <li>the event is too big for any one trace buffer (<span class="constant">ERROR_MORE_DATA</span>);
  </li>
  <li>space is unavailable in any trace buffer (<span class="constant">ERROR_NOT_ENOUGH_MEMORY</span>).
  </li>
</ul>
<p>What goes into the trace buffers, and which may then persist in an Event Trace 
Log (ETL) file, is a <span class="struct">MESSAGE_TRACE_HEADER</span> (which tells 
the total size and contains the <span class="argument">MessageFlags</span> and
<span class="argument">MessageNumber</span>) followed by event-specific data in 
the following order: </p>
<table>
  <tr>
    <th>Item </th>
    <th><span class="argument">MessageFlags</span> Requirement </th>
  </tr>
  <tr>
    <td>32-bit sequence number </td>
    <td><span class="constant">TRACE_MESSAGE_SEQUENCE</span> is set </td>
  </tr>
  <tr>
    <td>16-byte GUID from <span class="argument">MessageGuid</span> </td>
    <td><span class="constant">TRACE_MESSAGE_GUID</span> is set and
    <span class="constant">TRACE_MESSAGE_COMPONENTID</span> is clear </td>
  </tr>
  <tr>
    <td>32-bit component ID from <span class="argument">MessageGuid</span> </td>
    <td><span class="constant">TRACE_MESSAGE_COMPONENTID</span> is set </td>
  </tr>
  <tr>
    <td>8-byte time stamp </td>
    <td><span class="constant">TRACE_MESSAGE_TIMESTAMP</span> is set </td>
  </tr>
  <tr>
    <td>32-bit thread and process IDs (in that order) </td>
    <td><span class="constant">TRACE_MESSAGE_SYSTEMINFO</span> is set </td>
  </tr>
  <tr>
    <td>message arguments as byte array </td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>The time stamp is the high-frequency performance counter if
<span class="constant">TRACE_MESSAGE_PERFORMANCE_TIMESTAMP</span> is set in the
<span class="argument">MessageFlags</span>. Otherwise, it is the system time.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 12th
  <a href="../../../../../../../new/18/12.htm">December 2018</a> and was last modified 
  on 31st December 2018. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c18.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2018. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6594" -->
</div>

</body>

</html>
