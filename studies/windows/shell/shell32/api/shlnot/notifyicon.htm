<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Shell_NotifyIcon</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="55064" endspan -->
<h1>Shell_NotifyIcon </h1>
<p>This function sends a request to the taskbar window concerning an icon in the 
notification area. </p>
<h2>Declaration </h2>
<pre class="source">BOOL
Shell_NotifyIcon (
    DWORD dwMessage,
    PNOTIFYICONDATA lpdata);</pre>
<!--webbot bot="Include" U-Include="../_include/nawfunc.htm" TAG="BODY" startspan -->

<p>The function has an ANSI form, both with and without the A suffix, and a 
Unicode form, with the W suffix. </p>

<!--webbot bot="Include" i-checksum="40646" endspan -->
<h3>Parameters </h3>
<p>The <span class="argument">dwMessage</span> argument loosely describes the operation 
to perform with the information that is addressed by the <span class="argument">
lpdata</span> argument. The following are the values that are recognised for
<span class="argument">dwMessage</span> by either SHELL32 or EXPLORER: </p>
<table class="Constants">
  <colgroup>
    <col class="Name"><col class="Constant"><col class="Remarks">
  </colgroup>
  <tr>
    <td><span class="constant">NIM_ADD</span> </td>
    <td>0 </td>
    <td>add the given icon to the taskbar notification area </td>
  </tr>
  <tr>
    <td><span class="constant">NIM_MODIFY</span> </td>
    <td>1 </td>
    <td>modify the given icon on the taskbar notification area </td>
  </tr>
  <tr>
    <td><span class="constant">NIM_DELETE</span> </td>
    <td>2 </td>
    <td>delete the given icon from the taskbar notification area </td>
  </tr>
  <tr>
    <td><span class="constant">NIM_SETFOCUS</span> </td>
    <td>3 </td>
    <td>set the focus to the taskbar notification area, preferably to the given 
    icon </td>
  </tr>
  <tr>
    <td><span class="constant">NIM_SETVERSION</span> </td>
    <td>4 </td>
    <td>set new or old behaviour for the given icon on the taskbar notification 
    area </td>
  </tr>
</table>
<p>Note however that <span class="constant">NIM_SETFOCUS</span> and
<span class="constant">NIM_SETVERSION</span> are supported only in version 5.00 
and higher. </p>
<p>The <span class="struct">NOTIFYICONDATA</span> structure addressed by the
<span class="argument">lpdata</span> argument is described separately (in preparation), 
for although it is used only for this function, it is quite large and is complicated 
by having gone through several expansions which all remain valid. </p>
<h3>Return Value </h3>
<p>The function returns a non-zero value for success, else
<span class="constant">FALSE</span> to indicate failure. Call
<span class="function">GetLastError</span> to retrieve an error code. </p>
<h2>Behaviour </h2>
<p>Though SHELL32 implements the function, its role is almost entirely that of a 
switchboard, to direct the call to the taskbar window. The function therefore has 
some behaviour originating in SHELL32.DLL and some in EXPLORER.EXE (which is the 
ordinary provider of the taskbar window). These notes are concerned only with the 
former. </p>
<p>Starting with the version 6.00 from Windows Vista, it is an error (<span class="constant">ERROR_INVALID_PARAMETER</span>) 
to pass NULL as <span class="argument">lpdata</span>. </p>
<p>If there is no top-level window with the class name expected for the taskbar, 
namely “Shell_TrayWnd”, then the function has nowhere to send the request, and fails. 
(The error code is from <span class="function">FindWindow</span>.) </p>
<p>As a switchboard, SHELL32 is mostly unconcerned with interpreting the function’s 
arguments. However, the <span class="struct">NOTIFYICONDATA</span> structure that 
is expected at <span class="argument">lpdata</span> has changed through successive 
SHELL32 versions. In version 5.00 and higher, the function has the problem that 
its caller may be using an old layout. It detects this from <span class="member">
cbSize</span>. In repackaging the input so that the taskbar window sees only the 
latest layout, there is some parameter validation (but not so that invalid input 
causes the function to fail). Most notably, <span class="member">uFlags</span> bits 
that are not valid for the layout are ignored. In version 6.00 and higher, the function 
also places null terminators at the last element of: </p>
<ul>
  <li><span class="member">szTip</span> if <span class="constant">NIF_TIP</span> 
  is set in <span class="member">uFlags</span>; </li>
  <li><span class="member">szInfo</span> and <span class="member">szInfoTitle</span> 
  if the structure is large enough for these and <span class="constant">NIF_INFO</span> 
  is set in <span class="member">uFlags</span>. </li>
</ul>
<p>The version 6.00 from Windows Vista introduces yet another extension to the input 
structure and more validation. If the <span class="struct">NOTIFYICONDATA</span> 
is large enough to provide for <span class="member">hBalloonIcon</span> and
<span class="argument">dwMessage</span> is either <span class="constant">NIM_ADD</span> 
or <span class="constant">NIM_MODIFY</span> and <span class="constant">NIF_INFO</span> 
is set in <span class="member">uFlags</span> and <span class="constant">NIIF_USER</span> 
is set in <span class="member">dwInfoFlags</span>, then the function checks that 
whatever is intended as the balloon icon has a plausible size. The icon to check 
is given by <span class="member">hBalloonIcon</span> if not NULL, else
<span class="member">hIcon</span>. If <span class="constant">NIIF_LARGE_ICON</span> 
is set in <span class="member">dwInfoFlags</span>, then the icon is invalid if either 
its width or height is smaller than <span class="constant">SM_CXICON</span>. Otherwise, 
if the icon is from <span class="member">hBalloonIcon</span>, it is invalid if its 
width and height are not exactly <span class="constant">SM_CXSMICON</span> and
<span class="constant">SM_CYSMICON</span> respectively. Whichever member provides 
the icon, if the icon is invalid, the function fails (though without setting an 
error code). </p>
<p>In version 5.00 and higher, processes are not necessarily able to set the foreground 
window, yet the whole point to <span class="constant">NIM_SETFOCUS</span> is to 
bring the taskbar window to the foreground, with the focus on the indicated icon. 
If <span class="argument">dwMessage</span> is <span class="constant">NIM_SETFOCUS</span>, 
the function asks that the taskbar window’s process be allowed to set the foreground 
window. </p>
<p>A security feature introduced for Windows Vista is that a process cannot send 
a window message to a process that has higher integrity. This is a problem if the 
caller of this function has higher integrity than the taskbar window’s process but 
wants to receive callback messages about the indicated icon. Old callers won’t know 
but may misbehave without the expected callback, and so this function must pave 
the way for them. If <span class="constant">NIF_MESSAGE</span> is set in
<span class="member">uFlags</span>, then the function adds the message number given 
by <span class="member">uCallbackMessage</span> to the current process’s message 
filter if <span class="argument">dwMessage</span> is <span class="constant">NIM_ADD</span> 
or <span class="constant">NIM_MODIFY</span> and removes it if
<span class="argument">dwMessage</span> is <span class="constant">NIM_DELETE</span>.
</p>
<p>Since the taskbar may be, and typically is, implemented in another process, the 
function’s input is passed to the taskbar window as a <span class="message">
<a href="copydata.htm">WM_COPYDATA</a></span> message. In version 5.00 and higher, 
sending the message is aborted if the target process seems hung. The NT implementations 
of these versions have a variation and an extra condition. First, the message is 
sent such that the calling thread is blocked even from nonqueued messages until 
a reply is obtained. Second, a timeout applies, of 4 seconds in most versions, but 
increased to 7 in the version 6.00 from Windows Vista. If delivery is frustrated, 
the function fails. Otherwise, the function returns whatever the taskbar window 
returns for the message. Thus, if the taskbar window can fail the function by returning 
zero from its window procedure. </p>
<p>What the taskbar window does with the message is not of concern here. Details 
are in preparation for the separate articles on each of the values that are supported 
for <span class="argument">dwMessage</span>. Unsupported values for
<span class="argument">dwMessage</span> are typically failed by the taskbar window, 
but there does exist an exception, presumably as a coding error. If the
<span class="constant">REST_NOTRAYITEMSDISPLAY</span>
<a href="../util/restrictions.htm">restriction</a> was in force when the taskbar 
was created, then although the taskbar window does not accommodate notification-area 
icons, it lets the message succeed no matter what the value of
<span class="argument">dwMessage</span>. </p>
<p>For reasons not presently understood, the version 6.00 from Windows Vista provides 
that if <span class="constant">NIF_INFO</span> is set in <span class="member">uFlags</span> 
and <span class="argument">dwMessage</span> is either <span class="constant">NIM_ADD</span> 
or <span class="constant">NIM_MODIFY</span>, then the string at
<span class="member">szInfo</span> is registered with Windows Error Reporting. This 
is done even if the message cannot be delivered or is failed by the taskbar window.
</p>
<h3>ANSI Translation </h3>
<p>This function is natively Unicode in NT versions of Windows. The
<span class="function">Shell_NotifyIconA</span> function repackages ANSI input as 
Unicode and calls <span class="function">Shell_NotifyIconW</span> internally.
</p>
<h2>Availability </h2>
<p>Except as noted below, the <span class="function">Shell_NotifyIcon</span> function 
is exported by name from SHELL32.DLL in an ANSI form (with and without an A suffix) 
and a Unicode form (with a W suffix). The function is ancient. It is exported from 
versions 1.30 and 3.51, though admittedly with implementations that fail trivially 
(returning <span class="constant">FALSE</span> having done nothing but set
<span class="constant">ERROR_CALL_NOT_IMPLEMENTED</span> as the error code). The 
function has been “live” since version 4.00. The version 4.00 from Windows 95 does 
not export a Unicode form of the function. The Windows, as opposed to NT, builds 
of later versions export a Unicode form, but only in a trivial coding (which just 
returns <span class="constant">FALSE</span>, without setting an error code). </p>
<h3>Documentation </h3>
<p>This ancient SHELL32 function has long been documented. It seems fair to deride 
the documentation as sparse, relative to the function’s very many cases and subtleties 
of behaviour. (As I say this, I must of course admit to the difficulty of 
writing good documentation for this function. I have twice 
attempted to cover in detail the supported values of <span class="argument">dwMessage</span> 
and the members of the <span class="struct">NOTIFYICONDATA</span> structure, and 
I have twice abandoned it. However, I am not the manufacturer.) </p>
<p>Especially notable is that as recently as January 2007, Microsoft’s documentation 
of <span class="function">Shell_NotifyIcon</span>, on CD and online, did not even 
hint that the function might fail for reasons more serious than being improperly 
called. An unsurprising consequence is that very many callers of this function do 
not check it for success or failure. A practical effect has been to exaggerate the 
mystery of <a href="../../../../../../notes/windows/shell/missingicons.htm">missing 
icons in the notification area</a>. </p>
<div class="Footer">
  <p class="Dates">This page was created on 7th April 2007 and was last modified 
  on 23rd January 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0709.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2007-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="4319" endspan -->
</div>

</body>

</html>
