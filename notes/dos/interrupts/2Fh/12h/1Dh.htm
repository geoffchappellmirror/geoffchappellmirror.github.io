<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Interrupt 2Fh Function 121Dh</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/notes.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/notes.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript Header" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="20600" -->
<div class="Main">
  <h1>Interrupt 2Fh Function 121Dh </h1>
  <p>This function provides very particular assistance to a kernel extension for 
  breaking a count of days since 1980 to a year, month and day. It is implemented 
  in version 3.0 and higher. </p>
  <h2>Parameters </h2>
  <p>The function uses registers for its input and output. As with any subfunction 
  of <span class="instruction">int 2Fh</span> function 12h, it also reads a word 
  from above the interrupt frame as if to access an argument. This particular subfunction, 
  however, does not interpret the word. </p>
  <h3>Input </h3>
  <p>At its most general, the function works with three units of measure: large, 
  medium and small, but with a catch. Every large unit is
  <span class="placeholder">X</span> medium units and is also
  <span class="placeholder">Y</span> small units, but the successive medium units 
  in a large unit contain varying numbers of small units. The numbers of small units 
  in the successive medium units in any large unit are represented by a conversion 
  table. </p>
  <table>
    <tbody>
      <tr>
        <td><span class="register">ax</span> </td>
        <td>121Dh </td>
      </tr>
      <tr>
        <td><span class="register">cx</span> </td>
        <td>number of medium units </td>
      </tr>
      <tr>
        <td><span class="register">dx</span> </td>
        <td>number &lt; <span class="placeholder">Y</span> of small units in excess 
        of whole large units </td>
      </tr>
      <tr>
        <td><span class="register">ds</span>:<span class="register">si</span>
        </td>
        <td>address of conversion table of small units in each of
        <span class="placeholder">X</span> successive medium units of a large unit
        </td>
      </tr>
    </tbody>
  </table>
  <p>The conversion table is an array of <span class="placeholder">X</span> bytes 
  whose sum is <span class="placeholder">Y</span>. </p>
  <h3>Output </h3>
  <p>The function normalises its inputs, adding to <span class="register">cx</span> 
  as many whole medium units ≤ <span class="placeholder">X</span> as can be extracted 
  in sequence from the small units given as <span class="register">dx</span>, and 
  reducing <span class="register">dx</span> either to zero or to the number of small 
  units on the last, partial, medium unit: </p>
  <table>
    <tbody>
      <tr>
        <td><span class="register">ax</span> </td>
        <td>corrupt </td>
      </tr>
      <tr>
        <td><span class="register">cx</span> </td>
        <td>number of medium units </td>
      </tr>
      <tr>
        <td><span class="register">dx</span> </td>
        <td>number of small units in excess of whole medium units </td>
      </tr>
      <tr>
        <td><span class="register">si</span> </td>
        <td>corrupt </td>
      </tr>
    </tbody>
  </table>
  <h3>Failure (Unimplemented) </h3>
  <p>Before version 3.0, the kernel does not implement <span class="instruction">
  int 2Fh</span> and has nothing to do with whatever happens from trying to call 
  this function. </p>
  <h2>Usage </h2>
  <p>This function has its origins as an internal routine in the kernel. It&nbsp; 
  is not quite ancient, being not in PC DOS 1.0. It is, however, in PC DOS 1.10 
  and it is named <span class="internal routine">DSLIDE</span> in the source code 
  for MS-DOS 1.25 that Microsoft published in 2014 at the
  <a href="https://computerhistory.org/blog/microsoft-ms-dos-early-source-code/">
  Computer History Museum</a> and in 2018 on
  <a href="https://github.com/microsoft/ms-dos">GitHub</a>, There, in the kernel, 
  called only from another internal routine named <span class="internal routine">
  READTIME</span>, the <span class="internal routine">DSLIDE</span> routine is an 
  arguably efficient avoidance of repetition in a multi-part algorithm that reads 
  from a device driver to get a count of days which it then inteprets as a date 
  in the sense of year, month and day. </p>
  <p>In the function’s expected use, the count of days is specifically since 1980 
  and is known not to extend as far as 2100. Conveniently, the intervening end-of-century 
  year 2000 is a leap year for being a multiple of not just 100 but also of 400. 
  The years from 1980 can therefore be reckoned in 4-year cycles of 1461 days each. 
  A first call to the function thus has as its units: </p>
  <ul>
    <li>the large unit is a cycle of four years beginning with a leap year; </li>
    <li>the medium unit is an irregular half-year, so that the number of days in 
    each half-year fits a byte; </li>
    <li>the small unit is the day. </li>
  </ul>
  <p>Thus <span class="placeholder">X</span> is 8 and <span class="placeholder">
  Y</span> is 1461. For a second call, the units are: </p>
  <ul>
    <li>the large unit is the year; </li>
    <li>the medium unit is the month; </li>
    <li>the small unit is the day. </li>
  </ul>
  <p>Now <span class="placeholder">X</span> is 12 and <span class="placeholder">
  Y</span> is either 365 or 366, depending on whether the year is ordinary or leap.
  </p>
  <p>The expected sequence for use starts with dividing the count of days since 
  1980 by 1461 to get a quotient and remainder as preparation for calling
  <span class="instruction">int 2Fh</span> function 121Dh. The remainder is immediately 
  good for <span class="register">dx</span>. Multiplying the quotient by eight gives 
  a count of half-years to pass in <span class="register">cx</span>. For
  <span class="register">ds</span>:<span class="register">si</span> pass the address 
  of any eight bytes whose successive pairs total 366, 365, 365 and 365 such that 
  the first byte in each pair is <span class="placeholder">F</span>. On return, 
  divide <span class="register">cx</span> by two to get the 0-based
  <span class="placeholder">year</span> since 1980. If there’s a remainder, add
  <span class="placeholder">F</span> to the count of excess days in
  <span class="register">dx</span>. This is then ready for
  <span class="register">dx</span> in a second call to <span class="instruction">
  int 2Fh</span> function 121Dh. For this second call, pass 0 or 1 in
  <span class="register">cx</span> to compute a 0-based or 1-based month. For
  <span class="register">ds</span>:<span class="register">si</span> pass the address 
  of any twelve bytes that define the days in successive months, remembering to 
  have 29 or 28 days for the second month depending on whether the computed
  <span class="placeholder">year</span> is or is not divisible by four. The second 
  call then returns the <span class="placeholder">month</span> in
  <span class="register">cx</span> and a 0-based <span class="placeholder">day</span> 
  in <span class="register">dx</span>. </p>
  <p>Not actually required but almost certainly expected as the usual practice is 
  that the tables addressed by <span class="register">ds</span>:<span class="register">si</span> 
  will be in the kernel. The kernel has a days-per-half-year table in which
  <span class="placeholder">F</span> is 200. Published source code shows that this 
  table is labelled <span class="variable">YRTAB</span>. The kernel has a days-per-month 
  table labelled <span class="variable">MONTAB</span>. It’s the one table for both 
  leap years and not. To adjust its second byte for the year, call
  <span class="instruction">int 2Fh</span> function 111Bh. Note that
  <span class="variable">MONTAB</span> is not in the swappable data area whose address 
  and size are returned through <span class="instruction">int 21h</span> function 
  5D06h: this use of the kernel’s tables, with adjustment for leap years, assumes 
  execution in a critical section. </p>
  <p>That the interface allows, if not expects, to be fed the addresses of tables 
  in the kernel has in practice required that these addresses were stablised long 
  ago. Starting with version 3.10 and its introduction of a data version at offset 
  04h in the kernel’s data segment, the two tables are reliably at the following 
  offsets into the kernel’s data: </p>
  <table>
    <thead>
      <tr>
        <th>Name </th>
        <th>Offset If Data Version 0 </th>
        <th>Offset If Data Version 1 </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="variable">YRTAB</span> </td>
        <td>0C7Ah </td>
        <td>0D14h </td>
      </tr>
      <tr>
        <td><span class="variable">MONTAB</span> </td>
        <td>0C82h </td>
        <td>0D1Ch </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 6th
    <a href="../../../../../new/21/10.htm">October 2021</a> and was last modified on 
    30th October 2021. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c21.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2021. Geoff Chappell. All rights reserved. 
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="46623" -->
  </div>
</div>

</body>

</html>
