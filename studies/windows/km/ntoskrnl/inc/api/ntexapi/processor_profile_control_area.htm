<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>PROCESSOR_PROFILE_CONTROL_AREA</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<h1>PROCESSOR_PROFILE_CONTROL_AREA </h1>
<p>The processors that Windows runs on have an increasing wealth of debugging support 
that includes a style of tracing or profiling in which the processor does not interrupt 
its execution, as for debug exceptions, or quickly save details into a handful of 
available Model Specific Registers, but instead records events in a possibly large 
area of memory. This processor feature looks to have started with the development 
of Last Branch Recording (LBR) into the Branch Trace Store (BTS). It also supports 
Processor Event Based Sampling (PEBS). Separate memory for branch records and PEBS 
records is found from pointers and other control data in a Debug Store (DS) Save 
Area. It is DS which has the corresponding <span class="instruction">cpuid</span> 
feature flag to tell of its overall availability, and then bits in the
<span class="register">IA32_MISC_ENABLE</span> MSR tell whether the particular sub-features 
BTS and PEBS are unavailable. The <span class="struct">PROCESSOR_PROFILE_CONTROL_AREA</span> 
is Microsoft’s generalisation of a control area for this sort of processor profiling 
such as it might ever be developed beyond DS by Intel or be supported at all for 
processors from other vendors. </p>
<h2>Availability </h2>
<p>The <span class="struct">PROCESSOR_PROFILE_CONTROL_AREA</span> dates from version 
6.2. </p>
<p>The intended way that a <span class="struct">PROCESSOR_PROFILE_CONTROL_AREA</span> 
is created for a processor is through the <span class="function">
<a href="../../../api/ex/sysinfo/set.htm">ZwSetSystemInformation</a></span> function’s 
information class <span class="constant">SystemProcessorProfileControlArea</span> 
(0x81). The caller provides a <span class="struct">
<a href="../../../api/ex/sysinfo/processor_profile_control_area.htm">SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA</a></span> 
as the information buffer. Setting the <span class="member">Allocate</span> member 
to <span class="constant">TRUE</span> for input has the kernel create a
<span class="struct">PROCESSOR_PROFILE_CONTROL_AREA</span> for the current processor 
and return the address as output in the <span class="member">ProcessorProfileControlArea</span> 
member. Calling with <span class="member">Allocate</span> as
<span class="constant">FALSE</span> destroys the current processor’s
<span class="struct">PROCESSOR_PROFILE_CONTROL_AREA</span>. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">PROCESSOR_PROFILE_CONTROL_AREA</span> is not documented. 
What’s known of its layout, below, is from public symbol files for the kernel, starting 
with version 6.2. </p>
<h2>Layout </h2>
<p>The <span class="struct">PROCESSOR_PROFILE_CONTROL_AREA</span> is 0x60 bytes 
in both 32-bit and 64-bit Windows in version 6.2 and higher. </p>
<table class="Struct">
  <tr>
    <th>Offset </th>
    <th>Definition </th>
    <th>Version </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>
    <pre class="source">PEBS_DS_SAVE_AREA PebsDsSaveArea;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
</table>
<p>The only profiling that is yet accommodated in the <span class="struct">PROCESSOR_PROFILE_CONTROL_AREA</span> 
is Intel’s Debug Store. The <span class="struct">PEBS_DS_SAVE_AREA</span> is Microsoft’s 
representation of what the Intel processor manuals present as the 64-Bit DS Save 
Area. While it is not known to have any separate use in Windows, it is as well given 
here. </p>
<table class="Struct">
  <tr>
    <th>Offset </th>
    <th>Definition </th>
    <th>Version </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>
    <pre class="source">ULONGLONG BtsBufferBase;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>
    <pre class="source">ULONGLONG BtsIndex;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>
    <pre class="source">ULONGLONG BtsAbsoluteMaximum;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>
    <pre class="source">ULONGLONG BtsInterruptThreshold;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x20 </td>
    <td>
    <pre class="source">ULONGLONG PebsBufferBase;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>
    <pre class="source">ULONGLONG PebsIndex;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x30 </td>
    <td>
    <pre class="source">ULONGLONG PebsAbsoluteMaximum;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x38 </td>
    <td>
    <pre class="source">ULONGLONG PebsInterruptThreshold;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x40 </td>
    <td>
    <pre class="source">ULONGLONG PebsCounterReset0;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x48 </td>
    <td>
    <pre class="source">ULONGLONG PebsCounterReset1;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x50 </td>
    <td>
    <pre class="source">ULONGLONG PebsCounterReset2;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x58 </td>
    <td>
    <pre class="source">ULONGLONG PebsCounterReset3;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
</table>
<p>The kernel retains access to the <span class="member">PebsIndex</span> member. 
This allows the kernel to stamp the current PEBS index into the kernel’s own events 
as extended event data. This is a potentially important provision for reconciling 
the processor’s PEBS records with the bigger picture of what the kernel was doing 
at the time. Notably, the kernel can be configured to add PEBS indexes to its traces 
of when the processor switched from one thread to another. </p>
<div class="Footer">
  <p class="Dates">This page was created on 3rd
  <a href="../../../../../../../new/19/12.htm">January 2020</a> and was last modified 
  on 4th January 2020. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5634" -->
</div>

</body>

</html>
