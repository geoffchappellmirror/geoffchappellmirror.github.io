<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CL /wd</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>CL /wd </h1>
<h2>Syntax </h2>
<blockquote>
  <p><span class="switch">/wd</span><span class="placeholder">number</span> </p>
</blockquote>
<!--webbot bot="Include" U-Include="_include/2star.htm" TAG="BODY" startspan -->

<p>The required argument consists of whatever follows immediately within the same 
command-line token, else is the whole of the next command-line token if this token 
does not begin with a hyphen or forward slash. </p>

<!--webbot bot="Include" i-checksum="49301" endspan -->
<p>The argument is formally numeric. Values outside the range 4001 to 4999 inclusive 
are coerced to 4999, with a warning (D4014). </p>
<h3>Relations </h3>
<p>The <span class="switch">/wd</span> option has no syntactical relations with 
other options. </p>
<!--webbot bot="Include" U-Include="_include/1pm.htm" TAG="BODY" startspan -->

<p>This option passes to the front-end C and C++ compilers (C1 and C1XX) only.
</p>

<!--webbot bot="Include" i-checksum="22770" endspan -->
<h2>Behaviour </h2>
<p>This option disables the given warning <span class="placeholder">number</span>. 
If the condition associated with the warning occurs, its detection is not reported 
as a warning. </p>
<!--webbot bot="Include" U-Include="_include/c4200.htm" TAG="BODY" startspan -->

<p>This option is ineffective for warning C4200. All C and C++ source files, even 
if empty, are compiled with a forced inclusion at the very start. This “file” of
<a href="../../../language/predefined/index.htm">predefined types</a> is hard-coded 
into the compiler. Some of these types have unsized arrays as members. Each instance 
is preceded by <span class="directive">#pragma warning (disable : 4200)</span> and 
followed by <span class="directive">#pragma warning (default : 4200)</span>. This 
is arguably pointless, since the compiler disables warnings and errors (though not 
fatal errors) while processing this built-in inclusion, but a side-effect is that 
when the compiler progresses to the user-supplied source code, warning C4200 has 
already been set to its default behaviour. Whatever may have been intended by giving 
4200 as the argument to a <span class="switch">/w1</span>, <span class="switch">
/w2</span>, <span class="switch">/w3</span>, <span class="switch">/w4</span>,
<span class="switch">/wd</span>, <span class="switch">/we</span> or
<span class="switch">/wo</span> option on the command line is then irrelevant, essentially 
as if <span class="directive">#pragma warning (default : 4200)</span> had been the 
first line of the source file. </p>

<!--webbot bot="Include" i-checksum="11739" endspan -->
<p>Some warning numbers are ordinarily disabled, as if the corresponding
<span class="switch">/wd</span> option were generated internally before acting on 
any options from the command line. For instance, the following table shows the warnings 
that the front-end C++ compiler (C1XX) disables automatically, unless prevented 
by the <span class="switch"><a href="w$all.htm">/Wall</a></span> option. A few of 
these seem to be undocumented and are <span class="undocumented">highlighted yellow</span>.
</p>
<table>
  <tr>
    <td>C4061 </td>
    <td>enumerate &#39;<span class="placeholder">identifier</span>&#39; in switch of enum 
    &#39;<span class="placeholder">enumeration</span>&#39; is not explicitly handled by 
    a case label</td>
  </tr>
  <tr>
    <td>C4062 </td>
    <td>enumerate &#39;<span class="placeholder">identifier</span>&#39; in switch of enum 
    &#39;<span class="placeholder">enumeration</span>&#39; is not handled</td>
  </tr>
  <tr>
    <td>C4191 </td>
    <td>&#39;<span class="placeholder">operator/operation</span>&#39; : unsafe conversion 
    from &#39;<span class="placeholder">type of expression</span>&#39; to &#39;<span class="placeholder">type 
    required</span>&#39;<br>
    Calling this function through the result pointer may cause your program to fail</td>
  </tr>
  <tr>
    <td>C4217 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : member template functions 
    cannot be used for copy-assignment or copy-construction</td>
  </tr>
  <tr>
    <td>C4242 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : conversion from &#39;<span class="placeholder">type1</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39;, possible loss of data</td>
  </tr>
  <tr>
    <td>C4254 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : conversion from &#39;<span class="placeholder">type1</span>&#39;:&#39;<span class="placeholder">bits</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39;:&#39;<span class="placeholder">bits</span>&#39;, 
    possible loss of data</td>
  </tr>
  <tr>
    <td>C4255 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : no function prototype given: 
    converting &#39;()&#39; to &#39;(void)&#39;</td>
  </tr>
  <tr>
    <td>C4263 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : member function does not override 
    any base class virtual member function</td>
  </tr>
  <tr>
    <td>C4264 </td>
    <td>&#39;<span class="placeholder">virtual_function</span>&#39; : no override available 
    for virtual member function from base &#39;<span class="placeholder">class</span>&#39;; 
    function is hidden</td>
  </tr>
  <tr>
    <td>C4265 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : class has virtual functions, 
    but destructor is not virtual<br>
&nbsp;instances of this class may not be destructed correctly</td>
  </tr>
  <tr>
    <td>C4287 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : unsigned/negative constant 
    mismatch</td>
  </tr>
  <tr>
    <td>C4289 </td>
    <td>nonstandard extension used : &#39;<span class="placeholder">var</span>&#39; : loop 
    control variable declared in the for-loop is used outside the for-loop scope</td>
  </tr>
  <tr>
    <td>C4296 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : expression is always
    <span class="placeholder">value</span></td>
  </tr>
  <tr>
    <td>C4302 </td>
    <td>&#39;<span class="placeholder">conversion</span>&#39; : truncation from &#39;<span class="placeholder">type1</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4339 </td>
    <td>&#39;<span class="placeholder">type</span>&#39; : use of undefined type detected 
    in CLR meta-data - use of this type may lead to a runtime exception</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4370</span> </td>
    <td>&#39;%$pS&#39; : layout of class has changed from a previous version of the compiler 
    due to better packing</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4371</span> </td>
    <td>&#39;%$pS&#39; : layout of class may have changed from a previous version of the 
    compiler due to better packing of member &#39;%$S&#39;</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4372</span> </td>
    <td>&#39;%$pS&#39; : calling convention for UDT return value has changed from a previous 
    version of the compiler</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4373</span> </td>
    <td>&#39;%$S&#39;: virtual function overrides &#39;%$pS&#39;, previous versions of the compiler 
    did not override when parameters only differed by const/volatile qualifiers</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4444</span> </td>
    <td>&#39;%$I&#39; : top level &#39;__unaligned&#39; is not implemented in this context</td>
  </tr>
  <tr>
    <td>C4514 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : unreferenced inline function 
    has been removed</td>
  </tr>
  <tr>
    <td>C4529 </td>
    <td>&#39;<span class="placeholder">member_name</span>&#39; : forming a pointer-to-member 
    requires explicit use of the address-of operator (&#39;&amp;&#39;) and a qualified name</td>
  </tr>
  <tr>
    <td>C4536 </td>
    <td>&#39;<span class="placeholder">type name</span>&#39; : type-name exceeds meta-data 
    limit of &#39;<span class="placeholder">limit</span>&#39; characters</td>
  </tr>
  <tr>
    <td>C4555 </td>
    <td>expression has no effect; expected expression with side-effect</td>
  </tr>
  <tr>
    <td>C4557 </td>
    <td>&#39;__assume&#39; contains effect &#39;%$L&#39;</td>
  </tr>
  <tr>
    <td>C4619 </td>
    <td>#pragma warning : there is no warning number &#39;<span class="placeholder">number</span>&#39;</td>
  </tr>
  <tr>
    <td>C4623 </td>
    <td>&#39;<span class="placeholder">derived class</span>&#39; : default constructor could 
    not be generated because a base class default constructor is inaccessible</td>
  </tr>
  <tr>
    <td>C4625 </td>
    <td>&#39;<span class="placeholder">derived class</span>&#39; : copy constructor could 
    not be generated because a base class copy constructor is inaccessible</td>
  </tr>
  <tr>
    <td>C4626 </td>
    <td>&#39;<span class="placeholder">derived class</span>&#39; : assignment operator could 
    not be generated because a base class assignment operator is inaccessible</td>
  </tr>
  <tr>
    <td>C4640 </td>
    <td>&#39;<span class="placeholder">instance</span>&#39; : construction of local static 
    object is not thread-safe</td>
  </tr>
  <tr>
    <td>C4668 </td>
    <td>&#39;<span class="placeholder">symbol</span>&#39; is not defined as a preprocessor 
    macro, replacing with &#39;0&#39; for &#39;<span class="placeholder">directives</span>&#39;</td>
  </tr>
  <tr>
    <td>C4682 </td>
    <td>&#39;<span class="placeholder">parameter</span>&#39; : no directional parameter 
    attribute specified, defaulting to [in]</td>
  </tr>
  <tr>
    <td>C4710 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : function not inlined</td>
  </tr>
  <tr>
    <td>C4786 </td>
    <td>&#39;<span class="placeholder">identifer</span>&#39; : identifier was truncated 
    to &#39;<span class="placeholder">number</span>&#39; characters in the
    <span class="placeholder">debug/browser</span> information</td>
  </tr>
  <tr>
    <td>C4793 </td>
    <td>native code generated for &#39;<span class="placeholder">attribute</span>&#39; function 
    &#39;<span class="placeholder">function</span>&#39;</td>
  </tr>
  <tr>
    <td>C4820 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : &#39;<span class="placeholder">bytes</span>&#39; 
    bytes padding added after member &#39;<span class="placeholder">member</span>&#39;</td>
  </tr>
  <tr>
    <td>C4905 </td>
    <td>wide string literal cast to &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td>C4906 </td>
    <td>string literal cast to &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td>C4917 </td>
    <td>&#39;<span class="placeholder">declarator</span>&#39; : a GUID can only be associated 
    with a class, interface or namespace</td>
  </tr>
  <tr>
    <td>C4928 </td>
    <td>illegal copy-initialization; more than one user-defined conversion has been 
    implicitly applied</td>
  </tr>
  <tr>
    <td>C4931 </td>
    <td>we are assuming the type library was built for <span class="placeholder">
    number</span>-bit pointers</td>
  </tr>
  <tr>
    <td>C4946 </td>
    <td>reinterpret_cast used between related classes: &#39;<span class="placeholder">class1</span>&#39; 
    and &#39;<span class="placeholder">class2</span>&#39;</td>
  </tr>
</table>
<div class="Footer">
  <p class="Dates">This page was created on 27th October 2005 and was last modified 
  on 11th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0509.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62424" endspan -->
</div>

</body>

</html>
