<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Name Decoration</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<!--webbot bot="Include" U-Include="../../_include/sketch.htm" TAG="BODY" startspan -->

<p class="alert">SKETCH OF HOW RESEARCH MIGHT CONTINUE AND RESULTS BE PRESENTED 
- PREVIEW ONLY </p>

<!--webbot bot="Include" i-checksum="42246" endspan -->
<h1>Name Decoration </h1>
<p>C++ provides that even within one source file the same simple identifier may 
refer to different objects in different circumstances. The intended object is inferred, 
e.g., from the current scope or from the types of argument passed to an overloaded 
function. Of course, each object has a fully-qualified name within the C++ source 
file, but objects with external linkage need to be distinguishable, and even identifiable 
to some extent, by more or less arbitrary programming tools for more or less arbitrary 
purposes. </p>
<p>Most notable among such tools is the linker, which ultimately has the job of 
finding which object defined in which source file is intended by which reference 
in which (other) source file. </p>
<p>Microsoft is surely sensible—indeed, perfectly so—to warn programmers not to 
depend on whatever they think they know of any algorithm they suppose Microsoft 
uses for name decoration. Algorithmic consistency is not required of Microsoft even 
between different versions of Microsoft’s compiler. What other compilers do for 
name decoration is not in Microsoft’s hands and is not anything that Microsoft need 
care to know. That said, Microsoft has itself brought name decoration to greater 
attention by implementing and documenting the built-in macro <span class="macro">
__FUNCDNAME__</span> and providing the UNDNAME.EXE program (which is a front-end 
for the <span class="function">__unDName</span> and <span class="function">__unDNameEx</span> 
functions that have long been implemented, but not documented, in the C Run-Time 
Library). </p>
<h2>Syntax </h2>
<p>The rules for a symbolic name are ultimately those of the linker, which happen 
also to be those of Microsoft’s assembler (MASM). The permitted characters are alphanumeric 
(letters A to Z in upper and lower case, and digits 0 to 9), plus the dollar sign, 
question mark, @ sign and underscore. The first character, however, cannot be a 
digit. </p>
<p>The letters, digits and underscore are anyway the characters of C++ identifiers, 
also with the exception about not starting with a digit. Since the dollar sign, 
question mark and @ signs are not valid characters in C++ identifiers (discounting 
for now that $ is allowed in identifiers when the <span class="switch">
<a href="../../cl/cl/options/z$e.htm">/Ze</a></span> option is active), they find 
use in the symbolic name as signifiers and separators. </p>
<p>The general form for a decorated name is to begin with a question mark, name 
the object and its scope, and continue with whatever attributes, parameters or properties 
seem helpful. </p>
<blockquote>
  <p><span class="symbol">?</span><span class="placeholder"><a href="name.htm">name</a></span>[<span class="symbol">@</span>][<span class="placeholder">scope</span><span class="symbol">@</span>]<span class="symbol">@</span><span class="placeholder">parameters</span>
  </p>
</blockquote>
<p>The leading question mark presumably announces that the symbol is for an object 
with C++ linkage, as opposed to C linkage which has its symbols start with an underscore 
or @ sign. </p>
<p>The <span class="placeholder">parameters</span> vary, strongly, with the type 
of object. </p>
<ul>
  <li>Functions </li>
  <li><a href="strings.htm">String Literals</a> </li>
</ul>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="58117" endspan -->
</div>

</body>

</html>
