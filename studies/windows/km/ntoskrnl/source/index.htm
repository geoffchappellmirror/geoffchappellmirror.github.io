<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Windows Kernel Source Code</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/km.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="63592" -->
<div class="Main">
  <h1>Windows Kernel Source Code </h1>
  <p>Don’t get excited! I have no access to Microsoft’s source code for the Windows 
  kernel. I never have had. I have no secrets to spill. What I do have is a growing 
  belief that some questions about Windows source code might better be put to rest.
  </p>
  <h2>Irrelevance </h2>
  <p>Though I have been looking at the Windows kernel for much longer than most, 
  I can’t speak for everyone who studies Windows. Indeed, the way I came to it and 
  thence the way I do it may be very particular. From my perspective as a reverse 
  engineer of Windows to know it better for programming, I see little-to-no point 
  in wondering about Microsoft’s source code and even less in writing about it. 
  What counts for me is the binary code that actually runs on computers and which 
  my code will interact with—if there’s ever enough time left over from reverse 
  engineering so that I actually do get to write my own code! </p>
  <p>That said, I <span class="emphasis">imagine</span> the source code is similarly 
  unimportant for the very different work of reverse engineering for computer security. 
  What Microsoft puts in its source code—or what Microsoft’s programmers thought 
  they put in the source code—is at best peripheral to what the malware exploits 
  and even to what vulnerabilities might be found in advance to close before they’re 
  exploited. </p>
  <p>By saying peripheral I don’t mean to dismiss. Understanding source code certainly 
  does have its place. Indeed, it may provide essential insight to how the hand-crafted 
  part of the engineering left the malware with something to exploit. But it’s just 
  not <span class="emphasis">central</span> to any reverse engineering as a study 
  of software’s behaviour. </p>
  <p>Of course, to read binary code efficiently, you better have a good practical 
  sense for how binary code is generated from source code. For instance, you will 
  read instructions faster if you’ve subsumed into your subconscious mind your knowledge 
  of which sequences are the typical output of compilers, much like you can read 
  English better for knowing which sequences of letters are generally accepted as 
  English words. And much as you will read well-written English better for anticipating 
  that the words will make an idiomatic sentence, so too do you benefit from knowing 
  what larger-scale sequences to expect from a compiler’s treatment of local variables, 
  conditional blocks, loops and exception handling. </p>
  <p>Or maybe you don’t need any such understanding! Perhaps you do well enough 
  to trust that your disassembler, decompiler or other such tools handle it all 
  for you. Perhaps you can succeed at reverse engineering even if these tools’ output 
  is as much magic to you as code generation is to most programmers. </p>
  <p><span class="alert">WRITING IN PROGRESS</span> </p>
  <div class="Footer">
    <p class="Dates">This page was created on 20th July 2020 but was not published 
    until 30th August 2022. It was last modified on 28th February 2023. It is barely 
    started and may never be finished. </p>
    <!-- webbot bot="Include" U-Include="../../_include/c2223.htm" TAG="BODY" -->
  </div>
</div>

</body>

</html>
