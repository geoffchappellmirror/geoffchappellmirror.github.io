<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>The Second Extended Window Style</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="54033" -->
<h1>The Second Extended Window Style </h1>
<p>It was only ever inevitable that the <span class="struct">
<a href="index.htm">WND</a></span> structure would need yet more bit flags than 
the age-old <span class="member"><a href="state.htm">state</a></span>,
<span class="member"><a href="style.htm">style</a></span> and
<span class="member"><a href="exstyle.htm">ExStyle</a></span>, even after the addition 
of <span class="member"><a href="state2.htm">state2</a></span> for version 4.0. 
The first surprise when more came for version 6.0 is the name. The bit fields are 
in union with a <span class="type">ULONG</span> named <span class="member">ExStyle2</span>, 
but none of the bits is an extended window style. Though one does at least affect 
what’s reported as the window’s extended style, the set is very much more an extension 
of <span class="member">state</span> and <span class="member">state2</span> than 
of <span class="member">style</span> and <span class="member">ExStyle</span>.
</p>
<p>Another surprise is that although the new <span class="member">ExStyle2</span> 
was appended to the <span class="struct">WND</span>, and is thus disjoint from the 
other sets of bit flags, the 16-bit encoding of window flags as if
<span class="member">state</span>, <span class="member">state2</span>,
<span class="member">ExStyle</span> and <span class="member">style</span> make a 
large array of bits extends to the <span class="member">ExStyle2</span> too. In 
this encoding of any window flag, the high byte is a byte offset from the
<span class="member">state</span> to the bit and the low byte is a bit mask within 
the byte. Though version 6.0 is not known to use this encoding for the
<span class="member">ExStyle2</span> bits, the use is well established by version 
6.1. </p>
<table class="Bits">
  <tr>
    <th>Mask </th>
    <th>Window Flag Index </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0x00000001 </td>
    <td>0x9801 </td>
    <td>
    <pre class="source">INT bClipboardListener : 1;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000002 </td>
    <td>0x9802 </td>
    <td>
    <pre class="source">INT bLayeredInvalidate : 1;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000004 </td>
    <td>0x9804 </td>
    <td>
    <pre class="source">INT bRedirectedForPrint : 1;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000008 </td>
    <td>0x9808 </td>
    <td>
    <pre class="source">INT bLinked : 1;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000010 </td>
    <td>0x9810 </td>
    <td>&nbsp;</td>
    <td>6.2 and higher </td>
    <td>no use yet known </td>
  </tr>
  <tr>
    <td>0x00000010 (6.0 to 6.1); <br>
    0x00000020 </td>
    <td>0x9810 (6.0 to 6.1); <br>
    0x9820 </td>
    <td>
    <pre class="source">INT bLayeredForDWM : 1;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000020 (6.0 to 6.1); <br>
    0x00000040 </td>
    <td>0x9820 (6.0 to 6.1); <br>
    0x9840 </td>
    <td>
    <pre class="source">INT bLayeredLimbo : 1;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000040 (6.0 to 6.1); <br>
    0x00000080 </td>
    <td>0x9840 </td>
    <td>
    <pre class="source">INT bHIGH_DPI_UNAWARE_Unused : 1;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>The <span class="member">bRedirectedForPrint</span> flag provides another good 
example of efficiency that results from the visibility of the
<span class="struct">WND</span> in user mode. The USER32 export
<span class="function">IsWindowRedirectedForPrint</span> needs no kernel-mode transition: 
it merely resolves the window handle to a pointer and extracts this bit. </p>
<p>Version 6.2 evidently inserted a bit, shifting others to higher values, but I 
don’t yet know what for, let alone why. </p>
<p>If <span class="member">bLayeredForDWM</span> is set, then the extended window 
styles produced by the <span class="constant">GWL_EXSTYLE</span> case of the USER32 
function <span class="function">GetWindowLong</span> have <span class="constant">
WS_EX_LAYERED</span> clear. </p>
<h3>Appended For Windows 7 </h3>
<table class="Bits">
  <tr>
    <th>Mask </th>
    <th>Window Flag Index </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00000080 (6.1); <br>
    0x00000100 </td>
    <td>0x9880 (6.1); <br>
    0x9901 </td>
    <td>
    <pre class="source">INT bVerticallyMaximizedLeft : 1;</pre>
    </td>
    <td>6.1 and higher </td>
  </tr>
  <tr>
    <td>0x00000100 (6.1); <br>
    0x00000200 </td>
    <td>0x9901 (6.1); <br>
    0x9902 </td>
    <td>
    <pre class="source">INT bVerticallyMaximizedRight : 1;</pre>
    </td>
    <td>6.1 and higher </td>
  </tr>
  <tr>
    <td>0x00000200 (6.1); <br>
    0x00000400 </td>
    <td>0x9902 (6.1); <br>
    0x9904 </td>
    <td>
    <pre class="source">INT bHasOverlay : 1;</pre>
    </td>
    <td>6.1 and higher </td>
  </tr>
  <tr>
    <td>0x00000400 (6.1); <br>
    0x00000800 </td>
    <td>0x9904 (6.1); <br>
    0x9908 </td>
    <td>
    <pre class="source">INT bConsoleWindow : 1;</pre>
    </td>
    <td>6.1 and higher </td>
  </tr>
  <tr>
    <td>0x00000800 (6.1); <br>
    0x00001000 </td>
    <td>0x9908 (6.1); <br>
    0x9910 </td>
    <td>
    <pre class="source">INT bChildNoActivate : 1;</pre>
    </td>
    <td>6.1 and higher </td>
  </tr>
</table>
<h3>Appended Since Windows 7 </h3>
<p>Microsoft’s names and definitions for bits that have been defined since Windows 
7 may never be known. If only for now, I can contribute no more than placeholders.
</p>
<table class="Bits">
  <tr>
    <th>Mask </th>
    <th>Window Flag Index </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00002000 </td>
    <td>0x9920 </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x00004000 </td>
    <td>0x9940 </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x00008000 </td>
    <td>0x9980 </td>
    <td>6.3 and higher </td>
  </tr>
  <tr>
    <td>0x00010000 </td>
    <td>0x9A01 </td>
    <td>6.3 and higher </td>
  </tr>
  <tr>
    <td>0x00020000 </td>
    <td>0x9A02 </td>
    <td>6.3 and higher </td>
  </tr>
  <tr>
    <td>0x00040000 </td>
    <td>0x9A04 </td>
    <td>6.3 and higher </td>
  </tr>
  <tr>
    <td>0x00080000 </td>
    <td>0x9A08 </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x00100000 </td>
    <td>0x9A10 </td>
    <td>6.3 and higher </td>
  </tr>
  <tr>
    <td>0x00200000 </td>
    <td>0x9A20 </td>
    <td>6.3 and higher </td>
  </tr>
  <tr>
    <td>0x00400000 </td>
    <td>0x9A40 </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x00800000 </td>
    <td>0x9A80 </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x01000000 </td>
    <td>0x9B01 </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x02000000 </td>
    <td>0x9B02 </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x04000000 </td>
    <td>0x9B04 </td>
    <td>10.0 and higher </td>
  </tr>
</table>
<p>If the 0x00080000 bit is used in version 6.3, I don’t yet know where. </p>
<div class="Footer">
  <p class="Dates">This page was created on 9th August 2017 but was not published 
  until 30th <a href="../../../../../../new/17/09.htm">September 2017</a>. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c17.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="62677" -->
</div>

</body>

</html>
