<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SYSTEM_HYPERVISOR_QUERY_INFORMATION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>SYSTEM_HYPERVISOR_QUERY_INFORMATION </h1>
  <p>The <span class="struct">SYSTEM_HYPERVISOR_QUERY_INFORMATION</span> structure 
  (formally <span class="struct">_SYSTEM_HYPERVISOR_QUERY_INFORMATION</span>) is 
  what a successful call to <span class="function">
  <a href="../../../api/ex/sysinfo/query.htm">ZwQuerySystemInformation</a></span> 
  or <span class="function">NtQuerySystemInformation</span> produces in its output 
  buffer when given the information class <span class="constant">SystemHypervisorInformation</span> 
  (0x5B). </p>
  <h2>Availability </h2>
  <p>The <span class="struct">SYSTEM_HYPERVISOR_QUERY_INFORMATION</span> and the 
  corresponding information class were introduced for Windows Vista and remain defined 
  at least to the 2004 release of Windows 10. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">SYSTEM_HYPERVISOR_QUERY_INFORMATION</span> structure 
  is not documented. </p>
  <!--webbot bot="Include" u-include="../_include/type_info_urlmon.htm" tag="BODY" startspan -->

<p>Microsoft does publish the practical equivalent of a C-language definition as 
type information in symbol files—not for the kernel, where the structure is prepared, 
nor even for low-level user-mode DLLs that interpret the structure, but for a handful 
of higher-level DLLs that might ordinarily be thought very distant from any involvement 
with the structure. Perhaps only by oversight, but starting as long ago as Windows 
8, Microsoft’s downloadable packages of public symbols have included a smattering 
of private symbol files and these continue to be available through the public symbol 
server. Precisely which DLLs have the type information varies between versions. 
COMBASE.DLL is among the more reliable nowadays. Disclosure in symbol files for 
URLMON.DLL stopped for the 1803 release of Windows 10 but is specially notable 
because of this DLL’s origins in Internet Explorer and thence for the strong suggestion 
that Microsoft’s programmers of Internet Explorer had access to more details of 
low-level Windows programming than Microsoft publishes for wider use (including 
by the programmers of competing web browsers). </p>

<!--webbot bot="Include" endspan i-checksum="12783" --><h2>
  Layout </h2>
  <p>The <span class="struct">SYSTEM_HYPERVISOR_QUERY_INFORMATION</span> is 0x10 
  bytes in 32-bit and 64-bit Windows. Offsets, names and types are from symbol files, 
  as noted above, starting with Windows 8. What’s known for earlier versions is 
  something of a guess from inspection of the kernel. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">BOOLEAN HypervisorConnected;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x01 </td>
        <td>
        <pre class="source">BOOLEAN HypervisorDebuggingEnabled;</pre>
        </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x02 </td>
        <td>
        <pre class="source">BOOLEAN HypervisorPresent;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x03 </td>
        <td>
        <pre class="source">UCHAR HypervisorSchedulerType;</pre>
        </td>
        <td>1903 and higher </td>
      </tr>
      <tr>
        <td rowspan="4">0x01 (6.0 to 6.2); <br>
        0x02 (6.3); <br>
        0x03 (10.0 to 1809); <br>
        0x04 </td>
        <td>
        <pre class="source">UCHAR Spare0 [7];</pre>
        </td>
        <td>6.0 to 6.2 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UCHAR Spare0 [6];</pre>
        </td>
        <td>6.3 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UCHAR Spare0 [5];</pre>
        </td>
        <td>10.0 to 1809 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UCHAR Spare0 [4];</pre>
        </td>
        <td>1903 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x08 </td>
        <td>
        <pre class="source">ULONGLONG EnabledAddressSpaceEnlightenments;</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONGLONG EnabledEnlightenments;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Microsoft’s assembly-language names for a few of the <span class="member">EnabledEnlightenments</span> 
  are known from headers named KS386.INC and KSAMD64.INC in either or both of Windows 
  Driver Kit (WDK) and the Software Development Kit (SDK) for various Windows versions:
  </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Name"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Name </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00000001 </td>
        <td><span class="constant">HV_MMU_USE_HYPERCALL_FOR_ADDRESS_SWITCH</span>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000002 </td>
        <td><span class="constant">HV_MMU_USE_HYPERCALL_FOR_LOCAL_FLUSH</span>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000004 </td>
        <td><span class="constant">HV_MMU_USE_HYPERCALL_FOR_REMOTE_FLUSH</span>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000010 </td>
        <td><span class="constant">HV_APIC_ENLIGHTENED</span> </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x00000040 </td>
        <td><span class="constant">HV_KE_USE_HYPERCALL_FOR_LONG_SPIN_WAIT</span>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x00002000 (6.2 to 10.0); <br>
        0x00001000 </td>
        <td><span class="constant">HV_DEPRECATE_AUTO_EOI</span> </td>
        <td>6.2 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Independently of what names might be learnt from Microsoft, the following quick 
  survey of individual bits is obtained by looking at how the kernel initialises 
  the variable that <span class="member">EnabledEnlightenments</span> is copied 
  from. The kernel determines most from one or another bit in the output from one 
  or another <span class="instruction">cpuid</span> leaf. These bits are described 
  below by their names in the <span class="struct">
  <a href="../../shared/hvgdk_mini/hv_x64_hypervisor_features.htm">HV_X64_HYPERVISOR_FEATURES</a></span>,
  <span class="struct">
  <a href="../../shared/hvgdk_mini/hv_x64_enlightenment_information.htm">HV_X64_ENLIGHTENMENT_INFORMATION</a></span> 
  or <span class="struct">
  <a href="../../shared/hvgdk_mini/hv_x64_hypervisor_cpu_management_features.htm">
  HV_X64_HYPERVISOR_CPU_MANAGEMENT_FEATURES</a></span> structures that are Microsoft’s 
  programmatic representation of the output from <span class="instruction">cpuid</span> 
  leaves 0x40000003, 0x40000004 and 0x40000007, respectively. For some, there are 
  additional conditions or other subtleties. The aim below is only to sketch what 
  looks most likely as the essential character for Microsoft’s choice of its unknown 
  names for the <span class="member">EnabledEnlightenments</span>. It is all anyway 
  a work in (occasional) progress. In particular, I’m yet to study the additions 
  for Version 1703 and higher, let alone to devise their presentation. </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Remarks" span="2"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Leaf </th>
        <th>Bit </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00000001 </td>
        <td>0x40000004 </td>
        <td><span class="member">UseHypercallForAddressSpaceSwitch</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000002 </td>
        <td>0x40000004 </td>
        <td><span class="member">UseHypercallForLocalFlush</span> <br>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000004 </td>
        <td>0x40000004 </td>
        <td><span class="member">UseHypercallForRemoteFlush</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="3">0x00000008 </td>
        <td>&nbsp;</td>
        <td>always set </td>
        <td>6.0 only </td>
      </tr>
      <tr>
        <td>0x40000003 </td>
        <td><span class="member">CpuManagement</span> </td>
        <td>6.1 to 6.3 </td>
      </tr>
      <tr>
        <td>0x40000007 </td>
        <td><span class="member">ReservedIdentityBit</span> </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000010 </td>
        <td>0x40000004 </td>
        <td><span class="member">UseApicMsrs</span> <br>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000020 </td>
        <td>0x40000004 </td>
        <td><span class="member">UseRelaxedTiming</span> </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x00000040 </td>
        <td>0x40000004 </td>
        <td>positive <span class="member">LongSpinWaitCount</span> </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x00000080 </td>
        <td>0x40000003 </td>
        <td><span class="member">XmmRegistersForFastHypercallAvailable</span>
        </td>
        <td>6.1 and higher (x64) </td>
      </tr>
      <tr>
        <td>0x00000100 </td>
        <td>0x40000003 </td>
        <td>both <span class="member">AccessPartitionReferenceCounter</span> <br>
        and <span class="member">AccessPartitionReferenceTsc</span> </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x00000200 </td>
        <td>0x40000003 </td>
        <td><span class="member">GuestIdleAvailable</span> </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000400 </td>
        <td>0x40000003 </td>
        <td><span class="member">CpuManagement</span> </td>
        <td>6.2 to 6.3 </td>
      </tr>
      <tr>
        <td>0x40000007 </td>
        <td><span class="member">ProcessorPowerManagement</span> </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000800 </td>
        <td>0x40000003 </td>
        <td>either <span class="member">CpuManagement</span> <br>
        or <span class="member">NumaDistanceQueryAvailable</span> </td>
        <td>6.2 to 6.3 </td>
      </tr>
      <tr>
        <td>0x40000003 </td>
        <td><span class="member">NumaDistanceQueryAvailable</span> </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00001000 </td>
        <td>0x40000004 </td>
        <td><span class="member">UseInterruptRemapping</span> </td>
        <td>6.2 to 10.0 </td>
      </tr>
      <tr>
        <td>0x00002000 (6.2 to 10.0); <br>
        0x00001000 </td>
        <td>0x40000004 </td>
        <td><span class="member">DeprecateAutoEoi</span> </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x00004000 (6.2 to 10.0); <br>
        0x00002000 </td>
        <td>0x40000003 </td>
        <td><span class="member">GuestCrashRegsAvailable</span> </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x00008000 (6.2 to 10.0); <br>
        0x00004000 </td>
        <td>0x40000004 </td>
        <td><span class="member">UseSyntheticClusterIpi</span> </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00010000 (6.2 to 10.0); <br>
        0x00008000 </td>
        <td>0x40000003 </td>
        <td><span class="member">StartVirtualProcessor</span> </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00020000 (6.2 to 10.0); <br>
        0x00010000 </td>
        <td>0x40000007 </td>
        <td><span class="member">ReservedIdentityBit</span> </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00040000 (6.2 to 10.0); <br>
        0x00020000 </td>
        <td>0x40000007 </td>
        <td><span class="member">MwaitIdleStates</span> </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00080000 (6.2 to 10.0); <br>
        0x00040000 </td>
        <td>0x40000007 </td>
        <td><span class="member">LogicalProcessorIdling</span> </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00080000 </td>
        <td>0x40000004 </td>
        <td><span class="member">UseIntForMbecSystemCalls</span> </td>
        <td>1511 and higher (x64) </td>
      </tr>
      <tr>
        <td>0x00100000 </td>
        <td>0x40000003 </td>
        <td><span class="member">HypercallMsrLockAvailable</span> </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td>0x00200000 </td>
        <td>extended <br>
        capability </td>
        <td>0x00000002 bit </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td>0x00400000 </td>
        <td>extended <br>
        capability </td>
        <td>0x00000004 bit </td>
        <td>1709 and higher </td>
      </tr>
      <tr>
        <td>0x00800000 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
        <td>1803 and higher </td>
      </tr>
      <tr>
        <td>0x01000000 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x02000000 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x04000000 </td>
        <td>0x40000003 </td>
        <td><span class="member">CrossVtlFlushAvailable</span> </td>
        <td>1903 and higher </td>
      </tr>
      <tr>
        <td>0x08000000 </td>
        <td>extended <br>
        capability </td>
        <td>0x00000080 bit </td>
        <td>2004 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">LongSpinWaitCount</span> is known to be declared as 
  an unsigned integer, but for the purpose of determining enlightenments it is reinterpreted 
  as signed. A wait count of 0x80000000 or higher, not that anyone would want it, 
  would be ignored for being negative. </p>
  <p>The 0x04000000 enlightenment is shown above as corresponding to the
  <span class="member">CrossVtlFlushAvailable</span> feature, but this is for brevity. 
  The enlightenment is reported for 32-bit Windows, but the feature relates to the 
  secure kernel and is meaningful only for 64-bit Windows. The cross-VTL flush is 
  done only as a fast hypercall, and so although the 0x04000000 englightenment requires 
  this feature, it also requires <span class="member">XmmRegistersForFastHypercallAvailable</span>.
  </p>
  <div class="Footer">
    <p class="Dates">This page was created on 9th July 2016 but was not published 
    until 19th <a href="../../../../../../../new/16/11.htm">November 2016</a>. It 
    was last modified on 26th <a href="../../../../../../../new/22/10.htm">November 
    2022</a>. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
