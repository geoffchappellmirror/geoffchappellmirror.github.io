<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Compiler Modules</title>
<link rel="stylesheet" type="text/css" href="../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../_styles/msvc.css">
<script type="text/javascript" src="../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../_scripts/document.js"></script>
<script type="text/javascript" src="../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22703" endspan -->
<h1>Compiler Modules </h1>
<p>The Visual C++ suite produces an executable from source files in distinct stages, 
each handled by its own module. </p>
<p>The production is typically set in train by executing the CL.EXE program. It 
is CL that is told what files to operate on and with what options. The general aim 
is that each C or C++ source file is compiled to produce a corresponding object 
file, then these are linked, possibly with more files, to produce the executable. 
It falls to CL to work out what processing is required and to coordinate the execution 
of the compiler modules and of the linker (which is in this sense also a compiler 
module but can be, and typically is, run independently of CL). </p>
<h2>Compilation </h2>
<p>The production of an object file from a C or C++ source file is usually thought 
of as one operation, namely compilation. However, CL provides for this operation 
to go through as many as three stages. When the operation is arranged so that CL 
names the various stages while describing its progress (as when given multiple source 
files to process as a batch, with the <span class="switch">
<a href="cl/options/zm.htm">/ZM</a></span> option active), the names given are:
</p>
<ul>
  <li>Compiling </li>
  <li>Processing </li>
  <li>Generating Code </li>
</ul>
<p>It happens that the Visual C++ suite does not actually supply a module for the 
Processing stage, which is anyway disabled unless an undocumented option is used 
(as discussed below). In ordinary experience, compilation therefore seems to be 
done in two stages and the modules for Compiling and for Generating Code are sometimes 
referred to as the front-end and back-end compilers, respectively. Indeed, they 
are given these names formally in the message text for fatal error C1905. </p>
<p>Visual C++ supplies two front-end compilers and one back-end compiler. The two 
front-end compilers, C1.DLL and <a href="c1xx/index.htm">C1XX.DLL</a>, handle C 
and C++ source files respectively. Each takes one source file and produces from 
it a set of intermediate files. The back-end compiler, <a href="c2/index.htm">C2.DLL</a>, 
takes the intermediate files and produces from them one object file. The intermediate 
files are then ordinarily deleted by CL. </p>
<h3>Replacability </h3>
<p>The compiler modules are replacable. The <span class="switch">
<a href="cl/options/b1.htm">/B1</a></span>, <span class="switch">
<a href="cl/options/b$x.htm">/Bx</a></span> and <span class="switch">
<a href="cl/options/b2.htm">/B2</a></span> options name modules to use instead of 
C1, C1XX and C2 respectively. As if there ought to be a C1½ for the Processing stage, 
the <span class="switch"><a href="cl/options/b1_5.htm">/B1_5</a></span> option both 
activates this stage and names the module that is to do the work. </p>
<p>These compiler modules may each be a DLL or an executable. It seems that earlier 
versions of Visual C++ used executables. The use of DLLs instead of executables 
has a special benefit for performance when CL operates on a batch of source files, 
since the DLLs need not be reloaded when progressing from one source file to the 
next. </p>
<h3>Configuration </h3>
<p>It is usual to leave CL to generate command lines for the various compiler modules 
based (mostly) on what CL is itself given as a command line. Some CL options pass 
to the relevant compiler module more or less unchanged. Others stand for some (useful) 
combination of options to pass to the compiler modules. CL applies rules for whether 
one option overrides, requires or is incompatible with some other option, and the 
compiler modules do in some cases just assume that the options passed through to 
them have no conflicts. </p>
<p>Each compiler module recognises command-line options that are not known to CL 
(and are not documented by Microsoft, though at least some are surely useful for 
more than Microsoft’s own purposes of maintaining and testing the compiler modules). 
The CL options <span class="switch"><a href="cl/options/d1.htm">/d1</a></span>,
<span class="switch"><a href="cl/options/d1_5.htm">/d1_5</a></span> and
<span class="switch"><a href="cl/options/d2.htm">/d2</a></span> each name an option 
that CL is to pass to the relevant compiler module (with <span class="switch">/d1</span> 
applying to both C1 and C1XX). </p>
<h3>Selection </h3>
<p>All compiler modules are initially enabled, except for the in-between compiler 
(for the Processing stage). Several command-line options have at least as side-effects 
that they enable or disable one or more compiler modules: </p>
<table>
  <tr>
    <th>Options </th>
    <th>Compiling (C or C++) </th>
    <th>Processing </th>
    <th>Generating Code </th>
    <th>Linking </th>
  </tr>
  <tr>
    <td><span class="switch"><a href="cl/options/e.htm">/E</a></span>,
    <span class="switch"><a href="cl/options/ep.htm">/EP</a></span>,
    <span class="switch"><a href="cl/options/p.htm">/P</a></span>,
    <span class="switch"><a href="cl/options/z$g.htm">/Zg</a></span> and
    <span class="switch"><a href="cl/options/z$s.htm">/Zs</a></span> </td>
    <td>enable </td>
    <td>disable </td>
    <td>disable </td>
    <td>disable </td>
  </tr>
  <tr>
    <td><span class="switch"><a href="cl/options/bk.htm">/BK</a></span> </td>
    <td>disable </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="switch"><a href="cl/options/b1_5.htm">/B1_5</a></span> </td>
    <td>&nbsp;</td>
    <td>enable </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="switch"><a href="cl/options/$c.htm">/c</a></span> and
    <span class="switch"><a href="cl/options/zx.htm">/ZX</a></span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>disable </td>
  </tr>
</table>
<p>Only for <span class="switch">/Zs</span> and <span class="switch">/c</span> is 
the effect stated above the whole effect of the option. For <span class="switch">
/B1_5</span>, the only other effect is to name the module (no name being known to 
CL by default). </p>
<h2>Linking </h2>
<p class="alert">TO BE DONE </p>
<div class="Footer">
  <p class="Dates">This page was created on 29th October 2005 and was last modified 
  on 11th June 2009. </p>
  <!--webbot bot="Include" U-Include="../_include/c0509.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2009. Geoff Chappell. All rights reserved.
<a href="../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62439" endspan -->
</div>

</body>

</html>
