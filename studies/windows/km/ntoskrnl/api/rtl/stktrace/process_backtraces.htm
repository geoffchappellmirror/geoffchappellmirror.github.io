<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>RTL_PROCESS_BACKTRACES</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>RTL_PROCESS_BACKTRACES </h1>
<p>The <span class="struct">RTL_PROCESS_BACKTRACES</span> structure is a container 
for retrieving information from a Stack Trace Database (STD). The kernel may have 
an STD, which captures stack traces for each initialisation of an
<span class="struct">ERESOURCE</span> and, depending on the version, for each creation 
of an Object Manager handle. Arbitrary processes may each have an STD, which captures 
stack traces for each initialisation of a critical section and, depending on the 
version, for various operations by the Heap Manager. </p>
<p>In kernel mode, the <span class="struct">RTL_PROCESS_BACKTRACES</span> is what 
a successful call to <span class="function">
<a href="../../ex/sysinfo/query.htm">ZwQuerySystemInformation</a></span> or
<span class="function">NtQuerySystemInformation</span> produces in its output buffer 
when given the information class <span class="constant">SystemStackTraceInformation</span> 
(0x0D). Beware, however, that because of an oversight in some recoding for version 
6.1, success is at best exceptional. </p>
<p>In user mode, the <span class="struct">RTL_PROCESS_BACKTRACES</span> is the output 
of the <span class="function">RtlQueryProcessBackTraceInformation</span> function.
</p>
<h2>Documentation Status </h2>
<p>The <span class="struct">RTL_PROCESS_BACKTRACES</span> structure is not documented.
</p>
<!--webbot bot="Include" U-Include="../../ex/sysinfo/_include/type_info_urlmon.htm" TAG="BODY" startspan -->

<p>Microsoft does publish the practical equivalent of a C-language definition as 
type information in public symbol files, though not for the kernel, where the structure 
is prepared, nor even for low-level user-mode DLLs that interpret the structure, 
but for various higher-level user-mode DLLs such as URLMON.DLL and only then starting 
with version 6.2. </p>

<!--webbot bot="Include" endspan i-checksum="38013" -->
<!--webbot bot="Include" U-Include="../../ex/sysinfo/_include/type_info_ddklibs.htm" TAG="BODY" startspan -->

<p>Two earlier disclosures of type information are known, though not in symbol files 
but in statically linked libraries: GDISRVL.LIB from the Device Driver Kit (DDK) 
for Windows NT 3.51; and SHELL32.LIB from the DDK for Windows NT 4.0. </p>

<!--webbot bot="Include" endspan i-checksum="55883" -->
<h2>Layout </h2>
<p>The <span class="struct">RTL_PROCESS_BACKTRACES</span> is 0x9C or 0x0128 bytes 
in 32-bit and 64-bit Windows, respectively, in version 5.0 and higher. It is 0x5C 
bytes in earlier versions. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">ULONG_PTR CommittedMemory;</pre>
    </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>
    <pre class="source">ULONG_PTR ReservedMemory;</pre>
    </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>0x10 </td>
    <td>
    <pre class="source">ULONG NumberOfBackTraceLookups;</pre>
    </td>
  </tr>
  <tr>
    <td>0x0C </td>
    <td>0x14 </td>
    <td>
    <pre class="source">ULONG NumberOfBackTraces;</pre>
    </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>0x18 </td>
    <td>
    <pre class="source"><a href="process_backtrace_information.htm">RTL_PROCESS_BACKTRACE_INFORMATION</a> BackTraces [ANYSIZE_ARRAY];</pre>
    </td>
  </tr>
</table>
<p>For the user-mode implementation, the database is <span class="member">ReservedMemory</span> 
bytes of virtual memory to which pages are committed as needed. This need arises 
at both ends of the reserved block. The lower memory builds upwards as more entries 
are stored in the database. These entries vary in size. To find them quickly from 
an index, the database keeps pointers to them in the block’s upper memory, growing 
downwards. What is presented as <span class="member">CommittedMemory</span> is only 
what’s committed in the block’s lower memory. </p>
<p>For the kernel-mode implementation, the whole database is one block of non-paged 
pool. The size in bytes is reliably presented as <span class="member">ReservedMemory</span>, 
but what’s presented as <span class="member">CommittedMemory</span> is at best meaningless. 
For both modes, <span class="member">CommittedMemory</span> is computed by subtracting 
the <span class="member">CommitBase</span> member of the <span class="struct">STACK_TRACE_DATABASE</span> 
from the <span class="member">CurrentLowerCommitLimit</span>. For the kernel-mode 
implementation, the latter is not explicitly initialised in any version. The structure’s 
zero-initialisation before version 6.1 means that <span class="member">CommittedMemory</span> 
reliably, if unintentionally, tells user-mode callers the negative of the database’s 
kernel-mode address. </p>
<p>The <span class="member">NumberOfBackTraceLookups</span> tells how often a stack 
trace was captured for a resource creation. It can happen—indeed, often happens—that 
the stack trace is already in the database. </p>
<p>The <span class="member">NumberOfBackTraces</span> member tells how many database 
entries, i.e., stack traces, are presented in the <span class="member">BackTraces</span> 
array. The structure is smaller in early versions only because the
<span class="struct">RTL_PROCESS_BACKTRACE_INFORMATION</span> is smaller. </p>
<div class="Footer">
  <p class="Dates">This page was created on 30th July 2016 but was not published 
  until 25th <a href="../../../../../../../new/16/10.htm">October 2016</a>. It was 
  last modified on 28th <a href="../../../../../../../new/20/06.htm">June 2020</a>.
  </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1619.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5029" -->
</div>

</body>

</html>
