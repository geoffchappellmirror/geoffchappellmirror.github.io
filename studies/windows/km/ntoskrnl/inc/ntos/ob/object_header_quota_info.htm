<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>OBJECT_HEADER_QUOTA_INFO</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>OBJECT_HEADER_QUOTA_INFO </h1>
  <p>The <span class="struct">OBJECT_HEADER_QUOTA_INFO</span> structure 
  (formally <span class="struct">_OBJECT_HEADER_QUOTA_INFO</span>) is one of 
  several structures that may precede an <span class="struct">
  <a href="object_header/index.htm">OBJECT_HEADER</a></span> in a memory block that 
  contains an Object Manager object. </p>
  <h2>Access </h2>
  <p>The point to making a separate structure of the <span class="struct">OBJECT_HEADER_QUOTA_INFO</span> 
  is, of course, that the object need not have charged any process. The object’s memory overhead 
  is then reduced by having the <span class="struct">OBJECT_HEADER</span> record 
  just that there is no quota. </p>
  <p>This saving was first implemented in version 3.50. For this and many versions 
  after, the key to locating the <span class="struct">OBJECT_HEADER_QUOTA_INFO</span> is the 
  byte-sized <span class="member">QuotaInfoOffset</span> member of the
  <span class="struct">OBJECT_HEADER</span>. If this is zero, then the object has 
  no <span class="struct">OBJECT_HEADER_QUOTA_INFO</span>. Otherwise, it is the offset 
  in bytes from the start of the <span class="struct">OBJECT_HEADER_QUOTA_INFO</span> 
  to the start of the <span class="struct">OBJECT_HEADER</span>. A programmer might 
  write this as </p>
  <pre class="source">OBJECT_HEADER_QUOTA_INFO *
OBJECT_HEADER_TO_QUOTA_INFO_EXISTS (
    OBJECT_HEADER *ObjectHeader)
{
    return (OBJECT_HEADER_QUOTA_INFO *) 
        ((PCHAR) ObjectHeader - ObjectHeader -&gt; QuotaInfoOffset);
}</pre>
  <pre class="source">OBJECT_HEADER_QUOTA_INFO *
OBJECT_HEADER_TO_QUOTA_INFO (
    OBJECT_HEADER *ObjectHeader)
{
    return ObjectHeader -&gt; QuotaInfoOffset != 0
        ? OBJECT_HEADER_TO_QUOTA_INFO_EXISTS (ObjectHeader)
        : NULL;
}</pre>
  <p>This location algorithm changed ever so slightly for version 6.0. It had by 
  the been realised that the alignment requirements of the object, its header 
  and its header’s headers mean that the header’s single-byte offsets to the 
  header’s headers are themselves wasteful because the offsets must all be 
  multiples of eight (even on 32-bit Windows). The particular need for version 
  6.0 was to find two spare bits for tracing. For plausibly no particular 
  reason, these were taken from the <span class="member">QuotaInfoOffset</span>. 
  The algorithm to use is then: </p>
  <pre class="source">OBJECT_HEADER_QUOTA_INFO *
OBJECT_HEADER_TO_QUOTA_INFO_EXISTS (
    OBJECT_HEADER *ObjectHeader)
{
    return (OBJECT_HEADER_QUOTA_INFO *) 
        ((PCHAR) ObjectHeader - (ObjectHeader -&gt; QuotaInfoOffset &amp; ~0x03));
}</pre>
  <pre class="source">OBJECT_HEADER_QUOTA_INFO *
OBJECT_HEADER_TO_QUOTA_INFO (
    OBJECT_HEADER *ObjectHeader)
{
    return (ObjectHeader -&gt; QuotaInfoOffset &amp; ~0x03) != 0
        ? OBJECT_HEADER_TO_QUOTA_INFO_EXISTS (ObjectHeader)
        : NULL;
}</pre>
  <p>A larger change came with version 6.1 and the realisation 
  that if the various information structures that can precede the
  <span class="struct">OBJECT_HEADER</span> are always laid out in the same order, 
  then the offset to any one of them can be computed from knowing which others are 
  present. This knowledge costs only one bit for each of the possible information 
  structures. The <span class="struct">OBJECT_HEADER</span> has these bits as the 
  single-byte <span class="member"><a href="object_header/infomask.htm">InfoMask</a></span>. 
  The kernel has as an internal variable an array of pre-computed offsets for the 
  possible combinations of <span class="member">InfoMask</span> bits. The bit that 
  tells if an <span class="struct">OBJECT_HEADER_QUOTA_INFO</span> is present is 
  0x08. The three other information structures that can sit between the
  <span class="struct">OBJECT_HEADER_QUOTA_INFO</span> and the
  <span class="struct">OBJECT_HEADER</span> are represented by the bits of 0x07. Public symbol files for the kernel, 
  starting with Windows 8, suggest strongly that Microsoft’s programmers have the 
  computation as something very like </p>
  <pre class="source">OBJECT_HEADER_QUOTA_INFO *
OBJECT_HEADER_TO_QUOTA_INFO_EXISTS (
    OBJECT_HEADER *ObjectHeader)
{
    return (OBJECT_HEADER_QUOTA_INFO *) ((PCHAR) ObjectHeader 
        - ObpInfoMaskToOffset [ObjectHeader -&gt; InfoMask &amp; 0x0F]);
}</pre>
  <pre class="source">OBJECT_HEADER_QUOTA_INFO *
OBJECT_HEADER_TO_QUOTA_INFO (
    OBJECT_HEADER *ObjectHeader)
{
    return ObjectHeader -&gt; InfoMask &amp; 0x08
        ? OBJECT_HEADER_TO_QUOTA_INFO_EXISTS (ObjectHeader)
        : NULL;
}</pre>
  <h2>Layout </h2>
  <p>The <span class="struct">OBJECT_HEADER_QUOTA_INFO</span> structure is 0x10 
  or 0x20 bytes in 32-bit and 64-bit Windows, respectively. Microsoft’s names and 
  types are known from type information in public symbol files for the kernel, starting 
  with Windows 2003 SP1. That names apply at least as far back as version 4.0 is known with slightly less certainty from the output of the <span class="command">
  <a href="../../../../debug/userexts/dso.htm">!dso</a></span> command as implemented 
  by the debugger extension USEREXTS.DLL from the Windows NT 4.0 Device Driver Kit 
  (DDK). </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">ULONG PagedPoolCharge;</pre>
        </td>
        <td>3.50 and higher </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x04 </td>
        <td>
        <pre class="source">ULONG NonPagedPoolCharge;</pre>
        </td>
        <td>3.50 and higher </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">ULONG SecurityDescriptorCharge;</pre>
        </td>
        <td>3.50 and higher </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0C </td>
        <td>
        <pre class="source">ULONG Reserved1;</pre>
        </td>
        <td>1607 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x0C </td>
        <td rowspan="2">0x10 </td>
        <td>
        <pre class="source"><a href="../ps/eprocess/index.htm">EPROCESS</a> *ExclusiveProcess;</pre>
        </td>
        <td>3.50 to 6.0 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">PVOID SecurityDescriptorQuotaBlock;</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">&nbsp;</td>
        <td rowspan="2">0x18 </td>
        <td>
        <pre class="source">ULONGLONG Reserved;</pre>
        </td>
        <td>late 5.2 and higher </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONGLONG Reserved2;</pre>
        </td>
        <td>1607 and higher </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 17th June 2020 but was not published 
    until 30th <a href="../../../../../../../new/20/06.htm">June 2020</a>. It 
    was last modified on 31st <a href="../../../../../../../new/22/07.htm">
    August 2022</a>. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c2022.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4221" --></div>
</div>

</body>

</html>
