<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Debugger Extension Commands: !stackdbg</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/notes.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/notes.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript Header" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="57445" -->
<div class="Main">
  <!--webbot bot="Include" U-Include="../../../_include/preview.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" endspan i-checksum="8381" -->
  <h1>!stackdbg </h1>
  <p>The <span class="command">!stackdbg</span> command sets options for stack walking.
  </p>
  <h2>Syntax </h2>
  <pre class="input"><span class="command">!stackdbg</span> [<span class="placeholder">options</span>] [<span class="placeholder">mask</span>] </pre>
  <p>The <span class="placeholder">options</span> are a sequence of
  <span class="placeholder">option</span> elements separated by any number, including 
  none, of spaces or tabs. Each <span class="placeholder">option</span> is a hyphen 
  or forward slash followed immediately by one or two characters. The
  <span class="placeholder">options</span> may be followed by any number, including 
  none, of spaces or tabs before the <span class="placeholder">mask</span>, which 
  is an expression. </p>
  <p>An <span class="placeholder">option</span> is any of the following (with either 
  a hyphen or forward slash): </p>
  <table>
    <tr>
      <th>Option </th>
      <th>Interpretation </th>
    </tr>
    <tr>
      <td><span class="switch">/c</span> </td>
      <td>send stack-walk debug text through callback </td>
    </tr>
    <tr>
      <td><span class="switch">/d</span> </td>
      <td>send stack-walk debug text as debug output </td>
    </tr>
    <tr>
      <td><span class="switch">/s</span><span class="placeholder">feature</span>
      </td>
      <td>enable feature </td>
    </tr>
    <tr>
      <td><span class="switch">/S</span><span class="placeholder">feature</span>
      </td>
      <td>disable feature </td>
    </tr>
  </table>
  <p>Though <span class="placeholder">feature</span> immediately after
  <span class="switch">/s</span> or <span class="switch">/S</span> stands for any 
  single character, only the following such characters actually do correspond to 
  a feature that can be enabled or disabled: </p>
  <table>
    <tr>
      <th>Feature </th>
      <th>Interpretation </th>
    </tr>
    <tr>
      <td>7 </td>
      <td>VC7 FPO </td>
    </tr>
    <tr>
      <td>l </td>
      <td>LOP frame unwind </td>
    </tr>
    <tr>
      <td>i </td>
      <td>symbol info </td>
    </tr>
    <tr>
      <td>r </td>
      <td>return search </td>
    </tr>
    <tr>
      <td>L </td>
      <td>Force LOP frame unwind </td>
    </tr>
  </table>
  <p>The <span class="placeholder">mask</span> is interpreted in bits, such that 
  higher bits represent less severe grades of debug text. Evaluation to zero has 
  the effect that stack-walk debug text is disabled. An absent
  <span class="placeholder">mask</span> evaluates as zero. </p>
  <h2>Behaviour </h2>
  <p>The <span class="command">!stackdbg</span> command and equivalent
  <span class="function">stackdbg</span> function are implemented in DBGHELP.DLL. 
  They affect all that module’s stack-walking services, most notably the
  <span class="function">StackWalk64</span> function, including its use for the
  <span class="command">k</span> command in debuggers (such as WinDbg) that are 
  DBGENG clients. </p>
  <p>The command acts on the <span class="placeholder">options</span> and
  <span class="placeholder">mask</span> in their given order to change the current 
  settings, and then displays what are now the current settings. The initial settings 
  are that “VC7 FPO” and “symbol info” are enabled, and everything else is disabled.
  </p>
  <p>Diagnostic text for stack walking is enabled if <span class="placeholder">mask</span> 
  evaluates as non-zero. Specifically, each set bit in mask enables diagnostic text 
  of the corresponding severity. DBGHELP has diagnostic text for bits 0x01, 0x02, 
  0x04 and 0x08. The <span class="switch">/c</span> and <span class="switch">/d</span> 
  options select from two modes for output. The <span class="switch">/d</span> option 
  is straightforward: the text is sent to a debugger. (Just for clarity, note that 
  if DBGHELP is executing in a debugger, then the text goes to a debugger of the 
  debugger.) The <span class="switch">/c</span> option sends the text through whichever 
  of various other mechanisms are active. Most notable is a symbol server callback, 
  but the text is also written to a log file (if configured through the
  <span class="env">DBGHELP_LOG</span> environment variable) or to a debugger (if 
  enabled by the <span class="env">DBGHELP_DBGOUT</span> environment variable).
  </p>
  <p>The <span class="switch">/s</span> and <span class="switch">/S</span> options 
  enable and disable various features of DBGHELP’s stack-walking algorithm for the 
  X86 architecture. Microsoft’s documentation of <span class="function">StackWalk64</span> 
  speaks of “all the complexities associated with stack walking on platforms” but 
  omits to mention these options for configuring how DBGHELP negotiates those complexities.
  </p>
  <h2>Availability </h2>
  <p>The <span class="function">stackdbg</span> function is exported from DBGHELP.DLL 
  as a 64-bit WinDbg extension command, making it accessible as the command
  <span class="command">!stackdbg</span> in any sufficiently recent DBGENG client. 
  In terms of versions distributed with Windows, as opposed to the separate package 
  of Debugging Tools for Windows, it is available in Windows Vista and Windows Server 
  2003 but not in Windows XP. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 20th September 2008 and was last modified 
    on 23rd September 2008. </p>
    <!--webbot bot="Include" U-Include="../../../_include/c08.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2008. Geoff Chappell. All rights reserved. 
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="63131" -->
  </div>
</div>

</body>

</html>
