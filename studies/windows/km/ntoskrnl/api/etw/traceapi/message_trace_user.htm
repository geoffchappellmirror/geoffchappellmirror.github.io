<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>MESSAGE_TRACE_USER</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>MESSAGE_TRACE_USER </h1>
<p>The <span class="struct">MESSAGE_TRACE_USER</span> structure describes an event 
for a particular case of the <span class="function"><a href="event/index.htm">NtTraceEvent</a></span> 
interface between user mode and kernel mode. </p>
<h2>Usage </h2>
<p>The types of event that are described to <span class="function">NtTraceEvent</span> 
by a <span class="struct">MESSAGE_TRACE_USER</span> are used mostly for Windows 
Pre-Processor (WPP) software tracing. This is diagnostic magic that gives low-level 
programmers the functionality of Event Tracing for Windows (ETW) for seemingly no 
more trouble than calling a programmer-defined function in the familiar style of
<span class="function">printf</span> from the C Run-Time library. The more or less 
arbitrary arguments of the latter get dressed into an argument list for the documented 
ADVAPI32 functions <span class="function">
<a href="../../../../../win32/advapi32/api/etw/logapi/message.htm">TraceMessage</a></span> 
and <span class="function">
<a href="../../../../../win32/advapi32/api/etw/logapi/messageva.htm">TraceMessageVa</a></span> 
or the undocumented NTDLL functions <span class="function">EtwTraceMessage</span> 
and <span class="function">EtwTraceMessageVa</span>. (The former two are merely 
forwarded to the latter in version 5.2 and higher.) For transferring the work to 
the kernel, these functions’ several arguments—the <span class="argument">SessionHandle</span>,
<span class="argument">MessageFlags</span>, <span class="argument">MessageGuid</span>,
<span class="argument">MessageNumber</span> and the more or less arbitrary
<span class="argument">MessageArgList</span>—are repackaged into a
<span class="struct">MESSAGE_TRACE_USER</span>. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">MESSAGE_TRACE_USER</span> structure is not documented, 
but Microsoft has published a C-language definition in the NTWMI.H from the Enterprise 
edition of the Windows Driver Kit (WDK) for Windows 10 version 1511. </p>
<!--webbot bot="Include" u-include="../_include/appxdeploymentclient.htm" tag="BODY" startspan -->

<p>Were it not for this relatively recent and possibly unintended disclosure, much 
would anyway be known from type information in symbol files. Curiously though, type 
information for this structure has never appeared in any public symbol files for 
the kernel or for the obvious low-level user-mode DLLs. In the whole of Microsoft’s 
packages of public symbol files, at least to the original Windows 10, relevant type 
information is unknown before Windows 8 and appears in symbol files only for AppXDeploymentClient.dll, 
CertEnroll.dll (before Windows 10) and Windows.Storage.ApplicationData.dll. </p>

<!--webbot bot="Include" endspan i-checksum="57456" --><h2>
Layout </h2>
<p>Though the <span class="struct">MESSAGE_TRACE_USER</span> is shared between kernel 
and user modes, it evidently is regarded as a private detail. It has changed—first 
to have some members rearranged and then to have one removed. Importantly, it also 
changed from being a fixed-size header for variable-size data to being a structure 
with a pointer to the variable-size data. The <span class="struct">MESSAGE_TRACE_USER</span> 
is 0x30 bytes before version 6.2 and is then 0x28 bytes. It is the same in both 
32-bit and 64-bit builds. </p>
<table class="Struct">
  <tr>
    <th>Offset </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0x00 (6.0 to 6.1) </td>
    <td>
    <pre class="source">TRACEHANDLE SessionHandle;</pre>
    </td>
    <td>6.0 to 6.1 </td>
    <td>previously at 0x10 </td>
  </tr>
  <tr>
    <td>0x00 (5.1 to 5.2); <br>
    0x08 (6.0 to 6.1); <br>
    0x00 </td>
    <td>
    <pre class="source"><a href="../tracelog/message_trace_header.htm">MESSAGE_TRACE_HEADER</a> MessageHeader;</pre>
    </td>
    <td>5.1 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x08 (5.1 to 5.2) </td>
    <td>
    <pre class="source">ULONG MessageFlags;</pre>
    </td>
    <td>5.1 to 5.2 </td>
    <td>next at 0x20 </td>
  </tr>
  <tr>
    <td>0x10 (5.1 to 5.2) </td>
    <td>
    <pre class="source">TRACEHANDLE SessionHandle;</pre>
    </td>
    <td>5.1 to 5.2 </td>
    <td>next at 0x00 </td>
  </tr>
  <tr>
    <td>0x18 (5.1 to 5.2); <br>
    0x10 (6.0 to 6.1); <br>
    0x08 </td>
    <td>
    <pre class="source">GUID MessageGuid;</pre>
    </td>
    <td>5.1 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x20 (6.0 to 6.1); <br>
    0x18 </td>
    <td>
    <pre class="source">ULONG MessageFlags;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>previously at 0x08 </td>
  </tr>
  <tr>
    <td>0x28 (5.1 to 5.2); <br>
    0x24 (6.0 to 6.1); <br>
    0x1C </td>
    <td>
    <pre class="source">ULONG DataSize;</pre>
    </td>
    <td>5.1 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td rowspan="2">0x2C (5.1 to 5.2); <br>
    0x28 (6.0 to 6.1); <br>
    0x20 </td>
    <td>
    <pre class="source">UCHAR Data [1];</pre>
    </td>
    <td>5.1 to 5.2 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONG64 Data;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>The name <span class="member">SessionHandle</span> is proposed for the
<span class="type">TRACEHANDLE</span> by analogy with the other members whose names 
Microsoft duplicates from the <span class="function">TraceMessage</span> arguments. 
However it’s named, it provides for the whole of the 8-byte
<span class="argument">SessionHandle</span> argument, presumably to compensate for
<span class="function">NtTraceEvent</span> having only a possibly smaller
<span class="type">HANDLE</span> as its <span class="argument">TraceHandle</span> 
argument. It is ignored by the kernel-mode implementation, since the low 4 bytes 
are ample, and was removed for version 6.2. </p>
<p>The <span class="member">MessageTraceHeader</span> has only ever mattered for 
passing the <span class="argument">MessageNumber</span> argument through the
<span class="member">MessageNumber</span> member. Except for that, the kernel-mode 
implementation prepares its own <span class="struct">MESSAGE_TRACE_HEADER</span> 
for the event as written to trace buffers. </p>
<p>Just as the <span class="argument">MessageGuid</span> argument addresses either 
a GUID or a 4-byte component ID, depending on the <span class="argument">MessageFlags</span>, 
so too the <span class="member">MessageGuid</span> can be either a GUID or a 4-byte 
component ID. It is the latter if <span class="constant">TRACE_MESSAGE_COMPONENTID</span> 
is set in <span class="member">MessageFlags</span>, else it is the former if
<span class="constant">TRACE_MESSAGE_GUID</span> is set, else it is ignored. </p>
<p>In all versions, the data that originates from a variable-size
<span class="argument">MessageArgList</span> of pointers and sizes passes into the 
trace buffer as a simple array of bytes in the variable-size event-specific data 
after the event’s own <span class="struct">MESSAGE_TRACE_HEADER</span>. That this 
array was assembled from parts is lost. If a consumer is to intepret this data in 
parts, it is from separate knowledge of what the provider intended. In WPP Tracing, 
this happens because the consumer has a PDB file from the provider, and this file, 
not the executable, has the format strings from the provider’s source code. </p>
<p>In versions before 6.0, all interpretation of the argument list is done in user 
mode, such that <span class="function">NtTraceEvent</span> receives the arbitrary 
message data already formed into a simple array at offset 0x2C, the size in bytes 
being given by <span class="member">DataSize</span> at offset 0x28. The name
<span class="member">Data</span> is proposed for the array on the grounds that although 
its type changed for version 6.0, its name needn’t have and perhaps didn’t. The 
change for version 6.0 is that assembling the message data from the argument list 
is now the kernel’s work. Though the <span class="member">Data</span> member is 
formally a <span class="type">ULONG64</span>, it is in fact the 32-bit or 64-bit
<span class="argument">MessageArgList</span> from the user-mode caller. It is thus 
a user-mode address of a sequence of user-mode pointers and sizes, in pairs, for 
successive message arguments, ending with a <span class="constant">NULL</span> pointer. 
The <span class="member">DataSize</span> is the size, in bytes, of this sequence, 
including the <span class="constant">NULL</span> pointer. </p>
<div class="Footer">
  <p class="Dates">This page was created on 9th
  <a href="../../../../../../../new/18/12.htm">December 2018</a> and was last modified 
  on 31st December 2018. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c18.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2018. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6594" -->
</div>

</body>

</html>
