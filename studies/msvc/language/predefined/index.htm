<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Predefined C/C++ Types</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<h1>Predefined C++ Types </h1>
<p>Every C and C++ source file compiled with Microsoft Visual C++ has, in 
effect, a forced inclusion of a header file written by Microsoft to provide some 
predefined types. These pre-definitions do not exist as a separate file but are 
hard-coded into the compiler (C1 or C1XX). They are reproduced here for the 
critical interest of programmers who may care to know what code has already been 
written for them. The extraction is complete and the lines are presented in the 
compiler’s order. However, a small amount of editing has been applied line by 
line for readability, since the compiler’s code tends not to bother with any 
sort of indenting or consistent use of white space. </p>
<h2>Name </h2>
<p>A file name of sorts is provided via a <span class="directive">#line</span> 
directive to the preprocessor: </p>
<pre class="source">#line 15 &quot;predefined C++ types (compiler internal)&quot;</pre>
<p>The significance of starting the “file” at line 15, specifically, is not 
known. As an aside, note that although the name speaks of C++ specifically, it 
applies to both the C and C++ compilers. </p>
<h2>Size Type </h2>
<p>A type, <span class="type">size_t</span>, is built into the language as the 
type returned by the <span class="operator">sizeof</span> operator and (in C++) 
as the type required for the first argument of <span class="operator">operator 
new</span>. However, the definition of this type is formally left to header 
files that are expected to be supplied with the C Run-Time Library (CRT). 
Microsoft Visual C++ helpfully defines <span class="type">size_t</span> for 
those programmers who are not using any CRT headers. </p>
<p>The C++ compiler pre-defines <span class="type">size_t</span> no matter what:
</p>
<pre class="source">#if Wp64
typedef __w64 unsigned int size_t;
#else
typedef unsigned int size_t;
#endif</pre>
<p>but the C compiler defines it only conditionally: </p>
<pre class="source">#if Wp64
typedef __w64 unsigned int size_t;
#endif</pre>
<p>Note that the choice in C++ is governed by the macro <span class="macro">Wp64</span> 
with no leading underscore, not by the macro <span class="macro">_Wp64</span> 
that is defined by CL as an implication of the <span class="switch">/Wp64</span> 
option.
</p>
<h2>New and Delete Operators (C++ Only) </h2>
<p>C++ programmers never have to define global new and delete operators, either 
explicitly or by including a CRT header. The compiler has done it for them. </p>
<pre class="source">extern __declspec (unmanaged) void * __cdecl operator new (size_t);
extern __declspec (unmanaged) void __cdecl operator delete (void *);</pre>
<h2>Static Destructors (C++ Only) </h2>
<pre class="source">extern &quot;C&quot; __declspec (unmanaged) int __cdecl atexit (void (__cdecl *) (void));</pre>
<h2>Exception Handling (C++ Only) </h2>
<pre class="source">#pragma pack (push, ehdata, 4)

typedef struct _PMD
{
    int mdisp;
    int pdisp;
    int vdisp;
} _PMD;

typedef void (*_PMFN) (void);

#pragma warning (disable:4200)
#pragma pack (push, _TypeDescriptor, 8)
typedef struct _TypeDescriptor
{
    const void *pVFTable;
    void *spare;
    char name [];
} _TypeDescriptor;
#pragma pack (pop, _TypeDescriptor)
#pragma warning (default:4200)

typedef const struct _s__CatchableType {
    unsigned int properties;
    _TypeDescriptor *pType;
    _PMD thisDisplacement;
    int sizeOrOffset;
    _PMFN copyFunction;
} _CatchableType;

#pragma warning (disable:4200)
typedef const struct _s__CatchableTypeArray {
    int nCatchableTypes;
    _CatchableType *arrayOfCatchableTypes [];
} _CatchableTypeArray;
#pragma warning (default:4200)

typedef const struct _s__ThrowInfo {
    unsigned int attributes;
    _PMFN pmfnUnwind;
    int (__cdecl *pForwardCompat) (...);
    _CatchableTypeArray *pCatchableTypeArray;
} _ThrowInfo;

__declspec (noreturn) extern &quot;C&quot; void __stdcall _CxxThrowException (void *pExceptionObject, _ThrowInfo * pThrowInfo);
extern &quot;C&quot; int __cdecl __CxxExceptionFilter (void *, void *, int, void *);
extern &quot;C&quot; int __cdecl __CxxRegisterExceptionObject (void *exception, void *storage);
extern &quot;C&quot; int __cdecl __CxxDetectRethrow (void *exception);
extern &quot;C&quot; int __cdecl __CxxQueryExceptionSize (void);
extern &quot;C&quot; void __cdecl __CxxUnregisterExceptionObject (void *storage, int rethrow);

#pragma pack (pop, ehdata)</pre>
<h2>Run-Time Type Information (C++ Only) </h2>
<pre class="source">#pragma pack (push, rttidata, 4)

typedef const struct _s__RTTIBaseClassDescriptor {
    _TypeDescriptor *pTypeDescriptor;
    unsigned long numContainedBases;
    _PMD where;
    unsigned long attributes;
} __RTTIBaseClassDescriptor;

#pragma warning (disable:4200)
typedef const struct _s__RTTIBaseClassArray {
    __RTTIBaseClassDescriptor *arrayOfBaseClassDescriptors [];
} __RTTIBaseClassArray;
#pragma warning (default:4200)

typedef const struct _s__RTTIClassHierarchyDescriptor {
    unsigned long signature;
    unsigned long attributes;
    unsigned long numBaseClasses;
    __RTTIBaseClassArray *pBaseClassArray;
} __RTTIClassHierarchyDescriptor;

typedef const struct _s__RTTICompleteObjectLocator {
    unsigned long signature;
    unsigned long offset;
    unsigned long cdOffset;
    _TypeDescriptor *pTypeDescriptor;
    __RTTIClassHierarchyDescriptor *pClassDescriptor;
} __RTTICompleteObjectLocator;

typedef const class type_info &amp;__RTtypeidReturnType;

extern &quot;C&quot; void * __cdecl __RTDynamicCast (
    void *,
    long,
    void *,
    void *,
    int) throw (...);
extern &quot;C&quot; void * __cdecl __RTtypeid (void *) throw (...);
extern &quot;C&quot; void * __cdecl __RTCastToVoid (void *) throw (...);

#pragma pack (pop, rttidata)</pre>
<h2>GUID (C++ Only) </h2>
<pre class="source">struct __s_GUID {
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4 [8];
};

typedef const struct _GUID &amp;__rcGUID_t;</pre>
<h2>Intrinsics </h2>
<p>Functions for which the compiler is to provide its own implementations 
ordinarily must be declared (with C linkage) before use. For who knows what 
reason, Microsoft makes exceptions for two of these intrinsics. </p>
<p>For <span class="function">__debugbreak</span>, the C and C++ declarations 
differ only in that <span class="keyword">extern &quot;C&quot;</span> is omitted for C. </p>
<pre class="source">extern &quot;C&quot;
__declspec (unmanaged) void __cdecl __debugbreak (void);</pre>
<p>For <span class="function">__annotation</span>, which Microsoft anyway does 
not document, the C compiler omits not just the <span class="keyword">extern &quot;C&quot;</span> 
but also the alternative declaration in terms of the native <span class="type">
wchar_t</span> 
type. </p>
<pre class="source">extern &quot;C&quot;
#if defined(_NATIVE_WCHAR_T_DEFINED)
__declspec (unmanaged) void __cdecl __annotation (const wchar_t *, ...);
#else
__declspec (unmanaged) void __cdecl __annotation (const unsigned short *, ...);
#endif</pre>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="58117" endspan -->
</div>

</body>

</html>