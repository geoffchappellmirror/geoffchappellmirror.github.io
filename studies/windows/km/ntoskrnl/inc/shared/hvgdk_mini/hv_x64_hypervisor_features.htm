<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>HV_X64_HYPERVISOR_FEATURES</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>HV_X64_HYPERVISOR_FEATURES </h1>
  <p>The <span class="struct">HV_X64_HYPERVISOR_FEATURES</span> structure (formally
  <span class="struct">_HV_X64_HYPERVISOR_FEATURES</span>) collects the flags that 
  a Microsoft-compatible hypervisor’s <span class="instruction">
  <a href="../../../../cpu/cpuid/index.htm">cpuid</a></span> leaf 0x40000003 produces 
  in the <span class="register">eax</span>, <span class="register">ebx</span>,
  <span class="register">ecx</span> and <span class="register">edx</span> registers.
  </p>
  <h2>Availability </h2>
  <p>The <span class="struct">HV_X64_HYPERVISOR_FEATURES</span> is defined for Windows 
  10. It supersedes the <span class="struct">
  <a href="hv_hypervisor_features.htm">HV_HYPERVISOR_FEATURES</a></span> from Windows 
  8.1, which in turn developed from an unnamed structure for the
  <span class="member">MsHvFeatures</span> member of the <span class="union">
  <a href="hv_cpuid_result.htm">HV_CPUID_RESULT</a></span> union. Though the new 
  name suggests a specialisation to the x64 processor, the structure is defined 
  identically for both 32-bit and 64-bit Windows. Version 10.0 also defines an
  <span class="struct">HV_ARM64_HYPERVISOR_FEATURES</span>, but what this represents 
  on the applicable processors lies (far) outside the scope of this article. </p>
  <p>It is here thought that <span class="struct">HV_HYPERVISOR_FEATURES</span> 
  is retained in version 10.0 and higher as a macro for the appropriate processor-specific 
  structure: <span class="struct">HV_X64_HYPERVISOR_FEATURES</span> when building 
  for the x86 and x64 processors; but <span class="struct">HV_ARM64_HYPERVISOR_FEATURES</span> 
  for the 32-bit and 64-bit ARM processors. </p>
  <h3>Access </h3>
  <p>The kernel provides two ways to get the whole output from
  <span class="instruction">cpuid</span> leaf 0x40000003 into a caller-supplied
  <span class="struct">HV_X64_HYPERVISOR_FEATURES</span>: </p>
  <ul>
    <li>in kernel mode, as the output from <span class="function">
    <a href="../../../api/hvilib/hviintel/gethypervisorfeatures.htm">HviGetHypervisorFeatures</a></span>;
    </li>
    <li>in user mode too, as the <span class="member">HvFeatures</span> member of 
    the <span class="struct">
    <a href="../../api/ntexapi/system_hypervisor_detail_information.htm">SYSTEM_HYPERVISOR_DETAIL_INFORMATION</a></span> 
    that is the output of a successful call to <span class="function">
    <a href="../../../api/ex/sysinfo/query.htm">ZwQuerySystemInformation</a></span> 
    when given the information class <span class="constant">SystemHypervisorDetailInformation</span> 
    (0x9F). </li>
  </ul>
  <p>Both are available only in version 10.0 or higher. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">HV_X64_HYPERVISOR_FEATURES</span> structure is not 
  documented. Some of its members, having previously been defined in the
  <span class="union">HV_CPUID_RESULT</span>, are documented in the Windows Driver 
  Kit (WDK) for Windows 7, which also provided a C-language definition (of the structure’s 
  unnamed ancestor) in the HVGDK.H header file. Except that documentation continued 
  to a separately downloadable package for merging into Visual Studio 2012, later 
  kits have neither the documentation nor the header. </p>
  <p>The structure anyway repackages material that Microsoft does document—or represents 
  as documented—in the
  <a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/reference/tlfs">
  Hypervisor Top-Level Functional Specification</a> (TLFS). If the structure or 
  its members’ previous definitions have become undocumented, it may be just that 
  Microsoft regards the structure as no more than a convenience for Microsoft’s 
  own programming in the loader and kernel, if not in the hypervisor itself. </p>
  <p>That said, the Specification that is offered today, 12th November 2016, as 
  the most recent version is a PDF that is three years old (version 4.0b, dated 
  August 2013). Flags that were added for Windows 10 were left undocumented in the 
  Specification until version 5.0a, dated February 2017. Better late than never, 
  perhaps, but the reality behind the superficially fine words of the Microsoft 
  Open Specification Promise is that the Hyper-V implementation, and presumably 
  Microsoft’s use of it to Microsoft’s advantage for Microsoft’s purposes, runs 
  ahead of the documentation that Microsoft opens for general use. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">HV_X64_HYPERVISOR_FEATURES</span> is 0x10 bytes in 
  both 32-bit and 64-bit Windows. Offsets and definitions below are from type information 
  in public symbol files for the kernel, starting with the original Windows 10.
  </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source"><a href="hv_partition_privilege_mask.htm">HV_PARTITION_PRIVILEGE_MASK</a> PartitionPrivileges;</pre>
        </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>
        <pre class="source">/*  changing bit fields for ECX, see below  */</pre>
        </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>
        <pre class="source">/*  changing bit fields for EDX, see below  */</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <p>Separation into an 8-byte member for what <span class="instruction">cpuid</span> 
  leaf 0x40000003 produces in <span class="register">eax</span> and
  <span class="register">ebx</span> and then unstructured bit fields for
  <span class="register">ecx</span> and <span class="register">edx</span> goes back 
  to the structure’s origin for Windows Vista. Public symbol files for the kernel 
  reveal the name of an inline routine that extracts just the low eight bytes:
  </p>
  <pre class="source">VOID HviGetPartitionPrivileges (HV_PARTITION_PRIVILEGE_MASK *);</pre>
  <h3>Offset 0x08 (<span class="register">ECX</span>) </h3>
  <p>The <span class="instruction">cpuid</span> output for
  <span class="register">ecx</span> is very stable across the versions, as far as 
  shown by the type information: </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0000000F </td>
        <td>
        <pre class="source">UINT32 MaxSupportedCState : 4;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000010 </td>
        <td>
        <pre class="source">UINT32 HpetNeededForC3PowerState_Deprecated : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>
        <pre class="source">UINT32 Reserved : 27;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Both <span class="member">MaxSupportedCState</span> and
  <span class="member">HpetNeededForC3PowerState</span> have earlier definitions 
  in the <span class="struct">HV_HYPERVISOR_FEATURES</span> for version 6.3 and 
  even before then in an unnamed structure nested in the <span class="union">HV_CPUID_RESULT</span>. 
  The first is meaningful to the kernel as far back as Windows Vista SP1, though 
  no use of it is known after Windows 7. The second was newly defined for Windows 
  8. It was renamed for Windows 10 to mark it explicitly as deprecated, but no use 
  is yet known of it even before this deprecation: more research is required.
  </p>
  <h3>Offset 0x0C (<span class="register">EDX</span>) </h3>
  <p>Flags in <span class="register">edx</span> from <span class="instruction">cpuid</span> 
  leaf 0x40000003 are still evolving as of the 2004 edition of Windows 10: </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00000001 </td>
        <td>
        <pre class="source">UINT32 MwaitAvailable_Deprecated : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000002 </td>
        <td>
        <pre class="source">UINT32 GuestDebuggingAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000004 </td>
        <td>
        <pre class="source">UINT32 PerformanceMonitorsAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000008 </td>
        <td>
        <pre class="source">UINT32 CpuDynamicPartitioningAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000010 </td>
        <td>
        <pre class="source">UINT32 XmmRegistersForFastHypercallAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000020 </td>
        <td>
        <pre class="source">UINT32 GuestIdleAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000040 </td>
        <td>
        <pre class="source">UINT32 HypervisorSleepStateSupportAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000080 </td>
        <td>
        <pre class="source">UINT32 NumaDistanceQueryAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000100 </td>
        <td>
        <pre class="source">UINT32 FrequencyRegsAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000200 </td>
        <td>
        <pre class="source">UINT32 SyntheticMachineCheckAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000400 </td>
        <td>
        <pre class="source">UINT32 GuestCrashRegsAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000800 </td>
        <td>
        <pre class="source">UINT32 DebugRegsAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00001000 </td>
        <td>
        <pre class="source">UINT32 Npiep1Available : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00002000 </td>
        <td>
        <pre class="source">UINT32 DisableHypervisorAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00004000 </td>
        <td>
        <pre class="source">UINT32 ExtendedGvaRangesForFlushVirtualAddressListAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00008000 </td>
        <td>
        <pre class="source">UINT32 FastHypercallOutputAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00010000 </td>
        <td>
        <pre class="source">UINT32 SvmFeaturesAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00020000 </td>
        <td>
        <pre class="source">UINT32 SintPollingModeAvailable : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00040000 </td>
        <td>
        <pre class="source">UINT32 HypercallMsrLockAvailable : 1;</pre>
        </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td>0x00080000 </td>
        <td>
        <pre class="source">UINT32 DirectSyntheticTimers : 1;</pre>
        </td>
        <td>1607 and higher </td>
      </tr>
      <tr>
        <td>0x00100000 </td>
        <td>
        <pre class="source">UINT32 RegisterPatAvailable : 1;</pre>
        </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td>0x00200000 </td>
        <td>
        <pre class="source">UINT32 RegisterBndcfgsAvailable : 1;</pre>
        </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td>0x00400000 </td>
        <td>
        <pre class="source">UINT32 WatchdogTimerAvailable : 1;</pre>
        </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td>0x00800000 </td>
        <td>
        <pre class="source">UINT32 SyntheticTimeUnhaltedTimerAvailable : 1;</pre>
        </td>
        <td>1709 and higher </td>
      </tr>
      <tr>
        <td>0x01000000 </td>
        <td>
        <pre class="source">UINT32 DeviceDomainsAvailable : 1;</pre>
        </td>
        <td>1709 and higher </td>
      </tr>
      <tr>
        <td>0x02000000 </td>
        <td>
        <pre class="source">UINT32 S1DeviceDomainsAvailable : 1;</pre>
        </td>
        <td>1803 and higher </td>
      </tr>
      <tr>
        <td>0x04000000 </td>
        <td>
        <pre class="source">UINT32 LbrAvailable : 1;</pre>
        </td>
        <td>1809 and higher </td>
      </tr>
      <tr>
        <td>0x08000000 </td>
        <td>
        <pre class="source">UINT32 IptAvailable : 1;</pre>
        </td>
        <td>1903 and higher </td>
      </tr>
      <tr>
        <td>0x10000000 </td>
        <td>
        <pre class="source">UINT32 CrossVtlFlushAvailable : 1;</pre>
        </td>
        <td>1903 and higher </td>
      </tr>
      <tr>
        <td>0x20000000 </td>
        <td>
        <pre class="source">UINT32 IdleSpecCtrlAvailable : 1;</pre>
        </td>
        <td>2004 and higher </td>
      </tr>
      <tr>
        <td rowspan="9">&nbsp;</td>
        <td>
        <pre class="source">UINT32 Reserved1 : 14;</pre>
        </td>
        <td>10.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved1 : 13;</pre>
        </td>
        <td>1511 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved1 : 12;</pre>
        </td>
        <td>1607 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved1 : 9;</pre>
        </td>
        <td>1703 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved1 : 7;</pre>
        </td>
        <td>1709 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved1 : 6;</pre>
        </td>
        <td>1803 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved1 : 5;</pre>
        </td>
        <td>1809 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved1 : 3;</pre>
        </td>
        <td>1903 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved1 : 2;</pre>
        </td>
        <td>2004 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>All the flags from <span class="member">MwaitAvailable</span> (not yet deprecated) 
  through to <span class="member">DisableHypervisorAvailable</span> have earlier 
  definitions in the <span class="struct">HV_HYPERVISOR_FEATURES</span>. Many are 
  even older, appearing first in an unnamed structure nested in the
  <span class="union">HV_CPUID_RESULT</span>. </p>
  <p>No matter that <span class="member">SvmFeaturesAvailable</span> is in type 
  information for a kernel released in 2015, the TLFS even as late as version 6.0b 
  dated February 2020 has it as Reserved. A little differently, the
  <span class="member">RegisterPatAvailable</span> and <span class="member">RegisterBndcfgsAvailable</span> 
  flags are known to a kernel from early 2017 but were still Reserved a year later, 
  according to the TLFS version 5.0c dated July 2018. They got documented for the 
  TLFS version 6.0b but their contemporary <span class="member">WatchdogTimerAvailable</span> 
  remains Reserved. Also still Reserved in February 2020 are
  <span class="member">DeviceDomainsAvailable</span> and <span class="member">S1DeviceDomainsAvailable</span> 
  from 2017 and 2018 and all three additions for Version 1903 and higher. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 12th
    <a href="../../../../../../../new/16/11.htm">November 2016</a> and was last 
    modified on 10th December 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
