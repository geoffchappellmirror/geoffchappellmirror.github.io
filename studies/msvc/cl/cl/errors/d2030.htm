<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CL Command-Line Error D2030</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>CL Command-Line Error D2030 </h1>
<h2>Message Text </h2>
<pre class="output">INTERNAL COMPILER ERROR in &#39;<span class="placeholder">component</span>&#39;
    Please choose the Technical Support command on the Visual C++
    Help menu, or open the Technical Support help file for more information</pre>
<h2>Circumstances </h2>
<p>Error D2030 has two broad causes: internal and external. </p>
<h3>Fault in CL.EXE </h3>
<p>One cause of error D2030 is an access violation, most likely in the CL.EXE code, 
but anyway left unhandled until it reaches CL’s top-level exception handler. In 
this case, CL is itself the cited <span class="placeholder">component</span> (given 
as a full pathname in typical practice, with CL executed from the Command Prompt).
</p>
<p>The <span class="switch"><a href="../options/b$d.htm">/Bd</a></span> and
<span class="switch"><a href="../options/b$z.htm">/Bz</a></span> options each act 
to defeat this handler. Provided the access violation does not occur too early, 
i.e., before CL has acted on those options, it does not cause error D2030, but instead 
passes from CL as an unhandled exception. This has the advantage in practice of 
making readily available such details as the faulting address, typically with an 
offer to send a report to Microsoft over the Internet. </p>
<p>As it happens, error D2030 is easily induced during the parsing of options, though 
admittedly with the contrivance of using an option that is undocumented (being very 
plausibly very long obsolete). The command </p>
<pre class="input">cl /otest1.exe /Fetest2.exe </pre>
<p>suffices. It doesn’t matter that no input files are given. Long before input 
files are sought, the <span class="switch">/Fe</span> overrides the
<span class="switch">/o</span>, but the cleanup is done incorrectly, so that CL 
later dereferences a null pointer. </p>
<h3>Unspecified Error in Compiler Module </h3>
<p>The other cause of error D2030 is that CL has executed the cited
<span class="placeholder">component</span> as a <a href="../../modules.htm">compiler 
module</a>, which then returned the specific value 0x020D, either as its exit code 
(if the module is an executable program) or as the result of its
<span class="function">_InvokeCompilerPass@12</span> function (if the module is 
a DLL). Note that the pathname given for <span class="placeholder">component</span> 
is what CL used for the module when spawning or loading it. </p>
<p>It seems safe to presume that the intention is to provide for a module to encounter 
an error but leave CL to produce some standardised description. However, no compiler 
module supplied with Microsoft Visual C++ seems to avail itself of this provision: 
all have substantial error handling of their own. </p>
<p>Confirmation by example is nonetheless easily arranged. Build a program TEST.EXE 
whose <span class="function">main</span> function simply returns 0x020D, then use 
the <span class="switch"><a href="../options/b1.htm">/B1</a></span> option to name 
TEST.EXE as a replacement for the usual front-end C compiler. The command </p>
<pre class="input">cl /B1test.exe test.c</pre>
<p>then produces error D2030. </p>
<div class="Footer">
  <p class="Dates">This page was created on 18th April 2006 and was last modified 
  on 11th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62552" endspan -->
</div>

</body>

</html>
