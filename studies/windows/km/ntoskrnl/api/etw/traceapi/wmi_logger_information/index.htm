<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>WMI_LOGGER_INFORMATION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="42787" -->
<!--webbot bot="Include" U-Include="../../../../../_include/preview.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" endspan i-checksum="8381" -->
<h1>WMI_LOGGER_INFORMATION </h1>
<p>The <span class="struct">WMI_LOGGER_INFORMATION</span> structure describes an 
event logger across the <span class="function"><a href="../control/index.htm">NtTraceControl</a></span> 
interface between user mode and kernel mode. It is exchanged when starting, stopping, 
querying, updating or flushing a logger. It thus provides the input for what the 
kernel builds as the <span class="struct">
<a href="../../tracesup/wmi_logger_context/index.htm">WMI_LOGGER_CONTEXT</a></span> 
and is the means of returning information about a logger. </p>
<p>To the documented user-mode functions such as <span class="function">StartTrace</span> 
and <span class="function">ControlTrace</span> that go through
<span class="function">NtTraceControl</span> to reach the kernel-mode implementation 
for these operations, the <span class="struct">WMI_LOGGER_INFORMATION</span> is 
a slight repackaging of the documented <span class="struct">EVENT_TRACE_PROPERTIES</span>. 
Indeed, the user-mode perspective is that <span class="struct">EVENT_TRACE_PROPERTIES</span> 
is the external structure for these functions’ descriptions of loggers and
<span class="struct">WMI_LOGGER_INFORMATION</span> is the internal representation, 
not only for reaching the kernel but also for private loggers which are implemented 
almost entirely in user mode. </p>
<p>This internal representation in user mode is as old as version 5.0, and so it 
is in kernel mode too for although versions before 6.0 do not have
<span class="function">NtTraceControl</span>, they do have the
<span class="struct">WMI_LOGGER_INFORMATION</span> as the input and output for Device 
I/O Control requests that are sent to the kernel’s built-in WMI support device.
</p>
<p>Versions 5.1 and 5.2 also have the <span class="struct">WMI_LOGGER_INFORMATION</span> 
as input and output for the undocumented kernel exports <span class="function">WmiStartTrace</span>,
<span class="function">WmiStopTrace</span>, <span class="function">WmiQueryTrace</span>,
<span class="function">WmiUpdateTrace</span> and <span class="function">WmiFlushTrace</span>. 
These do not survive to version 6.0, but the <span class="struct">WMI_LOGGER_INFORMATION</span> 
has an internal kernel-mode use to support tracing sessions that the kernel itself 
starts from <span class="regkey">AutoLogger</span> settings in the registry. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">WMI_LOGGER_INFORMATION</span> structure is not documented, 
but Microsoft has published a C-language definition in the NTWMI.H from the Enterprise 
edition of the Windows Driver Kit (WDK) for Windows 10 version 1511. </p>
<!--webbot bot="Include" U-Include="../../_include/appxdeploymentclient.htm" TAG="BODY" startspan -->

<p>Were it not for this relatively recent and possibly unintended disclosure, much 
would anyway be known from type information in symbol files. Curiously though, type 
information for this structure has never appeared in any public symbol files for 
the kernel or for the obvious low-level user-mode DLLs. In the whole of Microsoft’s 
packages of public symbol files, at least to the original Windows 10, relevant type 
information is unknown before Windows 8 and appears in symbol files only for AppXDeploymentClient.dll, 
CertEnroll.dll (before Windows 10) and Windows.Storage.ApplicationData.dll. </p>

<!--webbot bot="Include" endspan i-checksum="57456" -->
<h2>Layout </h2>
<p>Though the <span class="struct">WMI_LOGGER_INFORMATION</span> is shared between 
kernel and user modes, which would ordinarily encourage its stability, it took some 
time to settle. The following changes of size are known: </p>
<table class="Sizes">
  <tr>
    <th>Version </th>
    <th>Size </th>
  </tr>
  <tr>
    <td>5.0 </td>
    <td>0x88 </td>
  </tr>
  <tr>
    <td>5.1 </td>
    <td>0xA8 </td>
  </tr>
  <tr>
    <td>5.2 and higher </td>
    <td>0xB0 </td>
  </tr>
</table>
<p>The <span class="struct">WMI_LOGGER_INFORMATION</span> is the same in 32-bit 
and 64-bit Windows because from as early as version 5.1, members that are pointers 
or handles or that contain pointers are defined in union with artificial members 
that widen the 32-bit definition to the 64-bit. Other members are defined in unions 
because the different branches of the union are intended for different operations, 
or because one branch is for input and the other for output. It is not yet certain 
when some of this differentiation started. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>
    <pre class="source">WNODE_HEADER Wnode;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>0x30 </td>
    <td>
    <pre class="source">ULONG BufferSize;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>0x34 </td>
    <td>
    <pre class="source">ULONG MinimumBuffers;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>0x38 </td>
    <td>
    <pre class="source">ULONG MaximumBuffers;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>0x3C </td>
    <td>
    <pre class="source">ULONG MaximumFileSize;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>0x40 </td>
    <td>
    <pre class="source">ULONG <a href="logfilemode.htm">LogFileMode</a>;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>0x44 </td>
    <td>
    <pre class="source">ULONG FlushTimer;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>0x48 </td>
    <td>
    <pre class="source">ULONG EnableFlags;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x4C </td>
    <td>
    <pre class="source">LONG AgeLimit;</pre>
    </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    LONG AgeLimit;
    LONG FlushThreshold;
};</pre>
    </td>
    <td>6.1 and higher </td>
  </tr>
  <tr>
    <td>0x50 </td>
    <td>
    <pre class="source">ULONG Wow;</pre>
    </td>
    <td>5.2 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x50 (5.0 to 5.1); <br>
    0x58 </td>
    <td>
    <pre class="source">HANDLE LogFileHandle;</pre>
    </td>
    <td>5.0 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    HANDLE LogFileHandle;
    ULONG64 LogFileHandle64;
};</pre>
    </td>
    <td>5.1 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x54 (5.0); <br>
    0x58 (5.1); <br>
    0x60 </td>
    <td>
    <pre class="source">ULONG NumberOfBuffers;</pre>
    </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    ULONG NumberOfBuffers;
    ULONG InstanceCount;
};</pre>
    </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td rowspan="2">0x58 (5.0); <br>
    0x5C (5.1); <br>
    0x64 </td>
    <td>
    <pre class="source">ULONG FreeBuffers;</pre>
    </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    ULONG FreeBuffers;
    ULONG InstanceId;
};</pre>
    </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x5C (5.0); <br>
    0x60 (5.1); <br>
    0x68 </td>
    <td>
    <pre class="source">union {
    ULONG EventsLost;
    ULONG NumberOfProcessors;
};</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>0x60 (5.0); <br>
    0x64 (5.1); <br>
    0x6C </td>
    <td>
    <pre class="source">ULONG BuffersWritten;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x64 (5.0); <br>
    0x68 (5.1); <br>
    0x70 </td>
    <td>
    <pre class="source">ULONG LogBuffersLost;</pre>
    </td>
    <td>5.0 to 5.2 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    ULONG LogBuffersLost;
    ULONG Flags;
};</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x68 (5.0); <br>
    0x6C (5.1); <br>
    0x74 </td>
    <td>
    <pre class="source">ULONG RealTimeBuffersLost;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x6C (5.0); <br>
    0x70 (5.1); <br>
    0x78 </td>
    <td>
    <pre class="source">HANDLE LoggerThreadId;</pre>
    </td>
    <td>5.0 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    HANDLE LoggerThreadId;
    ULONG64 LoggerThreadId64;
};</pre>
    </td>
    <td>5.1 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x70 (5.0); <br>
    0x78 (5.1); <br>
    0x80 </td>
    <td>
    <pre class="source">UNICODE_STRING LogFileName;</pre>
    </td>
    <td>5.0 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    UNICODE_STRING LogFileName;
    UNICODE_STRING64 LogFileName64;
};</pre>
    </td>
    <td>5.1 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x78 (5.0); <br>
    0x88 (5.1); <br>
    0x90 </td>
    <td>
    <pre class="source">UNICODE_STRING LoggerName;</pre>
    </td>
    <td>5.0 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    UNICODE_STRING LoggerName;
    UNICODE_STRING64 LoggerName64;
};</pre>
    </td>
    <td>5.1 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x80 (5.0); <br>
    0x98 (5.1); <br>
    0xA0 (5.2) </td>
    <td>unknown <span class="type">PVOID</span> </td>
    <td>5.0 only </td>
  </tr>
  <tr>
    <td>unknown <span class="type">PVOID</span> and <span class="type">ULONG64</span> 
    in union </td>
    <td>5.1 to 5.2 </td>
  </tr>
  <tr>
    <td>0xA0 </td>
    <td>
    <pre class="source">ULONG RealTimeConsumerCount;</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0xA4 </td>
    <td>
    <pre class="source">ULONG SpareUlong;</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0xA0 (5.1); <br>
    0xA8 </td>
    <td>
    <pre class="source">union {
    PVOID LoggerExtension;
    ULONG64 LoggerExtension64;
};</pre>
    </td>
    <td>5.1 and higher </td>
  </tr>
</table>
<!-- p class="alert">All the remaining remarks are from very old notes and are reproduced 
solely to record something of this barely known structure’s early development. Take 
or leave with more than usual caution. </p>
<p>Some requirements of the <span class="member">Wnode</span> apply to all operations:
</p>
<ul>
  <li>the <span class="member">BufferSize</span> must allow for at least a
  <span class="struct">WMI_LOGGER_INFORMATION</span>; </li>
  <li><span class="constant">WNODE_FLAG_TRACED_GUID</span> is required in the
  <span class="member">Flags</span>. </li>
</ul>
<p>The <span class="member">Guid</span> in the <span class="member">Wnode</span> 
is vital input for identifying the logger. Some identifiers are intrinsic to the 
ETW machinery: </p>
<ul>
  <li><span class="constant">SystemTraceControlGuid</span> selects the NT Kernel 
  Logger; </li>
  <li><span class="constant">GlobalLoggerGuid</span> selects the global logger.
  </li>
</ul>
<p>In version 5.2 and higher, <span class="constant">SystemTraceControlGuid</span> 
is invalid if <span class="constant">EVENT_TRACE_FILE_MODE_NEWFILE</span> is set. 
In all versions, <span class="constant">SystemTraceControlGuid</span> requires the
<span class="constant">TRACELOG_ACCESS_KERNEL_LOGGER</span> permission. </p>
<p>A null <span class="member">Guid</span> stands for whatever the kernel wants 
to use. In versions 5.2 and higher, the kernel creates a GUID. Before then, the 
kernel uses <span class="constant">EventTraceGuid</span>. </p>
<p>Also vital as input in version 5.1 and higher in the <span class="member">Wnode</span> 
is the <span class="member">ClientContext</span>. It selects the type of clock. 
Microsoft’s names are known from NTWMI.H: </p>
<table>
  <tr>
    <th>Value </th>
    <th>Name </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0 </td>
    <td><span class="constant">EVENT_TRACE_CLOCK_RAW</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1 </td>
    <td><span class="constant">EVENT_TRACE_CLOCK_PERFCOUNTER</span> </td>
    <td>5.1 and higher </td>
    <td>default in 5.1 and early 5.2 </td>
  </tr>
  <tr>
    <td>2 </td>
    <td><span class="constant">EVENT_TRACE_CLOCK_SYSTEMTIME</span> </td>
    <td>5.2 and higher </td>
    <td>default in late 5.2 and higher </td>
  </tr>
  <tr>
    <td>3 </td>
    <td><span class="constant">EVENT_TRACE_CLOCK_CPUCYCLE</span> </td>
    <td>late 5.2 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td><span class="constant">EVENT_TRACE_CLOCK_MAX</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>All versions support at least the performance counter and system time, but using 
the <span class="member">ClientContext</span> for each logger is not known to version 
5.0, which is instead configured from the registry. In version 5.1 and in version 
5.2 before Windows Server 2003 SP1, all values other than 2 are treated as 1 (and 
the <span class="member">ClientContext</span> is updated correspondingly on output). 
In later versions, all values other than 1 and 3 are treated as 2. </p>
<p>The <span class="member">BufferSize</span> is in KB. Zero stands for 4KB, presumably 
as the CPU page size. Anything greater than 0x0400 is treated as 0x0400, thus accounting 
for the documented maximum of 1MB. </p>
<p>The <span class="member">MaximumBuffers</span> and <span class="member">MinimumBuffers</span> 
interact. Each is defaulted if less than two. The minimum is defaulted if it exceeds 
the maximum. The defaults depend on the number of processors: </p>
<table>
  <tr>
    <th>Version </th>
    <th>Default <span class="member">MinimumBuffers</span> </th>
    <th>Default <span class="member">MaximumBuffers</span> </th>
  </tr>
  <tr>
    <td>5.0 only </td>
    <td><span class="placeholder">numproc</span> plus 1 </td>
    <td>25 </td>
  </tr>
  <tr>
    <td>5.1 to 5.2 </td>
    <td><span class="placeholder">numproc</span> plus 2 </td>
    <td><span class="placeholder">numproc</span> plus 22 </td>
  </tr>
</table>
<p>A <span class="member">MaximumFileSize</span> is required if
<span class="constant">EVENT_TRACE_FILE_MODE_NEWFILE</span> is set. </p>
<p>The <span class="member">FlushTimer</span> is counted in seconds. </p>
<p>The <span class="member">EnableFlags</span> are ordinarily a collection of bits 
that specify types of event for the kernel logger. To allow for more types than 
there are bits in a dword, a very different interpretation applies if
<span class="constant">EVENT_TRACE_FLAG_EXTENSION</span> is set. The
<span class="member">EnableFlags</span> is then not a dword but a
<span class="struct"><a href="../tracesup/trace_enable_flag_extension.htm">TRACE_ENABLE_FLAG_EXTENSION</a></span> 
which locates an array of dwords that act as an extended set of flags. </p>
<p>The <span class="member">AgeLimit</span> is counted in minutes. A non-zero count 
less than 15 is treated as 15 in versions 5.1 and higher. Note that the
<span class="member">AgeLimit</span> is signed: all versions treat a negative count 
as zero. </p>
<p>A <span class="member">LogFileHandle</span> is required if </p>
<ul>
  <li><span class="constant">EVENT_TRACE_REAL_TIME_MODE</span> and
  <span class="constant">EVENT_TRACE_DELAY_OPEN_FILE_MODE</span> are both clear.
  </li>
</ul>
<p>A <span class="member">LogFileHandle</span> is invalid without the
<span class="constant">TRACELOG_CREATE_ONDISK</span> access right. For a user-mode 
request, a <span class="member">LogFileHandle</span> must have the
<span class="constant">FILE_WRITE_DATA</span> permission. </p>
<p>A <span class="member">LogFileName</span> is required if </p>
<ul>
  <li><span class="constant">EVENT_TRACE_DELAY_OPEN_FILE_MODE</span> is set (version 
  5.0); </li>
  <li><span class="constant">EVENT_TRACE_FILE_MODE_NEWFILE</span> is set. </li>
</ul -->
<p>The <span class="member">BufferSize</span> is in kilobytes. </p>
<p>The <span class="member">LogFileMode</span> is a set of bit flags. These are 
subject to many constraints, both among themselves and in common with other members.
</p>
<p>Though the <span class="member">AgeLimit</span> remains formally defined in version 
6.0 and higher, it is ignored in version 6.0 and is replaced by the
<span class="member">FlushThreshold</span> in version 6.1. </p>
<p>The <span class="member">LogFileHandle</span> is required input except if either 
of the following are set in the <span class="member">LogFileMode</span>: </p>
<ul>
  <li><span class="constant">EVENT_TRACE_REAL_TIME_MODE</span>; </li>
  <li><span class="constant">EVENT_TRACE_DELAY_OPEN_FILE_MODE</span>. </li>
</ul>
<p>The <span class="member">NumberOfBuffers</span> has an undocumented meaning on 
input in Windows Vista and higher. It is how an AutoLogger session communicates 
what has been set for its <span class="regvalue">FileCounter</span> value. </p>
<p>The <span class="member">Flags</span> are something of a mystery even with Microsoft’s 
disclosure of NTWMI.H. This header file’s definition of the structure shows the
<span class="member">Flags</span>, of course, but not what flags are defined for 
it. The 0x01 and 0x02 bits on input become the <span class="member">Persistent</span> 
and <span class="member">AutoLogger</span> bits of the <span class="member">
<a href="../../tracesup/wmi_logger_context/flags.htm">Flags</a></span> in the
<span class="struct">WMI_LOGGER_CONTEXT</span>. </p>
<p>The unknown pointer near the end of the structure for versions before 6.0 tells 
the kernel what to expect in the Event Trace Log (ETL) file. These versions let 
the user-mode caller create the log file, write its first buffer, and pass the file 
handle as <span class="member">LogFileHandle</span> on input. Every ETL file begins 
with a <span class="struct"><a href="../../tracelog/wmi_buffer_header.htm">WMI_BUFFER_HEADER</a></span>, 
a <span class="struct"><a href="../../tracelog/system_trace_header.htm">SYSTEM_TRACE_HEADER</a></span> 
and a <span class="struct"><a href="../../tracelog/trace_logfile_header.htm">TRACE_LOGFILE_HEADER</a></span>. 
The unknown pointer provides the kernel with the <span class="struct">WNODE_HEADER</span> 
from the <span class="struct">WMI_BUFFER_HEADER</span> and with the whole of the 
fixed-size <span class="struct">TRACE_LOGFILE_HEADER</span>. The kernel saves them 
in paged memory, keeping the address as the <span class="member">LoggerHeader</span> 
member of the <span class="struct">WMI_LOGGER_CONTEXT</span>. In these versions, 
the <span class="struct">WMI_BUFFER_HEADER</span> begins with a
<span class="struct">WNODE_HEADER</span>, which must match what’s saved. In the
<span class="struct">TRACE_LOGFILE_HEADER</span>, the first 0x38 bytes must match.
</p>
<!-- p>Version 5.0 assumes that the <span class="member">LoggerName</span> and
<span class="member">LogFileName</span> each have a <span class="member">Buffer</span> 
that is one <span class="type">WCHAR</span> larger (presumably expected to be a 
null-terminator) than the <span class="member">Length</span>. </p -->
<div class="Footer">
  <p class="Dates">This page was created on 27th November 2016 but was not published 
  until 31st <a href="../../../../../../../../new/18/12.htm">December 2018</a>.. 
  It was last modified on 28th <a href="../../../../../../../../new/20/05.htm">May 
  2020</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../../_include/c1820.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2018-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="14474" -->
</div>

</body>

</html>
