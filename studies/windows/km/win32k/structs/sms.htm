<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SMS</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/km.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="21016" -->
<h1>SMS </h1>
<p>The <span class="struct">SMS</span> (formally <span class="struct">tagSMS</span>) 
structure is how WIN32K.SYS—and before it, WINSRV.DLL—packages a message that is 
to be sent between threads (which many programmers will think of as between windows).
</p>
<h2>Variability </h2>
<p>The following changes of size are known. </p>
<table class="Sizes">
  <colgroup>
    <col class="Version"><col class="Size" span="2">
  </colgroup>
  <tr>
    <th>Version </th>
    <th>Size (x86) </th>
    <th>Size (x64) </th>
  </tr>
  <tr>
    <td>3.10 </td>
    <td>0x40 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>3.51 to 6.3 </td>
    <td>0x3C </td>
    <td>0x70 </td>
  </tr>
  <tr>
    <td>10.0 </td>
    <td>0x48 </td>
    <td>0x88 </td>
  </tr>
</table>
<h2>Layout </h2>
<table>
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td rowspan="2">0x00 </td>
    <td rowspan="2">0x00 </td>
    <td>
    <pre class="source">SMS *psmsNext;</pre>
    </td>
    <td>3.10 to 6.3 </td>
  </tr>
  <tr>
    <td>unknown <span class="struct">LIST_ENTRY</span> </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x04 (3.10) </td>
    <td>&nbsp;</td>
    <td>unknown <span class="struct">SMS</span> pointer </td>
    <td>3.10 only </td>
  </tr>
  <tr>
    <td>0x08 (3.10) </td>
    <td>&nbsp;</td>
    <td>unknown <span class="struct">SMS</span> pointer </td>
    <td>3.10 only </td>
  </tr>
  <tr>
    <td rowspan="2">0x0C (3.10); <br>
    0x04 (3.51 to 6.3); <br>
    0x08 </td>
    <td rowspan="2">0x08 (5.2 to 6.3); <br>
    0x10 </td>
    <td>
    <pre class="source">SMS *psmsReceiveNext;</pre>
    </td>
    <td>3.10 to 6.3 &nbsp;</td>
  </tr>
  <tr>
    <td>unknown <span class="struct">LIST_ENTRY</span> </td>
    <td>10.0 and higher </td>
  </tr>
</table>
<p>Each newly allocated <span class="struct">SMS</span> is inserted at the head 
of a global single-linked list, linking through the <span class="member">psmsNext</span> 
pointer. Version 10.0 makes this a double-linked list. </p>
<p>Each newly allocated <span class="struct">SMS</span> is also inserted at the 
tail of the receiving thread’s <span class="member">pmsReceiveList</span>, linking 
through the <span class="member">psmsReceiveNext</span> pointer. Again, version 
10.0 changes this list from single-linked to double. While a thread receives messages, 
it drains from the head of its <span class="member">psmsReceiveList</span>. </p>
<table>
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0x10 (3.10); <br>
    0x08 (3.51 to 5.1) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">ULONG tSent;</pre>
    </td>
    <td>3.10 to 5.1 </td>
    <td>next at 0x20 </td>
  </tr>
  <tr>
    <td>0x14 (3.10); <br>
    0x0C (3.51 to 5.1); <br>
    0x08 (5.2 to 6.3); <br>
    0x10 </td>
    <td>0x10 (5.2 to 6.3); <br>
    0x20 </td>
    <td>
    <pre class="source"><a href="threadinfo/index.htm">THREADINFO</a> *ptiSender;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x18 (3.10); <br>
    0x10 (3.51 to 5.1); <br>
    0x0C (5.2 to 6.3); <br>
    0x14 </td>
    <td>0x18 (5.2 to 6.3); <br>
    0x28 </td>
    <td>
    <pre class="source">THREADINFO *ptiReceiver;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x1C (3.10); <br>
    0x14 (3.51 to 5.1); <br>
    0x10 (5.2 to 6.3); <br>
    0x18 </td>
    <td>0x20 (5.2 to 6.3); <br>
    0x30 </td>
    <td>
    <pre class="source">SENDASYNCPROC lpResultCallBack;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x20 (3.10); <br>
    0x18 (3.51 to 5.1); <br>
    0x14 (5.2 to 6.3); <br>
    0x1C </td>
    <td>0x28 (5.2 to 6.3); <br>
    0x38 </td>
    <td>
    <pre class="source">DWORD_PTR dwData;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x24 (3.10); <br>
    0x1C (3.51 to 5.1); <br>
    0x18 (5.2 to 6.3); <br>
    0x20 </td>
    <td>0x30 (5.2 to 6.3); <br>
    0x40 </td>
    <td>
    <pre class="source">THREADINFO *ptiCallBackSender;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x28 (3.10); <br>
    0x20 (3.51 to 5.1); <br>
    0x1C (5.2 to 6.3); <br>
    0x24 </td>
    <td>0x38 (5.2 to 6.3); <br>
    0x48 </td>
    <td>
    <pre class="source">LONG_PTR lRet;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x20 (5.2 to 6.3); <br>
    0x28 </td>
    <td>0x40 (5.2 to 6.3); <br>
    0x50 </td>
    <td>
    <pre class="source">ULONG tSent;</pre>
    </td>
    <td>5.2 and higher </td>
    <td>previously at 0x08 </td>
  </tr>
  <tr>
    <td>0x2C (3.10); <br>
    0x24 (3.51 to 6.3); <br>
    0x2C </td>
    <td>0x44 (5.2 to 6.3); <br>
    0x54 </td>
    <td>
    <pre class="source">UINT flags;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x30 (3.10); <br>
    0x28 (3.51 to 6.3); <br>
    0x30 </td>
    <td>0x48 (5.2 to 6.3); <br>
    0x58 </td>
    <td>
    <pre class="source">WPARAM wParam;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x34 (3.10); <br>
    0x2C (3.51 to 6.3); <br>
    0x34 </td>
    <td>0x50 (5.2 to 6.3); <br>
    0x60 </td>
    <td>
    <pre class="source">LPARAM lParam;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x38 (3.10); <br>
    0x30 (3.51 to 6.3); <br>
    0x38 </td>
    <td>0x58 (5.2 to 6.3); <br>
    0x68 </td>
    <td>
    <pre class="source">UINT message;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x3C (3.10); <br>
    0x34 (3.51 to 6.3); <br>
    0x3C </td>
    <td>0x60 (5.2 to 6.3); <br>
    0x70 </td>
    <td>
    <pre class="source"><a href="../../../win32/user32/structs/wnd/index.htm">WND</a> *spwnd;</pre>
    </td>
    <td>all </td>
    <td>last member in 3.10 </td>
  </tr>
  <tr>
    <td>0x38 (3.51 to 6.3); <br>
    0x40 </td>
    <td>0x68 (5.2 to 6.3); <br>
    0x78 </td>
    <td>
    <pre class="source">PVOID pvCapture;</pre>
    </td>
    <td>3.51 and higher </td>
    <td>last member in 3.51 to 6.3 </td>
  </tr>
  <tr>
    <td>0x44 </td>
    <td>0x80 </td>
    <td>unknown dword </td>
    <td>10.0 and higher </td>
    <td>last member in 10.0 </td>
  </tr>
</table>
<h3>Flags</h3>
<p>Debugger extensions from DDKs for Windows NT 3.51 through Windows 2000 helpfully 
have descriptive strings for the bits within the <span class="member">flags</span>. 
It seems highly plausible that these are the macros that are used for the bits in 
the source code. </p>
<table>
  <tr>
    <th>Mask </th>
    <th>Name </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00000001 </td>
    <td><span class="constant">SMF_REPLY</span> </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x00000002 </td>
    <td><span class="constant">SMF_RECEIVERDIED</span> </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x00000004 </td>
    <td><span class="constant">SMF_SENDERDIED</span> </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x00000008 </td>
    <td><span class="constant">SMF_RECEIVERFREE</span> </td>
    <td>all </td>
  </tr>
  <tr>
    <td rowspan="2">0x00000010 </td>
    <td><span class="constant">SMF_RECEIVERBUSY</span> </td>
    <td>3.10 to 3.51 </td>
  </tr>
  <tr>
    <td><span class="constant">SMF_RECEIVEDMESSAGE</span> </td>
    <td>4.0 and higher </td>
  </tr>
  <tr>
    <td>0x000000E0 </td>
    <td>perhaps unused </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x00000100 </td>
    <td><span class="constant">SMF_CB_REQUEST</span> </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x00000200 </td>
    <td><span class="constant">SMF_CB_REPLY</span> </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x00000400 </td>
    <td><span class="constant">SMF_CB_CLIENT</span> </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x00000800 </td>
    <td><span class="constant">SMF_CB_SERVER</span> </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x00001000 </td>
    <td><span class="constant">SMF_WOWRECEIVE</span> </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td>0x00002000 </td>
    <td><span class="constant">SMF_WOWSEND</span> </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x00004000 </td>
    <td><span class="constant">SMF_RECEIVEDMESSAGE</span> </td>
    <td>3.51 only </td>
  </tr>
  <tr>
    <td><span class="constant">SMF_RECEIVERBUSY</span> </td>
    <td>4.0 and higher </td>
  </tr>
  <tr>
    <td>0x00008000 </td>
    <td>&nbsp;</td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x00010000 </td>
    <td>&nbsp;</td>
    <td>10.0 and higher </td>
  </tr>
</table>
<p>There seems to have been some confusion over the <span class="constant">SMF_RECEIVERBUSY</span> 
and <span class="constant">SMF_RECEIVEDMESSAGE</span> flags. Version 3.10 has only 
whichever one of them is the 0x00000010 flag. It is set on receiving the message. 
Version 3.51 introduces the other flag, 0x00004000. This too is set on receiving 
the message, but it gets cleared before either freeing the message or replying to 
it. </p>
<p>By the way, the <span class="constant">SMF_RECEIVERFREE</span> flag is not named 
in contrast to <span class="constant">SMF_RECEIVERBUSY</span>. It simply means that 
the receiving thread is to free the <span class="struct">SMS</span>, notably because 
the sending thread wants no reply. </p>
<div class="Footer">
  <p class="Dates">This page was created on 9th August 2017 but was not published 
  until 1st <a href="../../../../../new/17/10.htm">October 2017</a>. </p>
  <!--webbot bot="Include" U-Include="../../_include/c17.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017. Geoff Chappell. All rights reserved. 
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="47327" -->
</div>

</body>

</html>
