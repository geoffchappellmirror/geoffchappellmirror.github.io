<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Attribute Statements</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<!--webbot bot="Include" U-Include="../../../_include/draft.htm" TAG="BODY" startspan -->

<p class="alert">ROUGH DRAFT </p>

<!--webbot bot="Include" i-checksum="20300" endspan -->
<h1>Attribute Statements </h1>
<p>An attribute statement names the <span class="definition">attribute</span> and 
optionally provides either or both an <span class="definition">attribute argument 
list</span> and an <span class="definition">attribute value list</span> (if both, 
then necessarily in that order). </p>
<p>The attribute argument list is enclosed by parentheses and consists of one or 
more attribute arguments separated by commas, with an optional trailing comma.
</p>
<p>The attribute value list is announced by an equals sign and is enclosed by braces 
(curly brackets). It consists of one or more attribute values separated by commas, 
but with the provisions that attribute values may be empty and that a trailing comma 
implies that an empty attribute value follows. An attribute value list that contains 
just the one non-empty value may be given without braces. </p>
<p><span class="placeholder">attribute-statement</span>: </p>
<blockquote>
  <p><span class="placeholder">attribute-name</span><span class="statement">
  </span>[<span class="statement"> ( </span><span class="placeholder">attribute-argument-list</span><span class="statement">
  </span>[<span class="statement">,</span>]<span class="statement"> ) </span>]<span class="statement">
  </span>[<span class="statement"> = { </span><span class="placeholder">attribute-value-list</span><span class="statement"> 
  } </span>] </p>
  <p><span class="placeholder">attribute-name</span><span class="statement">
  </span>[<span class="statement"> ( </span><span class="placeholder">attribute-argument-list</span><span class="statement">
  </span>[<span class="statement">,</span>]<span class="statement"> ) </span>]<span class="statement">
  </span>[<span class="statement"> = </span><span class="placeholder">attribute-value</span><span class="statement">
  </span>] </p>
</blockquote>
<p><span class="placeholder">attribute-name</span>: </p>
<blockquote>
  <p><span class="placeholder">identifier</span> </p>
</blockquote>
<p><span class="placeholder">attribute-argument-list</span>: </p>
<blockquote>
  <p><span class="placeholder"><a href="arguments.htm">attribute-argument</a></span>
  </p>
  <p><span class="placeholder">attribute-argument-list</span><span class="statement"> 
  , </span><span class="placeholder">attribute-argument</span> </p>
</blockquote>
<p><span class="placeholder">attribute-value-list</span>: </p>
<blockquote>
  <p>[<span class="statement"> </span><span class="placeholder">attribute-value</span><span class="statement">
  </span>] </p>
  <p><span class="placeholder">attribute-value-list</span><span class="statement"> 
  , </span>[<span class="statement"> </span><span class="placeholder">attribute-value</span><span class="statement">
  </span>] </p>
</blockquote>
<h2>Attribute Names </h2>
<p>It is an error (C3400) for an attribute statement to begin with anything other 
than an identifier to name the attribute. The error message cites the unexpected 
token only by type. For example, </p>
<pre class="source">[
    1234        // C3400
];</pre>
<p>produces </p>
<pre class="output">TEST.CPP(3) : error C3400: &#39;string&#39;: unexpected token/character encountered in attribute block</pre>
<p>Note that this error also applies to what might otherwise be regarded as empty 
attribute statements. These are treated as attribute statements that begin erroneously 
with a comma, which is then cited as the unexpected token. </p>
<h3>Macro Expansion </h3>
<p>The attribute name is deliberately not subject to macro expansion. If the identifier 
that names the attribute is defined as a macro, a warning is issued (C4044, at level 
1). Thus, in </p>
<pre class="source">#define coclass

[
    coclass,
]                               // C4044
class Test;</pre>
<p>the <span class="attribute">coclass</span> attribute is not defined away to nothing.
</p>
<p>More typical in practice would be that the macro is not itself the name of any 
recognised attribute but the programmer means it to stand for an attribute, perhaps 
also with arguments for that attribute. When the macro is in fact not expanded, 
it remains as an identifier, which the compiler will try to interpret as an attribute. 
Thus, warning C4044 will typically be followed by error C2337: </p>
<pre class="source">#define MODULE_ATTRIBUTES module (type = dll, name = test)

[
    MODULE_ATTRIBUTES
];                              // C4044 and C2337</pre>
<p>It may be as well to note here that macros are not useless in attribute blocks. 
For instance, they are expanded when given as attribute argument values, and the 
preceding example is reworkable as </p>
<pre class="source">#define MODULE_TYPE dll
#define MODULE_NAME test

[
    module (type = MODULE_TYPE, name = MODULE_NAME)
];</pre>
<h2>Argument Lists </h2>
<p>It is an error (C3406) if the argument list is empty, meaning specifically that 
the token immediately after the left parenthesis is a right parenthesis. The error 
message cites the attribute. For example, </p>
<pre class="source">[
    cpp_quote ()        // C3406
];</pre>
<p>produces </p>
<pre class="output">TEST.CPP(2) : error C3406: &#39;cpp_quote&#39;: empty attribute argument list is not allowed</pre>
<p>It is an error (C2143) for an attribute argument to be followed by anything other 
than a comma or a right parenthesis. The error message in this case complains of 
missing a right parenthesis. </p>
<div class="Footer">
  <p class="Dates">This page was created on 28th July 2006 and was last modified 
  on 6th January 2010. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0610.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2010. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62416" endspan -->
</div>

</body>

</html>
