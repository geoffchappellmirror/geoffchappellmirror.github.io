<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>String Literals</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<h1>String Literals </h1>
<p>The compiler may generate a symbolic name for a string literal, most notably 
so that subsequent references to the same constant string data can be resolved to 
a one and only instance of this string instead of to multiple, redundant, instances 
of the same string. Such compiler-generated names for string literals fit loosely 
into the scheme of decorations of built-in objects (as if <span class="symbol">?_C</span> 
is the <span class="placeholder"><a href="name.htm">name</a></span> and there is 
no <span class="placeholder">scope</span>). The general form is </p>
<blockquote>
  <p><span class="symbol">??_C@_0</span><span class="placeholder">length</span>[<span class="symbol">@</span>]<span class="placeholder">checksum</span>[<span class="symbol">@</span>]<span class="placeholder">text</span><span class="symbol">@</span>
  </p>
</blockquote>
<p>for a <span class="type">char</span> array but </p>
<blockquote>
  <p><span class="symbol">??_C@_1</span><span class="placeholder">length</span>[<span class="symbol">@</span>]<span class="placeholder">checksum</span>[<span class="symbol">@</span>]<span class="placeholder">text</span><span class="symbol">@</span>
  </p>
</blockquote>
<p>if the string is an array of the <span class="type">wchar_t</span> type (or
<span class="type">unsigned short</span> if <span class="switch">
<a href="../../cl/cl/options/z$c.htm">/Zc:wchar_t</a></span> is not active). </p>
<p>The first two fields show respectively the <span class="placeholder">length</span> 
of the string (in bytes, including the null terminator) and a
<span class="placeholder">checksum</span> of all the bytes in the string (again 
including the null terminator). Both are represented as <a href="numeric.htm">numeric 
fields</a> (i.e., as a sequence of letters A to P terminated by an @ sign, or as 
a single digit 0 to 9 with no @ sign). </p>
<p>The <span class="placeholder">text</span> field shows as many as 20 characters 
from the start of the string, up to and including the terminating null. For a
<span class="type">char</span> string, the representation shows each byte in turn. 
The representation of a <span class="type">wchar_t</span> string shows the high 
byte first in each character. Alphanumeric bytes are simply reproduced, as are dollar 
signs and underscores. Others are translated, the general form being: </p>
<blockquote>
  <p><span class="symbol">?$</span><span class="placeholder">hl</span> </p>
</blockquote>
<p>where <span class="placeholder">h</span> and <span class="placeholder">l</span> 
represent the high and low hexadecimal digit respectively as a letter from A to 
P inclusive (A for 0x00 to P for 0x0F). For instance, a dollar sign as a byte in 
a string literal translates to <span class="symbol">?$CE</span> in the symbolic 
name. Simplifications are provided as special cases for some common punctuators 
(and for some less common characters from the upper half of the ASCII tables):
</p>
<table>
  <tr>
    <td><span class="symbol">?0</span> </td>
    <td>comma </td>
  </tr>
  <tr>
    <td><span class="symbol">?1</span> </td>
    <td>forward slash </td>
  </tr>
  <tr>
    <td><span class="symbol">?2</span> </td>
    <td>backslash </td>
  </tr>
  <tr>
    <td><span class="symbol">?3</span> </td>
    <td>colon </td>
  </tr>
  <tr>
    <td><span class="symbol">?4</span> </td>
    <td>period </td>
  </tr>
  <tr>
    <td><span class="symbol">?5</span> </td>
    <td>space </td>
  </tr>
  <tr>
    <td><span class="symbol">?6</span> </td>
    <td>new-line </td>
  </tr>
  <tr>
    <td><span class="symbol">?7</span> </td>
    <td>tab </td>
  </tr>
  <tr>
    <td><span class="symbol">?8</span> </td>
    <td>single quote </td>
  </tr>
  <tr>
    <td><span class="symbol">?9</span> </td>
    <td>hyphen </td>
  </tr>
  <tr>
    <td><span class="symbol">?A</span> to <span class="symbol">?Z</span> </td>
    <td>ASCII 0xC1 to 0xDA </td>
  </tr>
  <tr>
    <td><span class="symbol">?a</span> to <span class="symbol">?z</span> </td>
    <td>ASCII 0xE1 to 0xFA </td>
  </tr>
</table>
<div class="Footer">
  <p class="Dates">This page was created on 7th March 2006 and was last modified 
  on 9th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="58117" endspan -->
</div>

</body>

</html>
