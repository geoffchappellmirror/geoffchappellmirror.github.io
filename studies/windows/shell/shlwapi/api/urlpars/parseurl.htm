<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>ParseURL</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="55064" endspan -->
<h1>ParseURL </h1>
<p>This function identifies the protocol in a supposed URL. </p>
<h2>Declaration </h2>
<pre class="source">HRESULT
ParseURL (
    LPCTSTR pszUrl,
    PARSEDURL *ppu);</pre>
<!--webbot bot="Include" U-Include="../_include/aw.htm" TAG="BODY" startspan -->

<p>The function exists in ANSI and Unicode forms. </p>

<!--webbot bot="Include" i-checksum="40026" endspan -->
<p>Since the <span class="struct">PARSEDURL</span> structure appears to be used 
only for this function, its format is as well given here: </p>
<pre class="source">typedef struct tagPARSEDURL {
    DWORD cbSize;
    LPCTSTR pszProtocol;
    UINT cchProtocol;
    LPCTSTR pszSuffix;
    UINT cchSuffix;
    UINT nScheme;
} PARSEDURL, *PPARSEDURL;</pre>
<p>Though the <span class="member">nScheme</span> member is formally typed as a
<span class="type">UINT</span>, its values are drawn from the <span class="enum">
URL_SCHEME</span> enumeration. Since the only exposure of this enumeration through 
exported interfaces seems to be for this function, it too is given here: </p>
<pre class="source">typedef enum {
    URL_SCHEME_INVALID          = -1,
    URL_SCHEME_UNKNOWN          = 0,
    URL_SCHEME_FTP,             // 0x01
    URL_SCHEME_HTTP,            // 0x02
    URL_SCHEME_GOPHER,          // 0x03
    URL_SCHEME_MAILTO,          // 0x04
    URL_SCHEME_NEWS,            // 0x05
    URL_SCHEME_NNTP,            // 0x06
    URL_SCHEME_TELNET,          // 0x07
    URL_SCHEME_WAIS,            // 0x08
    URL_SCHEME_FILE,            // 0x09
    URL_SCHEME_MK,              // 0x0A
    URL_SCHEME_HTTPS,           // 0x0B
    URL_SCHEME_SHELL,           // 0x0C
    URL_SCHEME_SNEWS,           // 0x0D
    URL_SCHEME_LOCAL,           // 0x0E
    URL_SCHEME_JAVASCRIPT,      // 0x0F
    URL_SCHEME_VBSCRIPT,        // 0x10
    URL_SCHEME_ABOUT,           // 0x11
    URL_SCHEME_RES,             // 0x12
    URL_SCHEME_MSSHELLROOTED,   // 0x13
    URL_SCHEME_MSSHELLIDLIST,   // 0x14
    URL_SCHEME_MSHELP,          // 0x15
    URL_SCHEME_MSSHELL_DEVICE,  // 0x16
    URL_SCHEME_WILDCARD,        // 0x17
    URL_SCHEME_SEARCH_MS        // 0x18
} URL_SCHEME;</pre>
<h3>Parameters </h3>
<p>The <span class="argument">pszUrl</span> argument is the address of the null-terminated 
string that is to be parsed as a URL. </p>
<p>The <span class="argument">ppu</span> argument is the address of a
<span class="struct">PARSEDURL</span> structure that is to receive details of the 
parsing. The <span class="member">cbSize</span> member should be set in advance 
to the size of the structure. </p>
<h3>Return Value </h3>
<p>The function returns zero for success, else an error code. </p>
<h2>Behaviour </h2>
<p>If the <span class="argument">pszUrl</span> argument is NULL, there is no URL 
to parse, and the function returns <span class="constant">E_INVALIDARG</span>.
</p>
<p>If the <span class="argument">ppu</span> argument is NULL or the
<span class="member">cbSize</span> member is not equal to the size of the expected 
structure (0x18), then there is no way to return details of the parsing, and the 
function returns <span class="constant">E_INVALIDARG</span>. </p>
<p>If the supposed URL given at <span class="argument">pszUrl</span> does not fit 
the syntax that the function expects of a URL (and which is described shortly), 
the function returns <span class="constant">URL_E_INVALID_SYNTAX</span> (having 
changed the <span class="struct">PARSEDURL</span> structure only by setting NULL 
into the <span class="member">pszProtocol</span> member). </p>
<p>Otherwise, the function succeeds, returning zero and setting meaningful values 
into all members of the <span class="struct">PARSEDURL</span> structure other than
<span class="member">cbSize</span>. </p>
<h3>URL Syntax </h3>
<p>The function recognises two types of element in a URL, namely a
<span class="definition">URL prefix</span> and a <span class="definition">URL protocol</span>. 
In each, the only valid characters are the ordinary alphanumeric ASCII characters, 
the plus sign, the minus sign and the period. A URL prefix consists of the characters 
of “url” in any mixture of case, followed by any number of valid characters, terminated 
by a colon. A URL protocol consists of any two or more valid characters, terminated 
by a colon. The function parses the supposed URL as zero or more URL prefixes, then 
exactly one URL protocol, and then whatever remains. </p>
<p>The <span class="member">pszProtocol</span> member is pointed into the given 
URL, to the first character of the protocol. The number of characters that form 
the protocol, up to but not including the terminating colon, is set into the
<span class="member">cchProtocol</span> member. </p>
<p>The <span class="member">pszSuffix</span> member is pointed into the given URL, 
to the first character of what is considered to be the remainder of the URL, somewhere 
after the protocol. The number of characters that form this remainder, up to but 
not including the terminating null, is set into the <span class="member">cchSuffix</span> 
member. </p>
<p>The following protocols are recognised specifically. Comparison is insensitive 
to case. Each has a corresponding value in the <span class="enum">URL_SCHEME</span> 
enumeration, to be set into the <span class="member">nScheme</span> member: </p>
<table class="Constants">
  <colgroup>
    <col class="Protocol"><col class="Name">
  </colgroup>
  <tr>
    <th class="Protocol">Protocol </th>
    <th class="Name">nScheme </th>
  </tr>
  <tr>
    <td>about </td>
    <td><span class="constant">URL_SCHEME_ABOUT</span> (0x11) </td>
  </tr>
  <tr>
    <td>file </td>
    <td><span class="constant">URL_SCHEME_FILE</span> (0x09) </td>
  </tr>
  <tr>
    <td>ftp </td>
    <td><span class="constant">URL_SCHEME_FTP</span> (0x01) </td>
  </tr>
  <tr>
    <td>gopher </td>
    <td><span class="constant">URL_SCHEME_GOPHER</span> (0x03) </td>
  </tr>
  <tr>
    <td>hcp </td>
    <td><span class="constant">URL_SCHEME_MSHELP</span> (0x15) </td>
  </tr>
  <tr>
    <td>http </td>
    <td><span class="constant">URL_SCHEME_HTTP</span> (0x02) </td>
  </tr>
  <tr>
    <td>https </td>
    <td><span class="constant">URL_SCHEME_HTTPS</span> (0x0B) </td>
  </tr>
  <tr>
    <td>javascript </td>
    <td><span class="constant">URL_SCHEME_JAVASCRIPT</span> (0x0F) </td>
  </tr>
  <tr>
    <td>local </td>
    <td><span class="constant">URL_SCHEME_LOCAL</span> (0x0E) </td>
  </tr>
  <tr>
    <td>mailto </td>
    <td><span class="constant">URL_SCHEME_MAILTO</span> (0x04) </td>
  </tr>
  <tr>
    <td>mk </td>
    <td><span class="constant">URL_SCHEME_MK</span> (0x0A) </td>
  </tr>
  <tr>
    <td>ms-shell-idlist </td>
    <td><span class="constant">URL_SCHEME_MSSHELLIDLIST</span> (0x14) </td>
  </tr>
  <tr>
    <td>ms-shell-rooted </td>
    <td><span class="constant">URL_SCHEME_MSSHELLROOTED</span> (0x13) </td>
  </tr>
  <tr>
    <td>news </td>
    <td><span class="constant">URL_SCHEME_NEWS</span> (0x05) </td>
  </tr>
  <tr>
    <td>nntp </td>
    <td><span class="constant">URL_SCHEME_NNTP</span> (0x06) </td>
  </tr>
  <tr>
    <td>res </td>
    <td><span class="constant">URL_SCHEME_RES</span> (0x12) </td>
  </tr>
  <tr>
    <td>search-ms </td>
    <td><span class="constant">URL_SCHEME_SEARCH_MS</span> (0x18) </td>
  </tr>
  <tr>
    <td>shell </td>
    <td><span class="constant">URL_SCHEME_SHELL</span> (0x0C) </td>
  </tr>
  <tr>
    <td>snews </td>
    <td><span class="constant">URL_SCHEME_SNEWS</span> (0x0D) </td>
  </tr>
  <tr>
    <td>telnet </td>
    <td><span class="constant">URL_SCHEME_TELNET</span> (0x07) </td>
  </tr>
  <tr>
    <td>vbscript </td>
    <td><span class="constant">URL_SCHEME_VBSCRIPT</span> (0x10) </td>
  </tr>
  <tr>
    <td>wais </td>
    <td><span class="constant">URL_SCHEME_WAIS</span> (0x08) </td>
  </tr>
</table>
<p>If the URL fits the expected syntax but the protocol is not supported,
<span class="member">nScheme</span> is set to <span class="constant">URL_SCHEME_UNKNOWN</span> 
(zero). Not all protocols in the preceding list are recognised by all implementations 
of the function, i.e., in different SHLWAPI versions. The list here is for the version 
6.00 from Windows Vista. </p>
<p>In the particular case where the protocol is “file”, if the colon that terminates 
the protocol is followed immediately by either two or three forward slashes, these 
do not count as part of the suffix. </p>
<h2>Availability </h2>
<p>The <span class="function">ParseURL</span> function is exported from SHLWAPI.DLL 
as ordinals 1 and 2 (for ANSI and Unicode forms respectively) in version 4.70 and 
higher. </p>
<p>The ANSI and Unicode forms have parallel implementations. </p>
<h3>Documentation Status </h3>
<!--webbot bot="Include" U-Include="../_include/undoc470.htm" TAG="BODY" startspan -->

<p>Though this function dates from as long ago as 1996, it was still not 
documented by Microsoft in the MSDN Library at least as late as the CD edition 
dated January 2004. </p>

<!--webbot bot="Include" i-checksum="43045" endspan -->
<p>However, the function does seem to have been documented later in 2004. This article 
now conforms to Microsoft’s nomenclature. Even while the function was undocumented, 
the <span class="enum">URL_SCHEME</span> enumeration was semi-documented, being 
defined in SHLWAPI.H from the Platform SDK (e.g., the edition dated July 2002).
</p>
<div class="Footer">
  <p class="Dates">This page was created on 26th August 2004 and was last modified 
  on 15th December 2008. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0408.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2004-2008. Geoff Chappell. All rights reserved.
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="3919" endspan -->
</div>

</body>

</html>
