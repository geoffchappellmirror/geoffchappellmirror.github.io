<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>FIRMWARE_INFORMATION_LOADER_BLOCK</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>FIRMWARE_INFORMATION_LOADER_BLOCK </h1>
  <p>The <span class="struct">FIRMWARE_INFORMATION_LOADER_BLOCK</span> is a structure 
  within the <span class="struct"><a href="loader_parameter_block.htm">LOADER_PARAMETER_BLOCK</a></span>, 
  which is in turn the structure through which the kernel and HAL learn the initialisation 
  data that was gathered by the loader. It was appended for Windows Vista, apparently 
  as part of the reworking NTLDR into a boot manager and boot loader, and especially 
  because the new loader may use the Extensible Firmware Interface (EFI). It has 
  grown since: the following changes of size are known: </p>
  <table class="Sizes">
    <colgroup>
      <col class="Version"><col class="Size" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Versions </th>
        <th>Size (x86) </th>
        <th>Size(x64) </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>6.0 to 6.1 </td>
        <td>0x14 </td>
        <td>0x20 </td>
      </tr>
      <tr>
        <td>6.2 </td>
        <td>0x1C </td>
        <td>0x30 </td>
      </tr>
      <tr>
        <td>6.3 to 2004 </td>
        <td>0x28 </td>
        <td>0x40 </td>
      </tr>
    </tbody>
  </table>
  <p>These sizes, and the offsets, names and types in the table that follows are 
  from type information in public symbol files for the kernel in occasional Windows 
  versions: for Windows Vista and Windows 7, but then not again until the 1803 release 
  of Windows 10. How the type information gets into symbol files for some versions 
  but not others is not known. Type information is also present in most versions 
  of a statically linked library named CLFSMGMT.LIB which Microsoft distributes 
  with the Software Development Kit (SDK). This is enough to complete the layout 
  for all versions since Windows Vista. Additionally, a C-language definition has 
  been published in a header named <a href="../../../source/inc/arc.htm">arc.h</a> 
  from the Windows Driver Kit (WDK) for Windows 10 in its original and 1511 releases—but 
  see notes after the table for a discrepancy. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">struct {
    /*  bit flags, see below  */
};</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">union {
    EFI_FIRMWARE_INFORMATION EfiInformation;
    PCAT_FIRMWARE_INFORMATION PcatInformation;</pre>
        <pre class="source">} u;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>The first of the bit flags selects from the union <span class="member">u</span> 
  according to the firmware type. Windows 10 adds more bit flags to support Isolated 
  User Mode (IUM) and the security of memory that is saved during hibernation (and 
  whose protection is thus dependent on firmware): </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td rowspan="2">0x00000001 </td>
        <td>
        <pre class="source">ULONG FirmwareTypeEfi : 1;</pre>
        </td>
        <td>6.0 to 6.1 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG FirmwareTypeUefi : 1;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x00000002 </td>
        <td>
        <pre class="source">ULONG EfiRuntimeUseIum : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000004 (10.0 to 1511) </td>
        <td>
        <pre class="source">ULONG EfiRuntimePageProtectionEnabled : 1;</pre>
        </td>
        <td>10.0 to 1511 </td>
      </tr>
      <tr>
        <td>0x00000008 (10.0 to 1511); <br>
        0x00000004 </td>
        <td>
        <pre class="source">ULONG EfiRuntimePageProtectionSupported : 1;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="3">&nbsp;</td>
        <td>
        <pre class="source">ULONG Reserved : 31;</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG Reserved : 28;</pre>
        </td>
        <td>10.0 to 1511 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG Reserved : 29;</pre>
        </td>
        <td>1607 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Type information in CLFSMGMT.LIB has <span class="member">FirmwareTypeEfi</span> 
  change to <span class="member">FirmwareTypeUefi</span> for version 6.2 and stay 
  changed, but the C-language definition in ARC.H for both the original and 1511 
  releases of Windows 10 keeps to <span class="member">FirmwareTypeEfi</span>. It 
  may be relevant that Microsoft has ARC.H at two locations. For instance, symbol 
  files for the kernel in the original Windows 10 place ARC.H at </p>
  <blockquote>
    d:\th.public.fre\halkit\inc
  </blockquote>
  <p>but symbol files for the same version’s user-mode AppXDeploymentClient.dll 
  have it at </p>
  <blockquote>
    d:\th.public.fre\internal\sdk\inc\minwin
  </blockquote>
  <p>and the CLFSMGMT.LIB from the SDK for the original Windows 10 apparently got 
  it from there too. More research is required. </p>
  <h2>PCAT </h2>
  <p>The <span class="struct">PCAT_FIRMWARE_INFORMATION</span> structure has just 
  the one member: a <span class="type">ULONG</span> named <span class="member">PlaceHolder</span>, 
  which does indeed look to be unused. </p>
  <h2>EFI </h2>
  <p>The business of the <span class="struct">FIRMWARE_INFORMATION_LOADER_BLOCK</span> 
  has always been to provide <span class="struct">EFI_FIRMWARE_INFORMATION</span>. 
  The latter is known only within the former. That the bit flag for distinguishing 
  whether the former contines as <span class="struct">PCAT_FIRMWARE_INFORMATION</span> 
  or as <span class="struct">EFI_FIRMWARE_INFORMATION</span> is now joined with 
  EFI-specific flags is here taken as suggesting that the <span class="struct">PCAT_FIRMWARE_INFORMATION</span> 
  is retained just as a formality. For the following layout of the
  <span class="struct">EFI_FIRMWARE_INFORMATION</span>, the offsets are from the 
  start of the <span class="struct">FIRMWARE_INFORMATION_LOADER_BLOCK</span>.
  </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x04 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">ULONG FirmwareVersion;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">VIRTUAL_EFI_RUNTIME_SERVICES *VirtualEfiRuntimeServices;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>0x18 </td>
        <td>
        <pre class="source">NTSTATUS SetVirtualAddressMapStatus;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>0x1C </td>
        <td>
        <pre class="source">ULONG MissedMappingsCount;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x14 </td>
        <td>0x20 </td>
        <td>
        <pre class="source">LIST_ENTRY FirmwareResourceList;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x1C </td>
        <td>0x30 </td>
        <td>
        <pre class="source">PVOID EfiMemoryMap;</pre>
        </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x20 </td>
        <td>0x38 </td>
        <td>
        <pre class="source">ULONG EfiMemoryMapSize;</pre>
        </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x24 </td>
        <td>0x3C </td>
        <td>
        <pre class="source">ULONG EfiMemoryMapDescriptorSize;</pre>
        </td>
        <td>6.3 and higher </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 24th December 2019 from material first 
    published on 28th <a href="../../../../../../../new/16/04.htm">April 2016</a>. 
    It was last modified on 29th <a href="../../../../../../../new/22/12.htm">January 
    2023</a>. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1623.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4941" -->
  </div>
</div>

</body>

</html>
