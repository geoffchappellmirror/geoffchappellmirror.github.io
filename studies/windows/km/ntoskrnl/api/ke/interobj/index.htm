<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Interrupt Spin Locks</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>Interrupt Spin Locks </h1>
<p>The classic <a href="../spinlock/index.htm">spin lock</a> is typically acquired 
at <span class="constant">DISPATCH_LEVEL</span>. The raised IRQL ensures that no 
other thread on the same processor gets to execute, let alone to contend for the 
lock. It does, however, allow that hardware interrupts can occur. To access a resource 
that is also accessed by a hardware interrupt, the lock that protects the resource 
must be acquired at the even higher IRQL that is associated with the interrupt.
</p>
<p>When a driver registers a callback routine for servicing a hardware interrupt, 
it is allocated a <span class="struct"><a href="../intobj/kinterrupt.htm">KINTERRUPT</a></span> 
structure. It can supply a spin lock to associate with this structure or it can 
elect to use a spin lock that is built into the structure. Among the many other 
parameters it associates with the interrupt is a <span class="member">SynchronizationIrql</span> 
at which to acquire this lock. When the interrupt occurs and the kernel calls the 
service routine, it raises the IRQL and acquires the lock. If at any other time, 
the driver wants safe access to some resource that might also be accessed from the 
service routine, then the driver can acquire this same lock at this same IRQL.
</p>
<p>The original support for this is the <span class="function">KeSynchronizeExecution</span> 
function. It specifies a routine to call back, with arbitrary context, having raised 
the IRQL and acquired the lock. It’s a little cumbersome, and Windows XP instead 
exposed the IRQL and lock more conveniently: <span class="function">
<a href="acquire.htm">KeAcquireInterruptSpinLock</a></span> raises the IRQL and 
acquires the lock so that its caller can then proceed to whatever work is wanted 
before calling <span class="function"><a href="release.htm">KeReleaseInterruptSpinLock</a></span> 
to release the lock and restore the IRQL. </p>
<div class="Footer">
  <p class="Dates">This page was created on 15th
  <a href="../../../../../../../new/19/12.htm">December 2019</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c19.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6722" -->
</div>

</body>

</html>
