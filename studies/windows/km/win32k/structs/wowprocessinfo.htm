<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>WOWPROCESSINFO</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/km.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="21016" -->
<h1>WOWPROCESSINFO </h1>
<p>The <span class="struct">WOWPROCESSINFO</span> (formally <span class="struct">
tagWOWPROCESSINFO</span>) is the primary structural modelling of a process’s hosting 
of 16-bit tasks. </p>
<p>The address of a process’s one <span class="struct">WOWPROCESSINFO</span> is 
held in the <span class="member">pwpi</span> member of the <span class="struct">
<a href="processinfo/index.htm">PROCESSINFO</a></span>. Only one way is known that 
WIN32K creates a <span class="struct">WOWPROCESSINFO</span> for a process. It starts 
with that same process calling the exported USER32 function
<span class="function">UserRegisterWowHandlers</span>. Calling this function gives 
USER32 a set of routines that it is to call for handling various events, but it 
also fills a table with the addresses of more routines to call in USER32. One of 
these is named in symbol files as <span class="routine">RegisterUserHungAppHandlers</span>. 
What it registers is one routine, which is presumably the one “hung app handler”, 
and an event. Only through this registration does the current process get a
<span class="struct">WOWPROCESSINFO</span>. </p>
<h2>History </h2>
<p>The <span class="struct">WOWPROCESSINFO</span> is at least as old as version 
3.51—I have no version 3.50 of WINSRV.DLL to inspect—but is certainly not in version 
3.10, which has 16-bit tasks but does not provide for hosting them in different 
processes. In structural terms, where later versions have the
<span class="member">ptiScheduled</span> and <span class="member">ptdbHead</span> 
members in the <span class="struct">WOWPROCESSINFO</span> for each process that 
hosts 16-bit tasks, version 3.10 has global variables (which the WINSRV.DBG file 
for that version names as <span class="variable">gpti16Bit</span> and
<span class="variable">gptdbHead</span>). </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">WOWPROCESSINFO</span> is not documented, nor even declared 
in any header for kernel-mode programming as published, for instance, in the Windows 
Driver Kit (WDK). Public disclosure by Microsoft of structural detail is known just 
the once, as type information in symbol files for WIN32K.SYS in Windows 7. </p>
<h2>Layout </h2>
<p>For an undocumented structure, the <span class="struct">WOWPROCESSINFO</span> 
has changed strikingly little in its long life. However important support for 16-bit 
execution must have been in the early days of 32-bit Windows, it is undeniably obscure 
now and so it would be only natural to expect that the relevant structures and code 
hardly ever get looked at, let alone revised. What may surprise, though, is that 
the structure is not just defined for 64-bit Windows but is still supported by code 
that can create instances of it. </p>
<table class="Sizes">
  <colgroup>
    <col class="Version"><col class="Size" span="2">
  </colgroup>
  <tr>
    <th>Version </th>
    <th>Size (x86) </th>
    <th>Size (x64) </th>
  </tr>
  <tr>
    <td>3.51 to 5.1 </td>
    <td>0x2C </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.2 to 10.0 </td>
    <td>0x28 </td>
    <td>0x48 </td>
  </tr>
</table>
<p>These sizes, and the offsets, types and names in the tables that follow, are 
from Microsoft’s symbol files for WIN32K.SYS in Windows 7. Since symbol files for 
other versions do not contain type information for the <span class="struct">WOWPROCESSINFO</span>, 
what’s known for them is instead inferred from what corresponding use WIN32K—and 
even earlier, WINSRV—is seen to make of the <span class="struct">WOWPROCESSINFO</span> 
in those versions. </p>
<table>
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">WOWPROCESSINFO *pwpiNext;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>
    <pre class="source"><a href="threadinfo/index.htm">THREADINFO</a> *ptiScheduled;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td>0x08 (3.51 to 5.1) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">ULONG nTaskLock;</pre>
    </td>
    <td>3.51 to 5.1 </td>
  </tr>
  <tr>
    <td>0x0C (3.51 to 5.1); <br>
    0x08 </td>
    <td>0x10 </td>
    <td>
    <pre class="source"><a href="tdb.htm">TDB</a> *ptdbHead;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td>0x10 (3.51 to 5.1); <br>
    0x0C </td>
    <td>0x18 </td>
    <td>
    <pre class="source">PVOID lpfnWowExitTask;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x14 (3.51 to 5.1); <br>
    0x10 </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">HANDLE hEventWowExecServer;</pre>
    </td>
    <td>3.51 only </td>
  </tr>
  <tr>
    <td>0x20 </td>
    <td>
    <pre class="source">KEVENT *pEventWowExec;</pre>
    </td>
    <td>4.0 and higher </td>
  </tr>
  <tr>
    <td>0x18 (3.51 to 5.1); <br>
    0x14 </td>
    <td>0x28 </td>
    <td>
    <pre class="source">HANDLE hEventWowExecClient;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td>0x1C (3.51 to 5.1); <br>
    0x18 </td>
    <td>0x30 </td>
    <td>
    <pre class="source">ULONG nSendLock;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td>0x20 (3.51 to 5.1); <br>
    0x1C </td>
    <td>0x34 </td>
    <td>
    <pre class="source">ULONG nRecvLock;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x24 (3.51 to 5.1); <br>
    0x20 </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">DWORD CSOwningThread;</pre>
    </td>
    <td>3.51 only </td>
  </tr>
  <tr>
    <td>0x38 </td>
    <td>
    <pre class="source">THREADINFO *CSOwningThread;</pre>
    </td>
    <td>4.0 and higher </td>
  </tr>
  <tr>
    <td>0x28 (3.51 to 5.1); <br>
    0x24 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">LONG CSLockCount;</pre>
    </td>
    <td>3.51 and higher </td>
  </tr>
</table>
<p>The name <span class="member">nTaskLock</span> is proposed for the dword at offset 
0x08 in early versions. It is a guess but not without support: Microsoft’s name 
for the corresponding global variable in version 3.10 is known to be
<span class="variable">gnTaskLock</span>. </p>
<p>Though symbol files have <span class="member">lpfnWowExitTask</span> as pointing 
to <span class="type">void</span>, it does of course point to a function. Specifically, 
it points to a thread routine. This is the “hung app handler” that is supplied when 
creating the <span class="struct">WOWPROCESSINFO</span>. When the caller is WOW32.DLL, 
as expected, the registered handler is the exported function
<span class="function">W32HungAppNotifyThread</span>. </p>
<p>That <span class="member">pEventWowExec</span> had a different prefix when it 
was a server-side handle to the event, rather than a kernel-mode pointer, is mere 
speculation but if we are to guess at its having a different prefix then we may 
as well suppose it had a suffix too, for balance with the name
<span class="member">hEventWowExecClient</span> that is certain from symbol files.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 12th
  <a href="../../../../../new/17/08.htm">August 2017</a> and was last modified on 
  20th August 2017. </p>
  <!--webbot bot="Include" U-Include="../../_include/c17.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017. Geoff Chappell. All rights reserved. 
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="47327" -->
</div>

</body>

</html>
