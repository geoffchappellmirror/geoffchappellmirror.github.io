<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>StrCpyNW</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="55064" endspan -->
<h1>StrCpyNW </h1>
<p>This function copies as much of an input string as will fit in an output buffer, 
and ensures the output is null-terminated. </p>
<h2>Declaration </h2>
<pre class="source">LPWSTR StrCpyNW (LPWSTR psz1, LPCWSTR psz2, int cchMax);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">psz1</span> argument is the address of an output buffer 
that is to receive as large a copy as possible of the input string. </p>
<p>The <span class="argument">psz2</span> argument is the address of the input string, 
or is NULL to stand for an empty input string. </p>
<p>The <span class="argument">cchMax</span> argument is the capacity of the output 
buffer, in characters. </p>
<h3>Return Value </h3>
<p>The function returns <span class="argument">psz1</span>. </p>
<h2>Behaviour </h2>
<p>Since SHLWAPI version 5.0, this function’s implementation is simply to call
<span class="function"><a href="strcpynx.htm">StrCpyNXW</a></span> but return
<span class="argument">psz1</span>. (The other function usefully returns a pointer 
to the end of the string in the output buffer, as if to prepare for appending another 
string.) </p>
<p>Earlier versions have their own implementation, which differs mainly in assuming 
that an input string is given, i.e., that <span class="argument">psz2</span> is 
not NULL. </p>
<p>In all versions, the behaviour is better treated as undefined if the input string 
overlaps the output buffer: the copy is correct if the source is higher in memory 
than the destination, but the source may be corrupted. </p>
<h3>Security Alert? </h3>
<p>Some time in 2001-02, Microsoft’s documentation of this function started warning 
that “The copied string is not guaranteed to be null-terminated.” Yet the original 
coding must be something very like </p>
<pre class="source">LPWSTR StrCpyNW (LPWSTR psz1, LPCWSTR psz2, int cchMax)
{
   if (cchMax &gt; 0) {
        while (-- cchMax &gt; 0) {
            WCHAR ch = *psz2 ++;
            *psz1 ++ = ch;
            if (ch == L&#39;\0&#39;) break;
        }
        if (cchMax == 0) *psz1 = L&#39;\0&#39;;
    }
    return psz1;
}</pre>
<p>Provided that the output buffer has any capacity to receive a null-terminated 
string, the output necessarily must be null-terminated. If later versions had their 
call to <span class="function">StrCpyNXW</span> inlined, the coding would look very 
like </p>
<pre class="source">LPWSTR StrCpyNW (LPWSTR psz1, LPCWSTR psz2, int cchMax)
{
    if (cchMax &gt; 0) {
        if (psz2 != NULL) {
            while (-- cchMax &gt; 0) {
                WCHAR ch = *psz2 ++;
                *psz1 ++ = ch;
                if (ch == L&#39;\0&#39;) {
                    psz1 --;
                    break;
                }
            }
        }
        *psz1 = L&#39;\0&#39;;
    }
    return psz1;
}</pre>
<p>which is even harder to mistake as ensuring that the copied string is always 
null-terminated. Note that Microsoft’s mistaken warning is in a stippled box labelled 
Security Alert in bold preceded by a warning icon. Are such alerts just for show? 
This one was evidently not backed up by reference to the source code. </p>
<p>In defence of Microsoft, <span class="function">StrCpyN</span> is documented 
as if there are both Unicode and ANSI forms. SHLWAPI.DLL provides only the Unicode 
form as a function, but SHLWAPI.H gives programmers an ANSI form as a macro, expanding 
just to the KERNEL32 function <span class="function">lstrcpynA</span>. This macro 
expansion is arguably unwise of Microsoft, since <span class="function">lstrcpynA</span> 
has (documented) behaviour for ANSI strings that <span class="function">StrCpyNW</span> 
does not have for Unicode strings. Specifically, <span class="function">lstrcpynA</span> 
can fail but <span class="function">StrCpyNW</span> cannot. Of course, hardly any 
explicit calls to <span class="function">lstrcpynA</span> ever will be checked for 
failure in real-world practice, despite the documentation, but calls made through 
the <span class="macro">StrCpyNA</span> macro won’t ever be checked for failure
<span class="emphasis">because</span> of the documentation. Failure, naturally enough, 
leaves the output buffer undefined. But if this ANSI-specific case is what Microsoft 
means when warning that <span class="function">StrCpyN</span> is not guaranteed 
to null-terminate its output, then the warning is far too slight: surely Microsoft 
ought warn that the function can return without having produced any well-defined 
output. </p>
<h2>Availability </h2>
<p>The <span class="function">StrCpyNW</span> function is exported by name from 
SHLWAPI.DLL version 4.70 and higher. A function with the same name but a different 
coding is also exported by name from NT builds of SHELL32.DLL in version 1.30 and 
higher, until discontinued in version 6.0 from Windows Vista. </p>
<p>This function has been documented since some time in 1997-98. Though it dates 
from 1996 in SHLWAPI, and even earlier in SHELL32, it has always been said to require 
at least SHLWAPI version 4.71. </p>
<div class="Footer">
  <p class="Dates">This page was created on 8th July 2009 and was last modified 
  on 19th March 2010. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0910.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009-2010. Geoff Chappell. All rights reserved.
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="4439" endspan -->
</div>

</body>

</html>
