<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Bug Check 0x06B: PROCESS1_INITIALIZATION_FAILED</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../_styles/km.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="57102" -->
<div class="Main">
  <!--webbot bot="Include" U-Include="../_include/x86specific.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">If only for now, this article is specific to 32-bit Windows 
  (i386 or x86). </p>
</div>

<!--webbot bot="Include" endspan i-checksum="58497" -->
  <h1>Bug Check 0x6B </h1>
  <p>The <span class="constant">PROCESS1_INITIALIZATION_FAILED</span> bug check 
  reports a fatal error fairly late in the kernel’s initialisation. </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td colspan="2"><span class="constant">PROCESS1_INITIALIZATION_FAILED</span>
      </td>
    </tr>
    <tr>
      <td>1st Argument: </td>
      <td colspan="2">NT status code for operation that failed </td>
    </tr>
    <tr>
      <td rowspan="9">2nd Argument: </td>
      <td>0 </td>
      <td>any failure of 2nd call to internal routine <span class="symbol">PsInitSystem</span>
      </td>
    </tr>
    <tr>
      <td>2 </td>
      <td>error when opening a system DLL </td>
    </tr>
    <tr>
      <td>3 </td>
      <td>error when creating section for system DLL </td>
    </tr>
    <tr>
      <td>4 </td>
      <td>error when accessing section for system DLL </td>
    </tr>
    <tr>
      <td>5 </td>
      <td>error when mapping view of section for system DLL </td>
    </tr>
    <tr>
      <td>6 </td>
      <td>error finding any of one set of functions in system DLL </td>
    </tr>
    <tr>
      <td>7 </td>
      <td>error finding any of second set of functions in system DLL </td>
    </tr>
    <tr>
      <td rowspan="2">8 </td>
      <td>error finding any of third set of functions in system DLL (before 6.0)
      </td>
    </tr>
    <tr>
      <td>error getting section information for system DLL (6.0 and higher) </td>
    </tr>
    <tr>
      <td>3rd Argument: </td>
      <td colspan="2">index to identify system DLL when 2nd argument is 2 (see below)
      </td>
    </tr>
    <tr>
      <td>4th Argument: </td>
      <td colspan="2">zero </td>
    </tr>
  </table>
  <h2>Causes </h2>
  <p>When the 2nd argument is zero, the cause really might be just about anything. 
  Details may be documented here another time. The other cases are all concerned 
  with so-called system DLLs. Though the code provides for more, there is presently 
  only one, and it is of course NTDLL.DLL. </p>
  <p>Cases 3 to 8 are known only for 32-bit Windows. </p>
  <h3>Windows Vista and Higher (32-Bit) </h3>
  <p>In version 6.0 and higher, the following functions and variables are required 
  as exports from NTDLL to avoid case 6: </p>
  <table>
    <tr>
      <th>Function </th>
      <th>Applicable Versions </th>
    </tr>
    <tr>
      <td><span class="function">EtwpNotificationThread</span> </td>
      <td>6.0 to 6.2 </td>
    </tr>
    <tr>
      <td><span class="function">ExpInterlockedPopEntrySListEnd</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td><span class="function">ExpInterlockedPopEntrySListFault</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td><span class="function">ExpInterlockedPopEntrySListResume</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td><span class="function">LdrHotPatchRoutine</span> </td>
      <td>6.0 to 6.2 </td>
    </tr>
    <tr>
      <td><span class="function">LdrInitializeThunk</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td><span class="variable">LdrSystemDllInitBlock</span> </td>
      <td>6.2 and higher </td>
    </tr>
    <tr>
      <td><span class="function">KiRaiseUserExceptionDispatcher</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td><span class="function">KiUserApcDispatcher</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td><span class="function">KiUserCallbackDispatcher</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td><span class="function">KiUserExceptionDispatcher</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td><span class="function">RtlUserThreadStart</span> </td>
      <td>6.0 and higher </td>
    </tr>
    <tr>
      <td><span class="variable">RtlpFreezeTimeBias</span> </td>
      <td>6.2 and higher </td>
    </tr>
    <tr>
      <td><span class="function">RtlpWnfNotificationThread</span> </td>
      <td>6.2 only </td>
    </tr>
  </table>
  <p>In versions 6.0 and 6.1, the NTDLL exports that are required for avoiding case 
  7 depend on a CPU feature, specifically <a href="../cpu/sep.htm">support for the
  <span class="instruction">SYSENTER</span> and <span class="instruction">SYSEXIT</span> 
  instructions</a>: </p>
  <ul>
    <li><span class="function">KiFastSystemCall</span> and
    <span class="function">KiFastSystemCallRet</span>, if enabled; </li>
    <li><span class="function">KiIntSystemCall</span>, otherwise. </li>
  </ul>
  <p>Versions 6.2 and higher require this CPU feature and correspondingly have no 
  need of <span class="function">KiIntSystemCall</span>. Moreover, a change to the 
  mechanism of supporting <span class="instruction">SYSENTER</span> means that the 
  kernel also doesn’t need <span class="function">KiFastSystemCall</span>, just
  <span class="function">KiFastSystemCallRet</span>. </p>
  <p>Case 8 can occur only for version 6.1 and higher. </p>
  <h3>Earlier Versions (32-Bit) </h3>
  <p>In versions before 6.0, the higher-numbered cases concerned with exports from 
  NTDLL are interpreted differently enough that they seem better described separately:
  </p>
  <table>
    <tr>
      <th>2nd Argument </th>
      <th>Required Exports </th>
    </tr>
    <tr>
      <td>6 </td>
      <td><span class="function">LdrInitializeThunk</span> </td>
    </tr>
    <tr>
      <td>7 </td>
      <td><span class="symbol">NPXEMULATORTABLE</span> before version 5.1 </td>
    </tr>
    <tr>
      <td>8 </td>
      <td><span class="function">KiRaiseUserExceptionDispatcher</span> <br>
      <span class="function">KiUserApcDispatcher</span> <br>
      <span class="function">KiUserCallbackDispatcher</span> <br>
      <span class="function">KiUserExceptionDispatcher</span> </td>
    </tr>
  </table>
  <p>This arrangement does at least have the merit of emphasising something quite 
  special about NTDLL. It has no entry point for initial execution, as would ordinarily 
  be defined in the executable’s PE header. Instead, NTDLL is started by calling 
  its exported <span class="function">LdrInitializeThunk</span> function. </p>
  <h2>Documentation Status </h2>
  <p>This bug check is documented, though with all arguments except the first marked 
  as reserved. The description of possible causes is very broad. This is strange, 
  given the very specific causes that some Microsoft programmer has thought to distinguish 
  through the 2nd argument. It’s not as if the documentation is just taking its 
  time to catch up. This is old code: use of the 2nd argument to elaborate problems 
  with NTDLL.DLL dates from at least Windows NT 4.0. If you delete NTDLL.DLL, which 
  does admittedly take some effort nowadays, then what you get for your pain is 
  precisely this bug check with 2 for its second argument. Instead of talking vaguely 
  about “a missing file from the boot partition”, why not save the poor user some 
  trouble and document that if the second argument is non-zero, then the problem 
  file is necessarily NTDLL.DLL? </p>
  <div class="Footer">
    <p class="Dates">This page was created on 19th November 2008 and was last modified 
    on 11th June May 2016. </p>
    <!--webbot bot="Include" U-Include="../_include/c0816.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2008-2016. Geoff Chappell. All rights reserved. 
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="49224" -->
  </div>
</div>

</body>

</html>
