<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>PEB_LDR_DATA</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>PEB_LDR_DATA</h1>
  <p>The <span class="struct">PEB_LDR_DATA</span> structure is the defining record 
  of which user-mode modules are loaded in a process. It is essentially the head 
  of three double-linked lists of <span class="struct">
  <a href="../ntldr/ldr_data_table_entry/index.htm">LDR_DATA_TABLE_ENTRY</a></span> 
  structures. Each structure represents one loaded module. Each list links through 
  the structures in a different order. </p>
  <h2>Access </h2>
  <p>Each process has the one <span class="struct">PEB_LDR_DATA</span>. Its address 
  is kept in the <span class="member">Ldr</span> member of the process’s
  <span class="struct"><a href="../pebteb/peb/index.htm">PEB</a></span>. </p>
  <p>In early versions, the <span class="struct">PEB_LDR_DATA</span> is in its own 
  heap allocation that is obtained while NTDLL initialises the process. This is 
  wasteful since the process will only ever have the one <span class="struct">PEB_LDR_DATA</span>. 
  In version 5.2 and higher, this one and only <span class="struct">PEB_LDR_DATA</span> 
  is an internal variable in the NTDLL data. It can be handy, when debugging, to 
  know that the name of this internal variable is <span class="variable">PebLdr</span>.
  </p>
  <h2>Documentation Status </h2>
  <p>In an ideal world, the <span class="struct">PEB_LDR_DATA</span> might be opaque 
  outside NTDLL. But various high-level modules supplied with Windows over the years 
  have used at least one member of the <span class="struct">PEB_LDR_DATA</span>, 
  which eventually had to be disclosed. </p>
  <p>A new header, named WINTERNL.H, for previously internal APIs was added to the 
  Software Development Kit (SDK) apparently in 2002, and remains to this day. Anyone 
  competent who was looking at the time, e.g., because they were paid to as work 
  for a Technical Committee that was to enforce the settlement that compelled the 
  disclosure, might have pointed out the <span class="struct">PEB_LDR_DATA</span> 
  as a candidate. Somehow, though, it got missed. Make no mistake that I mean here 
  that the Technical Committee can only have been incompetent and gullible, or have 
  been too tired to avoid the appearance, and that by extension this appiles also 
  to the government and court. There is a lesson here for future attempts at using 
  anti-trust legislation against “big tech”. </p>
  <p>When WINTERNL.H eventually got round to the <span class="struct">PEB_LDR_DATA</span>, 
  starting with the SDK for Windows 7, it presented only a modified
  <span class="struct">PEB_LDR_DATA</span> that has just the
  <span class="member">InMemoryOrderModuleList</span> member, plus padding that 
  gets this member to the same offset as in the true structure. Incomplete as this 
  is, it’s out there now, and Microsoft seems unlikely to change the
  <span class="struct">PEB_LDR_DATA</span> in any way that moves this member.
  </p>
  <h2>Layout </h2>
  <p>Indeed, the <span class="struct">PEB_LDR_DATA</span> is surprisingly stable 
  across Windows versions. No members have yet moved or even been redefined. The 
  structure has grown only by extension. The following table shows the changing 
  sizes: </p>
  <table class="Sizes">
    <colgroup>
      <col class="Version"><col class="Size" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Version </th>
        <th>Size (x86) </th>
        <th>Size (x64) </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>3.51 to 5.0 </td>
        <td>0x24 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>5.1 to early 6.0 (before SP1) </td>
        <td>0x28 </td>
        <td>0x48 </td>
      </tr>
      <tr>
        <td>late 6.0 to 2004 </td>
        <td>0x30 </td>
        <td>0x58 </td>
      </tr>
    </tbody>
  </table>
  <p>These sizes, and the offsets, types and names in the tables that follow, are 
  from public symbol files for the kernel starting with Windows 2000 SP3 and for 
  NTDLL starting with Windows XP. Symbol files for earlier versions do not contain 
  type information for the <span class="struct">PEB_LDR_DATA</span>, but something 
  similar is available for a few earlier versions: type information in statically 
  linked libraries GDISRVL.LIB for Windows NT 3.51 and SHELL32.LIB for Windows NT 
  4.0 (both distributed with their respective editions of the Device Driver Kit); 
  and the output of the KDEX2X86 debugger extension’s <span class="command">
  <a href="../../../../debug/kdex2x86/strct.htm">!strct</a></span> command for the 
  original Windows 2000. Inspection of binaries anyway confirms that all members 
  that were in use for Windows 2000 SP3 were used the same way as far back as Windows 
  NT 3.1. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">ULONG Length;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x04 </td>
        <td>
        <pre class="source">BOOLEAN Initialized;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">PVOID SsHandle;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>0x10 </td>
        <td>
        <pre class="source">LIST_ENTRY InLoadOrderModuleList;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x14 </td>
        <td>0x20 </td>
        <td>
        <pre class="source">LIST_ENTRY InMemoryOrderModuleList;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x1C </td>
        <td>0x30 </td>
        <td>
        <pre class="source">LIST_ENTRY InInitializationOrderModuleList;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x24 </td>
        <td>0x40 </td>
        <td>
        <pre class="source">PVOID EntryInProgress;</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td>0x28 </td>
        <td>0x48 </td>
        <td>
        <pre class="source">BOOLEAN ShutdownInProgress;</pre>
        </td>
        <td>late 6.0 and higher </td>
      </tr>
      <tr>
        <td>0x2C </td>
        <td>0x50 </td>
        <td>
        <pre class="source">HANDLE ShutdownThreadId;</pre>
        </td>
        <td>late 6.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">Length</span> and <span class="member">Initialized</span> 
  members are set to the size (in bytes) of the structure and to
  <span class="constant">TRUE</span>, respectively, when the structure is prepared. 
  They are not known to change. </p>
  <p>No use is (yet) known of the <span class="member">SsHandle</span> member in 
  any version. </p>
  <p>Though <span class="member">EntryInProgress</span> is retained in the symbol 
  files, no use of it is known after version 6.1. In earlier versions, what it points 
  to, when it points to anything, is a <span class="struct">LDR_DATA_TABLE_ENTRY</span> 
  for a DLL whose imports are to be resolved. In version 5.1, imports became subject 
  to activation contexts. The importing DLL may redirect its imports via a manifest. 
  If a callback function for DLL manifest probing has been set by an earlier call 
  to the undocumented NTDLL export <span class="function">LdrSetDllManifestProber</span>, 
  then <span class="member">EntryInProgress</span> is set while the callback is 
  made. </p>
  <p>Though <span class="member">ShutdownThreadId</span> is shown above as a
  <span class="type">HANDLE</span>, it is indeed a thread ID as suggested by its 
  name. It is picked up from the <span class="member">UniqueThread</span> member 
  of the <span class="struct">CLIENT_ID</span> in the <span class="struct">
  <a href="../pebteb/teb/index.htm">TEB</a></span> of the thread that asks to terminate 
  the process. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 13th June 2016 and was last modified 
    on 20th February 2023. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1623.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4941" -->
  </div>
</div>

</body>

</html>
