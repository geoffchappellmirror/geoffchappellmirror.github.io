<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>KTHREAD (6.2 and Higher)</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="33595" -->
<h1>KTHREAD (6.2 and Higher) </h1>
<div class="Main">
  <!--webbot bot="Include" U-Include="_include/intro.htm" TAG="BODY" startspan -->

<p>The <span class="struct">KTHREAD</span> structure is the Kernel Core’s portion 
of the <span class="struct"><a href="../../ps/ethread/index.htm">ETHREAD</a></span> 
structure. The latter <span class="emphasis">is</span> the thread object as exposed 
through the Object Manager. The <span class="struct">KTHREAD</span> is the core 
of it. </p>

<!--webbot bot="Include" endspan i-checksum="54584" -->
  <h2>Variability </h2>
  <p>The <span class="struct">KTHREAD</span> structure is plainly internal to the 
  kernel and its layout varies greatly between Windows versions and even between 
  builds. Indeed, it is the most highly variable of all significant kernel-mode 
  structures—so much so that tracking its history looks to be imposisble on one 
  page and is therefore spread over several: </p>
  <ul>
    <li><a href="310.htm">versions 3.10 to 3.50</a>; </li>
    <li><a href="351.htm">versions 3.51 to 5.1</a>; </li>
    <li><a href="early52.htm">version 5.2 before SP1</a>; </li>
    <li><a href="late52.htm">versions 5.2 SP1 to 6.1</a>; </li>
    <li>versions 6.2 and higher. </li>
  </ul>
  <p>Though the <span class="struct">KTHREAD</span> does seem to have settled 
  down since its last large-scale rearrangement for Windows 8, it still varies 
  between versions, especially between successive half-yearly updates of Windows 
  10. Some sense of this variability can be gained just from the structure’s 
  changing size. </p>
  <table class="Sizes">
    <colgroup>
      <col class="Version"><col class="Size" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Version </th>
        <th>Size (x86) </th>
        <th>Size (x64) </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>6.2 </td>
        <td>0x01E8 </td>
        <td>0x0348 </td>
      </tr>
      <tr>
        <td>6.3 </td>
        <td>0x0338 </td>
        <td>0x05D0 </td>
      </tr>
      <tr>
        <td>10.0 to 1511 </td>
        <td>0x0348 </td>
        <td>0x05D8 </td>
      </tr>
      <tr>
        <td>1607 </td>
        <td>0x0348 </td>
        <td>0x05E0 </td>
      </tr>
      <tr>
        <td>1703 </td>
        <td>0x0350 </td>
        <td>0x05E8 </td>
      </tr>
      <tr>
        <td>1709 to 1809 </td>
        <td>0x0350 </td>
        <td>0x05F0 </td>
      </tr>
      <tr>
        <td>1903 </td>
        <td>0x0358 </td>
        <td>0x0600 </td>
      </tr>
      <tr>
        <td>2004 </td>
        <td>0x0280 </td>
        <td>0x0430 </td>
      </tr>
    </tbody>
  </table>
  <p>Even with attention narrowed just to recent Windows versions, description of 
  the <span class="struct">KTHREAD</span> is unusually complicated. Specially notable 
  is the packing of small members into spare fields in other members. Some such 
  reused fields are explicitly spare, as with several members of the
  <span class="struct">KAPC</span> structure. WDM.H even defines macros to ease 
  the reference to these fields by their offsets. Other reuse is available only 
  because of alignment padding, as with the last byte of the
  <span class="struct">KAPC_STATE</span> for 32-bit Windows. As if this weren’t 
  messy enough by itself, the greater opportunity for this reuse in the 64-bit builds, 
  whose wider pointers tend to create more alignment padding as a side-effect, allows 
  that more than a few members are placed very differently in the 32-bit and 64-bit 
  builds. </p>
  <h2>Layout </h2>
  <p>It is well known that the <span class="struct">KTHREAD</span> is a kernel object 
  that can be waited on until it gets signalled, as happens when the thread ends 
  its execution. In the <span class="struct">
  <a href="../../ntosdef_x/dispatcher_header/index.htm">DISPATCHER_HEADER</a></span> 
  at the beginning of a <span class="struct">KTHREAD</span>, the
  <span class="member">Type</span> is <span class="constant">ThreadObject</span> 
  (6) in the <span class="enum"><a href="../kobjects.htm">KOBJECTS</a></span> enumeration. 
  Ever since version 5.2, some other members of this <span class="struct">DISPATCHER_HEADER</span> 
  are specific to the <span class="struct">KTHREAD</span>. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">DISPATCHER_HEADER Header;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x00 </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>0x18 </td>
        <td>
        <pre class="source">PVOID SListFaultAddress;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x01F0 and 0x0318 </td>
      </tr>
      <tr>
        <td>0x18 </td>
        <td>0x20 </td>
        <td>
        <pre class="source">ULONGLONG QuantumTarget;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x20 (both) </td>
      </tr>
      <tr>
        <td>0x20 </td>
        <td>0x28 </td>
        <td>
        <pre class="source">PVOID InitialStack;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x28 (both) </td>
      </tr>
      <tr>
        <td>0x24 </td>
        <td>0x30 </td>
        <td>
        <pre class="source">PVOID volatile StackLimit;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x2C and 0x30 </td>
      </tr>
      <tr>
        <td>0x28 </td>
        <td>0x38 </td>
        <td>
        <pre class="source">PVOID StackBase;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0190 and 0x0278 </td>
      </tr>
      <tr>
        <td>0x2C </td>
        <td>0x40 </td>
        <td>
        <pre class="source">KSPIN_LOCK ThreadLock;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x34 and 0x40 </td>
      </tr>
      <tr>
        <td>0x30 </td>
        <td>0x48 </td>
        <td>
        <pre class="source">ULONGLONG volatile CycleTime;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x10 and 0x18 </td>
      </tr>
      <tr>
        <td>0x38 </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">ULONG volatile HighCycleTime;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x18 </td>
      </tr>
      <tr>
        <td>0x3C </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">PVOID ServiceTable;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0xBC </td>
      </tr>
      <tr>
        <td>0x40 </td>
        <td>0x50 </td>
        <td>
        <pre class="source">ULONG CurrentRunTime;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x44 </td>
        <td>0x54 </td>
        <td>
        <pre class="source">ULONG ExpectedRunTime;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x48 </td>
        <td>0x58 </td>
        <td>
        <pre class="source">PVOID KernelStack;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x30 and x038 </td>
      </tr>
      <tr>
        <td>0x4C </td>
        <td>0x60 </td>
        <td>
        <pre class="source">XSAVE_FORMAT *StateSaveArea;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x50 </td>
        <td>0x68 </td>
        <td>
        <pre class="source">KSCHEDULING_GROUP *SchedulingGroup;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x54 </td>
        <td>0x70 </td>
        <td>
        <pre class="source"><a href="../kwait_status_register.htm">KWAIT_STATUS_REGISTER</a> WaitRegister;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x38 and 0x48 </td>
      </tr>
      <tr>
        <td>0x55 </td>
        <td>0x71 </td>
        <td>
        <pre class="source">BOOLEAN volatile Running;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x39 and 0x49 </td>
      </tr>
      <tr>
        <td>0x56 </td>
        <td>0x72 </td>
        <td>
        <pre class="source">BOOLEAN Alerted [2];</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x3A and 0x4A </td>
      </tr>
      <tr>
        <td>0x58 </td>
        <td>0x74 </td>
        <td>
        <pre class="source">union {
    struct {
        /*  bit fields, follow link  */
    };
    LONG <a href="miscflags.htm">MiscFlags</a>;
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x3C and 0x4C </td>
      </tr>
      <tr>
        <td>0x5C </td>
        <td>0x78 </td>
        <td>
        <pre class="source">union {
    struct {
        /*  bit fields, follow link  */
    };
    LONG volatile <a href="threadflags.htm">ThreadFlags</a>;
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0xB8 and 0x0100 </td>
      </tr>
      <tr>
        <td>0x60 </td>
        <td>0x7C </td>
        <td>
        <pre class="source">UCHAR volatile Tag;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x61 </td>
        <td>0x7D </td>
        <td>
        <pre class="source">UCHAR SystemHeteroCpuPolicy;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x62 </td>
        <td>0x7E </td>
        <td>
        <pre class="source">UCHAR UserHeteroCpuPolicy : 7;
UCHAR ExplicitSystemHeteroCpuPolicy : 1;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x60 (6.2 to 6.3); <br>
        0x63 </td>
        <td rowspan="2">0x7C (6.2 to 6.3); <br>
        0x7F </td>
        <td>
        <pre class="source">UCHAR Spare0;</pre>
        </td>
        <td>6.2 and higher (x86); <br>
        6.2 to 1803 (x64) </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    struct {
        UCHAR RunningNonRetpolineCode : 1;
        UCHAR SpecCtrlSpare : 7;
    };
    UCHAR SpecCtrl;
};</pre>
        </td>
        <td>1809 and higher (x64) </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x64 </td>
        <td>0x80 </td>
        <td>
        <pre class="source">ULONG SystemCallNumber;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x013C and 0x01F8 </td>
      </tr>
      <tr>
        <td rowspan="2">&nbsp;</td>
        <td rowspan="2">0x84 </td>
        <td>
        <pre class="source">ULONG Spare1;</pre>
        </td>
        <td>6.2 to 1607 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG ReadyTime;</pre>
        </td>
        <td>1703 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x68 </td>
        <td>0x88 </td>
        <td>
        <pre class="source">PVOID FirstArgument;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x012C and 0x01E0 </td>
      </tr>
      <tr>
        <td>0x6C </td>
        <td>0x90 </td>
        <td>
        <pre class="source"><a href="../../ktrap_frame.htm">KTRAP_FRAME</a> *TrapFrame;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0128 and 0x01D8 </td>
      </tr>
      <tr>
        <td>0x70 </td>
        <td>0x98 </td>
        <td>
        <pre class="source">union {
    KAPC_STATE ApcState;
    /*  overlay, see below  */
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x40 and 0x50 </td>
      </tr>
    </tbody>
  </table>
  <p>Overlaying the <span class="member">ApcState</span> is first some padding to 
  get past the defined members of the <span class="struct">KAPC_STATE</span> to 
  the space that’s left for alignment: </p>
  <pre class="source">struct {
    UCHAR ApcStateFill [KAPC_STATE_ACTUAL_LENGTH];
    /*  5 bytes, see below  */
};</pre>
  <p>With this construction, the 64-bit builds squeeze five bytes into the end of 
  the 0x30-byte <span class="member">ApcState</span>. In 32-bit builds, only the 
  first fits the 0x18-byte <span class="member">ApcState</span>: the remaining four 
  just follow as if they had been declared outside the union. Disregard the construction, 
  and the members that are packed with the <span class="member">ApcState</span> 
  are: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x87 </td>
        <td>0xC3 </td>
        <td>
        <pre class="source">CHAR Priority;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x57 and 0x7B </td>
      </tr>
      <tr>
        <td>0x88 </td>
        <td>0xC4 </td>
        <td>
        <pre class="source">ULONG UserIdealProcessor;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0164 and 0x022C </td>
      </tr>
    </tbody>
  </table>
  <p>The structures used for larger members of the <span class="struct">KTHREAD</span> 
  tend to have more spare space in the 64-bit builds, whose wider pointers have 
  a wider alignment requirement. There follow a few members that the 32-bit builds 
  don’t treat to this packing game. The 64-bit builds pack them with the
  <span class="member">WaitBlock</span> member (further into the structure). </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x8C </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">ULONG ContextSwitches;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x64 at 0x0154 </td>
        <td>previously at 0x64 </td>
      </tr>
      <tr>
        <td>0x90 </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">UCHAR volatile State;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x64 at 0x0184 </td>
        <td>previously at 0x68 </td>
      </tr>
      <tr>
        <td rowspan="2">0x91 </td>
        <td rowspan="2">&nbsp;</td>
        <td>
        <pre class="source">CHAR NpxState;</pre>
        </td>
        <td>6.2 to 6.3 </td>
        <td>x64 at 0x0185; <br>
        next as <span class="type">LONGLONG</span> at 0x0340 </td>
        <td>previously as <span class="type">UCHAR</span> at 0x69 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">CHAR Spare12;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x92 </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">KIRQL WaitIrql;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x64 at 0x0186 </td>
        <td>previously at 0x6A </td>
      </tr>
      <tr>
        <td>0x93 </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">KPROCESSOR_MODE WaitMode;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x64 at 0x0187 </td>
        <td>previously at 0x6B </td>
      </tr>
      <tr>
        <td>0x94 </td>
        <td>0xC8 </td>
        <td>
        <pre class="source">LONG_PTR volatile WaitStatus;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x6C and 0x90 </td>
      </tr>
      <tr>
        <td>0x98 </td>
        <td>0xD0 </td>
        <td>
        <pre class="source"><a href="../../ke_x/kwait_block.htm">KWAIT_BLOCK</a> *WaitBlockList;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x70 and 0x98 </td>
      </tr>
      <tr>
        <td>0x9C </td>
        <td>0xD8 </td>
        <td>
        <pre class="source">union {
    LIST_ENTRY WaitListEntry;
    SINGLE_LIST_ENTRY SwapListEntry;
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x74 and 0xA0 </td>
      </tr>
      <tr>
        <td rowspan="2">0xA4 </td>
        <td rowspan="2">0xE8 </td>
        <td>
        <pre class="source">KQUEUE * volatile Queue;</pre>
        </td>
        <td>6.2 only </td>
        <td>&nbsp;</td>
        <td>previously at 0x7C and 0xB0 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">DISPATCHER_HEADER * volatile Queue;</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>Version 6.3 introduced a new type of queue object, and so
  <span class="member">Queue</span> can point to either a <span class="struct">
  KQUEUE</span> (as for earlier versions) or to a <span class="struct">KPRIQUEUE</span>. 
  Both can be waited on and therefore both begin with a <span class="struct">
  DISPATCHER_HEADER</span>. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0xA8 </td>
        <td>0xF0 </td>
        <td>
        <pre class="source">PVOID Teb;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x88 and 0xB8 </td>
      </tr>
      <tr>
        <td>0xB0 </td>
        <td>0xF8 </td>
        <td>
        <pre class="source">ULONGLONG RelativeTimerBias;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0xB8 </td>
        <td>0x0100 </td>
        <td>
        <pre class="source"><a href="../../ntosdef_x/ktimer.htm">KTIMER</a> Timer;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously as <span class="type">union</span> at 0x90 and 0xC0 </td>
      </tr>
      <tr>
        <td>0xE0 </td>
        <td>0x0140 </td>
        <td>
        <pre class="source">union {
    KWAIT_BLOCK WaitBlock [4];
    /*  overlay, see below  */
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously without <span class="type">union</span> at 0xC0 (x86);
        <br>
        previously as changed <span class="type">union</span> at 0x0108 (x64)
        </td>
      </tr>
    </tbody>
  </table>
  <p>Overlaying the long-standing <span class="member">WaitBlock</span> array are 
  a succession of structures that each pad from the start of the array to spare 
  or resuable members: </p>
  <pre class="source">#ifdef _AMD64_                      // SpareLong exists only for x64
struct {
    UCHAR WaitBlockFill4 [FIELD_OFFSET (KWAIT_BLOCK, SpareLong)];
    /*  reclaimed 4 bytes, see below  */
};
struct {
    UCHAR WaitBlockFill5 [sizeof (KWAIT_BLOCK) + FIELD_OFFSET (KWAIT_BLOCK, SpareLong)];
    /*  reclaimed 4 bytes, see below  */
};
struct {
    UCHAR WaitBlockFill6 [2 * sizeof (KWAIT_BLOCK) + FIELD_OFFSET (KWAIT_BLOCK, SpareLong)];
    /*  reclaimed 4 bytes, see below  */
};
struct {
    UCHAR WaitBlockFill7 [3 * sizeof (KWAIT_BLOCK) + FIELD_OFFSET (KWAIT_BLOCK, SpareLong)];
    /*  reclaimed 4 bytes, see below  */
};
#endif
struct {
    UCHAR WaitBlockFill8 [FIELD_OFFSET (KWAIT_BLOCK, SparePtr)];
    /*  reclaimed 4 or 8 bytes, see below  */
};
struct {
    UCHAR WaitBlockFill9 [sizeof (KWAIT_BLOCK) + FIELD_OFFSET (KWAIT_BLOCK, SparePtr)];
    /*  reclaimed 4 or 8 bytes, see below  */
};
struct {
    UCHAR WaitBlockFill10 [2 * sizeof (KWAIT_BLOCK) + FIELD_OFFSET (KWAIT_BLOCK, SparePtr)];
    /*  reclaimed 4 or 8 bytes, see below  */
};
struct {
    UCHAR WaitBlockFill11 [3 * sizeof (KWAIT_BLOCK) + FIELD_OFFSET (KWAIT_BLOCK, Object)];
    /*  reclaimed 8 or 16 bytes, see below  */
;</pre>
  <p>The <span class="struct">KWAIT_BLOCK</span> structure changed for version 6.2. 
  The x86 builds had an explicitly spare byte and the x64 builds had both this and 
  an explicitly spare long. In version 6.2 and higher, both have an explicitly spare 
  pointer and the x64 builds still have the spare long too. With the
  <span class="struct">KTHREAD</span> having four of these structures, packing members 
  into these spares is certainly worthwhile, even if it’s beyond messy. Moroever, 
  for the particular use that the <span class="struct">KTHREAD</span> makes of the 
  last <span class="struct">KWAIT_BLOCK</span> in the array, the
  <span class="member">Object</span> member is known to be irrelevant and is therefore 
  also available for reuse. </p>
  <p>Disregard all this scaffolding and here are the members that get squeezed in 
  with the <span class="member">WaitBlock</span> array: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>&nbsp;</td>
        <td>0x0154 </td>
        <td>
        <pre class="source">ULONG ContextSwitches;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x86 at 0x8C </td>
        <td>previously at 0x0134 </td>
      </tr>
      <tr>
        <td>0xF4 </td>
        <td>0x0168 </td>
        <td>
        <pre class="source">KTHREAD_COUNTERS *ThreadCounters;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x01F4 and 0x0350 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0184 </td>
        <td>
        <pre class="source">UCHAR volatile State;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x86 at 0x90 </td>
        <td>previously at 0x0164 </td>
      </tr>
      <tr>
        <td rowspan="2">&nbsp;</td>
        <td rowspan="2">0x0185 </td>
        <td>
        <pre class="source">CHAR NpxState;</pre>
        </td>
        <td>6.2 to 6.3 </td>
        <td>x86 at 0x91; <br>
        next as <span class="type">LONGLONG</span> at 0x0250 </td>
        <td>previously as <span class="type">UCHAR</span> at 0x0165 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">CHAR Spare13;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0186 </td>
        <td>
        <pre class="source">KIRQL WaitIrql;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x86 at 0x92 </td>
        <td>previously at 0x0166 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0187 </td>
        <td>
        <pre class="source">KPROCESSOR_MODE WaitMode;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x86 at 0x93 </td>
        <td>previously at 0x0167 </td>
      </tr>
      <tr>
        <td>0x010C </td>
        <td>0x0198 </td>
        <td>
        <pre class="source">XSTATE_SAVE *XStateSave;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x01F8 and 0x0358 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x01B4 </td>
        <td>
        <pre class="source">ULONG WaitTime;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x86 at 0x0138 </td>
        <td>previously at 0x0194 </td>
      </tr>
      <tr>
        <td>0x0124 </td>
        <td>0x01C8 </td>
        <td>
        <pre class="source">PVOID volatile Win32Thread;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x018C and 0x0270 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x01E4 <br>
        </td>
        <td>
        <pre class="source">union {
    struct {
        SHORT KernelApcDisable;
        SHORT SpecialApcDisable;
    };
    ULONG CombinedApcDisable;
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x86 at 0x013C </td>
        <td>previously at 0x01C4 </td>
      </tr>
      <tr>
        <td>0x0138 </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">ULONG WaitTime;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x64 at 0x01B4 </td>
        <td>previously at 0x7C </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x01F0 </td>
        <td>
        <pre class="source">UMS_CONTROL_BLOCK *Ucb;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x01B8 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x01F8 </td>
        <td>
        <pre class="source">KUMS_CONTEXT_HEADER *Uch;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>Note that <span class="member">WaitTime</span> is listed twice above. Because 
  it is packed with the spare <span class="member">Object</span> in 32-bit builds 
  but the <span class="member">SpareLong</span> in 64-bit builds, it is ordered 
  differently with respect to <span class="member">Win32Thread</span>. The union 
  of members that count the depth of requests to disable APC delivery is another 
  example that is packed into spare space in the x64 builds (above) but not in the 
  x86 builds (immediately below): </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x013C </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">union {
    struct {
        SHORT KernelApcDisable;
        SHORT SpecialApcDisable;
    };
    ULONG CombinedApcDisable;
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>x64 at 0x01E4 </td>
        <td>previously at 0x84 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0200 </td>
        <td>
        <pre class="source">union {
    LONG volatile <a href="threadflags2.htm">ThreadFlags2</a>;
    struct {
        /*  bit fields, follow link  */
    };
};</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="3">&nbsp;</td>
        <td rowspan="3">0x0200 (6.2 to 1903); <br>
        0x0204 </td>
        <td>
        <pre class="source">PVOID TebMappedLowVa;</pre>
        </td>
        <td>6.2 to 1607 </td>
        <td>&nbsp;</td>
        <td>previously at 0x01B0 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">PVOID Spare21;</pre>
        </td>
        <td>1703 to 1903 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG Spare21;</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0140 </td>
        <td>0x0208 </td>
        <td>
        <pre class="source">LIST_ENTRY QueueListEntry;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x0120 and 0x01C8 </td>
      </tr>
      <tr>
        <td rowspan="2">0x0148 </td>
        <td rowspan="2">0x0218 </td>
        <td>
        <pre class="source">ULONG volatile NextProcessor;</pre>
        </td>
        <td>6.2 only </td>
        <td>&nbsp;</td>
        <td>previously at 0x58 and 0x7C </td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    ULONG volatile NextProcessor;
    struct {
        ULONG NextProcessorNumber : 31;
        ULONG SharedReadyQueue : 1;
    };
};</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x014C </td>
        <td rowspan="2">0x021C </td>
        <td>
        <pre class="source">ULONG volatile DeferredProcessor;</pre>
        </td>
        <td>6.2 only </td>
        <td>&nbsp;</td>
        <td>previously at 0x5C and 0x80 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">LONG QueuePriority;</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0150 </td>
        <td>0x0220 </td>
        <td>
        <pre class="source"><a href="../kprocess/index.htm">KPROCESS</a> *Process;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x0150 and 0x0210 </td>
      </tr>
      <tr>
        <td>0x0154 </td>
        <td>0x0228 </td>
        <td>
        <pre class="source">union {
    GROUP_AFFINITY volatile UserAffinity;
    /*  overlay, see below  */
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously without <span class="type">union</span> at 0x0144 and 0x0200
        </td>
      </tr>
    </tbody>
  </table>
  <p>Version 6.1, with its support for potentially many more processors, changed
  <span class="member">UserAffinity</span> and <span class="member">Affinity</span> 
  from <span class="type">KAFFINITY</span> to <span class="struct">GROUP_AFFINITY</span>. 
  The latter has six bytes explicitly labelled as <span class="member">Reserved</span>. 
  Version 6.1 doesn’t pack anything into them, but version 6.2 goes all the way. 
  Overlaying <span class="member">UserAffinity</span> is: </p>
  <pre class="source">struct {
    UCHAR UserAffinityFill [FIELD_OFFSET (GROUP_AFFINITY, Reserved)];
    /*  reclaimed 6 bytes, see below  */
};</pre>
  <p>Reclaimed from <span class="member">UserAffinity</span>: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x015A </td>
        <td>0x0232 </td>
        <td>
        <pre class="source">KPROCESSOR_MODE PreviousMode;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x013A and 0x01F6 </td>
      </tr>
      <tr>
        <td>0x015B </td>
        <td>0x0233 </td>
        <td>
        <pre class="source">CHAR BasePriority;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0135 and 0x01F1 </td>
      </tr>
      <tr>
        <td>0x015C </td>
        <td>0x0234 </td>
        <td>
        <pre class="source">union {
    CHAR PriorityDecrement;
    struct {
        UCHAR ForegroundBoost : 4;
        UCHAR UnusualBoost : 4;
    };
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0136 and 0x01F2 </td>
      </tr>
      <tr>
        <td>0x015D </td>
        <td>0x0235 </td>
        <td>
        <pre class="source">BOOLEAN Preempted;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0137 and 0x01F3 </td>
      </tr>
      <tr>
        <td>0x015E </td>
        <td>0x0236 </td>
        <td>
        <pre class="source">UCHAR AdjustReason;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0138 and 0x01F4 </td>
      </tr>
      <tr>
        <td>0x015F </td>
        <td>0x0237 </td>
        <td>
        <pre class="source">CHAR AdjustIncrement;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0139 and 0x01F5 </td>
      </tr>
    </tbody>
  </table>
  <p>Insertion of the <span class="member">AffinityVersion</span> for Windows 10 
  produces the first change of offset for any <span class="struct">KTHREAD</span> 
  member since Windows 8. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0160 </td>
        <td>0x0238 </td>
        <td>
        <pre class="source">ULONG_PTR AffinityVersion;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0160 (6.2 to 6.3); <br>
        0x0164 </td>
        <td>0x0238 (6.2 to 6.3); <br>
        0x0240 </td>
        <td>
        <pre class="source">union {
    GROUP_AFFINITY volatile Affinity;
    /*  overlay, see below  */
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0154 and 0x0218 </td>
      </tr>
    </tbody>
  </table>
  <p>Overlaying <span class="member">Affinity</span>: </p>
  <pre class="source">struct {
    UCHAR AffinityFill [FIELD_OFFSET (GROUP_AFFINITY, Reserved)];
    /*  reclaimed 6 bytes, see below  */
};</pre>
  <p>Reclaimed from <span class="member">Affinity</span>: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0166 (6.2 to 6.3); <br>
        0x016A </td>
        <td>0x0242 (6.2 to 6.3); <br>
        0x024A </td>
        <td>
        <pre class="source">UCHAR ApcStateIndex;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0134 and 0x01F0 </td>
      </tr>
      <tr>
        <td>0x0167 (6.2 to 6.3); <br>
        0x016B </td>
        <td>0x0243 (6.2 to 6.3); <br>
        0x024B </td>
        <td>
        <pre class="source">UCHAR WaitBlockCount;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0168 (6.2 to 6.3); <br>
        0x016C </td>
        <td>0x0244 (6.2 to 6.3); <br>
        0x024C </td>
        <td>
        <pre class="source">ULONG IdealProcessor;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0160 and 0x0228 </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="struct">KTHREAD</span> keeps two <span class="struct">KAPC_STATE</span> 
  structures, the second to support the <span class="function">KeStackAttachProcess</span> 
  function. From as far back as version 3.51, the <span class="struct">KTHREAD</span> 
  has initialised its <span class="member">ApcStatePointer</span> array with the 
  addresses of these two structures and then left them there, unchanging, with the 
  (8-bit) <span class="member">ApcStateIndex</span> to select which pointer to use. 
  This always was an extravagance for an implementation that’s supposedly so concerned 
  about space that it fits small members into otherwise unused space in larger members. 
  Windows 10 does away with it. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x016C (6.2 to 6.3) </td>
        <td>0x0248 (6.2 to 6.3) </td>
        <td>
        <pre class="source">KAPC_STATE *ApcStatePointer [2];</pre>
        </td>
        <td>6.2 to 6.3 </td>
        <td>&nbsp;</td>
        <td>previously at 0x0168 and 0x0230 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0250 </td>
        <td>
        <pre class="source">ULONGLONG NpxState;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>x86 at 0x0340; <br>
        previously as <span class="type">CHAR</span> at 0x0185 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0170 </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">ULONG Spare15 [1];</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>See that Windows 10 inserts members with the effect, if not the intention, 
  of restoring continuity of offsets for the second <span class="struct">KAPC_STATE</span> 
  structure and beyond. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0174 </td>
        <td>0x0258 </td>
        <td>
        <pre class="source">union {
    KAPC_STATE SavedApcState;
    /*  overlay, see below  */
};</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0170 and 0x0240 </td>
      </tr>
    </tbody>
  </table>
  <p>Overlaying the <span class="member">SavedApcState</span>: </p>
  <pre class="source">struct {
    UCHAR SavedApcStateFill [KAPC_STATE_ACTUAL_LENGTH];
    /*  reclaimed, see below  */
};</pre>
  <p>Reclaimed from the <span class="member">SavedApcState</span>: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x018B </td>
        <td>0x0283 </td>
        <td>
        <pre class="source">UCHAR WaitReason;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0187 and 0x026B </td>
      </tr>
      <tr>
        <td>0x018C </td>
        <td>0x0284 </td>
        <td>
        <pre class="source">CHAR SuspendCount;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0188 and 0x026C </td>
      </tr>
      <tr>
        <td>0x018D </td>
        <td>0x0285 </td>
        <td>
        <pre class="source">CHAR Saturation;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x013B and 0x01F7 </td>
      </tr>
      <tr>
        <td>0x018E </td>
        <td>0x0286 </td>
        <td>
        <pre class="source">USHORT SListFaultCount;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously as <span class="type">ULONG</span> at 0x01DC and 0x02D4
        </td>
      </tr>
    </tbody>
  </table>
  <p>What had been the <span class="member">SuspendApc</span> (previously at offsets 
  0x0194 and 0x0280) is renamed to <span class="member">SchedulerApc</span>. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0190 </td>
        <td>0x0288 </td>
        <td>
        <pre class="source">union {
    KAPC SchedulerApc;
    /*  overlay, see below  */
};</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Overlaying the <span class="member">SchedulerApc</span>: </p>
  <pre class="source"> struct {
    UCHAR SchedulerApcFill0 [KAPC_OFFSET_TO_SPARE_BYTE0];
    /*  reclaimed byte, see below  */
};
struct {
    UCHAR SchedulerApcFill1 [KAPC_OFFSET_TO_SPARE_BYTE1];
    /*  reclaimed byte, see below  */
};
struct {
    UCHAR SchedulerApcFill2 [KAPC_OFFSET_TO_SPARE_LONG];
    /*  reclaimed four bytes, see below  */
};
struct {
    UCHAR SchedulerApcFill3 [KAPC_OFFSET_TO_SYSTEMARGUMENT1];
    /*  reclaimed 4 or 8 bytes, see below  */
};
struct {
    UCHAR SchedulerApcFill4 [KAPC_OFFSET_TO_SYSTEMARGUMENT2];
    /*  reclaimed 4 or 8 bytes, see below  */
};
struct {
    UCHAR SchedulerApcFill5 [KAPC_ACTUAL_LENGTH];
    /*  reclaimed 1 or 5 bytes, see below)  */
};</pre>
  <p>Whatever its name, its sprinkling of other members in spare space barely changes:
  </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0191 </td>
        <td>0x0289 </td>
        <td>
        <pre class="source">UCHAR ResourceIndex;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0195 and 0x0281 </td>
      </tr>
      <tr>
        <td>0x0193 </td>
        <td>0x028B </td>
        <td>
        <pre class="source">UCHAR QuantumReset;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0197 and 0x0283 </td>
      </tr>
      <tr>
        <td>0x0194 </td>
        <td>0x028C </td>
        <td>
        <pre class="source">ULONG KernelTime;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x0198 and 0x0284 </td>
      </tr>
      <tr>
        <td>0x01B4 </td>
        <td>0x02C8 </td>
        <td>
        <pre class="source">KPRCB * volatile WaitPrcb;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x01B8 and 0x02C0 </td>
      </tr>
      <tr>
        <td>0x01B8 </td>
        <td>0x02D0 </td>
        <td>
        <pre class="source">PVOID LegoData;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x01BC and 0x02C8 </td>
      </tr>
      <tr>
        <td>0x01BF </td>
        <td>0x02DB </td>
        <td>
        <pre class="source">UCHAR CallbackNestingLevel;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x01C0 </td>
        <td>0x02DC </td>
        <td>
        <pre class="source">ULONG UserTime;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>previously at 0x01C4 and 0x02DC </td>
      </tr>
    </tbody>
  </table>
  <p>That’s the end of the contrivances over packing members into space that’s left 
  unused in other members. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
        <th>History </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x01C4 </td>
        <td>0x02E0 </td>
        <td>
        <pre class="source">KEVENT SuspendEvent;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x01D4 </td>
        <td>0x02F8 </td>
        <td>
        <pre class="source">LIST_ENTRY ThreadListEntry;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x01E0 and 0x02F8 </td>
      </tr>
      <tr>
        <td>0x01DC </td>
        <td>0x0308 </td>
        <td>
        <pre class="source">LIST_ENTRY MutantListHead;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>last member in 6.2 (x86) </td>
        <td>previously at 0x01E8 and 0x0308 </td>
      </tr>
      <tr>
        <td>0x01E4 (6.3) </td>
        <td>0x0318 (6.3) </td>
        <td>
        <pre class="source">SINGLE_LIST_ENTRY LockEntriesFreeList;</pre>
        </td>
        <td>6.3 only </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x01E4 </td>
        <td>0x0318 </td>
        <td>
        <pre class="source">UCHAR AbEntrySummary;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x01E5 </td>
        <td>0x0319 </td>
        <td>
        <pre class="source">UCHAR AbWaitEntryCount;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>previously at 0x032B and 0x058B </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x01E6 </td>
        <td>0x031A </td>
        <td>
        <pre class="source">UCHAR AbAllocationRegionCount;</pre>
        </td>
        <td>1703 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="3">0x01E6 (10.0 to 1607); <br>
        0x01E7 </td>
        <td rowspan="3">0x031A (10.0 to 1607); <br>
        0x031B </td>
        <td>
        <pre class="source">USHORT Spare20;</pre>
        </td>
        <td>10.0 to 1607 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">UCHAR Spare20;</pre>
        </td>
        <td>1703 to 1709 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">CHAR SystemPriority;</pre>
        </td>
        <td>1803 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x031C </td>
        <td>
        <pre class="source">ULONG SecureThreadCookie;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x01E8 </td>
        <td rowspan="2">0x0320 </td>
        <td>
        <pre class="source">KLOCK_ENTRY LockEntries [6];</pre>
        </td>
        <td>6.3 to 1903 </td>
        <td>&nbsp;</td>
        <td rowspan="2">&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">KLOCK_ENTRY *LockEntries;</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0308 (6.3 to 1903); <br>
        0x01EC </td>
        <td>0x0560 (6.3 to 1903); <br>
        0x0328 </td>
        <td>
        <pre class="source">SINGLE_LIST_ENTRY PropagateBoostsEntry;</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x030C (6.3 to 1903); <br>
        0x01F0 </td>
        <td>0x0568 (6.3 to 1903); <br>
        0x0330 </td>
        <td>
        <pre class="source">SINGLE_LIST_ENTRY IoSelfBoostsEntry;</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0310 (6.3 to 1903); <br>
        0x01F4 </td>
        <td>0x0570 (6.3 to 1903); <br>
        0x0338 </td>
        <td>
        <pre class="source">UCHAR PriorityFloorCounts [0x10];</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0204 </td>
        <td>0x0348 </td>
        <td>
        <pre class="source">UCHAR PriorityFloorCountsReserved [0x10];</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0320 (6.3 to 1903); <br>
        0x0214 </td>
        <td>0x0580 (6.3 to 1903); <br>
        0x0358 </td>
        <td>
        <pre class="source">ULONG PriorityFloorSummary;</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0324 (6.3 to 1903); <br>
        0x0218 </td>
        <td>0x0584 (6.3 to 1903); <br>
        0x035C </td>
        <td>
        <pre class="source">LONG volatile AbCompletedIoBoostCount;</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0328 (1607 to 1903); <br>
        0x021C </td>
        <td>0x0588 (6.3 to 1903); <br>
        0x0360 </td>
        <td>
        <pre class="source">LONG volatile AbCompletedIoQosBoostCount;</pre>
        </td>
        <td>1607 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x0328 (6.3 to 1511); <br>
        0x032C (1607 to 1903); <br>
        0x0220 </td>
        <td rowspan="2">0x0588 (6.3 to 1511); <br>
        0x058C (1607 to 1903); <br>
        0x0364 </td>
        <td>
        <pre class="source">SHORT volatile AbReferenceCount;</pre>
        </td>
        <td>6.3 only </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">SHORT volatile KeReferenceCount;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x032A (6.3 to 1511); <br>
        0x032E (1607 to 1903); <br>
        0x0222 </td>
        <td rowspan="2">0x058A (6.3 to 1511); <br>
        0x058E (1607 to 1903); <br>
        0x0366 </td>
        <td>
        <pre class="source">UCHAR AbFreeEntryCount;</pre>
        </td>
        <td>6.3 only </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">UCHAR AbOrphanedEntrySummary;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x032B (6.3 to 1511); <br>
        0x032F (1607 to 1903); <br>
        0x0223 </td>
        <td rowspan="2">0x058B (6.3 to 1511); <br>
        0x058F (1607 to 1903); <br>
        0x0367 </td>
        <td>
        <pre class="source">UCHAR AbWaitEntryCount;</pre>
        </td>
        <td>6.3 only </td>
        <td>next at 0x01E5 and 0x0319 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">UCHAR AbOwnedEntryCount;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x032C (6.3 to 1511); <br>
        0x0330 (1607 to 1903); <br>
        0x0224 </td>
        <td>0x058C (6.3 to 1511); <br>
        0x0590 (1607 to 1903); <br>
        0x0368 </td>
        <td>
        <pre class="source">ULONG ForegroundLossTime;</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0330 (6.3 to 1511); <br>
        0x0334 (1607 to 1903); <br>
        0x0228 </td>
        <td>0x0590 (6.3 to 1511); <br>
        0x0598 (1607 to 1903); <br>
        0x0370&nbsp; </td>
        <td>
        <pre class="source">union {
    LIST_ENTRY GlobalForegroundListEntry;
    struct {
        SINGLE_LIST_ENTRY ForegroundDpcStackListEntry;
        ULONG InGlobalForegroundList;
    };
};</pre>
        </td>
        <td>6.3 and higher </td>
        <td>last member in 6.3 (x86) </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0318 (6.2); <br>
        0x05A0 (6.3 to 1511); <br>
        0x05A8 (1607 to 1903); <br>
        0x0380 </td>
        <td>
        <pre class="source">LONGLONG ReadOperationCount;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x0320 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0320 (6.2); <br>
        0x05A8 (6.3 to 1511); <br>
        0x05B0 (1607 to 1903); <br>
        0x0388 </td>
        <td>
        <pre class="source">LONGLONG WriteOperationCount;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x0328 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0328 (6.2); <br>
        0x05B0 (6.3 to 1511); <br>
        0x05B8 (1607 to 1903); <br>
        0x0390 </td>
        <td>
        <pre class="source">LONGLONG OtherOperationCount;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x0330 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0330 (6.2); <br>
        0x05B8 (6.3 to 1511); <br>
        0x05C0 (1607 to 1903); <br>
        0x0398 </td>
        <td>
        <pre class="source">LONGLONG ReadTransferCount;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x0338 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0338 (6.2); <br>
        0x05C0 (6.3 to 1511); <br>
        0x05C8 (1607 to 1903); <br>
        0x03A0 </td>
        <td>
        <pre class="source">LONGLONG WriteTransferCount;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
        <td>previously at 0x0340 </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0340 (6.2); <br>
        0x05C8 (6.3 to 1511); <br>
        0x05D0 (1607 to 1903); <br>
        0x03A8 </td>
        <td>
        <pre class="source">LONGLONG OtherTransferCount;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>last member in 6.2 to 6.3 (x64) </td>
        <td>previously at 0x0348 </td>
      </tr>
    </tbody>
  </table>
  <h3>Appended for Windows 10 </h3>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0338 (10.0 to 1511); <br>
        0x033C (1607 to 1903); <br>
        0x0230 </td>
        <td>0x05D0 (10.0 to 1511); <br>
        0x05D8 (1607 to 1903); <br>
        0x03B0 </td>
        <td>
        <pre class="source">KSCB *QueuedScb;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>last member in 10.0 to 1607 (x64) </td>
      </tr>
      <tr>
        <td>0x0340 (10.0 to 1903); <br>
        0x0238 </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">ULONGLONG NpxState;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>x64 at 0x0250; <br>
        previously as <span class="type">CHAR</span> at 0x91; <br>
        last member in 10.0 to 1607 (x86) </td>
      </tr>
      <tr>
        <td>0x0348 (1703 to 1903); <br>
        0x0240 </td>
        <td>0x05E0 (1703 to 1903); <br>
        0x03B8 </td>
        <td>
        <pre class="source">ULONG volatile ThreadTimerDelay;</pre>
        </td>
        <td>1703 and higher </td>
        <td>last member in 1703 (x86) </td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x05E4 (1703) </td>
        <td>
        <pre class="source">LONG Spare22;</pre>
        </td>
        <td>1703 only </td>
        <td>last member in 1703 (x64) </td>
      </tr>
      <tr>
        <td rowspan="2">0x034C (1709 to 1903); <br>
        0x0244 </td>
        <td rowspan="2">0x05E4 (1709 to 1903); <br>
        0x03BC </td>
        <td>
        <pre class="source">union {
    LONG volatile <a href="threadflags2.htm">ThreadFlags2</a>;
    struct {
        /*  bit fields, follow link  */
    };
};</pre>
        </td>
        <td>1709 to 1903 </td>
        <td>last member in 1709 to 1809 (x86) </td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    LONG volatile <a href="threadflags3.htm">ThreadFlags3</a>;
    struct {
        /*  bit fields, follow link  */
    };
};</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x05E8 (1903); <br>
        0x03C0 </td>
        <td>
        <pre class="source">ULONGLONG TracingPrivate [1];</pre>
        </td>
        <td>1903 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x05E8 (1709 to 1809); <br>
        0x05F0 (1903); <br>
        0x03C8 </td>
        <td>
        <pre class="source">PVOID SchedulerAssist;</pre>
        </td>
        <td>1709 and higher </td>
        <td>last member in 1709 to 1809 (x64) </td>
      </tr>
      <tr>
        <td>0x0350 (1903); <br>
        0x0248 </td>
        <td>0x05F8 (1903); <br>
        0x03D0 </td>
        <td>
        <pre class="source">PVOID volatile AbWaitObject;</pre>
        </td>
        <td>1903 and higher </td>
        <td>last member in 1903 </td>
      </tr>
      <tr>
        <td>0x024C </td>
        <td>0x03D8 </td>
        <td>
        <pre class="source">ULONG ReservedPreviouslyReadyTimeValue;</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0250 </td>
        <td>0x03E0 </td>
        <td>
        <pre class="source">ULONGLONG KernelWaitTime;</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0258 </td>
        <td>0x03E8 </td>
        <td>
        <pre class="source">ULONGLONG UserWaitTime;</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x03F0 </td>
        <td>
        <pre class="source">union {
    LIST_ENTRY GlobalUpdateVpThreadPriorityListEntry;
    struct {
        SINGLE_LIST_ENTRY UpdateVpThreadPriorityDpcStackListEntry;
        ULONGLONG InGlobalUpdateVpThreadPriorityList;
    };
};</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0400 </td>
        <td>
        <pre class="source">LONG SchedulerAssistPriorityFloor;</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>0x0404 </td>
        <td>
        <pre class="source">ULONG Spare28;</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0260 </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">ULONG Spare29 [3];</pre>
        </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x026C </td>
        <td>0x0408 </td>
        <td>
        <pre class="source">ULONG_PTR EndPadding [5];</pre>
        </td>
        <td>2004 and higher </td>
        <td>last member in 2004 </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 15th
    <a href="../../../../../../../../new/16/06.htm">June 2016</a> and was last modified 
    on 7th October 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="14250" -->
  </div>
</div>

</body>

</html>
