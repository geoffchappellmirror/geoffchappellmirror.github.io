<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>C++ Keywords: __compileBreak</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<h1>C++ Keywords: __compileBreak </h1>
<p>Detection of the <span class="keyword">__compileBreak</span> keyword causes 
the compiler to break to the debugger if the <span class="switch">
<a href="../../cl/cl/options/b$d.htm">/Bd</a></span> option is active or if the 
environment variable <span class="env">_CL_DEBUGBREAK</span> exists (whatever 
its value). Without either of these preparations, the keyword is simply ignored. </p>
<p>The break to the debugger occurs within the preprocessor’s lowest-level code 
for reading tokens, such that continuation will soon see the compiler retrieve 
the next token. Its obvious use is for problems whose circumstances of 
occurrence are known in terms of a position in source code but whose cause needs 
to be investigated with the precision of a debugger. As such, <span class="keyword">
__compileBreak</span> 
is presumably intended only as an aid to Microsoft’s own debugging of its 
compiler. This may explain its being left undocumented: who but Microsoft’s own 
programmers would ever have good cause to debug Microsoft’s compiler, and even 
if they do, and could, why should Microsoft help them? (In this context, note 
that the C1XX option
<span class="switch"><a href="../../cl/c1xx/options/debugbreak.htm">-debugBreak</a></span> 
is also undocumented.) </p>
<h2>Recognition </h2>
<p>The <span class="keyword">__compileBreak</span> keyword can be placed, and be 
recognised, anywhere that the compiler works with tokens produced by the usual 
preprocessing of source text. Only the very lowest-level code for reading tokens 
ever sees any token that represents <span class="keyword">__compileBreak</span> 
as a keyword. Whether or not this code breaks to the debugger, it absorbs the 
token. The instructions after the break are those that will read the next token. 
To higher-level code, and particularly for any syntax at the level of tokens, 
the <span class="keyword">__compileBreak</span> 
may as well have been white space. For instance, </p>
<pre class="source">class __declspec __compileBreak (novtable) Test;</pre>
<p>is valid. </p>
<h3>Preprocessing </h3>
<p>There is no recognition of <span class="keyword">__compileBreak</span> (or of 
any other keyword) where source code is parsed without tokenisation, as in the 
early parts of preprocessor directives (and in the whole of some). For instance, 
in
</p>
<pre class="source">#error __compileBreak error message text</pre>
<p>the characters of <span class="keyword">__compileBreak</span> are like any 
other characters of text for the error message: the compiler simply does not 
bother with tokens in a <span class="directive">#error</span> directive (which 
is also why macros are not expanded in a <span class="directive">#error</span> 
message, whatever the product documentation states to the contrary). Similarly, 
not only does </p>
<pre class="source"># __compileBreak pragma managed</pre>
<p>not break to the debugger, but the <span class="keyword">__compileBreak</span> 
is rejected fatally as an invalid preprocessor command. By contrast, </p>
<pre class="source">#pragma __compileBreak managed</pre>
<p>does break, because everything after the <span class="directive">#pragma</span> 
is handled as tokens. </p>
<h3>Non-Standard Tokenisation </h3>
<p>There is also no recognition of <span class="keyword">__compileBreak</span> 
(or, again, of any other keyword) in areas of source code that are tokenised, 
but according to some scheme of Microsoft’s own rather than to the usual rules 
of the C++ language. It is not presently known how widely such variation is 
implemented. The known case applies inside attribute blocks, which essentially 
have their own preprocessor (not that the product documentation cares to alert 
programmers to this). In an attribute block, <span class="keyword">
__compileBreak</span> is simply not a keyword, but is tokenised as an identifier 
like any other. Thus, in </p>
<pre class="source">[__compileBreak, module __compileBreak (name = &quot;Test&quot;)];</pre>
<p>the first occurrence is interpreted as naming an attribute and the second is 
rejected as unexpected. </p>
<div class="Footer">
  <p class="Dates">This page was created on 16th July 2006 and was last modified 
  on 9th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="58117" endspan -->
</div>

</body>

</html>