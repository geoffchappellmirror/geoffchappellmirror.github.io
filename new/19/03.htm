<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>New and Updated in March 2019</title>
<link rel="stylesheet" type="text/css" href="../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/tree.css">
<script type="text/javascript" src="../../_scripts/master.js"></script>
<script type="text/javascript" src="../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/tree.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript Header" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="14880" -->
<div class="Main">
  <h1>New and Updated in March 2019 </h1>
  <p>Some paid work in <a href="02.htm">February</a> had me making what might have 
  been routine use of Image File Execution Options for getting a particular process 
  to run automatically under a debugger. Slightly less routine is that this was 
  wanted before any user was yet logged on, so that the user-mode debugger had to 
  be operated through the kernel-mode debugger from a second computer. </p>
  <p>Still, this sort of work is bread-and-butter for a consultant on low-level 
  Windows programming. Of course, if you have a low-level Windows problem but this 
  is not bread-and-butter for you, then please take a moment to consider how much 
  easier your problem might be dealt with if you
  <a href="../../consult/index.htm">consult</a>! </p>
  <p>What changed the work from routine to initially impossible was interference 
  from software that injects its DLLs into arbitrary other software. Too much of 
  this is done without a full understanding of what Windows functionality they disturb. 
  Hardly ever is it done with any sense of responsibiilty for the costs imposed 
  on by-standers. When you finally get past the numerous deflections that the maker 
  of this arrogantly faulty software puts in your way, you find their attitude is 
  anyway that they did what they needed to for their purposes and that’s that. I’d 
  happily see these guys get drummed out of business, along with most makers of 
  anti-virus software, meaningful difference between their products and malware 
  being sometimes hard to discern. </p>
  <p>Anyway, the spill-over to my unpaid work is that it got me looking again at 
  the exported functions for querying Image File Execution Options. Somehow, I wrote 
  about one of them one day more than a decade ago without ever returning to it 
  or its companions. There have, of course, been developments. And I have in the 
  meantime got more interested in the early history. Image File Execution Options 
  actually are ancient. </p>
  <h2>Win32 </h2>
  <div class="Tree">
    <ul>
      <li class="Expanded Branch">NTDLL
      <ul>
        <li class="Expanded Branch">Functions
        <ul>
          <li class="Expanded Branch"><a href="../../studies/windows/win32/ntdll/api/ldrinit/index.htm">Loader Initialisation</a>
          <ul>
            <li class="Expanded Branch">Functions
            <ul>
              <li><a href="../../studies/windows/win32/ntdll/api/ldrinit/queryimagefileexecutionoptions.htm">LdrQueryImageFileExecutionOptions</a> </li>
              <li><a href="../../studies/windows/win32/ntdll/api/ldrinit/getntversionnumbers.htm">RtlGetNtVersionNumbers</a> </li>
            </ul>
            </li>
          </ul>
          </li>
          <li class="Expanded Branch">Run-Time Library
          <ul>
            <li class="Expanded Branch"><a href="../../studies/windows/win32/ntdll/api/rtl/rtlexec/index.htm">Execution</a> (updated)
            <ul>
              <li><a href="../../studies/windows/win32/ntdll/api/rtl/rtlexec/openimagefileoptionskey.htm">LdrOpenImageFileOptionsKey</a> (updated) </li>
              <li><a href="../../studies/windows/win32/ntdll/api/rtl/rtlexec/queryimagefileexecutionoptionsex.htm">LdrQueryImageFileExecutionOptionsEx</a> </li>
              <li><a href="../../studies/windows/win32/ntdll/api/rtl/rtlexec/queryimagefilekeyoption.htm">LdrQueryImageFileKeyOption</a> </li>
            </ul>
            </li>
          </ul>
          </li>
        </ul>
        </li>
      </ul>
      </li>
    </ul>
  </div>
  <h2>Kernel </h2>
  <p>One of the quirks of the API for Image File Execution Options is that an option 
  can be in the registry as a string but can be queried as a dword. Indeed, it wasn’t 
  until Windows 2000 that an option could be in the registry as anything other than 
  a string. It’s well past time, then, to document the low-level helper that parses 
  a dword from a string. You’d think such a function is straightforward. It always 
  has been documented. But look at the documentation and ask why it goes to the 
  trouble of presenting examples. Then ask whether Microsoft would have added these 
  without experience of this simple function causing real-world problems. Then look 
  into how Microsoft’s documentation of this seemingly simple utility function has 
  changed through the decades and wonder how anyone at Microsoft ever has the nerve 
  to tell programmers to keep to the documentation. </p>
  <div class="Tree">
    <ul>
      <li class="Expanded Branch">Kernel
      <ul>
        <li class="Expanded Branch">API
        <ul>
          <li class="Expanded Branch">Run-Time Library
          <ul>
            <li class="Expanded Branch">Integer Conversions
            <ul>
              <li><a href="../../studies/windows/km/ntoskrnl/api/rtl/cnvint/unicodestringtoint64.htm">RtlUnicodeStringToInt64</a> </li>
              <li><a href="../../studies/windows/km/ntoskrnl/api/rtl/cnvint/unicodestringtointeger.htm">RtlUnicodeStringToInteger</a> </li>
            </ul>
            </li>
            <li class="Expanded Branch">Strings
            <ul>
              <li><a href="../../studies/windows/km/ntoskrnl/api/rtl/string/initunicodestring.htm">RtlInitUnicodeString</a> </li>
              <li><a href="../../studies/windows/km/ntoskrnl/api/rtl/string/initunicodestringex.htm">RtlInitUnicodeStringEx</a> </li>
            </ul>
            </li>
          </ul>
          </li>
        </ul>
        </li>
      </ul>
      </li>
    </ul>
  </div>
  <p>Perhaps inevitably, documenting one supposedly simple function that Microsoft 
  already documents led soon enough to others. The UNICODE_STRING is so basic a 
  structure in kernel-mode programming that you’d think there can’t be anything 
  useful to write about it. But the structure has always been widely appreciated 
  as having a problem with strings that are too long for faithful representation. 
  Microsoft’s documentation of this itself and of various attempts at correcting 
  it is far from commendable. Problems surely lurk in real-world code, even in 2019, 
  for even if Microsoft’s programmers are scrupulously careful we can be sure that 
  third-party programmers aren’t, not least because their quick reading of Microsoft’s 
  documentation won’t have alerted them. </p>
  <h2>Notes </h2>
  <p>Certainly not new, but new to this website! As best as I can now determine, 
  the small collection of pages that I now add to the Notes was published at my 
  old website from 1999 until I finally discontinuted the site in 2011. Somehow, 
  these pages never got transferred to this website when I created it in 2007. Most 
  plausibly, I thought they belonged in some bigger work so that I didn’t simply 
  archive them, and then I forgot about carrying them over for the bigger work. 
  Their subject is what was in 1999 still the relatively recent introduction of 
  cryptography to Windows. I only thought of them now—twenty years later—because 
  a correspondent asked me about the fuss that some people made that year over findng 
  the name NSAKEY in some Windows symbol files. </p>
  <p>While taking this trip down memory lane, I also noticed a page that certainly 
  never was more than a throw-away. The wonder is how I ever came upon its subject. 
  It dates from a time when newsgroups were the closest the Internet yet had to 
  social media and I still participated before I realised that giving away information 
  and solutions in public for free mostly just got me a deluge of emails that expected 
  information and solutions in private but still for free. (I say expected because 
  I remember that very few even bothered with a please or thankyou.) Microsoft’s 
  Internet News program must have presented some irritation that prompted me to 
  cast my eye over a hex dump. Are easter eggs still a thing? </p>
  <p>It turns out they are, such that in <a href="../21/11.htm">November 2021</a> 
  I thought to write a little about a much more substantial easter egg in Windows 
  95. Thus motivated I looked harder into the history of my study of the Internet 
  Mail and News program and found that the spur was not, after all, an irritation 
  in that program but the thought that a quick study of it might add to what I had 
  recently written about an irritation in different software that Microsoft had 
  also named Internet Mail. </p>
  <div class="Tree">
    <ul>
      <li class="Expanded Branch">Windows
      <ul>
        <li class="Expanded Branch"><a href="../../notes/windows/archive/index.htm">Archive</a> (updated)
        <ul>
          <li class="Expanded Branch">Diversion
          <ul>
            <li><a href="../../notes/windows/archive/mailnews.htm">Credits for Internet Mail and News</a> (previously published elsewhere) </li>
          </ul>
          </li>
          <li class="Expanded Branch">Security
          <ul>
            <li class="Expanded Branch"><a href="../../notes/windows/archive/cryptoapi/index.htm">CryptoAPI</a> (previously published elsewhere)
            <ul>
              <li><a href="../../notes/windows/archive/cryptoapi/win95org.htm">The CryptoAPI and Windows 95</a> (previously published elsewhere) </li>
              <li><a href="../../notes/windows/archive/cryptoapi/cspsigs.htm">CSP Signatures</a> (previously published elsewhere) </li>
            </ul>
            </li>
          </ul>
          </li>
        </ul>
        </li>
      </ul>
      </li>
    </ul>
  </div>
  <div class="Footer">
    <!--webbot bot="Include" U-Include="../../_include/c1921.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019-2021. Geoff Chappell. All rights reserved.  
<a href="../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="65176" -->
  </div>
</div>

</body>

</html>
