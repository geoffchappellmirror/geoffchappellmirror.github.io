<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>LdrQueryImageFileExecutionOptions</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>LdrQueryImageFileExecutionOptionsEx </h1>
<p>The <span class="function">LdrQueryImageFileExecutionOptionsEx</span> function 
queries one value in the <span class="regkey">Image 
File Execution Options</span> key for a named image file. </p>
<h2>Declaration </h2>
<pre class="source">NTSTATUS 
LdrQueryImageFileExecutionOptionsEx (
    PUNICODE_STRING lpImageFile, 
    PCWSTR lpszOption, 
    ULONG dwType, 
    PVOID lpData, 
    ULONG cbData, 
    ULONG *lpcbData, 
    BOOLEAN bWow64);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">lpImageFile</span> argument names the executable image 
for which the option is sought. This can be <span class="constant">NULL</span> in 
version 6.0 and higher to query for global options. </p>
<!--webbot bot="Include" U-Include="../../ldrinit/_include/ifeoargs.htm" TAG="BODY" startspan -->

<p>The <span class="argument">lpszOption</span> argument names the one option whose 
value is sought. </p>
<p>The <span class="argument">dwType</span> argument specifies the type for the 
value as produced in the output buffer. This is typically also, but need not be, 
the required type for the value as stored in the registry. </p>
<p>The optional <span class="argument">lpData</span> and <span class="argument">
cbData</span> arguments are respectively the address and size of the output buffer 
that is to receive the value. These arguments can be <span class="constant">NULL</span> 
and zero to query for the option’s existence or size. </p>
<p>The optional <span class="argument">lpcbData</span> argument provides the address 
of a variable that is to receive the size, in bytes, of the value that the successful 
function has put into the buffer and which may receive the size that the failed 
function might have put into the buffer (had the buffer been large enough). This 
argument can be <span class="constant">NULL</span> if the caller does not want to 
know how much data is produced or is available. </p>

<!--webbot bot="Include" endspan i-checksum="29951" -->
<p>The <span class="argument">bWow64</span> argument is non-zero to query the
<span class="regkey">Wow6432Node</span> branch. This argument is ignored in version 
6.1 and higher. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../../_include/ntstatus.htm" TAG="BODY" startspan -->

<p>The function returns <span class="constant">STATUS_SUCCESS</span> if successful, 
else a negative error code. </p>

<!--webbot bot="Include" endspan i-checksum="8" -->
<!--webbot bot="Include" U-Include="../../ldrinit/_include/80000005.htm" TAG="BODY" startspan -->

<p>Of particular importance is <span class="constant">STATUS_BUFFER_OVERFLOW</span>, 
which is the function’s indication that the buffer, if any, is too small for the 
whole value and that a size that would have sufficed has been set into the variable, 
if any, that was specified through the <span class="argument">lpcbData</span> argument.
</p>

<!--webbot bot="Include" endspan i-checksum="30326" -->
<h2>Availability </h2>
<p>The <span class="function">LdrQueryImageFileExecutionOptionsEx</span> function 
is exported by name from NTDLL.DLL in version 5.2 and higher. </p>
<p>In version 6.0 and higher, the name <span class="function">LdrQueryImageFileExecutionOptionsEx</span> 
exists just for export. Were the function not exported, it would be an internal 
routine whose only name is <span class="routine">RtlQueryImageFileExecutionOptions</span>. 
As usual for Run Time Library (RTL) routines, the code is written for both kernel 
and user modes. The relatively little use that the kernel makes of this routine 
in version 6.0 and higher is mostly inline but the routine is explicit in versions 
6.2 and 10.0. No version of the kernel exports it. </p>
<h2>Documentation Status </h2>
<p>The <span class="function">LdrQueryImageFileExecutionOptionsEx</span> function 
is not documented. Neither is it declared in any C-language header that Microsoft 
is known to have published in any development kit for either user-mode or kernel-mode 
software. While Microsoft’s names and types for the function’s arguments are not known, this 
article uses inventions. </p>
<h2>Behaviour </h2>
<p>The general business of the <span class="function">LdrQueryImageFileExecutionOptionsEx</span> 
function is to open the registry key for the given executable, query the given option 
as a registry value, and close the key. In all versions that export the function, 
except on one point (taken up in the next paragraph), the open and the query are 
done by subroutines. Starting with the version 5.2 from Windows Server 2003 SP1, 
these subroutines are exported as <span class="function">
<a href="openimagefileoptionskey.htm">LdrOpenImageFileOptionsKey</a></span> and
<span class="function"><a href="queryimagefilekeyoption.htm">LdrQueryImageFileKeyOption</a></span>. 
This allows for efficiency when querying multiple options for one executable. The
<span class="function">LdrQueryImageFileExecutionOptionsEx</span> function is then 
a convenient compound when querying just one option. For the behaviour of each part, 
follow the links. </p>
<h3>Base Key </h3>
<p>The one point of exception to this function’s being a compound of
<span class="function">LdrOpenImageFileOptionsKey</span> and
<span class="function">LdrQueryImageFileKeyOption</span> concerns access in version 
6.0 and higher to what the notes on <span class="function">LdrOpenImageFileOptionsKey</span> 
refer to as the base key: </p>
<ul>
  <li><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Image 
  File Execution Options</span> </li>
  <li><span class="regkey">HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows 
  NT\CurrentVersion\Image File Execution Options</span> if
  <span class="argument">bWow64</span> is non-zero. </li>
</ul>
<p>Options for different executables are in different subkeys of this base key, 
or even deeper, but version 6.0 and higher also allow for global options in the 
base key itself. These are queried by giving <span class="constant">NULL</span> 
for the <span class="argument">lpImageFile</span> argument. This is not suitable 
input for <span class="function">LdrOpenImageFileOptionsKey</span>, which knows 
of the base key only as a root to keep open for more efficient access to the subkeys, 
not for exposing to its callers. Though the <span class="function">LdrQueryImageFileExecutionOptionsEx</span> 
function therefore does not use <span class="function">LdrOpenImageFileOptionsKey</span> 
in this case, the base key is handled in common. If the base key is not already 
open, then failure to open it becomes failure for the function. The required access 
is <span class="constant">KEY_QUERY_VALUE</span> and <span class="constant">KEY_ENUMERATE_SUB_KEYS</span>.
</p>
<p>It seems likely that <span class="constant">NULL</span> for
<span class="argument">lpImageFile</span> never was intended for this function as 
an NTDLL export. Microsoft’s only known use is by the kernel. Though
<span class="function">LdrQueryImageFileExecutionOptionsEx</span> is not a kernel-mode 
export, the kernel does have the same code internally in a reduction that assumes
<span class="constant">NULL</span> for <span class="argument">lpImageFile</span> 
and has other arguments specialised to query only for a <span class="constant">REG_DWORD</span> 
value. The known global options are: </p>
<table>
  <tr>
    <th>Name </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td><span class="regvalue">DevOverrideEnable</span> </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td><span class="regvalue">MaxLoaderThreads</span> </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td><span class="regvalue">NoRemoteThreadBeforeProcessInit</span> </td>
    <td>1709 and higher </td>
  </tr>
</table>
<p>The <span class="regvalue">DevOverrideEnable</span> value, if not more generally 
that Image File Execution Options can be global, was disclosed from the start as 
semi-official folklore by making it the subject of a Microsoft blog:
<a href="https://blogs.msdn.microsoft.com/junfeng/2006/01/24/dotlocal-local-dll-redirection/">
DotLocal (.local) Dll Redirection</a>. </p>
<h3>Early History </h3>
<p>In version 5.2 before Windows Server 2003 SP1, the function is a compound as 
in later versions but the components that separately open the key and query the 
value are not yet exported and are slightly less developed. Notably, the routine 
that opens the key does not cache handles to the base keys. If the path to the key 
for the named image exceeds 710 bytes, the function fails, returning
<span class="constant">STATUS_BUFFER_TOO_SMALL</span>. That 710 bytes, specifically, 
is allowed on the stack may be a programmer’s rough allowance of a round-number 
500 bytes for appending the filename to the longer of the base-key paths. Failure 
to open the key (from this full path) is failure for the function. </p>
<div class="Footer">
  <p class="Dates">This page was created on 3rd
  <a href="../../../../../../../new/19/03.htm">March 2019</a> and was last modified 
  on 26th May 2019. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c19.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6722" -->
</div>

</body>

</html>
