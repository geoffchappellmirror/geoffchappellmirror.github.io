<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>WMI_SPINLOCK</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<h1>WMI_SPINLOCK </h1>
<p>The <span class="struct">WMI_SPINLOCK</span> structure is the event-specific 
data for one type of event that can be written to an NT Kernel Logger session. The 
particular type of event whose data is a <span class="struct">WMI_SPINLOCK</span> 
has the <a href="../../../inc/api/ntwmi/wmi_trace_packet/hookid.htm">Hook ID</a> <span class="constant">PERFINFO_LOG_TYPE_SPINLOCK</span> 
(0x0529). </p>
<h2>Availability </h2>
<p>For an NT Kernel Logger session to be sent any <span class="constant">PERFINFO_LOG_TYPE_SPINLOCK</span> 
events, the <a href="../../../inc/api/ntwmi/perfinfo_groupmask.htm">group mask</a>
<span class="constant">PERF_SPINLOCK</span> (0x20010000) must be enabled. The kernel 
can write this event in version 6.1 and higher for x64 builds but only in version 
6.2 and higher for x86 builds. </p>
<h2>Usage </h2>
<p>The <span class="constant">PERFINFO_LOG_TYPE_SPINLOCK</span> event traces the 
release of a spin lock and includes information about the lock’s acquisition. For 
this purpose, spin lock means not just the original
<a href="../../ke/spinlock/index.htm">spin lock</a>, but also the queued spin lock 
and the more recent executive spin lock. </p>
<p>Spin locks see such heavy use in the ordinary execution of Windows that tracing 
the acquisition and release of every spin lock would be wildly impractical, perhaps 
even in a debug build, but certainly in real-world use. What is supported instead 
is a statistical sampling. The default is to write a <span class="constant">PERFINFO_LOG_TYPE_SPINLOCK</span> 
event for each lock whose acquisition was contended, and in version 6.3 and higher, 
for each spin lock that was held for too long (at least a million CPU cycles), but 
only for roughly every thousandth whose acquisition was uncontended. Even these 
defaults can generate very many events. Parameters that govern this sampling can 
be queried and set in a <span class="struct"><a href="../../../inc/api/ntetw/event_trace_spinlock_information.htm">
EVENT_TRACE_SPINLOCK_INFORMATION</a></span> structure, itself passed to and from 
the kernel through the <span class="constant">SystemPerformanceTraceInformation</span> 
case of the <span class="function"><a href="../../ex/sysinfo/query.htm">NtQuerySystemInformation</a></span> 
and <span class="function"><a href="../../ex/sysinfo/set.htm">NtSetSystemInformation</a></span> 
functions. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">WMI_SPINLOCK</span> structure is not documented but 
a C-language definition is published in the NTWMI.H from the Enterprise edition 
of the Windows Driver Kit (WDK) for Windows 10 version 1511. </p>
<!--webbot bot="Include" U-Include="../_include/appxdeploymentclient.htm" TAG="BODY" startspan -->

<p>Were it not for this relatively recent and possibly unintended disclosure, much 
would anyway be known from type information in symbol files. Curiously though, type 
information for this structure has never appeared in any public symbol files for 
the kernel or for the obvious low-level user-mode DLLs. In the whole of Microsoft’s 
packages of public symbol files, at least to the original Windows 10, relevant type 
information is unknown before Windows 8 and appears in symbol files only for AppXDeploymentClient.dll, 
CertEnroll.dll (before Windows 10) and Windows.Storage.ApplicationData.dll. </p>

<!--webbot bot="Include" endspan i-checksum="57456" -->
<h2>Layout </h2>
<p>Data for the <span class="constant">PERFINFO_LOG_TYPE_SPINLOCK</span> event (as 
it exists in the trace buffers and thence the ETL file) comprises: </p>
<ul>
  <li>a <span class="struct"><a href="../../../inc/api/ntwmi/traceheaders/perfinfo_trace_header.htm">PERFINFO_TRACE_HEADER</a></span>, 
  possibly with extended data items; </li>
  <li>the <span class="struct">WMI_SPINLOCK</span>. </li>
</ul>
<h3>Trace Header </h3>
<p>In the <span class="struct">PERFINFO_TRACE_HEADER</span>, the
<span class="member">Size</span> is the total in bytes of the trace header and all 
the event data. The <span class="member">HookId</span> is <span class="constant">
PERFINFO_LOG_TYPE_SPINLOCK</span>, which identifies the event. The
<span class="member">Marker</span> in this trace header is, at its most basic, 0xC0100002 
(32-bit) or 0xC0110002 (64-bit). Additional flags may be set to indicate that extended 
data items are inserted between the trace header and the event data. Otherwise, 
the event data follows as the trace header’s <span class="member">Data</span> array.
</p>
<h3>Event Data </h3>
<p>The event data is just the one fixed-size structure. This
<span class="struct">WMI_SPINLOCK</span> is 0x30 or 0x38 bytes in 32-bit and 64-bit 
Windows, respectively. Names and types in the following are taken from type information 
in the published symbol files for AppXDeploymentClient.dll in version 6.2 and higher, 
reconciled with the C-language definition that Microsoft published for the 1511 
release of Windows 10. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="1"><col class="Definition">
    <col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">PVOID SpinLockAddress;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>
    <pre class="source">PVOID CallerAddress;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>0x10 </td>
    <td>
    <pre class="source">ULONG64 AcquireTime;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>0x18 </td>
    <td>
    <pre class="source">ULONG64 ReleaseTime;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>0x20 </td>
    <td>
    <pre class="source">ULONG WaitTimeInCycles;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x1C </td>
    <td>0x24 </td>
    <td>
    <pre class="source">ULONG SpinCount;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x20 </td>
    <td>0x28 </td>
    <td>
    <pre class="source">ULONG ThreadId;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x24 </td>
    <td>0x2C </td>
    <td>
    <pre class="source">ULONG InterruptCount;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x30 </td>
    <td>
    <pre class="source">UCHAR Irql;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x29 </td>
    <td>0x31 </td>
    <td>
    <pre class="source">UCHAR AcquireDepth;</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x2A </td>
    <td>0x32 </td>
    <td>
    <pre class="source">union {
    struct {
        UCHAR AcquireMode : 6;
        UCHAR ExecuteDpc : 1;
        UCHAR ExecuteIsr : 1;
    };
    UCHAR Flags;
};</pre>
    </td>
    <td>6.1 and higher (x64); <br>
    6.2 and higher (x86) </td>
  </tr>
  <tr>
    <td>0x2B </td>
    <td>0x33 </td>
    <td>
    <pre class="source">UCHAR Reserved [5];</pre>
    </td>
    <td>6.3 and higher </td>
  </tr>
</table>
<p>Plausibly the <span class="struct">WMI_SPINLOCK</span> structure is defined for 
32-bit Windows 7 but just isn’t used. Though the 64-bit kernel’s code for spin locks 
had been in C (or C++) from the start, i.e., for Windows Server 2003 SP1, the corresponding 
code in the 32-bit kernel is still in assembly language in Windows 7. Its evolution 
from Windows NT 3.1 had gone as far as adding hypervisor notifications and, for 
Windows 7, the maintenance of performance counters in the <span class="struct">
<a href="../../../inc/ntos/i386_x/kprcb/index.htm">KPRCB</a></span>, but there it was left. 
Not until Windows 8 does 32-bit Windows trace events for spin locks. </p>
<p>Note that collection of <span class="constant">PERFINFO_LOG_TYPE_SPINLOCK</span> 
events exposes two kernel-mode addresses to inspection from user mode: the
<span class="member">SpinLockAddress</span> and <span class="member">CallerAddress</span>.
</p>
<p>The <span class="member">CallerAddress</span> is from somewhere up the call stack 
when the lock was released. If the lock is used by a driver or other module outside 
the kernel, then the lock was released by calling either of the exported functions
<span class="function">KeReleaseSpinLock</span> and <span class="function">KeReleaseSpinLockFromDpcLevel</span>, 
and the <span class="member">CallerAddress</span> is the address to which this called 
function would return. Note that this need not be in the same routine that called 
an exported function to acquire the lock. For locks that are used internally by 
the kernel, as many are, widespread inlining has the side-effect that the
<span class="member">CallerAddress</span> can be in some sense distant, e.g., in 
a routine that called another which in turn acquired and released the lock 
possibly as only a very small part of its work. </p>
<p>The <span class="member">AcquireTime</span> and <span class="member">ReleaseTime</span> 
are time stamps from the <span class="instruction">rdtsc</span> instruction and 
thus count the same cycles as <span class="member">WaitTimeInCycles</span>. 
Three time stamps are taken: first when the lock is queried for acquisition; then 
when the lock actually has been acquired, which is the <span class="member">AcquireTime</span>; 
and finally when the lock is released, which is its <span class="member">ReleaseTime</span>. 
The <span class="member">WaitTimeInCycles</span> counts from when the lock is queried 
until it is acquired. If indeed the lock was not immediately acquired, the processor 
will have waited in a relatively tight spin loop. The <span class="member">SpinCount</span> 
tells how many additional times this loop tested whether the lock is yet available. 
The <span class="member">InterruptCount</span> counts interrupts (in the sense of 
the <span class="member">InterruptCount</span> in the processor’s
<span class="struct">KPRCB</span>) from when the lock was queried for acquisition 
until it is released. </p>
<p>The <span class="member">Irql</span> is recorded while the
<span class="struct">WMI_SPINLOCK</span> is prepared, i.e., after the lock is released 
but before any restoration to a pre-acquisition IRQL. Broadly speaking, it is whatever 
applied while the lock was held. Once upon a time, this would have meant that the
<span class="member">Irql</span> is always at or above <span class="constant">DISPATCH_LEVEL</span>.
</p>
<p>The <span class="member">AcquireDepth</span> tells how many spin locks the processor 
held at the time of release. This includes the lock that is being released, and 
therefore must be at least 1. For all known versions that can write the event, nested 
acquisition of spin locks is tracked to a depth of eight. </p>
<p>The known values for <span class="member">AcquireMode</span> are: </p>
<ul>
  <li>0 for ordinary spin lock; </li>
  <li>1 for queued spin lock; </li>
  <li>2 for shared executive spin lock; </li>
  <li>3 for exclusive executive spin lock; </li>
  <li>4 for converted (shared to exclusive) executive spin lock </li>
</ul>
<div class="Footer">
  <p class="Dates">This page was created on 24th November 2018 but was not published 
  until 31st <a href="../../../../../../../new/18/12.htm">December 2018</a>. It 
  was last modified on 4th <a href="../../../../../../../new/19/12.htm">December 
  2019</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1819.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2018-2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5285" -->
</div>

</body>

</html>
