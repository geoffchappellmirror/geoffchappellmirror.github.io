<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>PS_CREATE_INFO</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="33595" -->
<div class="Main">
  <h1>PS_CREATE_INFO </h1>
  <p>The <span class="struct">PS_CREATE_INFO</span> structure is exchanged between 
  user and kernel modes for the <span class="function">NtCreateUserProcess</span> 
  and <span class="function">ZwCreateUserProcess</span> functions, which were new 
  for Windows Vista. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">PS_CREATE_INFO</span> structure is not documented. 
  Even for an undocumented structure that is exposed through undocumented interfaces,
  <span class="struct">PS_CREATE_INFO</span> must count as obscure. Though the structure 
  is prepared by KERNEL32.DLL or KERNELBASE.DLL, depending on the Windows version, 
  and is passed through NTDLL.DLL to kernel mode, and is then interpreted by the 
  kernel, public symbol files for none of these modules have type information for 
  the <span class="struct">PS_CREATE_INFO</span> in any known Windows version.
  </p>
  <h3>Type Information </h3>
  <p>Where this type information turns up instead is in symbol files for a handful 
  of higher-level user-mode modules that ought never to see the structure. That 
  these modules are built with knowledge of the <span class="struct">PS_CREATE_INFO</span> 
  is revealed because for some of them in some versions (starting with Windows 8) 
  the symbol files that Microsoft has included in downloadable packages of public 
  symbols are in fact private symbols. Why these modules are built with knowledge 
  of the <span class="struct">PS_CREATE_INFO</span> or of anything else that’s defined 
  in the same unpublished header (<a href="../../../../source/inc/ntpsapi.htm">ntpsapi.h</a>) 
  is not revealed. Especially prominent among them is URLMON.DLL for being a key 
  component of Internet Explorer and thus of having some bearing on the success 
  of an anti-trust suit among whose allegations was that Microsoft abused its Windows 
  monpoly to help establish Internet Explorer anti-competitively. Official reviewers 
  of Microsoft’s settlement compliance apparently either did not notice or did not 
  care that Internet Explorer is built with more detailed knowledge of Windows internals 
  than Microsoft publishes even for kernel-mode programmers. </p>
  <p>Type information for the <span class="struct">PS_CREATE_INFO</span> also turns 
  up in a statically linked library, named CLFSMGMT.LIB, which Microsoft publishes 
  with the Software Development Kit (SDK). The 32-bit builds have the type information 
  starting with Windows Vista, the 64-bit not until Windows 8. For both, the disclosure 
  stops after the 1903 release of Windows 10. </p>
  <h3>C-Language Reference </h3>
  <p>The only other disclosure yet known is in the Windows Driver KIt (WDK) for 
  the original and 1511 releases of Windows 10. These have a header named ZWAPI.H 
  which presents a prototype for <span class="function">ZwCreateUserProcess</span>. 
  From inspection of binaries, everyone who cares can have known all along that 
  the function’s second argument is a pointer to an undocumented structure. The 
  disclosed prototype declares this argument’s type as a <span class="type">PPS_CREATE_INFO</span>. 
  In Microsoft’s long established convention for naming pointer types, this type 
  is consistent with <span class="struct">PS_CREATE_INFO</span> being Micorosft’s 
  name for the structure that the argument points to. No other header in the same 
  WDK even references either type, not even to define the structure as opaque. That 
  ZWAPI.H as supplied with the WDK does not compile without prior inclusion of otherwise 
  unpublished headers is a strong suggestion that its own publication was an oversight.
  </p>
  <h2>Layout </h2>
  <p>The <span class="struct">PS_CREATE_INFO</span> structure is 0x48 or 0x58 bytes 
  in 32-bit and 64-bit Windows, respectively. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">ULONG_PTR Size;</pre>
        </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">PS_CREATE_STATE State;</pre>
        </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">union {
    /*  changing members, see below  */
};</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <p>While the <span class="enum">PS_CREATE_STATE</span> enumeration is not known 
  to be used elsewhere, it is as well given here. The defined values are: </p>
  <ul>
    <li>0 as <span class="constant">PsCreateInitialState</span>; </li>
    <li>1 as <span class="constant">PsCreateFailOnFileOpen</span>; </li>
    <li>2 as <span class="constant">PsCreateFailOnSectionCreate</span>; </li>
    <li>3 as <span class="constant">PsCreateFailExeFormat</span>; </li>
    <li>4 as <span class="constant">PsCreateFailMachineMismatch</span>; </li>
    <li>5 as <span class="constant">PsCreateFailExeName</span>; </li>
    <li>6 as <span class="constant">PsCreateSuccess</span>; </li>
    <li>7 as <span class="constant">PsCreateMaximumStates</span>. </li>
  </ul>
  <p>The immediate point to the <span class="member">State</span> member is to indicate 
  whether the structure is input to or output from the <span class="function">NtCreateUserProcess</span> 
  function (or its <span class="functionprefix">Zw</span> alias). As input, it defines 
  an initial state for the created process. Output tells of the creation’s success 
  or failure. In some cases, the <span class="member">State</span> is itself enough 
  output. In most, both for input and output, there is more data to follow in the 
  anonymous union, and the <span class="member">State</span> then selects from this 
  union’s members: </p>
  <table class="Union">
    <colgroup>
      <col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
        <pre class="source">struct {
    /* see below */
} InitState;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>
        <pre class="source"> struct {
    HANDLE FileHandle;
} FailSection;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>
        <pre class="source"> struct {
    USHORT DllCharacteristics;
} ExeFormat;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>
        <pre class="source"> struct {
    HANDLE IFEOKey;
} ExeName;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>
        <pre class="source"> struct {
    /* see below */
} SuccessState;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <h3>Input </h3>
  <p>The <span class="constant">PsCreateInitialState</span> value is required in
  <span class="member">State</span> for input, i.e., when passing a
  <span class="struct">PS_CREATE_INFO</span> to <span class="function">NtCreateUserProcess</span>. 
  It selects the <span class="member">InitState</span> branch. </p>
  <h4>Init State </h4>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">union {
    ULONG <a href="initflags.htm">InitFlags</a>;
    struct {
        /* changing bit fields, follow link */
    };
};</pre>
        </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>0x14 </td>
        <td>
        <pre class="source">ACCESS_MASK AdditionalFileAccess;</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <h3>Output </h3>
  <p>Six values of <span class="member">State</span> in the <span class="struct">
  PS_CREATE_INFO</span> on output tell something of why <span class="function">NtCreateUserProcess</span> 
  failed. One tells of success. </p>
  <p>For failure, the <span class="member">State</span> may still be
  <span class="constant">PsCreateInitialState</span>. This means the process creation 
  didn’t get past parameter validation—notably not even to fail at opening the file. 
  For three of the failure states, the corresponding branch of the anonymous union 
  has information that may help the user-mode caller not just report the problem 
  but even to try recovering from it. </p>
  <h4>Fail Section </h4>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">HANDLE FileHandle;</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <h4>Exe Format </h4>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">USHORT DllCharacteristics;</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <h4>Exe Name </h4>
  <p>Failure as <span class="constant">PsCreateFailExeName</span> indicates that 
  however usable may be the executable as a file its execution is prevented by something 
  about its name, specifically about its configuration as a subkey of
  <span class="regkey">Image File Execution Options</span>. The caller is not explicitly 
  told what prevents execution but is returned a handle to the subkey: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">HANDLE IFEOKey;</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <p>There may be multiple causes as a point of design but only one is implemented. 
  The executable’s <span class="regkey">Image File Execution Options</span> subkey 
  has a <span class="regvalue">Debugger</span> value. The kernel in effect interprets 
  this value’s presence as meaning that a process with this name cannot ordinarily 
  be created. (The kernel’s error code is <span class="constant">STATUS_OBJECT_PATH_INVALID</span>.) 
  The one exception to “ordinarily” is if the <span class="member">IFEOSkipDebugger</span> 
  bit is set on input. </p>
  <p><span class="alert">MORE TO WRITE ABOUT THIS!</span> </p>
  <h4>Success State </h4>
  <p>The greatest output in the anonymous union is produced when
  <span class="member">State</span> is <span class="constant">PsCreateSuccess</span> 
  to indicate that the process has indeed been created. The caller is given information 
  that it likely will want for completing the user-mode configuration of the process 
  and would otherwise have to obtain through multiple queries: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">union {
    ULONG <a href="outputflags.htm">OutputFlags</a>;
    struct {
        /* changing bit fields, follow link */
    };
};</pre>
        </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>0x18 </td>
        <td>
        <pre class="source">HANDLE FileHandle;</pre>
        </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>0x20 </td>
        <td>
        <pre class="source">HANDLE SectionHandle;</pre>
        </td>
      </tr>
      <tr>
        <td>0x18 </td>
        <td>0x28 </td>
        <td>
        <pre class="source">ULONGLONG UserProcessParametersNative;</pre>
        </td>
      </tr>
      <tr>
        <td>0x20 </td>
        <td>0x30 </td>
        <td>
        <pre class="source">ULONG UserProcessParametersWow64;</pre>
        </td>
      </tr>
      <tr>
        <td>0x24 </td>
        <td>0x34 </td>
        <td>
        <pre class="source">ULONG CurrentParameterFlags;</pre>
        </td>
      </tr>
      <tr>
        <td>0x28 </td>
        <td>0x38 </td>
        <td>
        <pre class="source">ULONGLONG PebAddressNative;</pre>
        </td>
      </tr>
      <tr>
        <td>0x30 </td>
        <td>0x40 </td>
        <td>
        <pre class="source">ULONG PebAddressWow64;</pre>
        </td>
      </tr>
      <tr>
        <td>0x38 </td>
        <td>0x48 </td>
        <td>
        <pre class="source">ULONGLONG ManifestAddress;</pre>
        </td>
      </tr>
      <tr>
        <td>0x40 </td>
        <td>0x50 </td>
        <td>
        <pre class="source">ULONG ManifestSize;</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 23rd
    <a href="../../../../../../../../new/19/02.htm">February 2019</a> and was last 
    modified on 20th February 2023. </p>
    <!--webbot bot="Include" U-Include="../../../../../_include/c1923.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019-2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="14650" -->
  </div>
</div>

</body>

</html>
