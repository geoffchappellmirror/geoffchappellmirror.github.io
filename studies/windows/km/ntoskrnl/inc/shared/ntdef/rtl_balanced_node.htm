<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>RTL_BALANCED_NODE</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>RTL_BALANCED_NODE </h1>
  <p>The <span class="struct">RTL_BALANCED_NODE</span> structure is designed to 
  be nested within another structure to allow that this other structure can be the 
  node of an AVL or Red-Black tree. </p>
  <h2>Availability </h2>
  <p>The <span class="struct">RTL_BALANCED_NODE</span> structure looks to have been 
  introduced for version 6.2 in both the kernel and NTDLL.DLL. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">RTL_BALANCED_NODE</span> structure is not documented. 
  It is conspicuous for being defined in NTDEF.H even though it is not referenced 
  from any function declaration or structure definition in any header from either 
  the Windows Driver Kit (WDK) or Software Development Kit (SDK). </p>
  <p>Contrast with the <span class="struct">LIST_ENTRY</span>, which similarly provides 
  for structures as nodes in a double-linked list. It too is defined in NTDEF.H. 
  It, though, is a staple of kernel-mode programming. Macros and inline routines 
  for using the structure, e.g., <span class="inline routine">InsertTailList</span> 
  and <span class="inline routine">RemoveEntryList</span>, have long been defined 
  in such standard headers as NTDDK.H and WDM.H, and have long been used extensively. 
  It would be a safe proposition that few real-world kernel-mode drivers do not 
  use the <span class="struct">LIST_ENTRY</span> and the various supporting macros 
  and inline routines. Support for the <span class="struct">LIST_ENTRY</span> in 
  user-mode programming is thinner, being left to a smattering of headers for specialised 
  purposes. For the <span class="struct">RTL_BALANCED_NODE</span>, no use at all 
  is yet supported for either kernel-mode or user-mode programming: though Microsoft 
  has published a C-language definition of the structure, it might as well not have.
  </p>
  <p>Private symbol files that Microsoft has distributed in packages of public symbols 
  show that the <span class="struct">RTL_BALANCED_NODE</span> is also known, through
  <span class="keyword">typedef</span>, as <span class="struct">RTL_AVL_NODE</span> 
  and <span class="struct">RTL_RB_NODE</span>, presumably for neatness when the 
  node is intended specifically for an AVL or RB tree. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">RTL_BALANCED_NODE</span> is 0x0C and 0x18 bytes, respectively, 
  in 32-bit and 64-bit Windows. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">union {
    RTL_BALANCED_NODE *Children [2];
    struct {
        RTL_BALANCED_NODE *Left;
        RTL_BALANCED_NODE *Right;
    };
};</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">union {
    UCHAR Red : 1;
    UCHAR Balance : 2;
    ULONG_PTR ParentValue;
};</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>The point to the <span class="struct">RTL_BALANCED_NODE</span> is that it models 
  a node in a tree. The nodes are ordered. The tree provides for finding nodes with 
  the efficiency of a binary search. Each node can be connected to at most three 
  other nodes: a left child, a right child and a parent. Each node but one, which 
  is distinguished as the tree’s root, has at least a parent. A node’s left and 
  right nodes are collectively the node’s children. They and their children, recursively, 
  are collectively the node’s descendants. The tree is ordered such that for every 
  node in the tree, all descendents of a left or right child are also to the left 
  or right, respectively, of the node. </p>
  <p>The <span class="member">Red</span> bit applies if the node is in a Red Black 
  tree, but <span class="member">Balance</span> in an AVL tree. Either way, nodes 
  are assumed to have (at least) 4-byte alignment. NTDEF.H defines
  <span class="macro">RTL_BALANCED_NODE_RESERVED_PARENT_MASK</span> as 3 and uses 
  it for a macro, <span class="macro">RTL_BALANCED_NODE_GET_PARENT_POINTER</span>, 
  to extract the address of the parent node from <span class="member">ParentValue</span>.
  </p>
  <h2>Exported Support </h2>
  <p>The kernel and NTDLL each export several functions for working with nodes in 
  either sort of tree. For an AVL tree: </p>
  <ul>
    <li><span class="function">RtlAvlInsertNodeEx</span> (6.2 and higher from NTDLL, 
    6.3 and higher from kernel); </li>
    <li><span class="function">RtlAvlRemoveNode</span> (6.2 and higher from NTDLL, 
    6.3 and higher from kernel). </li>
  </ul>
  <p>For a Red Black tree: </p>
  <ul>
    <li><span class="function">
    <a href="../../../api/rtl/rbtree/rbinsertnodeex.htm">RtlRbInsertNodeEx</a></span> 
    (6.2 and higher); </li>
    <li><span class="function">RtlRbRemoveNode</span> (6.2 and higher); </li>
    <li><span class="function">RtlRbReplaceNode</span> (10.0 and higher, kernel 
    only). </li>
  </ul>
  <h2>Inline Support </h2>
  <p>Microsoft’s programmers, of course, have inline routines for the
  <span class="struct">RTL_BALANCED_NODE</span> much as for the
  <span class="struct">LIST_ENTRY</span>. This is plain in the binary code from 
  the recurrence of moderately lengthy sequences with stitching that suggests compilation 
  of a call rather than of repeated source code. Some details of this support that 
  Microsoft keeps to itself also show in public symbol files, and so Microsoft’s 
  names and even types are known for some of the inline routines that work with 
  the <span class="struct">RTL_BALANCED_NODE</span>: </p>
  <ul>
    <li><span class="inline routine">RtlTreeDelete</span>; </li>
    <li><span class="inline routine">RtlTreeFindFirstMatchingNode</span>; </li>
    <li><span class="inline routine">RtlTreeFindInsertLocation</span>; </li>
    <li><span class="inline routine">RtlTreeFindInsertLocationOrExistingNode</span>;
    </li>
    <li><span class="inline routine">RtlTreeFindNode</span>; </li>
    <li><span class="inline routine">RtlTreeGetNodePredecessor</span>; </li>
    <li><span class="inline routine">RtlTreeGetNodeSuccessor</span>. </li>
  </ul>
  <p>Indeed, this list is just for the original release of Windows 10. Later releases 
  use these and more, with the strong suggestion that this Run-Time Library support 
  for balanced trees has not only been in active use at Microsoft for nearly a decade 
  but is being developed further or is finding more extensive use (or both). </p>
  <p>Most of these inline routines take among their arguments the address of a callback 
  routine. The types are known from public symbol files. Microsoft’s
  <span class="keyword">typedef</span> names are known from private symbol files 
  that Microsoft has distributed in packages of public symbols. There are three:
  </p>
  <pre class="source">typedef LONG RTL_TREE_COMPARE_FUNCTION (PVOID, RTL_BALANCED_NODE *);</pre>
  <pre class="source">typedef VOID RTL_TREE_DELETE_FUNCTION (RTL_BALANCED_NODE *, PVOID);</pre>
  <pre class="source">typedef LONG RTL_TREE_WALK_FUNCTION (RTL_BALANCED_NODE *, PVOID);</pre>
  <p>For each, there is also the usual pointer type that has the P prefix. </p>
  <h3>Insertion </h3>
  <p>Not that the exported functions <span class="function">RtlAvlInsertNodeEx</span> 
  and <span class="function">RtlRbInsertNodeEx</span> are documented, but programmers 
  who would use them for inserting a node into a tree must either know Microsoft’s 
  inline routines too or write their own. The exported functions know the tree is 
  ordered, of course, and they know to preserve the ordering, but they know nothing 
  of what governs this ordering. The caller orders the nodes by choosing where to 
  insert them. By inserting to the right of an existing node, the caller expresses 
  that the existing node had no right child and will be the right-most node to the 
  left of the new node. If this node had a right child, the caller would instead 
  insert to the left of the existing node that is the left-most node to the right 
  of the new node. This scanning, aided by a callback routine for comparing nodes, 
  is easily coded compactly enough for inlining. The colouring and rebalancing that 
  may have to be done to the tree when inserting a node is not. Inserting a node 
  is thus done in two steps: </p>
  <ol>
    <li>an inline routine, typically <span class="inline routine">RtlTreeFindInsertLocation</span>, 
    scans the tree for the existing node to insert the new node to the left or right 
    of; </li>
    <li>an exported function, meaning either <span class="function">RtlAvlInsertNodeEx</span> 
    or <span class="function">RtlRbInsertNodeEx</span>, depending on the type of 
    tree, does the insertion. </li>
  </ol>
  <p>As noted above, symbol files tell the names and types of some inline routines. 
  For each, the name’s suggestion of functionality and the type’s detailing of parameters 
  and return value can then be matched against the binary to find with high confidence 
  where the routine has been inlined. For instance, <span class="inline routine">
  RtlTreeFindInsertLocation</span> is coded very much like </p>
  <pre class="source">FORCEINLINE
PRTL_BALANCED_NODE 
RtlTreeFindInsertLocation (
    PRTL_BALANCED_NODE Root,
    PVOID Context,
    PRTL_TREE_COMPARE_FUNCTION Callback,
    BOOLEAN *Right)
{
    PRTL_BALANCED_NODE node, next;

    *Right = FALSE;
    for (node = Root; node != NULL; node = next) {
        LONG cmp = Callback (Context, node);
        if (cmp &lt; 0) {
            next = node -&gt; Left;
            if (next == NULL) {
                *Right = FALSE;
                break;
            }
        }
        else {
            next = node -&gt; Right;
            if (next == NULL) {
                *Right = TRUE;
                break;
            }
        }
    }
    return node;
}</pre>
  <p>The preceding fragment is reproduced to demonstrate a point of critical analysis. 
  It is sometimes said that the names of inlined routines do not survive in public 
  symbol files and their appearance in other code, at least in quantity, suggests 
  access to source code. Here, however, is an example of an inlined routine being 
  recoverable, with Microsoft’s name for the routine and types for the arguments 
  and return value, without needing access to source code. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 15th
    <a href="../../../../../../../new/20/05.htm">May 2020</a> and was last modified 
    on 27th January 2021 (except for very slight editing on 5th August 2022).
    </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c2022.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4221" -->
  </div>
</div>

</body>

</html>
