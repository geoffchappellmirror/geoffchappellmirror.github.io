<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>ClientExtractIcon</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/shell.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="30135" endspan -->
<!--webbot bot="Include" U-Include="../../_include/preview.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" i-checksum="8381" endspan -->
<h1>ClientExtractIcon </h1>
<p>The <span class="class">ClientExtractIon</span> class is one of many that SHELL32 
exposes through its exported <span class="function">DllGetClass</span> function. 
Instances can therefore be created using such well-documented COM functions as
<span class="function">CoCreateInstance</span>, by anyone who knows the CLSID:
</p>
<table>
  <tr>
    <td><span class="constant">CLSID_ClientExtractIcon</span> </td>
    <td><span class="iid">{25585DC7-4DA0-438D-AD04-E42C8D2D64B9}</span> </td>
  </tr>
</table>
<p>The class implements the following interfaces: </p>
<ul>
  <li><span class="interface">IContextMenu</span> </li>
  <li><span class="interface">IExtractIconA</span> </li>
  <li><span class="interface">IExtractIconW</span> </li>
  <li><span class="interface">IPersistPropertyBag</span> </li>
  <li><span class="interface">IServiceProvider</span> </li>
  <li><span class="interface">IShellExtInit</span> </li>
  <li><span class="interface">IShellFolder</span> </li>
</ul>
<p>which are all documented. The <span class="interface">IShellFolder</span> interface 
is implemented trivially: all its methods fail, returning <span class="constant">
E_NOTIMPL</span>. </p>
<h2>Instance Class </h2>
<p>The <span class="interface">IPersistPropertyBag</span> interface exposes the
<span class="class">ClientExtractIcon</span> class to indirect creation through 
an <a href="../../../ie/shdocvw/classes/instance.htm">instance class</a>. Five properties 
are supported, which are each obtained as values in the one registry key: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_CLASSES_ROOT\CLSID\{<span class="placeholder">InstanceClassClsid</span>}\Instance\InitPropertyBag</span>
    </td>
  </tr>
  <tr>
    <td>Values: </td>
    <td><span class="regvalue">Element</span> <br>
    <span class="regvalue">InitString</span> <br>
    <span class="regvalue">opentext</span> <br>
    <span class="regvalue">properties</span> <br>
    <span class="regvalue">propertiestext</span> </td>
  </tr>
</table>
<h3>Association Element </h3>
<p>The <span class="regvalue">Element</span> value provides the CLSID of an
<a href="../api/assocelem/index.htm">association element</a> which the
<span class="class">ClientExtractIcon</span> object is to create and for which the
<span class="class">ClientExtractIcon</span> object is to act as a service provider 
when given <span class="constant">IID_IAssociationElement</span> as the service 
ID. The CLSID may be given in the standard string representation or as 16 bytes 
of binary data. </p>
<p>Although the facility is provided to specify all types of association element, 
the intention for ordinary usage may be that the CLSID will be
<span class="clsid">{3C81E7FA-1F3B-464A-A350-114A25BEB2A2}</span> so that the association 
element is specifically an <span class="class">
<a href="../api/assocelem/client.htm">AssocClientElement</a></span>. If nothing 
else, this is perhaps the usage that gives the <span class="class">ClientExtractIcon</span> 
class its name. </p>
<p>All association elements implement an <span class="interface">
<a href="../interfaces/ipersiststring2.htm">IPersistString2</a></span> interface 
through which to receive an initialisation string. Indeed, an association element 
is not initialised until it has been given its initialisation string. This string 
is specified as the <span class="regvalue">InitString</span> property. The exact 
interpretation of the initialisation string varies with the type of association 
element, but the general idea is that it determines a registry key from which the 
association element draws its settings. Note that this key can be far distant from 
the instance class’s own key. </p>
<h3 class="draft">Icon Location </h3>
<p class="draft">The icon location for a <span class="class">ClientExtractIcon</span> 
object created as an instance class is one such setting. Given that the association 
element supports querying for the icon location, the answer comes from the
<span class="regkey">DefaultIcon</span> subkey in the association element’s key, 
wherever that may be: </p>
<table class="draft">
  <tr>
    <td>Key: </td>
    <td><span class="regkey"><span class="placeholder">element</span>\DefaultIcon</span>
    </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td>default </td>
  </tr>
</table>
<p class="draft">The string data is resolved as an icon-location string, in the 
format interpreted by the SHLWAPI function <span class="function">
<a href="../../shlwapi/api/path/parseiconlocation.htm">PathParseIconLocation</a></span>. 
Of course, for the <span class="class">ClientExtractIcon</span> object even to be 
asked the icon location, the instance class’s own key must typically have a
<span class="regkey">shellex\IconHandler</span> subkey whose default value is the 
instance class’s own CLSID. </p>
<h3 class="draft">Context Menu </h3>
<p class="draft">The other supported properties are <span class="regvalue">opentext</span>,
<span class="regvalue">properties</span> and <span class="regvalue">propertiestext</span>. 
These support a context menu. Detailed interpretation of string data for these also 
varies with the type of association element. </p>
<h2>Availability </h2>
<p>The <span class="class">ClientExtractIcon</span> class is implemented in SHELL32 
version 6.00 and higher. </p>
<!--webbot bot="Include" U-Include="_include/undoc600.htm" TAG="BODY" startspan -->

<p>Though this class dates from 2001, it was still not documented by Microsoft as 
late as the January 2007 edition of the Windows Vista Software Development Kit (SDK). 
</p>

<!--webbot bot="Include" i-checksum="1228" endspan -->
<div class="Footer">
  <p class="Dates">This page was created on 2nd July 2009 and was last modified 
  on 20th August 2009. </p>
  <!--webbot bot="Include" U-Include="../../_include/c09.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="53291" endspan -->
</div>

</body>

</html>
