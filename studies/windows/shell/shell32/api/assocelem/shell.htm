<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>AssocShellElement</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="55064" endspan -->
<!--webbot bot="Include" U-Include="../../../_include/preview.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" i-checksum="8381" endspan -->
<h1>AssocShellElement </h1>
<p>The shell element is the most basic type of <a href="index.htm">assocation element</a>. 
All others inherit from it. A basic shell element is created by passing the corresponding 
CLSID to the <span class="function"><a href="createelement.htm">AssocCreateElement</a></span> 
function: </p>
<table>
  <tr>
    <td><span class="constant">CLSID_AssocShellElement</span> </td>
    <td><span class="clsid">{C461837F-EA59-494A-B7C6-CD040E37185E}</span> </td>
  </tr>
</table>
<p>As with all assocation elements, a shell element implements the
<span class="interface">
<a href="../../../shlwapi/interfaces/iassociationelement.htm">IAssociationElement</a></span>,
<span class="interface"><a href="../../interfaces/iobjectwithquerysource.htm">IObjectWithQuerySource</a></span> 
and <span class="interface"><a href="../../interfaces/ipersiststring2.htm">IPersistString2</a></span> 
interfaces. A newly created element is not initialised until a query source has 
been specified, either directly through the <span class="method">SetSource</span> 
method or indirectly through the <span class="method">SetString</span> method.
</p>
<h2>Initialisation String </h2>
<p>If the query source is set indirectly, the initialisation string names a registry 
path relative to <span class="regkey">HKEY_CLASSES_ROOT</span>, so that the query 
source is built on the following registry key: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_CLASSES_ROOT\<span class="placeholder">InitString</span></span>
    </td>
  </tr>
</table>
<p>in which <span class="placeholder">InitString</span> is whatever is passed to 
the <span class="method">SetString</span> method. </p>
<p>Most association elements that inherit from the shell element build their query 
source from some other registry key, typically but not necessarily depending on 
the initialisation string. For all shell elements, if the key for the query source 
cannot be opened (for read access), then <span class="method">SetString</span> fails, 
the element remains uninitialised, and all the <span class="interface">IAssociationElement</span> 
methods will fail. </p>
<h2>Verbs </h2>
<p>The query source for a shell element is expected to allow for shell commands. 
Various queries through the <span class="interface">IAssociationElement</span> methods 
allow for qualification, such that the method’s second argument is a verb, which 
selects a subkey of the query source: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">shell\<span class="placeholder">verb</span></span>
    </td>
  </tr>
</table>
<h3>Default Verb </h3>
<p>To provide no <span class="placeholder">verb</span> in the query is to imply 
use of a default. </p>
<p>The element’s own default verb is the string data from the default value of the
<span class="regkey">shell</span> subkey. If there is no <span class="regkey">shell\<span class="placeholder">verb</span></span> 
subkey, the default verb is the string data up to but not including the first space 
or comma. If there is no <span class="regkey">shell\<span class="placeholder">verb</span></span> 
subkey for this default verb, then the element is understood as not supporting a 
default verb such that all queries with no verb must fail. </p>
<p>An element that does not specify its own default verb gets “open” as its default. 
If there is no <span class="regkey">shell\open</span> subkey, then the element is 
in general understood as not supporting a default verb such that all queries with 
no verb must fail. The exception is only for shell elements that are also ProgID 
elements. These have one further fallback, to whatever is the first
<span class="regkey">shell\<span class="placeholder">verb</span></span> subkey.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 7th July 2009 and was last modified 
  on 24th July 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c09.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009. Geoff Chappell. All rights reserved.
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="50766" endspan -->
</div>

</body>

</html>
