<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>WND</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="54033" -->
<h1>WND </h1>
<p>The <span class="struct">WND</span> (formally <span class="struct">tagWND</span>) 
is the primary representation of a window. It is in some ways a very important structure, 
certainly to access quickly, and especially for USER32 to read directly in user 
mode. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">WND</span> is not documented. Though symbol files for 
WIN32K.SYS in Windows 8 and higher name the <span class="struct">WND</span> in the 
C++ decorations of internal routines, type information for the structure is present 
in symbol files for Windows 7 only—not before and not since. </p>
<p>That said, many of Microsoft’s names for both the <span class="struct">WND</span> 
and its members were long known in public from the plain-text output of meta-commands 
that are implemented in debugger extensions that Microsoft supplied with its debuggers 
in various kits for both kernel-mode and user-mode programming. See, for instance, 
USEREXTS.DLL from as far back as the Device Driver Kit (DDK) for Windows NT 3.51. 
Though the <span class="struct">WND</span> structure is not formally documented, 
Microsoft certainly has understood that knowledge of it may help programmers in 
the depths of debugging what they’re doing with Windows! </p>
<h2>Variability </h2>
<p>Perhaps not surprisingly, given its need to be accessible from both kernel-mode 
and user-mode components, the <span class="struct">WND</span> does not vary nearly 
as much as do other undocumented structures. Almost all of the members that are 
the most useful to know in practice, e.g., while debugging, have been stable since 
version 5.1. No member has shifted position since version 6.0. Additions since version 
6.2 have all been made by appending to the structure. The following changes of size 
are known: </p>
<table class="Sizes">
  <colgroup>
    <col class="Version"><col class="Size" span="2">
  </colgroup>
  <tr>
    <th>Version </th>
    <th>Size (x86) </th>
    <th>Size (x64) </th>
  </tr>
  <tr>
    <td>3.10 </td>
    <td>0x9C </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>3.51 </td>
    <td>0xA8 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>4.0 </td>
    <td>0xB0 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.0 </td>
    <td>0x98 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.1 to 5.2 </td>
    <td>0xA0 </td>
    <td>0x0108 </td>
  </tr>
  <tr>
    <td>6.0 to 6.1 </td>
    <td>0xB0 </td>
    <td>0x0128 </td>
  </tr>
  <tr>
    <td>6.2 </td>
    <td>0xC8 </td>
    <td>0x0150 </td>
  </tr>
  <tr>
    <td>6.3 </td>
    <td>0xD8 </td>
    <td>0x0170 </td>
  </tr>
  <tr>
    <td>10.0 </td>
    <td>0xE0 </td>
    <td>0x0178 </td>
  </tr>
</table>
<h2>Layout </h2>
<p>It is well known that the <span class="struct">WND</span> is not the whole of 
its size. Each <span class="struct">WND</span> is followed in its allocation by 
a number of “extra” bytes that is specified as <span class="member">cbWndExtra</span> 
in the <span class="struct">WNDCLASS</span> or <span class="struct">WNDCLASSEX</span> 
when registering the window class that the window is created from. &nbsp;</p>
<table>
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td rowspan="3">0x00 </td>
    <td rowspan="3">0x00 </td>
    <td>
    <pre class="source"><a href="../head.htm">HEAD</a> head;</pre>
    </td>
    <td>3.10 only </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source"><a href="../throbjhead.htm">THROBJHEAD</a> head;</pre>
    </td>
    <td>3.51 to 4.0 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source"><a href="../thrdeskhead.htm">THRDESKHEAD</a> head;</pre>
    </td>
    <td>5.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x0C (3.10); <br>
    0x10 (3.51) </td>
    <td>&nbsp;</td>
    <td>unknown heap handle </td>
    <td>3.10 to 3.51 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x14 </td>
    <td>0x28 </td>
    <td>
    <pre class="source">WW;</pre>
    </td>
    <td>5.0 and higher </td>
    <td>previously at 0x90 </td>
  </tr>
  <tr>
    <td>0x10 (3.10); <br>
    0x14 (3.51 to 4.0); <br>
    0x2C </td>
    <td>0x48 </td>
    <td>
    <pre class="source">WND *spwndNext;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x30 </td>
    <td>0x50 </td>
    <td>
    <pre class="source">WND *spwndPrev;</pre>
    </td>
    <td>5.1 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x14 (3.10); <br>
    0x18 (3.51 to 4.0); <br>
    0x30 (5.0); <br>
    0x34 </td>
    <td>0x58 </td>
    <td>
    <pre class="source">WND *spwndParent;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x18 (3.10); <br>
    0x1C (3.51 to 4.0); <br>
    0x34 (5.0); <br>
    0x38 </td>
    <td>0x60 </td>
    <td>
    <pre class="source">WND *spwndChild;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x1C (3.10); <br>
    0x20 (3.51 to 4.0); <br>
    0x38 (5.0); <br>
    0x3C </td>
    <td>0x68 </td>
    <td>
    <pre class="source">WND *spwndOwner;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x20 (3.10) </td>
    <td>&nbsp;</td>
    <td>unaccounted </td>
    <td>3.10 only </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x24 (3.10 to 3.51) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">DESKTOP *spdeskParent;</pre>
    </td>
    <td>3.10 to 3.51 </td>
    <td>next as <span class="member">rpdesk</span> in <span class="member">head</span>
    </td>
  </tr>
  <tr>
    <td>0x28 (3.51); <br>
    0x24 (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">WND *pwo;</pre>
    </td>
    <td>3.51 to 4.0 </td>
    <td>next as SysWNDO property </td>
  </tr>
  <tr>
    <td>0x28 (3.10); <br>
    0x2C (3.51); <br>
    0x28 (4.0); <br>
    0x3C (5.0); <br>
    0x40 </td>
    <td>0x70 </td>
    <td>
    <pre class="source">RECT rcWindow;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x38 (3.10); <br>
    0x3C (3.51); <br>
    0x38 (4.0); <br>
    0x4C (5.0); <br>
    0x50 </td>
    <td>0x80 </td>
    <td>
    <pre class="source">RECT rcClient;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x48 (3.10); <br>
    0x4C (3.51); <br>
    0x48 (4.0); <br>
    0x5C (5.0); <br>
    0x60 </td>
    <td>0x90 </td>
    <td>
    <pre class="source">WNDPROC lpfnWndProc;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x4C (3.10); <br>
    0x50 (3.51); <br>
    0x4C (4.0); <br>
    0x60 (5.0); <br>
    0x64 </td>
    <td>0x98 </td>
    <td>
    <pre class="source"><a href="../cls.htm">CLS</a> *pcls;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x54 (3.51); <br>
    0x50 (4.0); </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">INT cbwndExtra;</pre>
    </td>
    <td>3.51 to 4.0 </td>
    <td>next at 0x88 </td>
  </tr>
  <tr>
    <td>0x50 (3.10); <br>
    0x58 (3.51); <br>
    0x54 (4.0); <br>
    0x64 (5.0); <br>
    0x68 </td>
    <td>0xA0 </td>
    <td>
    <pre class="source">HRGN hrgnUpdate;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x54 (3.10); <br>
    0x5C (3.51); <br>
    0x58 (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">WND *spwndLastActive;</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>next at 0x8C </td>
  </tr>
  <tr>
    <td>0x58 (3.10); <br>
    0x60 (3.51); <br>
    0x5C (4.0); <br>
    0x68 (5.0); <br>
    0x6C </td>
    <td>0xA8 </td>
    <td>
    <pre class="source">PROPLIST *ppropList;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x5C (3.10); <br>
    0x64 (3.51); <br>
    0x60 (4.0); <br>
    0x6C (5.0); <br>
    0x70 </td>
    <td>0xB0 </td>
    <td>
    <pre class="source"><a href="../sbinfo.htm">SBINFO</a> *pSBInfo;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x60 (3.10); <br>
    0x68 (3.51); <br>
    0x64 (4.0); <br>
    0x70 (5.0); <br>
    0x74 </td>
    <td>0xB8 </td>
    <td>
    <pre class="source">MENU *spmenuSys;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x64 (3.10); <br>
    0x6C (3.51); <br>
    0x68 (4.0); <br>
    0x74 (5.0); <br>
    0x78 </td>
    <td>0xC0 </td>
    <td>
    <pre class="source">MENU *spmenu;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x78 (5.0); <br>
    0x7C </td>
    <td>0xC8 (6.1) </td>
    <td>
    <pre class="source">HRGN hrgnClip;</pre>
    </td>
    <td>5.0 and higher </td>
    <td>previously at 0x88 </td>
  </tr>
  <tr>
    <td>0x80 </td>
    <td>0xD0 (6.1) </td>
    <td>
    <pre class="source">HRGN hrgnNewFrame;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td rowspan="2">0x68 (3.10); <br>
    0x70 (3.51); <br>
    0x6C (4.0); <br>
    0x7C (5.0); <br>
    0x80 (5.1 to 5.2); <br>
    0x84 </td>
    <td rowspan="2">0xD8 (6.1) </td>
    <td>unknown <span class="type">PWSTR</span> </td>
    <td>3.10 to 3.51 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">LARGE_UNICODE_STRING strName;</pre>
    </td>
    <td>4.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x6C (3.10); <br>
    0x74 (3.51); <br>
    0x78 (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">CHAR bFullScreen;</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>next as <span class="member">FullScreenMode</span> in
    <span class="member">state2</span> </td>
  </tr>
  <tr>
    <td>0x6D (3.10); <br>
    0x75 (3.51); <br>
    0x79 (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">CHAR cDC;</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x6E (3.10); <br>
    0x76 (3.51); <br>
    0x7A (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">USHORT fnid;</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>next at 0x16 in <span class="struct">WW</span> </td>
  </tr>
  <tr>
    <td>0x70 (3.10); <br>
    0x78 (3.51); <br>
    0x7C (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">DWORD dwExpWinVer;</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x74 (3.10); <br>
    0x7C (3.51); <br>
    0x80 (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">DWORD dwUserData;</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>next at 0x94 </td>
  </tr>
  <tr>
    <td>0x78 (3.10); <br>
    0x80 (3.51); <br>
    0x84 (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">HDC hdcOwn;</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x84 (3.51); <br>
    0x88 (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">HRGN hrgnClip;</pre>
    </td>
    <td>3.51 to 4.0 </td>
    <td>next at 0x78 </td>
  </tr>
  <tr>
    <td>0x8C (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">INT iHungRedraw;</pre>
    </td>
    <td>4.0 only </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x7C (3.10); <br>
    0x88 (3.51); <br>
    0x90 (4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">WW;</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>next at 0x14; <br>
    last member in 3.10 to 4.0 </td>
  </tr>
  <tr>
    <td>0x88 (5.0); <br>
    0x8C (5.1 to 5.2); <br>
    0x90 </td>
    <td>0xE0 (5.2); <br>
    0xE8 </td>
    <td>
    <pre class="source">INT cbwndExtra;</pre>
    </td>
    <td>5.0 and higher </td>
    <td>previously at 0x50 </td>
  </tr>
  <tr>
    <td>0x8C (5.0); <br>
    0x90 (5.1 to 5.2); <br>
    0x94 </td>
    <td>0xE8 (5.2); <br>
    0xF0 </td>
    <td>
    <pre class="source">WND *spwndLastActive;</pre>
    </td>
    <td>5.0 and higher </td>
    <td>previously at 0x58 </td>
  </tr>
  <tr>
    <td>0x90 (5.0); <br>
    0x94 (5.1 to 5.2); <br>
    0x98 </td>
    <td>0xF0 (5.2); <br>
    0xF8 </td>
    <td>
    <pre class="source">HIMC hImc;</pre>
    </td>
    <td>5.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x94 (5.0); <br>
    0x98 (5.1 to 5.2); <br>
    0x9C </td>
    <td>0xF8 (5.2); <br>
    0x0100 </td>
    <td>
    <pre class="source">DWORD dwUserData;</pre>
    </td>
    <td>5.0 and higher </td>
    <td>previously at 0x80; <br>
    last member in 5.0 </td>
  </tr>
  <tr>
    <td>0x9C (5.1 to 5.2); <br>
    0xA0 </td>
    <td>0x0100 (5.2); <br>
    0x0108 </td>
    <td>
    <pre class="source">ACTIVATION_CONTEXT *pActCtx;</pre>
    </td>
    <td>5.1 and higher </td>
    <td>last member in 5.1 to 5.2 </td>
  </tr>
  <tr>
    <td>0xA4 </td>
    <td>0x0110 </td>
    <td>
    <pre class="source">D3DMATRIX *pTransform;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xA8 </td>
    <td>0x0118 </td>
    <td>
    <pre class="source">WND *spwndClipboardListenerNext;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xAC </td>
    <td>0x0120 </td>
    <td>
    <pre class="source">union {
    ULONG <a href="exstyle2.htm">ExStyle2</a>;
    /* bit fields, follow link */
};</pre>
    </td>
    <td>6.0 and higher </td>
    <td>last member in 6.0 to 6.1 </td>
  </tr>
</table>
<p>Where its <span class="command">!dw</span> command describes what symbol files 
later name as <span class="member">pSBInfo</span>, the USEREXTS debugger extension 
for Windows NT 3.51 uses the name <span class="member">rgwScroll</span>, but what’s 
pointed to is what’s later known as an <span class="struct">SBINFO</span> even if 
it and its members once had other names. </p>
<p>The <span class="member">spmenu</span> member does a double duty that is not 
at all suggested by its name but is no surprise from the documented interpretation 
of the <span class="function">CreateWindow</span> function’s
<span class="argument">hMenu</span> argument. For a child window,
<span class="member">spmenu</span> is not a pointer to a <span class="struct">MENU</span> 
but is instead the window’s ID such as returned by the <span class="function">GetWindowLong</span> 
function when given the index <span class="constant">GWL_ID</span> (-12). </p>
<p>Whatever may have been intended by its Hungarian prefix, the
<span class="member">bFullScreen</span> member is not a boolean even in version 
3.10. As the <span class="member">FullScreenMode</span> bit field in union with
<span class="member">state2</span> for version 5.0 and higher, it is 3 bits wide.
</p>
<h3>Appended Since Windows 7 </h3>
<p>Microsoft’s names for members that have been added to the
<span class="struct">WND</span> since Windows 7 may never be known. On the plus 
side, if only for neatness of presentation, new members have been added simply by 
appending.&nbsp;</p>
<table>
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0xB0 </td>
    <td>0x0128 </td>
    <td>unaccounted </td>
    <td>6.2 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xB4 </td>
    <td>0x0130 </td>
    <td>unknown dword </td>
    <td>6.2 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xB8 </td>
    <td>0x0134 </td>
    <td>unknown dword (version number) </td>
    <td>6.2 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xBC </td>
    <td>0x0138 </td>
    <td>unknown <span class="struct">THREADINFO</span> pointer </td>
    <td>6.2 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xC0 </td>
    <td>0x0140 </td>
    <td>unknown dword (bit fields) </td>
    <td>6.2 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xC4 </td>
    <td>0x0148 </td>
    <td>unknown pointer </td>
    <td>6.2 and higher </td>
    <td>last member in 6.2 </td>
  </tr>
  <tr>
    <td>0xC8 </td>
    <td>0x0150 </td>
    <td>unknown <span class="struct">INPUTTRANSFORMLIST</span> pointer </td>
    <td>6.3 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xCC </td>
    <td>0x0158 </td>
    <td>unknown dword </td>
    <td>6.3 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xD0 </td>
    <td>0x0160 </td>
    <td>unknown <span class="type">HMONITOR</span> </td>
    <td>6.3 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xD4 </td>
    <td>0x0168 </td>
    <td>unknown word </td>
    <td>6.3 and higher </td>
    <td>last member in 6.3 </td>
  </tr>
  <tr>
    <td>0xD8 </td>
    <td>0x016C </td>
    <td>unknown dword </td>
    <td>10.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0xDC </td>
    <td>0x0170 </td>
    <td>unknown dword (bit fields) </td>
    <td>10.0 and higher </td>
    <td>last member in 10.0 </td>
  </tr>
</table>
<p>The pointer at offsets 0xC4 and 0x0148 is accessible through the
<span class="function">GetWindowLongPtr</span> and <span class="function">SetWindowLongPtr</span> 
functions, using -2 as the index. </p>
<p>The word at offsets 0xD4 and 0x0168 is the window’s DPI scaling, such as posted 
in both the low and high 16 bits of the <span class="argument">wParam</span> for 
a <span class="constant">WM_DPICHANGED</span> (0x02E0) message. </p>
<h2>WW </h2>
<p>While the <span class="struct">WW</span> is thought to be nested in no other 
structure, it may as well be presented here. It is nowadays 0x18 or 0x20 bytes in 
32-bit and 64-bit Windows, respectively, but is 0x20 bytes before version 5.0.
</p>
<p>That said, even if the <span class="struct">WW</span> never exists except in 
a <span class="struct">WND</span>, or when copied from one, it evidently is intended 
to be visible in its own right. In all Windows versions, the address of the nested
<span class="struct">WW</span> is returned by the <span class="function">GetWindowLong</span> 
function when given the index -1 (which is conspicuously not among the documented 
inputs). That the structure is named <span class="struct">WW</span> and does not 
originally begin with the bit fields is obscure. The name seems to be public only 
in the output of the <span class="command">!dso</span> debugger commands as implemented 
by the USEREXTS and USERKDX debugger extensions from the DDKs for Windows NT 4.0 
and Windows 2000. </p>
<table>
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0x00 (3.10 to 4.0) </td>
    <td>&nbsp;</td>
    <td>unaccounted </td>
    <td>3.10 to 4.0 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x10 (3.10 to 3.51); <br>
    0x0C (4.0); <br>
    0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">union {
    ULONG <a href="state.htm">state</a>;
    /* bit fields, follow link */
};</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x10 (4.0); <br>
    0x04 </td>
    <td>0x04 </td>
    <td>
    <pre class="source">union {
    ULONG <a href="state2.htm">state2</a>;
    /* bit fields, follow link */
};</pre>
    </td>
    <td>4.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x14 (3.10 to 4.0); <br>
    0x08 </td>
    <td>0x08 </td>
    <td>
    <pre class="source">union {
    ULONG <a href="exstyle.htm">ExStyle</a>;
    /* bit fields, follow link */
};</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x18 (3.10 to 4.0); <br>
    0x0C </td>
    <td>0x0C </td>
    <td>
    <pre class="source">union {
    ULONG <a href="style.htm">style</a>;
    /* bit fields, follow link */
};</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x1C (3.10 to 4.0); <br>
    0x10 </td>
    <td>0x10 </td>
    <td>
    <pre class="source">PVOID hModule;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x14 </td>
    <td>0x18 </td>
    <td>
    <pre class="source">USHORT hMod16;</pre>
    </td>
    <td>5.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x16 </td>
    <td>0x1A </td>
    <td>
    <pre class="source">USHORT fnid;</pre>
    </td>
    <td>5.0 and higher </td>
    <td>previously at 0x7A in <span class="struct">WND</span> </td>
  </tr>
</table>
<p>That some sort of substructure wraps the <span class="member">state</span>,
<span class="member">state2</span> (in applicable versions),
<span class="member">ExStyle</span> and <span class="member">style</span> has long 
been a supportable proposition. Right from the start, WINSRV and then WIN32K has 
code for accessing these members’ bits by a 16-bit encoding whose high and low bytes 
are respectively a byte offset from the first member and a byte-wide bit mask. The 
only known instance of this encoding in WINSRV version 3.10 is 0x0320 for the
<span class="member">state</span> bit that symbol files later name
<span class="member">bAnsiCreator</span>. Version 3.51, however, has 0x0A10 and 
0x0A20 for bits in the <span class="member">style</span>, which puts beyond doubt 
that these members make a tightly integrated set. Very likely, given the optimisation 
capability of Microsoft’s compiler even in the early 90s, most of this 16-bit encoding’s 
use in all versions is more readily visible in the source code than in the binary. 
By version 4.0, the encoding can be seen more in USER32 than in WIN32K: changes 
to these flags by USER32 require a transition to WIN32K with the encoding passed 
as an argument, not interpreted at compile-time and optimised away. </p>
<p>For the output of its <span class="command">!dw</span> command, the USEREXTS 
debugger extension from the DDK for Windows NT 3.51 has <span class="member">dwExStyle</span> 
for the extended window styles that symbol files and later versions of that debugger 
extension present simply as <span class="member">ExStyle</span>. It is here thought 
that the difference is more of how the debugger extension’s programmer thought of 
the member, or thought it would better be presented to programmers, than of how 
it was named in Microsoft’s source code. </p>
<div class="Footer">
  <p class="Dates">This page was created on 9th August 2017 but was not published 
  until 30th <a href="../../../../../../new/17/09.htm">September 2017</a>. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c17.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="62677" -->
</div>

</body>

</html>
