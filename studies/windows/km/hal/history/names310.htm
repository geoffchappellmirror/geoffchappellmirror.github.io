<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>HAL Version 3.10 Exports</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/km.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="63592" -->
<h1>HAL Version 3.10 Exports </h1>
<p>The table below lists the 69 exports from the HAL in version 3.10. These functions 
(and one variable) are in effect the original programming interface for the HAL. 
They represent nearly three quarters of all HAL exports that have ever existed. 
All but a handful are still exported as of version 10.0. Just over a half of these 
original exports are documented, though mostly as obsolete or reserved. </p>
<!--webbot bot="Include" U-Include="../../_include/colours.htm" TAG="BODY" startspan -->

<p>Documentation status is summarised by colour coding. <span class="NoScript">(Had 
the website’s scripts run as expected, then hovering over any colour-coded text 
would produce a tooltip that shows why the text is coloured.) </span>
<span class="ScriptOnly">(To decode a colour, hover for a tooltip.) </span></p>
<p>Functions that appear to be completely undocumented are
<span class="undocumented">highlighted yellow</span>. If a function is documented 
now but was not documented in the first contemporaneous Device Driver Kit (DDK), 
Windows Driver Kit (WDK) or Installable File System (IFS) Kit, then it is
<span class="delayed">shaded yellow</span> to retain some of its previous status. 
If a function is documented as reserved or obsolete, it is
<span class="reserved">shaded red</span> or <span class="obsolete">shaded grey</span>, 
respectively. Otherwise, functions that have their own non-trivial documentation 
are left with no background colour. </p>
<p>Many undocumented functions and some variables have C-language declarations in 
one or another header file. To show them as being not completely undocumented they 
are <span class="declared">shaded orange</span>, except for one special case. Some 
declarations are known only from “minwin” headers that Microsoft published in early 
editions of the WDK for Windows 10 which seem since to have been withdrawn. These 
are <span class="minwin">highlighted orange</span> to indicate that public disclosure 
even of the declaration was exceptional. </p>

<!--webbot bot="Include" endspan i-checksum="57742" -->
<table class="Functions">
  <colgroup>
    <col class="Name"><col class="Remarks" span="3">
  </colgroup>
  <tr>
    <th>Function </th>
    <th>Export History </th>
    <th>Documentation History </th>
    <th>Declaration History </th>
  </tr>
  <tr>
    <td><span class="reserved function">HalAcquireDisplayOwnership</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 6.0, <span class="declared">declared</span> </td>
    <td>since 5.2, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="reserved function">HalAllocateAdapterChannel</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 3.50 to 3.51, <span class="undocumented">undocumented</span> <br>
    before 6.0, <span class="declared">declared</span> </td>
    <td>since 5.2, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="obsolete function">HalAllocateCommonBuffer</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalBeginSystemInterrupt</span> </td>
    <td>x86 only </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalCalibratePerformanceCounter</span>
    </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalDisableSystemInterrupt</span>
    </td>
    <td>discontinued in 6.0 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalDisplayString</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalEnableSystemInterrupt</span> </td>
    <td>discontinued in 6.0 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalEndSystemInterrupt</span> </td>
    <td>x86 only </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalFlushCommonBuffer</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="obsolete function">HalFreeCommonBuffer</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="obsolete function">HalGetAdapter</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="obsolete function">HalGetBusData</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="minwin function">HalGetEnvironmentVariable</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="obsolete function">HalGetInterruptVector</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalHandleNMI</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalInitSystem</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalInitializeProcessor</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="reserved function">HalMakeBeep</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, <span class="undocumented">undocumented</span> <br>
    before 6.0, <span class="declared">declared</span> </td>
    <td>since 5.2, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalQueryDisplayParameters</span>
    </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="minwin function">HalQueryRealTimeClock</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="obsolete function">HalReadDmaCounter</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalReportResourceUsage</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalRequestIpi</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalRequestSoftwareInterrupt</span>
    </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="reserved function">HalReturnToFirmware</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 6.1, <span class="undocumented">undocumented</span> <br>
    before 6.2, documented start is 5.1 <br>
    since 6.2, documented start is 5.2 </td>
    <td>not declared, except in “minwin” </td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalSetDisplayParameters</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="minwin function">HalSetEnvironmentVariable</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalSetProfileInterval</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalSetRealTimeClock</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalStartNextProcessor</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalStartProfileInterrupt</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented function">HalStopProfileInterrupt</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="obsolete function">HalTranslateBusAddress</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
</table>
<p>The particularities of how the few <span class="functionprefix">Hal</span> functions 
that have ever been documented (and some of the <span class="functionprefix">Io</span> 
functions too) became obsolete or reserved are a separate story. Here it must suffice 
to note that starting with the DDK for Windows 2000 most of these functions are 
replaced by inline definitions, and some are not declared at all, depending on macros
<span class="macro">USE_DMA_MACROS</span> and <span class="macro">NO_LEGACY_DRIVERS</span>.
</p>
<p>The whole documentation of most functions that are shown above as reserved is 
just that the name is in a list, but <span class="reserved function">HalReturnToFirmware</span> 
has its own page with a prototype and rudimentary description. Indeed, it’s not 
explicitly reserved, but is instead said to be “not supported and should not be 
used.” While splitting hairs, note that its documentation in the WDK for Windows 
7 says the function is “Available in Microsoft Windows Server 2003 and Windows XP.” 
Whether this is meant to exclude the function’s continuation to Windows Vista and 
beyond is not known. The WDK for Windows 8 explicitly allows later versions, but 
somehow for the price that the function is no longer available on Windows XP.
</p>
<table class="Functions">
  <colgroup>
    <col class="Name"><col class="Remarks" span="3">
  </colgroup>
  <tr>
    <th>Function </th>
    <th>Export History </th>
    <th>Documentation History </th>
    <th>Declaration History </th>
  </tr>
  <tr>
    <td><span class="undocumented function">IoAssignDriveLetters</span> </td>
    <td>discontinued in 6.1 <br>
    </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="obsolete function">IoFlushAdapterBuffers</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="obsolete function">IoFreeAdapterChannel</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="obsolete function">IoFreeMapRegisters</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="obsolete function">IoMapTransfer</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.0, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="obsolete function">IoReadPartitionTable</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.1, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.1 </td>
  </tr>
  <tr>
    <td><span class="obsolete function">IoSetPartitionInformation</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.1, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.1 </td>
  </tr>
  <tr>
    <td><span class="obsolete function">IoWritePartitionTable</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.1, documented </td>
    <td>since 5.1, deprecated <br>
    since 6.0, declared start is 5.1 </td>
  </tr>
</table>
<p>Starting with version 5.1, <span class="undocumented function">IoAssignDriveLetters</span> 
(only to version 6.0), <span class="obsolete function">IoReadPartitionTable</span>,
<span class="obsolete function">IoSetPartitionInformation</span> and
<span class="obsolete function">IoWritePartitionTable</span> are also exported from 
the kernel. The HAL’s implementations are just stubs that call the corresponding 
but substantial implementations in the kernel. Stubs, in contrast to forwards, are 
needed for the x86 architecture because the HAL and kernel functions have different 
calling conventions: <span class="keyword">__stdcall</span> and
<span class="keyword">__fastcall</span>, respectively. Though this need does not 
apply to the x64 architecture, no special case was made for forwarding the x64 functions 
until Version 2004 has the x64 HAL forward all its exports to the kernel. </p>
<table class="Functions">
  <colgroup>
    <col class="Name"><col class="Remarks">
  </colgroup>
  <tr>
    <th>Function </th>
    <th>Export History </th>
  </tr>
  <tr>
    <td><span class="undocumented variable">KdComPortInUse</span> (data) </td>
    <td>x64 since 2004, forwarded to kernel </td>
  </tr>
  <tr>
    <td><span class="undocumented function">KdPortGetByte</span> </td>
    <td>discontinued in 5.1 </td>
  </tr>
  <tr>
    <td><span class="undocumented function">KdPortInitialize</span> </td>
    <td>discontinued in 5.1 </td>
  </tr>
  <tr>
    <td><span class="undocumented function">KdPortPollByte</span> </td>
    <td>discontinued in 5.1 </td>
  </tr>
  <tr>
    <td><span class="undocumented function">KdPortPutByte</span> </td>
    <td>discontinued in 5.1 </td>
  </tr>
  <tr>
    <td><span class="undocumented function">KdPortRestore</span> </td>
    <td>discontinued in 5.1 </td>
  </tr>
  <tr>
    <td><span class="undocumented function">KdPortSave</span> </td>
    <td>discontinued in 5.1 </td>
  </tr>
</table>
<p>The HAL’s role in debugging the kernel through a serial port ceased when Windows 
XP allowed IEEE1394 as a significantly faster alternative. The work was separated 
to a replacable module whose internal name is KDCOM.DLL even if a different filename 
is chosen by the loader from a boot option. The kernel imports functions from this 
module instead of from the HAL. The HAL functions that earlier kernels had called, 
and which ought never to have been called except from the kernel, were dropped. 
The exported variable, however, presented a compatibility problem. Though
<span class="undocumented variable">KdComPortInUse</span> never was formally documented, 
nor declared in any DDK header, Microsoft had long published sample code that shows 
the variable’s use—indeed, its all-but-necessary use—by serial drivers such as might 
be written by arbitrary non-Microsoft programmers. Its exporting has needed to continue.
</p>
<table class="Functions">
  <colgroup>
    <col class="Name"><col class="Remarks" span="3">
  </colgroup>
  <tr>
    <th>Function </th>
    <th>Export History </th>
    <th>Documentation History </th>
    <th>Declaration History </th>
  </tr>
  <tr>
    <td><span class="function">KeAcquireSpinLock</span> </td>
    <td>x86 only; <br>
    since 6.2, forwarded to kernel </td>
    <td>since 6.1 revision, documented start is 5.0 </td>
    <td>since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="reserved function">KeFlushWriteBuffer</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>before 5.1, <span class="declared">declared</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="function">KeGetCurrentIrql</span> </td>
    <td>x86 only </td>
    <td>since 6.1 revision, documented start is 5.0 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="function">KeLowerIrql</span> </td>
    <td>x86 only </td>
    <td>since 6.1 revision, documented start is 5.0 </td>
    <td>since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">KeQueryPerformanceCounter</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>since 6.1 revision, documented start is 5.0 </td>
    <td>since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">KeRaiseIrql</span> </td>
    <td>x86 only </td>
    <td>since 6.1 revision, documented start is 5.0 </td>
    <td>since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">KeReleaseSpinLock</span> </td>
    <td>x86 only; <br>
    since 6.2, forwarded to kernel </td>
    <td>since 6.1 revision, documented start is 5.0 </td>
    <td>since 6.0, declared start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">KeStallExecutionProcessor</span> </td>
    <td>x64 since 2004, forwarded to kernel </td>
    <td>since 6.1 revision, documented start is 5.0 </td>
    <td>since 6.0, declared start is 5.0 </td>
  </tr>
</table>
<p>Though the Interrupt Request Level (IRQL) is fundamental to kernel-mode programming, 
it is originally the business of the HAL, not the kernel. Functions that raise, 
lower or get the IRQL started as HAL exports and remain so for the x86. The x64 
processor, however, has built-in support for the IRQL through the
<span class="register">cr8</span> register. The x64 functions that work with the 
IRQL have only ever been exported from the kernel, not the HAL. </p>
<p>Whether the IRQL is controlled by the HAL or the kernel affects a division of 
functionality for the spin lock. Acquiring and releasing a spin lock can have two 
parts to it: the synchronisation itself, necessarily, and a change of IRQL, possibly. 
On the x64, both are the kernel’s work, which means again that x64 functions for 
spin locks have only ever been exported from the kernel, not the HAL. The x86 division 
of labour is that the kernel handles the synchronisation itself but leaves the changes 
of IRQL to the HAL. The original division of functionality is that the generality 
is with the HAL. The <span class="function">KeAcquireSpinLock</span> and
<span class="function">KeReleaseSpinLock</span> functions may change the IRQL and 
are exported from the HAL, which calls the kernel to handle the synchronisation. 
Windows 8 changes this division so the generality is with the kernel. All functions 
that work with these synchronisation objects are exported from the kernel, which 
calls the HAL for changing the IRQL. The HAL’s exports for the general work remain, 
but not as implemented functions: they continue only as forwards to the kernel.
</p>
<p>Not since ancient times do x86 drivers import the
<span class="functionprefix">Ke</span> functions that raise or lower the Interrupt 
Request Level (IRQL) whether directly or while acquiring or releasing a spin lock. 
These are well known to be redirected by macros to the
<span class="functionprefix">Kf</span> variants, plausibly as early as the DDK for 
Windows NT 3.50 (which is not yet obtained for reference). The macros depend on 
their targets’ declarations, of course. </p>
<table class="Functions">
  <colgroup>
    <col class="Name"><col class="Remarks" span="2">
  </colgroup>
  <tr>
    <th>Function </th>
    <th>Export History </th>
    <th>Documentation History </th>
  </tr>
  <tr>
    <td><span class="function">READ_PORT_BUFFER_UCHAR</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">READ_PORT_BUFFER_ULONG</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">READ_PORT_BUFFER_USHORT</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">READ_PORT_UCHAR</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">READ_PORT_ULONG</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">READ_PORT_USHORT</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">WRITE_PORT_BUFFER_UCHAR</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">WRITE_PORT_BUFFER_ULONG</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">WRITE_PORT_BUFFER_USHORT</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">WRITE_PORT_UCHAR</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">WRITE_PORT_ULONG</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
  <tr>
    <td><span class="function">WRITE_PORT_USHORT</span> </td>
    <td>x86 only </td>
    <td>since 6.2, documented start is 5.0 </td>
  </tr>
</table>
<p>The <span class="functionprefix">READ_PORT</span> and
<span class="functionprefix">WRITE_PORT</span> functions have x64 support as inlined 
routines defined in WDM.H. Exported or not, they abstract the reading of I/O registers 
in I/O space. The kernel exports counterparts that do the same but from memory space. 
All have been documented from the start under some such heading as Hardware Abstraction 
Layer Routines which may be just separate enough that they were missed when a revision 
of the WDK for Windows 7 spuriously dated to Windows 2000 all the other ancient 
documented (but not yet obsolete) functions. Of course this was “fixed” in the very 
next WDK. </p>
<div class="Footer">
  <p class="Dates">This page was created on 23rd April 2017 from material first 
  published on 14th April 2009. It was last modified on 13th October 2020. </p>
  <!--webbot bot="Include" U-Include="../../_include/c0920.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5603" -->
</div>

</body>

</html>
