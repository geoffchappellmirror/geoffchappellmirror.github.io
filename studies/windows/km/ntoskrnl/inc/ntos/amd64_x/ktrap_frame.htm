<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>KTRAP_FRAME (amd64)</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>KTRAP_FRAME (amd64) </h1>
<p>The <span class="struct">KTRAP_FRAME</span> (formally a <span class="struct">
_KTRAP_FRAME</span>) is a structure in which the kernel saves the state of execution 
that gets interrupted for diversion to the kernel, whether from external hardware, 
the processor itself (for a trap or fault) or by software executing an
<span class="instruction">int</span> or <span class="instruction">syscall</span> instruction. 
The <span class="struct">KTRAP_FRAME</span> is highly specific to the processor 
architecture. This page concerns itself only with 64-bit Windows for the 
processor architecture that’s variously named amd64 or x64. The
<a href="../i386_x/ktrap_frame.htm">x86 <span class="struct">KTRAP_FRAME</span></a> 
is presented separately. </p>
<p>Because of the structure’s role in all ways in and out of the kernel, the
<span class="struct">KTRAP_FRAME</span> may be the best known of all formally undocumented 
kernel-mode structures. Indeed, this article exists only for the occasional convenience 
of having the names and offsets for ready reckoning (and, for the historian, of 
tracking the strikingly few changes). 
</p>
<h2>Documentation Status </h2>
<p>Though the <span class="struct">KTRAP_FRAME</span> structure is not formally 
documented, the structure’s x64 implementation has a C-language definition in 
NTDDK.H from every applicable Device Driver Kit (DDK) or Windows Driver Kit 
(WDK). </p>
<h2>Layout </h2>
<p>The <span class="struct">KTRAP_FRAME</span> for 64-bit Windows is 0x0190 bytes 
in all known versions. Names, types and offsets in the following are from NTDDK.H 
in various driver kits, checked against the kernel’s symbol files. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>
    <pre class="source">ULONG64 P1Home;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>
    <pre class="source">ULONG64 P2Home;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>
    <pre class="source">ULONG64 P3Home;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>
    <pre class="source">ULONG64 P4Home;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x20 </td>
    <td>
    <pre class="source">ULONG64 P5;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>
    <pre class="source">KPROCESSOR_MODE PreviousMode;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x29 </td>
    <td>
    <pre class="source">KIRQL PreviousIrql;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x2A </td>
    <td>
    <pre class="source">UCHAR FaultIndicator;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x2B </td>
    <td>
    <pre class="source">UCHAR ExceptionActive;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x2C </td>
    <td>
    <pre class="source">ULONG MxCsr;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x30 </td>
    <td>
    <pre class="source">ULONG64 Rax;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x38 </td>
    <td>
    <pre class="source">ULONG64 Rcx;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x40 </td>
    <td>
    <pre class="source">ULONG64 Rdx;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x48 </td>
    <td>
    <pre class="source">ULONG64 R8;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x50 </td>
    <td>
    <pre class="source">ULONG64 R9;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x58 </td>
    <td>
    <pre class="source">ULONG64 R10;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x60 </td>
    <td>
    <pre class="source">ULONG64 R11;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x68 </td>
    <td>
    <pre class="source">union {
    ULONG64 GsBase;
    ULONG64 GsSwap;
};</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x70 </td>
    <td>
    <pre class="source">M128A Xmm0;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x80 </td>
    <td>
    <pre class="source">M128A Xmm1;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x90 </td>
    <td>
    <pre class="source">M128A Xmm2;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0xA0 </td>
    <td>
    <pre class="source">M128A Xmm3;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0xB0 </td>
    <td>
    <pre class="source">M128A Xmm4;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0xC0 </td>
    <td>
    <pre class="source">M128A Xmm5;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td rowspan="3">0xD0 </td>
    <td>
    <pre class="source">union {
    ULONG64 FaultAddress;
    ULONG64 ContextRecord;
    ULONG64 TimeStamp;
};</pre>
    </td>
    <td>5.2 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    ULONG64 FaultAddress;
    ULONG64 ContextRecord;
    ULONG64 TimeStampCKCL;
};</pre>
    </td>
    <td>6.0 to 1607 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    ULONG64 FaultAddress;
    ULONG64 ContextRecord;
};</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0xD8 </td>
    <td>
    <pre class="source">ULONG64 Dr0;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0xE0 </td>
    <td>
    <pre class="source">ULONG64 Dr1;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0xE8 </td>
    <td>
    <pre class="source">ULONG64 Dr2;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0xF0 </td>
    <td>
    <pre class="source">ULONG64 Dr3;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0xF8 </td>
    <td>
    <pre class="source">ULONG64 Dr6;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0100 </td>
    <td>
    <pre class="source">ULONG64 Dr7;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td rowspan="2">0x0108 </td>
    <td>
    <pre class="source">union {
    struct {
        ULONG64 DebugControl;
        ULONG64 LastBranchToRip;
        ULONG64 LastBranchFromRip;
        ULONG64 LastExceptionToRip;
        ULONG64 LastExceptionFromRip;
    };
    struct {
        ULONG64 LastBranchControl;
        ULONG LastBranchMSR;
    };
};</pre>
    </td>
    <td>5.2 to 6.3 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">struct {
    ULONG64 DebugControl;
    ULONG64 LastBranchToRip;
    ULONG64 LastBranchFromRip;
    ULONG64 LastExceptionToRip;
    ULONG64 LastExceptionFromRip;
};</pre>
    </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x0130 </td>
    <td>
    <pre class="source">USHORT SegDs;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0132 </td>
    <td>
    <pre class="source">USHORT SegEs;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0134 </td>
    <td>
    <pre class="source">USHORT SegFs;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0136 </td>
    <td>
    <pre class="source">USHORT SegGs;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0138 </td>
    <td>
    <pre class="source">ULONG64 TrapFrame;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0140 </td>
    <td>
    <pre class="source">ULONG64 Rbx;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0148 </td>
    <td>
    <pre class="source">ULONG64 Rdi;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0150 </td>
    <td>
    <pre class="source">ULONG64 Rsi;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0158 </td>
    <td>
    <pre class="source">ULONG64 Rbp;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td rowspan="3">0x0160 </td>
    <td>
    <pre class="source">union {
    ULONG64 ErrorCode;
    ULONG64 ExceptionFrame;
};</pre>
    </td>
    <td>5.2 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    ULONG64 ErrorCode;
    ULONG64 ExceptionFrame;
    ULONG64 TimeStampKlog;
};</pre>
    </td>
    <td>6.0 to 1607 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    ULONG64 ErrorCode;
    ULONG64 ExceptionFrame;
};</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x0168 </td>
    <td>
    <pre class="source">ULONG64 Rip;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0170 </td>
    <td>
    <pre class="source">USHORT SegCs;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td rowspan="2">0x0172 </td>
    <td>
    <pre class="source">USHORT Fill1 [3];</pre>
    </td>
    <td>5.2 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">UCHAR Fill0;</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x0173 </td>
    <td>
    <pre class="source">UCHAR Logging;</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x0174 </td>
    <td>
    <pre class="source">USHORT Fill1 [2];</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x0178 </td>
    <td>
    <pre class="source">ULONG EFlags;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x017C </td>
    <td>
    <pre class="source">ULONG Fill2;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0180 </td>
    <td>
    <pre class="source">ULONG64 Rsp;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td>0x0188 </td>
    <td>
    <pre class="source">USHORT SegSs;</pre>
    </td>
    <td>all </td>
  </tr>
  <tr>
    <td rowspan="2">0x018A </td>
    <td>
    <pre class="source">USHORT Fill3 [1];</pre>
    </td>
    <td>5.2 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">USHORT Fill3;</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x018C </td>
    <td>
    <pre class="source">LONG CodePatchCycle;</pre>
    </td>
    <td>5.2 to 6.2 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">ULONG Fill4;</pre>
    </td>
    <td>6.3 and higher </td>
  </tr>
</table>
<p>The <span class="struct">KTRAP_FRAME</span> ends—from 
offset 0x0160 onwards—with items that the processor itself either does or may put 
on the stack before the kernel sees the interrupt. The structure’s formal layout 
has always provided that the kernel may squeeze in items of its own where the processor 
allows 8 bytes though only 16 or 32 bits are meaningful. </p>
<p>Note that the structure does not provide for saving all the general registers. 
The kernel does not itself use <span class="register">r12</span> to
<span class="register">r15</span> during entry or exit, and does not save them in 
anticipation that code deeper into the handling may use them. The understanding 
is instead that all kernel-mode routines that use <span class="register">r12</span> 
to <span class="register">r15</span> (or <span class="register">xmm6</span> or
<span class="register">xmm7</span>) will do the saving and restoring themselves. 
In practice, of course, this knowledge is built into the compiler. </p>
<div class="Footer">
  <p class="Dates">This page was created on 29th December 2020 from material first 
  published on 6th <a href="../../../../../../../new/17/01.htm">January 2017</a>.
  </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1720.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5021" -->
</div>

</body>

</html>
