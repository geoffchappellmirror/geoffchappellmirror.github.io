<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Bug Check 0x5D: UNSUPPORTED_PROCESSOR</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../_styles/km.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="57102" -->
<div class="Main">
  <h1>Bug Check 0x5D: Unsupported Processor </h1>
  <p>The <span class="constant">UNSUPPORTED_PROCESSOR</span> bug check shows that 
  at least one processor is of a type that is not supported. Mostly, this will be 
  the boot processor. </p>
  <p>The summary that Microsoft offers to programmers through the
  <span class="command">!analyze</span> debugger extension command is: </p>
  <pre class="output">&nbsp;&nbsp;&nbsp;&nbsp;The system failed because the processor does not support all the required hardware features.
    This error is most likely due to lack of support for one or more of NX, PAE or SSE2.</pre>
  <h2>Availability </h2>
  <p>The <span class="constant">UNSUPPORTED_PROCESSOR</span> bug check can occur 
  in version 4.0 and higher. </p>
  <p>Bug check 0x5D is omitted from the version 3.51 kernel’s message resource and 
  from the BUGCODES.H in the Device Driver Kit (DDK) for Windows NT 3.51. Though 
  0x5D is evidently undefined as a bug check code for version 3.51, contemporaneous 
  documentation in the Windows NT 3.51 Resource Kit gives the name
  <span class="constant">HEAP_INITIALIZATION_FAILED</span>. This different name 
  is in the kernel’s message resource in versions 3.10 and 3.50. This very different 
  original purpose for bug check 0x5D may some day be taken up separately as archaeology.
  </p>
  <p>The <span class="constant">UNSUPPORTED_PROCESSOR</span> bug check can be more 
  available in theory than in practice. The point to the bug check is that while 
  the kernel initialises its use of the boot processor, it detects the absence of 
  some feature that the kernel will depend on for all sorts of subsequent execution. 
  Though it’s hardly ideal, it does happen that the missing feature can be relied 
  on even for presenting a bug check. Thus can the circumstances of the
  <span class="constant">UNSUPPORTED_PROCESSOR</span> bug check result in some different 
  bug check or even in the computer being silently rebooted. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="constant">UNSUPPORTED_PROCESSOR</span> bug check is documented. 
  Even today, 7th July 2020, Microsoft’s documentation says this bug check has no 
  parameters. </p>
  <h2>32-Bit Windows (i386) </h2>
  <p>The documentation can’t have been correct about the parameters even when the 
  documentation was written a quarter century ago. In fairness, at that time there 
  was indeed not much to report since there was only one way that a processor could 
  be unsupported. </p>
  <h3>Unsupported 80386 </h3>
  <p>In versions 4.0 and 5.0, the 80386 is the only unsupported processor and the 
  only possible cause of this bug check. The kernel will have identified the processor 
  in some detail, but it arguably does not matter: all 80386 processors are unsupported, 
  and remain so for all later versions. When the unsupported processor is an 80386, 
  the first bug-check argument says so, and the others are all zero: </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">UNSUPPORTED_PROCESSOR</span> (0x5D) </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>0x00000386 </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td>0 </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>0 </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>0 </td>
    </tr>
  </table>
  <h4>Early Versions </h4>
  <p>Though versions before 4.0 have no bug check code specifically for complaining 
  that a processor is unsupported, they do all reject early stepppings of the 80386. 
  Version 3.10 stops execution without a bug check. Versions 3.50 and 3.51 raise 
  bug check 0x5C: </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">HAL_INITIALIZATION_FAILED</span> (0x5C) </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>0xB1 </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td>processor family, i.e., 3 for 80386 </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>processor model and stepping </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>0 </td>
    </tr>
  </table>
  <p>The model and stepping are inferred from testing for various defects, as described 
  in <a href="../cpu/precpuid.htm">CPU Identification Before CPUID</a>. The model 
  must be greater than 1 to avoid the bug check. The first parameter is presumably 
  a hexadecimal representation of the model and stepping in a standard scheme in 
  which the model is A for 0, B for 1, etc. The tests can identify an 80386 as A0, 
  B0, B1, which are all rejected. (Any other 80386 is identified as D1 and is acceptable. 
  In the 3rd parameter, the stepping is the low 8 bits and the model is the next 
  8 bits. </p>
  <h3>Unsupported Boot Processor </h3>
  <p>Starting with version 5.1, a boot processor that is not an 80386 causes this 
  bug check if it lacks support for particular CPU features. These features are 
  just as much required of processors that initialise later, but the problem then 
  is not the processor is deficient but that the multiple processors aren’t sufficiently 
  similar. The problem is instead reported as the different bug check
  <span class="constant"><a href="3e.htm">MULTIPROCESSOR_CONFIGURATION_NOT_SUPPORTED</a></span>.
  </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">UNSUPPORTED_PROCESSOR</span> (0x5D) </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>family, model and stepping </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td>first four characters of CPU vendor string </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>second four characters of CPU vendor string </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>third four characters of CPU vendor string </td>
    </tr>
  </table>
  <p>The family, model and stepping are given as byte-wide bit fields in the first 
  parameter: </p>
  <table>
    <tr>
      <td>bits 0 to 7 </td>
      <td>stepping </td>
    </tr>
    <tr>
      <td>bits 8 to 15 </td>
      <td>model </td>
    </tr>
    <tr>
      <td>bits 16 to 23 </td>
      <td>family </td>
    </tr>
    <tr>
      <td>bits 24 to 31 </td>
      <td>1 in versions 5.1 and 5.2; <br>
      3 in versions 6.0 and higher </td>
    </tr>
  </table>
  <p>The meaning of the highest byte is not known. The remaining bug-check parameters 
  are the twelve characters of the <a href="../cpu/cpuid/00000000h/vendor.htm">CPU 
  vendor string</a>, presented as the three dwords that are produced in registers
  <span class="register">ebx</span>, <span class="register">edx</span> and
  <span class="register">ecx</span>, respectively, when executing
  <span class="instruction">cpuid</span> leaf 0. </p>
  <h4>Required Features </h4>
  <p>Perhaps for backwards compatibility with when processor requirements were much 
  simpler, the bug-check parameters for 32-bit Windows never were developed very 
  much. Notably, they leave the user to wonder what it is that’s deficient about 
  the processor: </p>
  <p>Successive Windows versions need ever more CPU features. For the most part, 
  each feature has a corresponding bit in feature flags that are returned in one 
  or another register after executing one or another leaf of the
  <span class="instruction"><a href="../cpu/cpuid/index.htm">cpuid</a></span> instruction, 
  and the feature is present or absent according to whether the bit is set or clear. 
  However, 32-bit Windows dates from a time when the <span class="instruction">cpuid</span> 
  instruction was not nearly so well established, and the tests for some features 
  are complicated by special cases—which are all ignored for the rest of this note!
  </p>
  <p>Windows XP kicks off the escalating requirements by insisting on the
  <span class="instruction">cmpxchg8b</span> instruction. At its simplest,
  <a href="../cpu/cx8.htm">support for the <span class="instruction">CMPXCHG8B</span> 
  instruction</a> is indicated by a set <span class="bit">CX</span> bit (8) in the 
  feature flags that are produced in <a href="../cpu/cpuid/00000001h/edx.htm">
  <span class="register">edx</span> from <span class="instruction">cpuid</span> 
  leaf 1</a>, but there are complications for processors from several vendors since 
  Microsoft at first ignored these vendors’ implementation of
  <span class="instruction">cmpxchg8b</span>, such that the vendors then worked 
  around being ignored and Microsoft then had to work around the work-arounds. A 
  consequence of requiring <span class="instruction">cmpxchg8b</span> is that all 
  80486 processors became unsupported in version 5.1 and higher, if Intel is to 
  be believed that this instruction “is not supported on Intel processors earlier 
  than the Pentium processors.” (See the
  <a target="_top" href="http://www.intel.com/design/processor/manuals/253666.pdf">
  Intel 64 and IA-32 Architectures Software Developer’s Manual Volume 2A: Instruction 
  Set Reference A-M</a>.) </p>
  <p>Version 6.0 and higher require the <span class="instruction">rdtsc</span> instruction 
  and its time-stamp counter. </p>
  <p>Version 6.1 insists on having a numerical coprocessor, such that its absence 
  causes this bug check. Later versions do not. </p>
  <p>Version 6.2 greatly increases the required features. Precisely how each feature 
  is detected is beyond the present scope of this article. Some are a simple matter 
  of testing for a corresponding bit in feature flags that are returned by the
  <span class="instruction">cpuid</span> instruction. As with support for
  <span class="instruction">cmpxchg8b</span>, however, there are special cases for 
  more than a few. For now, only a summary of these newly required features can 
  be ventured: </p>
  <ul>
    <li>the <span class="register">cr4</span> register; </li>
    <li>global pages; </li>
    <li>large pages; </li>
    <li>fast save and restore of floating-point state; </li>
    <li><span class="instruction">sysenter</span> and <span class="instruction">
    sysexit</span> instructions; </li>
    <li>SSE and SSE2 instructions; </li>
    <li>the <span class="bit">NX</span> bit in 64-bit page table entries. </li>
  </ul>
  <p>Note that in version 6.2 and higher, the kernel is anyway distributed only 
  in its form that supports Physical Address Extension (PAE) and thus is already 
  using 64-bit page table entries before it examines any processor. </p>
  <h2>64-Bit Windows (amd64) </h2>
  <p>The x64 builds have completely different requirements, of course. The parameters 
  for the bug check are different, too, and have been getting more informative as 
  64-bit Windows matures: </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">UNSUPPORTED_PROCESSOR</span> (0x5D) </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>feature bits <span class="register">edx</span> from
      <span class="instruction">cpuid</span> leaf 1, if processor rejected because 
      of inadequate features; <br>
      0 otherwise </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td>extended feature bits <span class="register">edx</span> from
      <span class="instruction">cpuid</span> leaf 0x80000001, if processor rejected 
      because of inadequate features (6.2 and higher); <br>
      0 otherwise </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>extended feature bits <span class="register">ecx</span> from
      <span class="instruction">cpuid</span> leaf 0x80000001, if processor rejected 
      because of inadequate features (6.3 and higher); <br>
      0 otherwise </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>non-zero count of faults from attempting to execute
      <span class="instruction">prefetchw</span> instruction (6.3 and higher);
      <br>
      0 otherwise </td>
    </tr>
  </table>
  <p>The 2nd parameter can differ on one point from what
  <span class="instruction">cpuid</span> leaf 0x80000001 returns in
  <span class="register">edx</span>: the <span class="bit">XD</span> bit (20) is 
  set if the processor has AuthenticAMD as its vendor string. </p>
  <h3>Vendor Restriction </h3>
  <p>All known builds of 64-bit Windows limit their support to particular CPU vendors. 
  These are identified from the vendor string, meaning the sequence of characters 
  obtained by executing <span class="instruction">cpuid</span> with 0 in
  <span class="register">eax</span> and then copying <span class="register">ebx</span>,
  <span class="register">edx</span> and <span class="register">ecx</span> to successive 
  memory locations. Any but the following cause this bug check, with zero in all 
  arguments: </p>
  <ul>
    <li>AuthenticAMD; </li>
    <li>GenuineIntel; </li>
    <li>CentaurHauls (version 6.0 from Windows Vista SP2, and higher); </li>
    <li>HygonGenuine (1803 and higher). </li>
  </ul>
  <p>Perhaps there’s no law that requires Microsoft to allow its software to run 
  on every CPU that’s said by its manufacturer to be x64-compatible. Yet even if 
  there were no other manufacturers of x64-compatible processors when Microsoft 
  wrote this code, the effect must have been plain at the time: any manufacturers 
  who do eventually make an x64-compatible processor to compete with AMD and Intel 
  are denied their most substantial market until Microsoft condescends with some 
  new release of Windows that does not dismiss competing processors as unsupported—and 
  then, to sell their new processor, they are drafted into Microsoft’s mission of 
  persuading computer users to obtain this latest Windows release. This is behaviour 
  that might be expected of a cartel, with Microsoft using its operating-system 
  monopoly to protect its friends’ interests in the competitive market of processors 
  that share the x64 instruction set. It ought perhaps be investigated by regulatory 
  authorities. </p>
  <h3>Required Features </h3>
  <p>From the start, 64-bit Windows insists on processors that have many of the 
  relatively modern CPU features that the contemporaneous 32-bit builds still had 
  to be capable of doing without. Perhaps as an advantage of starting late and of 
  having fewer vendors to accommodate, 64-bit Windows has none of the complexity 
  that 32-bit Windows faces for testing the presence of required features. Mostly, 
  64-bit Windows depends just on flags returned by two executions of the
  <span class="instruction">cpuid</span> instruction. </p>
  <p>In the feature bits that are returned in <span class="register">edx</span> 
  after executing <span class="instruction">cpuid</span> leaf 1, all the following 
  must be set: <span class="bit">FPU</span> (0), <span class="bit">DE</span> (2),
  <span class="bit">PSE</span> (3), <span class="bit">TSC</span> (4),
  <span class="bit">MSR</span> (5), <span class="bit">PAE</span> (6),
  <span class="bit">MCE</span> (7), <span class="bit">CX8</span> (8),
  <span class="bit">APIC</span> (9), <span class="bit">MTRR</span> (12),
  <span class="bit">PGE</span> (13), <span class="bit">MCA</span> (14),
  <span class="bit">CMOV</span> (15), <span class="bit">PAT</span> (16),
  <span class="bit">CFLSH</span> (19), <span class="bit">MMX</span> (23),
  <span class="bit">FXSR</span> (24), <span class="bit">SSE</span> (25) and
  <span class="bit">SSE2</span> (26). </p>
  <p>A set <span class="bit">SYSCALL</span> bit (11) is required in the extended 
  feature bits that are produced in <span class="register">edx</span> by executing
  <span class="instruction">cpuid</span> leaf 0x80000001. In version 6.2 and higher, 
  the <span class="bit">XD</span> bit (20) must be set too, except that this is 
  taken as granted if the processor’s vendor string is AuthenticAMD. </p>
  <p>Version 6.3 and higher also inspect what’s returned in
  <span class="register">ecx</span> by these executions of
  <span class="instruction">cpuid</span>. The <span class="bit">CMPXCHG16B</span> 
  bit (13), which older Intel documentation names <span class="bit">CX16</span>, 
  and the <span class="bit">LAHF</span> bit (0) must be set in the flags that are 
  produced by <span class="instruction">cpuid</span> leaves 1 and 0x80000001, respectively.
  </p>
  <p>Harder to establish, but no less required, is support for the
  <span class="instruction">prefetchw</span> instruction. All known builds of the 
  64-bit kernel are coded to use <span class="instruction">prefetchw</span> liberally, 
  but the instruction long predates the <span class="bit">PREFETCHW</span> bit (8) 
  in <span class="register">ecx</span> from <span class="instruction">cpuid</span> 
  leaf 0x80000001. Windows tests for support by trying to execute the instruction 
  and seeing if the processor objects. Before version 6.3, if the processor happens 
  not to support the instruction, then a handler for the Invalid Opcode exception 
  keeps putting things right for continued execution, including to patch the instruction 
  away so that the performance hit from the exception doesn’t recur. The change 
  for version 6.3 is just to do away with the patching and instead to insist that 
  it not be needed. </p>
  <p>Failure on any of these counts causes the bug check. The parameters tell which 
  features were found but leave the user to deduce which missing feature (or features) 
  matter. </p>
  <h3>Fake Bug Check </h3>
  <p>Up to and including the version 6.0 from the original Windows Vista, the 64-bit 
  kernel checks that division of 0x004B5FA3A053724C by 0x00CB5FA3 gives 0x5EE0B7E5. 
  The test is a 32-bit <span class="instruction">div</span> of
  <span class="register">edx</span>:<span class="register">eax</span> by
  <span class="register">r8d</span>. This may look plausible as defending against 
  a defect in some processor’s arithmetic, such as Microsoft has done at various 
  levels in 32-bit builds of earlier Windows versions (for multiplications in the 
  80386 and floating-point divisions in the Pentium). However, this particular test 
  is nothing of that sort. For one thing, it is performed surprisingly late. If 
  you genuinely doubted the accuracy of a processor’s arithmetic, you would test 
  it before depending on the arithmetic. Yet by the time the kernel performs this 
  test division, it has performed similar divisions already. Indeed, though the 
  tests for vendor and features are performed almost immediately that the kernel 
  starts executing, the test for accurate division is left until phase 1 of initialisation.
  </p>
  <p>In fact, this division serves as the way to initialise Kernel Patch Protection, 
  also called PatchGuard. This is a scheme by which the kernel records the state 
  of various sensitive items at startup and defends against run-time changes, which 
  are held to be malicious and are usually dealt with as bug check
  <span class="constant">CRITICAL_STRUCTURE_CORRUPTION</span> (0x0109). When the 
  test division executes while a kernel debugger is attached, it proceeds as expected. 
  However, in the ordinary execution, without a kernel debugger, a contrivance in 
  the code changes the division so that the high byte of the dividend is 0x01. This 
  makes the high 32 bits of the dividend larger than the divisor, so that the
  <span class="instruction">div</span> instruction faults (for overflowing the 32 
  bits that the instruction allows for the quotient as output). The exception handler 
  initialises PatchGuard. If this initialisation succeeds, the
  <span class="instruction">div</span> is restarted with the 0x01 cleared from the 
  high byte of the dividend and the expected quotient is obtained. If the initialisation 
  fails, the <span class="instruction">div</span> is restarted with the highest
  <span class="emphasis">two</span> bytes cleared from the dividend, such that the 
  quotient is incorrect and causes the bug check <span class="constant">UNSUPPORTED_PROCESSOR</span> 
  with zero for all parameters. A recommendable article on the details of PatchGuard, 
  including its initialisation and how the initialisation is reached through this 
  division, is <a href="http://uninformed.org/?v=3&amp;a=3&amp;p=5">Bypassing PatchGuard 
  on Windows x64</a>. Regular readers of this website will know that it is no small 
  compliment for me to cite other people’s research as reliable enough to be recommended.
  </p>
  <p>The version 6.0 from Windows Vista SP1 changes the mechanism by which PatchGuard 
  gets to initialise. It still relies on contriving an exception from a (different) 
  division but without any implications for this bug check. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 22nd January 2008 and was last modified 
    on 5th April 2021. </p>
    <!--webbot bot="Include" U-Include="../_include/c0821.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2008-2021. Geoff Chappell. All rights reserved. 
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="49152" -->
  </div>
</div>

</body>

</html>
