<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>ETW_REGISTRATION_ENTRY</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<!--webbot bot="Include" U-Include="../../../../_include/draft.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">DRAFT: Take more than your usual care. </p>
</div>

<!--webbot bot="Include" endspan i-checksum="34080" -->
<h1>ETW_REGISTRATION_ENTRY </h1>
<p>Right from its introduction for Windows 2000, before it even had its current 
name, Event Tracing for Windows (ETW) has parallel implementations in kernel and 
user modes. The practical difference is not just with where the code is but with 
where the trace buffers are managed. One aim of ETW is that events are written quickly 
into trace buffers which are then serviced independently from a logger thread, e.g., 
to flush full buffers to an Event Trace Log (ETL) file. In an important special 
case for programs that trace their own diagnostics, an event provider that executes 
as a user-mode process may be enabled into a tracing session that executes in the 
same process and chooses the user-mode ETW implementation. For such a tracing session, 
the trace buffers are managed in user mode and writing an event (to a trace buffer) 
avoids the delay of going to and from kernel mode. This of course requires a substantial 
user-mode implementation, while also retaining access to the kernel-mode implementation 
in case the same provider is also enabled into a tracing session in a different 
process. In this more general case for which writing an event to a trace buffer 
means sending it to the kernel, some substance is desirable in the user-mode implementation 
so that the expense of sending an event to the kernel is avoided if it can be known 
that the event isn’t wanted by any tracing session that has kernel-mode tracing 
buffers. </p>
<p>Thus does it happen that NTDLL keeps no small amount of its own state about each 
user-mode registration of an event provider in addition to the
<span class="struct">
<a href="../../../../../km/ntoskrnl/api/etw/register/reg_entry/index.htm">ETW_REG_ENTRY</a></span> 
that the kernel keeps. The <span class="struct">ETW_REGISTRATION_ENTRY</span> structure 
is this user-mode state. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">ETW_REGISTRATION_ENTRY</span> structure is not documented. 
Neither is it known even from public symbol files. The only public disclosure that 
is yet known of this structure’s name by Microsoft is that the WMITRACE.DLL debugger 
extension knows to look for it to support its obsolete <span class="command">!regtable</span> 
command. The suggestion is strong that the type information that WMITRACE needs 
for this is available only in private symbol files and even then only for Windows 
7. </p>
<h2>Layout </h2>
<p>The <span class="struct">ETW_REGISTRATION_ENTRY</span> has been relatively stable. 
Windows 7 saw an insertion, which lengthened the structure. The only significant 
change and reordering came with Windows 8 and shows in the relevant API functions 
as a reinterpretation of the opaque <span class="type">REGHANDLE</span>. </p>
<table class="Sizes">
  <colgroup>
    <col class="Version"><col span="2" class="Size">
  </colgroup>
  <tr>
    <th>Versions </th>
    <th>Size (x86) </th>
    <th>Size (x64) </th>
  </tr>
  <tr>
    <td>6.0 </td>
    <td>0xB8 </td>
    <td>0xC8 </td>
  </tr>
  <tr>
    <td>6.1 </td>
    <td>0xD0 </td>
    <td>0xF0 </td>
  </tr>
  <tr>
    <td>6.2 and higher </td>
    <td>0xC8 </td>
    <td>0x0100 </td>
  </tr>
</table>
<p>These sizes, and the offsets, types and names in the detailed layout below, come 
from inspection of the binaries for NTDLL. The user-mode registration entry has 
some points in common with the two kernel-mode structures <span class="struct">ETW_REG_ENTRY</span> 
and <span class="struct">
<a href="../../../../../km/ntoskrnl/api/etw/register/guid_entry.htm">ETW_GUID_ENTRY</a></span> 
which are known from public symbol files for the kernel, but the correspondence 
is not close enough even for suppositions of Microsoft’s names and types. A smattering 
of such names and types are inferred with reasonable certainty by matching known 
use with the names that WMITRACE seeks from private symbol files. Where the use 
continues to later versions, the corresponding names and types are assumed to too.
</p>
<table class="Struct">
  <colgroup>
    <col span="2" class="Offset"><col class="Definition"><col class="Versions">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>an <span class="struct">
    <a href="../../../../../km/ntoskrnl/api/rtl/rbtree/balanced_node.htm">RTL_BALANCED_NODE</a></span>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>0x18 </td>
    <td>unaccounted eight bytes </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x00 (6.0 to 6.1); <br>
    0x0C </td>
    <td>0x00 (6.0 to 6.1); <br>
    0x20 </td>
    <td>
    <pre class="source">GUID ProviderGuid;</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x10 (6.0 to 6.1) </td>
    <td>0x10 (6.0 to 6.1) </td>
    <td>unknown <span class="type">HANDLE</span> to the kernel-mode registration
    </td>
    <td>6.0 to 6.1 </td>
  </tr>
  <tr>
    <td>0x14 (6.0 to 6.1) </td>
    <td>0x18 (6.0 to 6.1) </td>
    <td>
    <pre class="source">&lt;unknown-type&gt; RegistrationHandle;</pre>
    </td>
    <td>6.0 to 6.1</td>
  </tr>
  <tr>
    <td>0x1C (6.1) </td>
    <td>0x20 (6.1) </td>
    <td>unknown <span class="struct">CRITICAL_SECTION</span> </td>
    <td>6.1 only </td>
  </tr>
  <tr>
    <td>0x1C (6.0); <br>
    0x34 (6.1); <br>
    0x1C </td>
    <td>0x20 (6.0); <br>
    0x48 (6.1); <br>
    0x30 </td>
    <td>
    <pre class="source">PVOID Callback;</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x20 (6.0); <br>
    0x38 (6.1); <br>
    0x20 </td>
    <td>0x28 (6.0); <br>
    0x50 (6.1); <br>
    0x38 </td>
    <td>
    <pre class="source">PVOID Context;</pre>
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x24 </td>
    <td>0x40 </td>
    <td>unknown <span class="type">SRWLOCK</span> </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x48 </td>
    <td>unknown <span class="type">SRWLOCK</span> </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x2C </td>
    <td>0x50 </td>
    <td>unknown 32-bit thread ID </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x30 </td>
    <td>0x58 </td>
    <td>unknown <span class="type">HANDLE</span> to the kernel-mode registration
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x34 </td>
    <td>0x60 </td>
    <td>unknown 16-bit sequence number </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td rowspan="2">0x24 (6.0); <br>
    0x3C (6.1); <br>
    0x36 </td>
    <td rowspan="2">0x30 (6.0); <br>
    0x58 (6.1); <br>
    0x62 </td>
    <td>
    <pre class="source">ULONG Type;</pre>
    </td>
    <td>6.0 to 6.1 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">struct {
    /*  USHORT bit fields, see below  */
};</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x28 (6.0); <br>
    0x40 (6.1); <br>
    0x38 </td>
    <td>0x38 (6.0); <br>
    0x60 (6.1); <br>
    0x68 </td>
    <td>unknown 0x18-byte structure for kernel-mode registration </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x40 (6.0); <br>
    0x58 (6.1); <br>
    0x50 </td>
    <td>0x50 (6.0); <br>
    0x78 (6.1); <br>
    0x80 </td>
    <td>unknown array of four 0x18-byte structures for private registrations
    </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0xA0 (6.0); <br>
    0xB8 (6.1); <br>
    0xB0 </td>
    <td>0xB0 (6.0); <br>
    0xD8 (6.1); <br>
    0xE0 </td>
    <td>unknown 0x18-byte structure as aggregate of private registrations </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>0xF8 </td>
    <td>unaccounted eight bytes </td>
    <td>6.2 and higher </td>
  </tr>
</table>
<p>The <span class="member">Type</span> takes its values from the
<span class="enum">
<a href="../../../../../km/ntoskrnl/api/etw/traceapi/notification_type.htm">ETW_NOTIFICATION_TYPE</a></span> 
enumeration. Windows 8 narrows it to 16 bits and squeezes in a one-bit flag. Windows 
10 slips in another. </p>
<table>
  <tr>
    <th>Mask </th>
    <th>Description </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td rowspan="2">0x7FFF (6.2 to 6.3); <br>
    0x3FFF </td>
    <td>
    <pre class="source">USHORT Type : 15;</pre>
    </td>
    <td>6.2 to 6.3 </td>
  </tr>
  <tr>
    <td>
    <pre class="source">USHORT Type : 14;</pre>
    </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x4000 </td>
    <td>use descriptor type </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x8000 </td>
    <td>track provider binary </td>
    <td>6.2 and higher </td>
  </tr>
</table>
<div class="Footer">
  <p class="Dates">This page was created on 16th May 2020 but was not published 
  until 28th <a href="../../../../../../../new/20/05.htm">May 2020</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5634" -->
</div>

</body>

</html>
