<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CL /Ze</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>CL /Ze </h1>
<h2>Syntax </h2>
<p>The option is <span class="switch">/Ze</span> only. </p>
<h3>Relations </h3>
<p>The <span class="switch">/Ze</span> option is enabled by default, being provided 
by CL as an initial option. Additionally, <span class="switch">/Ze</span> </p>
<ul>
  <li>weakly implies <span class="switch">/D_MSC_EXTENSIONS</span> </li>
  <li>is incompatible with <span class="switch"><a href="z$a.htm">/Za</a></span>
  </li>
</ul>
<!--webbot bot="Include" U-Include="_include/1pm.htm" TAG="BODY" startspan -->

<p>This option passes to the front-end C and C++ compilers (C1 and C1XX) only.
</p>

<!--webbot bot="Include" i-checksum="22770" endspan -->
<h2>Behaviour </h2>
<p>The <span class="switch">/Ze</span> option enables numerous variations that Microsoft 
makes to the language and is pleased to refer to as the Microsoft language extensions. 
It is a default option, adopted internally by CL and persisting unless the incompatible
<span class="switch">/Za</span> is given explicitly. The incompatibility is resolved 
silently by discarding the internal choice. </p>
<p>The variations mostly do extend the language, some by permitting a construction 
that the standard language does not, and some by investing new meaning in a construction 
that the standard language either reserves for extension or treats with no particular 
significance. Both are well established as ways to develop supersets (much as C++ 
extends C). However, a few of the variations are not extensions at all, but actually 
disable some feature of the standard language. </p>
<p>Whether they be called extensions or variations, a comprehensive list seems to 
have exceeded Microsoft’s capability or will, at least as shown by the page titled
<span class="citation">Microsoft Extensions to C and C++</span> in the product documentation. 
The list that develops below, with nothing like the resources that Microsoft ought 
to have on hand for documenting its own products, will not for a long time be anywhere 
near complete, nor indeed be more than a random collection of a few features that 
happen to get written up. </p>
<h3>Keywords </h3>
<p>It may be as well to start at Microsoft’s own cue. The language extensions change 
the set of recognised keywords, both by giving and taking. </p>
<h4>Additional Keywords </h4>
<p>Some identifiers become C++ keywords only as part of the language extensions:
</p>
<blockquote>
  <p><span class="keyword">__event</span>, <span class="keyword">__hook</span>,
  <span class="keyword">__if_exists</span>, <span class="keyword">__if_not_exists</span>,
  <span class="keyword">__interface</span>, <span class="keyword">__raise</span>,
  <span class="keyword">__super</span> and <span class="keyword">__unhook</span>
  </p>
</blockquote>
<p>Though each of these keywords gets its own page in the product documentation, 
none of these pages mention the dependence on <span class="switch">/Ze</span>.
</p>
<h4>Backwards-Compatible Alternatives </h4>
<p>When the language extensions are enabled, various keywords that begin with two 
underscores are also defined as keywords with one leading underscore: </p>
<blockquote>
  <p><span class="keyword">_alignof</span>, <span class="keyword">_asm</span>,
  <span class="keyword">_assume</span>, <span class="keyword">_based</span>,
  <span class="keyword">_builtin_alignof</span>, <span class="keyword">_cdecl</span>,
  <span class="keyword">_compileBreak</span>, <span class="keyword">_declspec</span>,
  <span class="keyword">_except</span>, <span class="keyword">_export</span>,
  <span class="keyword">_far</span>, <span class="keyword">_far16</span>,
  <span class="keyword">_fastcall</span>, <span class="keyword">_feacpBreak</span>,
  <span class="keyword">_finally</span>, <span class="keyword">_forceinline</span>,
  <span class="keyword">_fortran</span>, <span class="keyword">_huge</span>,
  <span class="keyword">_inline</span>, <span class="keyword">_int16</span>,
  <span class="keyword">_int32</span>, <span class="keyword">_int64</span> (if
  <span class="switch"><a href="zb.htm">/ZB</a></span> ≥ 64),
  <span class="keyword">_int8</span>, <span class="keyword">_leave</span>,
  <span class="keyword">_multiple_inheritance</span> (C++ only),
  <span class="keyword">_near</span>, <span class="keyword">_novtordisp</span> (C++ 
  only), <span class="keyword">_pascal</span>, <span class="keyword">_pragma</span>,
  <span class="keyword">_ptr32</span>, <span class="keyword">_ptr64</span>,
  <span class="keyword">_serializable</span>, <span class="keyword">_single_inheritance</span> 
  (C++ only), <span class="keyword">_stdcall</span>, <span class="keyword">_syscall</span>,
  <span class="keyword">_thiscall</span> (if C++ and <span class="switch">
  <a href="../../c1xx/options/binl.htm">-Binl</a></span>), <span class="keyword">
  _transient</span>, <span class="keyword">_try</span>, <span class="keyword">_uuidof</span> 
  (C++ only), <span class="keyword">_virtual_inheritance</span> (C++ only) and
  <span class="keyword">_w64</span> </p>
</blockquote>
<p>and even with no leading underscore: </p>
<blockquote>
  <p><span class="keyword">cdecl</span>, <span class="keyword">far</span>,
  <span class="keyword">fortran</span>, <span class="keyword">huge</span>,
  <span class="keyword">near</span> and <span class="keyword">pascal</span> </p>
</blockquote>
<p>Support for these one-underscore keywords can be arranged independently via the
<span class="switch"><a href="../../c1xx/options/ze.htm">-ZE</a></span> option and 
for the no-underscore keywords (except <span class="keyword">cdecl</span>) via
<span class="switch"><a href="../../c1xx/options/z$f.htm">-Zf</a></span>. These 
options are not known to CL.EXE but can be passed to the front-end compilers through
<span class="switch"><a href="d1.htm">/d1</a></span>. </p>
<h4>Operator Keywords </h4>
<p>The C++ language provides that certain operators have alternative representations 
as keywords. The language extensions defeat this. When <span class="switch">/Ze</span> 
is enabled, the following identifiers are not keywords and have no particular significance:
</p>
<blockquote>
  <p><span class="keyword">and</span>, <span class="keyword">and_eq</span>,
  <span class="keyword">bitand</span>, <span class="keyword">bitor</span>,
  <span class="keyword">compl</span>, <span class="keyword">not</span>,
  <span class="keyword">not_eq</span>, <span class="keyword">or</span>,
  <span class="keyword">or_eq</span>, <span class="keyword">xor</span> and
  <span class="keyword">xor_eq</span> </p>
</blockquote>
<h4>The Built-In Boolean Type </h4>
<p>When <span class="switch">/Ze</span> is active, <span class="keyword">bool</span> 
is not a keyword. Unless <span class="switch"><a href="nobool.htm">/noBool</a></span> 
is also active, the compiler names <span class="keyword">bool</span> as the subject 
of an internal type definition, evaluating to the built-in <span class="keyword">
bool</span> type. The difference from <span class="keyword">bool</span> being a 
keyword is surely subtle, which may be why the product documentation leaves it alone.
</p>
<h3>Character Set for Identifiers </h3>
<p>The language extensions add to the set of characters that are permitted in C++ 
identifiers. When C++ source text is tokenised, the C++ identifiers are the uninterrupted 
sequences of letters, digits and underscores, with the digits disallowed for the 
first character. With <span class="switch">/Ze</span>, the $ sign is permitted also.
</p>
<p>The product documentation does not mention this extension on either the page 
titled <span class="citation">C++ Identifiers</span> or the list of
<span class="citation">Microsoft Extensions to C and C++</span>. It may be that 
Microsoft thinks nobody needs to know of it, because identifiers containing a $ 
sign are intended as being reserved for Microsoft, as if to extend the standard 
reservation of identifiers beginning with or containing various sequences involving 
underscores. </p>
<h3>Errors and Warnings </h3>
<p>The language extensions tolerate many constructions that the standard language 
prohibits. What would be an error when compiled with <span class="switch">/Za</span> 
may be relaxed to a warning under <span class="switch">/Ze</span>. A warning under
<span class="switch">/Za</span> may trigger at a higher level under
<span class="switch">/Ze</span> (i.e., numerically higher, meaning less serious). 
In some cases, tolerance is complete and a condition that would produce an error 
or warning under <span class="switch">/Za</span> is instead dismissed as being not 
worth noticing under <span class="switch">/Ze</span>. </p>
<p>For the following table of correlations, which is still in development, each 
error number on the left has at least some case that the language extensions relax 
to the warning (or warnings) on the right. Three errors under
<span class="switch">/Za</span> each have at least some case that the language extensions 
reduce to being not worth even a warning. </p>
<p>Warning and error numbers <span class="undocumented">highlighted yellow</span> 
are those for which the product documentation, specifically among the
<span class="citation">C/C++ Build Errors</span>, omits to note the influence of
<span class="switch">/Za</span> or <span class="switch">/Ze</span>, even indirectly 
by such means as the message text citing use of a “nonstandard extension”. Some 
omissions are at least careless, if not actually bizarre. For instance, the documentation 
of warning C4240 seems almost pleased to tell of the Microsoft extensions allowing 
something that “ANSI compatibility” does not, yet the error (C2331) that this warning 
displaces is apparently so unimportant that Microsoft doesn’t document it. </p>
<table>
  <tr>
    <td>Error with <span class="switch">/Za</span> </td>
    <td>Warning with <span class="switch">/Ze</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented">C2052</span> </td>
    <td>none </td>
  </tr>
  <tr>
    <td><span class="undocumented">C2059</span> </td>
    <td><span class="undocumented"><a href="../../c1xx/warnings/c4091.htm">C4091</a></span> 
    (level 2), C4094 (level 2) or C4231 (level 3) </td>
  </tr>
  <tr>
    <td><span class="undocumented">C2078</span> </td>
    <td>C4207 (level 4) </td>
  </tr>
  <tr>
    <td>C2133 </td>
    <td>C4200 (level 2) </td>
  </tr>
  <tr>
    <td>C2190 </td>
    <td><span class="undocumented">C4030</span> (level 1) </td>
  </tr>
  <tr>
    <td>C2191 </td>
    <td><span class="undocumented">C4031</span> (level 1) </td>
  </tr>
  <tr>
    <td>C2192 </td>
    <td><span class="undocumented">C4028</span> (level 1) </td>
  </tr>
  <tr>
    <td>C2203 </td>
    <td>C4208 (level 4) </td>
  </tr>
  <tr>
    <td><a href="../../c1xx/errors/c2289.htm">C2289</a> </td>
    <td><a href="../../c1xx/warnings/c4114.htm">C4114</a> (level 1) </td>
  </tr>
  <tr>
    <td><span class="undocumented">C2328</span> </td>
    <td><a href="../../c1xx/warnings/c4237.htm"><span class="undocumented">C4237</span></a> 
    (level 1) </td>
  </tr>
  <tr>
    <td><span class="undocumented">C2331</span> </td>
    <td>C4240 (level 3) </td>
  </tr>
  <tr>
    <td>C2362 </td>
    <td><span class="undocumented">C4533</span> (level 1) </td>
  </tr>
  <tr>
    <td>C2370 or C2375 </td>
    <td>C4211 (level 4) </td>
  </tr>
  <tr>
    <td>C2467 </td>
    <td>C4201 (level 4) </td>
  </tr>
  <tr>
    <td>C2475 </td>
    <td>C4529 (level 1) </td>
  </tr>
  <tr>
    <td><span class="undocumented">C2619</span> </td>
    <td>C4203 (level 4) or none </td>
  </tr>
  <tr>
    <td>C2658 </td>
    <td>none </td>
  </tr>
  <tr>
    <td><span class="undocumented">C2720</span> </td>
    <td><a href="../../c1xx/warnings/c4630.htm"><span class="undocumented">C4630</span></a> 
    (level 1) </td>
  </tr>
  <tr>
    <td>C2901 </td>
    <td><span class="undocumented">C4666</span> (level 1) </td>
  </tr>
  <tr>
    <td>C2906 </td>
    <td>C4663 (level 4) </td>
  </tr>
</table>
<p>Some warnings under <span class="switch">/Za</span> also change, typically to 
raise the level or to make it one of the warnings that the compiler disables automatically 
unless given the <span class="switch">/Wall</span> option. </p>
<table>
  <tr>
    <td>Warning with <span class="switch">/Za</span> </td>
    <td>Warning with <span class="switch">/Ze</span> </td>
  </tr>
  <tr>
    <td>C4067 (level 1) </td>
    <td>none </td>
  </tr>
  <tr>
    <td>C4112 (level 1) </td>
    <td>C4112 (level 4) </td>
  </tr>
  <tr>
    <td>C4155 (level 1) </td>
    <td>C4156 (level 2) </td>
  </tr>
  <tr>
    <td>C4223 (level 1) </td>
    <td>C4223 (level 4) </td>
  </tr>
  <tr>
    <td>C4253 (level 1) </td>
    <td>C4529 (level 1) </td>
  </tr>
  <tr>
    <td><span class="undocumented">C4341 (level 1)</span> </td>
    <td>C4341 (level 3) </td>
  </tr>
</table>
<p>There appear to be just two conditions that are treated as more severe when the 
language extensions are enabled. Whatever condition causes error
<span class="undocumented">C2617</span> is not worth a warning, let alone an error, 
unless the language extensions are enabled. Warning C4355 ordinarily triggers at 
level 4 but becomes a level 1 warning under <span class="switch">/Ze</span>. </p>
<div class="Footer">
  <p class="Dates">This page was created on 27th October 2005 and was last modified 
  on 14th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0509.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62424" endspan -->
</div>

</body>

</html>
