<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>MESSAGE_TRACE_HEADER</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="33595" -->
<div class="Main">
  <p class="alert">This page is being prepared for a substantial reworking. Some 
  content may be temporarily missing. Temporarily may turn into indefinitely. New 
  content may be more than usually defective. The page is now published only as 
  a revision in progress. Use with caution. </p>
  <h1>MESSAGE_TRACE_HEADER </h1>
  <p>The <span class="struct">MESSAGE_TRACE_HEADER</span> is one of several types 
  of fixed-size header that introduce variable-size data for events that are logged 
  through Event Tracing for Windows (ETW). As with other types of event, those that 
  begin with a <span class="struct">MESSAGE_TRACE_HEADER</span> accumulate first 
  in trace buffers. To have these events persist in this raw form for ready inspection, 
  configure the event tracing session to flush the trace buffers to an Event Trace 
  Log (ETL) file. </p>
  <h2>Usage </h2>
  <p>The events that get a <span class="struct">MESSAGE_TRACE_HEADER</span>, rather 
  than one of the other types of trace header, are generated through a handful of 
  interfaces that are mostly used for Windows Pre-Processor (WPP) software tracing. 
  The kernel-mode interface is the pair of documented kernel exports
  <span class="function">WmiTraceMessage</span> and <span class="function">WmiTraceMessageVa</span>. 
  The kernel exposes the functionality to user mode through the undocumented
  <span class="function">NtTraceEvent</span> function. In user mode, this path to 
  the kernel-mode implementation goes through the the undocumented NTDLL functions
  <span class="function">EtwTraceMessage</span> and <span class="function">EtwTraceMessageVa</span>, 
  which are in turn accessed as forwards from the documented ADVAPI32 functions
  <span class="function">TraceMessage</span> and <span class="function">TraceMessageVa</span>. 
  Much of the magic of WPP is that it hides all this behind what looks to the programmer 
  to be a programmer-defined function in the style of <span class="function">printf</span> 
  from the C Run-Time library. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">MESSAGE_TRACE_HEADER</span> structure is not documented. 
  However, Microsoft has published a C-language definition in the NTWMI.H from the 
  Enterprise edition of the Windows Driver Kit (WDK) for Windows 10 version 1511.
  </p>
  <!--webbot bot="Include" U-Include="../../../../api/etw/_include/appxdeploymentclient.htm" TAG="BODY" startspan -->

<p>Were it not for this relatively recent and possibly unintended disclosure, much 
would anyway be known from type information in symbol files. Curiously though, type 
information for this structure has never appeared in any public symbol files for 
the kernel or for the obvious low-level user-mode DLLs. In the whole of Microsoft’s 
packages of public symbol files, at least to the original Windows 10, relevant type 
information is unknown before Windows 8 and appears in symbol files only for AppXDeploymentClient.dll, 
CertEnroll.dll (before Windows 10) and Windows.Storage.ApplicationData.dll. </p>

<!--webbot bot="Include" endspan i-checksum="57456" -->
  <h2>Layout </h2>
  <p>The <span class="struct">MESSAGE_TRACE_HEADER</span> is 8 bytes in both 32-bit 
  and 64-bit Windows in all known versions. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">union {
    ULONG Marker;
    struct {
        USHORT Size;
        UCHAR Reserved;
        UCHAR Version;
    };
};</pre>
        </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>
        <pre class="source">union {
    ULONG Header;
    WMI_TRACE_MESSAGE_PACKET Packet;
};</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <p>What distinguishes the <span class="struct">MESSAGE_TRACE_HEADER</span> from 
  other <a href="index.htm">Trace Headers</a> is 
  a particular combination of high bits in the <span class="member">Marker</span>. 
  NTWMI.H defines them as: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>Remarks </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x80000000 </td>
        <td><span class="constant">TRACE_HEADER_FLAG</span> </td>
        <td>set in all trace headers </td>
      </tr>
      <tr>
        <td>0x40000000 </td>
        <td><span class="constant">TRACE_HEADER_EVENT_TRACE</span> </td>
        <td>clear, but set in other trace headers </td>
      </tr>
      <tr>
        <td>0x10000000 </td>
        <td><span class="constant">TRACE_MESSAGE</span> </td>
        <td>set, but clear in other trace headers </td>
      </tr>
    </tbody>
  </table>
  <p>While the <span class="struct">WMI_TRACE_MESSAGE_PACKET</span> is not known 
  to have any other use, it is as well presented here: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">USHORT MessageNumber;</pre>
        </td>
      </tr>
      <tr>
        <td>0x02 </td>
        <td>
        <pre class="source">USHORT OptionFlags;</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <p>Both are vital for interpreting the event-specific data that follows the header. 
  The <span class="member">MessageNumber</span> is the primary identifier of what 
  event occurred. It is what the kernel received as the <span class="argument">MessageNumber</span> 
  argument via the documented API functions. The <span class="member">OptionFlags</span> 
  tell what data follow the header. There can be any selection of the following 
  items in the following order: </p>
  <ul>
    <li>a 32-bit sequence number; </li>
    <li>either a 32-bit component ID or a 16-byte GUID (but not both); </li>
    <li>an 8-byte time stamp; </li>
    <li>32-bit thread and process IDs (in that order) as so-called system information;
    </li>
    <li>arbitrary data, as message arguments. </li>
  </ul>
  <p>The <span class="member">Size</span> in the low word of the
  <span class="member">Marker</span> is the total size in bytes of the header and 
  all these items. Note that although the <span class="struct">MESSAGE_TRACE_HEADER</span> 
  always has 8-byte alignment in a trace buffer, the 8-byte time stamp need not 
  have (and typically hasn’t, since a sequence number is usual). </p>
  <p>The first six <span class="member">OptionFlags</span> come directly from the
  <span class="argument">MessageFlags</span> argument of the relevant API functions 
  and indicate which items are present between the header and the arbitrary data:
  </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name"><col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>Versions </th>
        <th>Remarks </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0001 </td>
        <td><span class="constant">TRACE_MESSAGE_SEQUENCE</span> </td>
        <td>5.1 and higher </td>
        <td>32-bit sequence number included from logger </td>
      </tr>
      <tr>
        <td>0x0002 </td>
        <td><span class="constant">TRACE_MESSAGE_GUID</span> </td>
        <td>5.1 and higher </td>
        <td>GUID included from provider via <span class="argument">MessageGuid</span> 
        argument </td>
      </tr>
      <tr>
        <td>0x0004 </td>
        <td><span class="constant">TRACE_MESSAGE_COMPONENT_ID</span> </td>
        <td>5.1 and higher </td>
        <td>component ID included from provider via <span class="argument">MessageGuid</span> 
        argument </td>
      </tr>
      <tr>
        <td>0x0008 </td>
        <td><span class="constant">TRACE_MESSAGE_TIMESTAMP</span> </td>
        <td>5.1 and higher </td>
        <td>time stamp included from logger </td>
      </tr>
      <tr>
        <td>0x0010 </td>
        <td><span class="constant">TRACE_MESSAGE_PERFORMANCE_TIMESTAMP</span>
        </td>
        <td>5.1 and higher </td>
        <td>time stamp uses performance counter (but see below) </td>
      </tr>
      <tr>
        <td>0x0020 </td>
        <td><span class="constant">TRACE_MESSAGE_SYSTEMINFO</span> </td>
        <td>5.1 and higher </td>
        <td>thread ID and process ID included </td>
      </tr>
      <tr>
        <td>0x0040 </td>
        <td><span class="constant">TRACE_MESSAGE_POINTER32</span> </td>
        <td>6.0 and higher </td>
        <td>message traced for 32-bit provider </td>
      </tr>
      <tr>
        <td>0x0080 </td>
        <td><span class="constant">TRACE_MESSAGE_POINTER64</span> </td>
        <td>6.0 and higher </td>
        <td>message traced for 64-bit provider </td>
      </tr>
    </tbody>
  </table>
  <p>In all versions, <span class="constant">TRACE_MESSAGE_COMPONENT_ID</span> has 
  precedence over <span class="constant">TRACE_MESSAGE_GUID</span>. The
  <span class="argument">MessageGuid</span> argument can have supplied only one 
  or the other, not both. If both flags are set, what’s present is the component 
  ID, not the GUID. Note that Microsoft somehow documents <span class="constant">
  TRACE_MESSAGE_COMPONENTID</span> with <span class="function">TraceMessage</span> 
  but not with <span class="function">TraceMessageVa</span>, and seems never to 
  have documented it for kernel-mode use. </p>
  <p>Interpretation of the time-stamping flags is version-dependent. All versions 
  calculate space for a time stamp if either flag is set, but in no known version 
  does an event actually receive a time stamp unless <span class="constant">TRACE_MESSAGE_TIMESTAMP</span> 
  is set. The intention seems to be that <span class="constant">TRACE_MESSAGE_TIMESTAMP</span> 
  indicates that a time stamp is present and then <span class="constant">TRACE_MESSAGE_PERFORMANCE_TIMESTAMP</span> 
  is a refinement to tell which type, but only in version 5.1 does a set
  <span class="constant">TRACE_MESSAGE_PERFORMANCE_TIMESTAMP</span> indicate certainly 
  that the time stamp is from the performance counter (in contrast to the system 
  time). In later versions, the event’s time stamp comes from whatever clock the 
  logger ordinarily uses and <span class="constant">TRACE_MESSAGE_PERFORMANCE_TIMESTAMP</span> 
  is meaningless. Note that Microsoft already had <span class="constant">TRACE_MESSAGE_PERFORMANCE_TIMESTAMP</span> 
  documented as obsolete in the Windows XP Device Driver Kit (DDK). </p>
  <p>The arbitrary data are copied from the addresses and sizes that are given to 
  the API functions as variable arguments or via the <span class="argument">MessageArgList</span> 
  argument. See that no types or sizes are recorded. All data from the argument 
  list is simply aggregated as one blob. Its useful interpretation as placeholders 
  for resolving arguments must be the shared knowledge of provider and consumer, 
  presumably varying according to event-specific identifiers such as the GUID or 
  component ID, and the <span class="member">MessageNumber</span>—and, where pointer 
  and <span class="type">size_t</span> types are expected in the data, on the last 
  two of the <span class="member">OptionFlags</span>. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 7th
    <a href="../../../../../../../../new/16/12.htm">December 2016</a> and was last 
    modified on 30th <a href="../../../../../../../../new/22/10.htm">November 2022</a>.
    </p>
    <!--webbot bot="Include" U-Include="../../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="14250" -->
  </div>
</div>

</body>

</html>
