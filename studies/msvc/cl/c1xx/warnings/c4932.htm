<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Visual C++ Compiler Warning C4932</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>Visual C++ Compiler Warning C4932 </h1>
<h2>Message Text </h2>
<pre class="output">__identifier(<span class="placeholder">identifier</span>) and __identifier(<span class="placeholder">identifier</span>) are indistinguishable</pre>
<h2>Severity </h2>
<p>This is a level 4 warning. </p>
<h2>Circumstances </h2>
<p>Many keywords, as tokens, are permitted multiple names as text. By far the most 
typical, but by no means the only, examples are keywords that may be given with 
either two leading underscores or just one. The multiple names tokenise indistinguishably. 
They all map to the same token, which has a standard name (typically, but again 
not necessarily, the name with two leading underscores). When different names for 
the same keyword are given to <span class="keyword">
<a href="../../../language/keywords/identifier.htm">__identifier</a></span>, the 
identifier tokens that are created each have the same name, i.e., the standard name 
of the keyword. </p>
<p>For example, if <span class="switch">/Ze</span> is active, the keyword token 
whose standard name is <span class="keyword">__cdecl</span> is permitted the other 
names <span class="keyword">_cdecl</span> and <span class="keyword">cdecl</span>. 
Feed any of these to <span class="keyword">__identifier</span> and the identifier 
that is created is named <span class="keyword">__cdecl</span>. </p>
<p>Warning C4932 seems intended to alert that the identifier actually created by
<span class="keyword">__identifier</span> may have a name other than what is given 
as the argument, or that the same identifier can be produced from other arguments. 
The two <span class="placeholder">identifier</span> placeholders in the message 
text are examples of arguments that would produce the same identifier. </p>
<p>Thus, for the preceding example, compiling </p>
<pre class="source">extern int __identifier (cdecl);        // C4932, if /Ze</pre>
<p>with <span class="switch">/Ze</span> produces warning C4932 both to tell the 
programmer that the identifier is not named <span class="identifier">cdecl</span> 
and to help with understanding the compiler’s complaints about redefinition should 
there elsewhere be something like </p>
<pre class="source">void __identifier (__cdecl) (void);     // C4932 and C2365, if /Ze</pre>
<p>That said, the usefulness of warning C4932 is somewhat diminished because, as 
actually implemented, it does not cover the possibilities comprehensively. For warning 
C4932 to occur, the keyword that is given as the argument to
<span class="keyword">__identifier</span> must have among its permitted names one 
that begins with two underscores and another that is this same name but with only 
one leading underscore. The existence of this one-underscore form requires in practice 
that the <span class="switch"><a href="../../cl/options/z$e.htm">/Ze</a></span> 
or <span class="switch"><a href="../options/ze.htm">-ZE</a></span> option be active. 
The keyword as actually given to <span class="keyword">__identifier</span> may be 
the form with two leading underscores, or with one, or it may be another form altogether. 
Except in one case that is surely an oversight (see below), the first and second
<span class="placeholder">identifier</span> placeholders in the message text are 
respectively the forms with two leading underscores and one. </p>
<p>(All the disabled keywords, and also <span class="keyword">__compileBreak</span> 
and <span class="keyword">__feacpBreak</span>, are excluded from the present discussion 
on the grounds that they cannot actually be given as arguments to
<span class="keyword">__identifier</span>. Though the may be placed as text where
<span class="keyword">__identifier</span> expects an argument, the corresponding 
tokens are discarded from the token stream and never contribute to the
<span class="keyword">__identifier</span> syntax.) </p>
<h3>Applicable Keywords </h3>
<p>In the general case for causing warning C4932, the keyword has its standard name 
formed as two underscores followed by some base name, and has at most the one alternative 
form, being one underscore and the same base, which is a keyword only when the
<span class="switch">/Ze</span> or <span class="switch">-ZE</span> option is active.
</p>
<p>Thus, under the <span class="switch">/Ze</span> or <span class="switch">-ZE</span> 
options, giving either <span class="keyword">__</span><span class="placeholder">basename</span> 
or <span class="keyword">_</span><span class="placeholder">basename</span> to
<span class="keyword">__identifier</span> produces an identifier named
<span class="identifier">__</span><span class="placeholder">basename</span>, with 
a warning. The message text is a straightforward alert to these two forms that produce 
the same identifier. The two identifier placeholders in the message text are
<span class="keyword">__</span><span class="placeholder">basename</span> and
<span class="keyword">_</span><span class="placeholder">basename</span> respectively. 
With neither option active, <span class="identifier">_</span><span class="placeholder">basename</span> 
is not a keyword, <span class="keyword">__identifier</span> produces
<span class="identifier">__</span><span class="placeholder">basename</span> from
<span class="keyword">__</span><span class="placeholder">basename</span> and
<span class="identifier">_</span><span class="placeholder">basename</span> from
<span class="keyword">_</span><span class="placeholder">basename</span>, and there 
is nothing to warn about. </p>
<p>The applicable keywords (in their standard forms with two leading underscores) 
for this general case are: </p>
<blockquote>
  <p><span class="keyword">__asm</span>, <span class="keyword">__assume</span>,
  <span class="keyword">__based</span>, <span class="keyword">__declspec</span>,
  <span class="keyword">__except</span>, <span class="keyword">__fastcall</span>,
  <span class="keyword">__finally</span>, <span class="keyword">__forceinline</span>,
  <span class="keyword">__int16</span>, <span class="keyword">__int32</span>,
  <span class="keyword">__int64</span> (if <span class="switch">
  <a href="../../cl/options/zb.htm">/ZB</a></span> ≥ 64), <span class="keyword">
  __int8</span>, <span class="keyword">__leave</span>, <span class="keyword">__multiple_inheritance</span>,
  <span class="keyword">__novtordisp</span>, <span class="keyword">__pragma</span>,
  <span class="keyword">__ptr32</span>, <span class="keyword">__ptr64</span>,
  <span class="keyword">__single_inheritance</span>, <span class="keyword">__stdcall</span>,
  <span class="keyword">__thiscall</span> (if <span class="switch">
  <a href="../options/binl.htm">-Binl</a></span>), <span class="keyword">__try</span>,
  <span class="keyword">__uuidof</span>, <span class="keyword">__virtual_inheritance</span> 
  and <span class="keyword">__w64</span> </p>
</blockquote>
<p>Special cases are presented by three other keywords. </p>
<p>When <span class="switch">/Ze</span> or <span class="switch">-ZE</span> is active, 
giving any of <span class="keyword">__alignof</span>, <span class="keyword">_alignof</span>,
<span class="keyword">__builtin_alignof</span> and <span class="keyword">_builtin_alignof</span> 
to <span class="keyword">__identifier</span> produces an identifier named
<span class="identifier">__builtin_alignof</span>, with a warning. The message text 
refers only to <span class="keyword">__builtin_alignof</span> and
<span class="keyword">_builtin_alignof</span>, no matter which of the four possibilities 
was actually given, but this is only a cosmetic problem. </p>
<p>With <span class="switch">/Za</span> and without <span class="switch">-ZE</span>, 
the single-underscore forms <span class="identifier">_alignof</span> and
<span class="identifier">_builtin_alignof</span> are no longer keywords and present
<span class="keyword">__identifier</span> with no trouble. However, the two double-underscore 
forms, <span class="keyword">__alignof</span> and <span class="keyword">__builtin_alignof</span>, 
still both convert to the one identifier, <span class="identifier">__builtin_alignof</span>. 
Yet there is no warning. </p>
<p>The <span class="keyword">__cdecl</span> keyword differs from the general case 
only by having a third form, <span class="keyword">cdecl</span>, but since it is 
a keyword only when <span class="keyword">_cdecl</span> is also a keyword, the only 
problem it presents is again cosmetic. If <span class="switch">/Ze</span> is active, 
giving <span class="keyword">cdecl</span> as the argument to
<span class="keyword">__identifier</span> produces an identifier named
<span class="identifier">__cdecl</span>, with a warning, as expected, but the message 
text may frustrate since it cites <span class="keyword">__cdecl</span> and
<span class="keyword">_cdecl</span>, rather than what was actually given. </p>
<p>Like <span class="keyword">__builtin_alignof</span>, the
<span class="keyword">inline</span> keyword always permits at least two forms, even 
when the form with one underscore is not a keyword. With <span class="switch">/Za</span> 
and without <span class="switch">-ZE</span>, both <span class="keyword">inline</span> 
and <span class="keyword">__inline</span> are keywords, and both convert to the 
same identifier <span class="identifier">inline</span>, yet there is no warning.
</p>
<p>Note also that <span class="keyword">inline</span> is unusual in that its standard 
form is the one with no underscores. When there is a warning, i.e., when
<span class="switch">/Ze</span> or <span class="switch">-ZE</span> is active and
<span class="keyword">__inline</span>, <span class="keyword">_inline</span> and
<span class="keyword">inline</span> all convert to the same identifier, the code 
for formatting the message text assumes that the standard form has two leading underscores 
and generates the second <span class="placeholder">identifier</span> placeholder 
by dropping a character from the first, so that the hapless programmer who sees 
the warning can wonder what the compiler means by </p>
<pre class="output">__identifier(inline) and __identifier(nline) are indistinguishable</pre>
<h2>Documentation Status </h2>
<p>For who can imagine what reason, the product documentation cites only
<span class="keyword">__finally</span> and <span class="keyword">__try</span> as 
applicable keywords. This is especially odd, since the documentation elsewhere (<span class="citation">C++ 
Keywords</span>) states explicitly that these keywords are not supported in single-underscore 
versions. </p>
<div class="Footer">
  <p class="Dates">This page was created on 20th October 2006 and was last modified 
  on 11th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62552" endspan -->
</div>

</body>

</html>
