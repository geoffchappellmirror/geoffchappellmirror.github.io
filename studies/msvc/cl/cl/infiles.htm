<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CL.EXE Input Files</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<h1>CL.EXE Input Files </h1>
<p>A command-line token that does not begin with a hyphen, forward slash or @ sign 
(and, exceptionally, is not an argument for some earlier option) names an input 
file. CL recognises several types of input file. The type is ordinarily inferred 
from the (case-insensitive) extension in the name as given. </p>
<table>
  <tr>
    <th>Extension </th>
    <th>Type </th>
  </tr>
  <tr>
    <td>.c </td>
    <td>C source file </td>
  </tr>
  <tr>
    <td>.cpp </td>
    <td>C++ source file </td>
  </tr>
  <tr>
    <td>.cxx </td>
    <td>C++ source file </td>
  </tr>
  <tr>
    <td>.def </td>
    <td>linker input file (via <span class="switch">
    <a href="../../link/link/options/def.htm">/def</a></span> option) </td>
  </tr>
  <tr>
    <td>.exp </td>
    <td>linker input file </td>
  </tr>
  <tr>
    <td>.lib </td>
    <td>linker input file </td>
  </tr>
  <tr>
    <td>.obj </td>
    <td>linker input file </td>
  </tr>
  <tr>
    <td>.res </td>
    <td>linker input file </td>
  </tr>
</table>
<p>However, this inference of the type from the file extension is abandoned under 
the influence of the <span class="switch"><a href="options/tc.htm">/TC</a></span>,
<span class="switch"><a href="options/to.htm">/TO</a></span> and
<span class="switch"><a href="options/tp.htm">/TP</a></span> options, which each 
set one type (C source file, object file and C++ source file, respectively) for 
all input files that are named in their own command-line tokens, whatever the file 
extensions. </p>
<p>An input file can also be named through the <span class="switch">
<a href="options/t$c.htm">/Tc</a></span>, <span class="switch">
<a href="options/t$o.htm">/To</a></span> or <span class="switch">
<a href="options/t$p.htm">/Tp</a></span> options, with the file type then being 
implied by the option (C source file, object file or C++ source file, respectively).
</p>
<p>An input file whose type is not decided by the above rules is ordinarily treated 
as an object file, after a warning (<a href="warnings/d4024.htm">D4024</a>). However, 
if the compiler is limited to pre-processing because of a <span class="switch">
<a href="options/e.htm">/E</a></span> or <span class="switch">
<a href="options/ep.htm">/EP</a></span> option (though not the otherwise closely 
related <span class="switch"><a href="options/p.htm">/P</a></span>), unrecognised 
input files are instead treated as C source files, with no warning. </p>
<h2>Compiler Modules </h2>
<p>Each of the different types of input file has a different selection of
<a href="../modules.htm">compiler modules</a> (including the linker) that can be 
involved with the file. </p>
<table>
  <tr>
    <th>Input File Type </th>
    <th>Compiling (C1) </th>
    <th>Compiling (C1XX) </th>
    <th>Processing </th>
    <th>Generating Code (C2) </th>
    <th>Linking (LINK) </th>
  </tr>
  <tr>
    <td>C source file </td>
    <td>yes </td>
    <td>no </td>
    <td>yes </td>
    <td>yes </td>
    <td>yes </td>
  </tr>
  <tr>
    <td>C++ source file </td>
    <td>no </td>
    <td>yes </td>
    <td>yes </td>
    <td>yes </td>
    <td>yes </td>
  </tr>
  <tr>
    <td>linker input file </td>
    <td>no </td>
    <td>no </td>
    <td>no </td>
    <td>no </td>
    <td>yes </td>
  </tr>
</table>
<p>Under the action of various compiler options (<span class="switch"><a href="options/b1_5.htm">/B1_5</a></span>,
<span class="switch"><a href="options/bk.htm">/BK</a></span>,
<span class="switch"><a href="options/$c.htm">/c</a></span>,
<span class="switch"><a href="options/e.htm">/E</a></span>, <span class="switch">
<a href="options/ep.htm">/EP</a></span>, <span class="switch">
<a href="options/p.htm">/P</a></span>, <span class="switch">
<a href="options/z$g.htm">/Zg</a></span>, <span class="switch">
<a href="options/z$s.htm">/Zs</a></span> and <span class="switch">
<a href="options/zx.htm">/ZX</a></span>), one or more modules can be disabled. If 
it turns out that the modules wanted for working with some input file are all disabled, 
the file is ignored after a warning (<a href="warnings/d4027.htm">D4027</a>).
</p>
<div class="Footer">
  <p class="Dates">This page was created on 29th October 2005 and was last modified 
  on 9th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../_include/c0509.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="57989" endspan -->
</div>

</body>

</html>
