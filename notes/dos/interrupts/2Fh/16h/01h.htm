<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Interrupt 2Fh Function 1601h</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/notes.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/notes.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript Header" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="20600" -->
<div class="Main">
  <h1>Interrupt 2Fh Function 1601h </h1>
  <p>This function provides access to the Virtual DOS Application (VDA) interface 
  for creating and managing virtual machines in Windows/386. It is known only in 
  versions 2.03, 2.10 and 2.11. The means of access in version 2.01 is
  <a href="00h.htm"><span class="instruction">int 2Fh</span> function 1600h</a>.
  </p>
  <p>The implementation is in the Virtual DOS Machine Manager (VDMM), loaded from 
  WIN386.386 (distributed as *.386). It executes in protected mode as a virtual-8086 
  monitor and exposes the interrupt to virtual-8086 callers only. </p>
  <h2>Parameters </h2>
  <p>The function uses registers for both input and output. Segment registers are 
  for real-mode addressing only. </p>
  <h3>Input </h3>
  <table>
    <tbody>
      <tr>
        <td><span class="register">ax</span> </td>
        <td>1601h </td>
      </tr>
      <tr>
        <td><span class="register">bx</span> </td>
        <td><span class="register">bl</span> is interrupt number for mouse, else
        <span class="register">bx</span> is FFFFh </td>
      </tr>
      <tr>
        <td><span class="register">es</span>:<span class="register">di</span>
        </td>
        <td>return address for VDA calls </td>
      </tr>
    </tbody>
  </table>
  <p>The input for <span class="register">bx</span> is conveniently what the
  <span class="function">MouseGetIntVect</span> function, as exported from MOUSE.DRV, 
  returns in <span class="register">ax</span>. </p>
  <p>The input for <span class="register">es</span>:<span class="register">di</span> 
  is given in anticipation of getting back an address in <span class="register">
  es</span>:<span class="register">di</span>. Executing at the output address will 
  appear to the virtual-8086 caller like a <span class="instruction">jmp</span> 
  to the input address, after a transition to and from the 32-bit system in ring 
  0. The simplest use is to execute the output address by a far
  <span class="instruction">call</span> which is then balanced by a far
  <span class="instruction">ret</span> at the input address. Symbol tables in the 
  various WIN386.386 binaries name the output address as
  <span class="internal variable">VDA_Call_Adrs</span>, VDA presumably standing 
  for Virtual DOS Application. </p>
  <h3>Success </h3>
  <table>
    <tbody>
      <tr>
        <td><span class="register">al</span> </td>
        <td>FFh </td>
      </tr>
      <tr>
        <td><span class="register">es</span>:<span class="register">di</span>
        </td>
        <td>address of entry point for VDA calls </td>
      </tr>
    </tbody>
  </table>
  <p>The entry point takes input in <span class="register">ax</span>. The high byte 
  selects a system component—what would in later Windows versions be either the 
  Virtual Machine Manager (VMM) or a separate Virtual Device Driver (VxD)—and the 
  low byte is then a function number. Interpretation of other registers depends 
  on the component and function numbers. The very many valid combinations are presented 
  separately, as the <a href="vda.htm">Windows/386 VDA Interface</a>. </p>
  <h3>Failure </h3>
  <p>The function fails, in the sense of leaving registers unchanged, unless called 
  from the System VM. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 4th
    <a href="../../../../../new/22/01.htm">January 2022</a> and was last modified 
    on 13th January 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c22.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="46751" -->
  </div>
</div>

</body>

</html>
