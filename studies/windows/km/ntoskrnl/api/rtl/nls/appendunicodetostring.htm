<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>RtlAppendUnicodeToString</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>RtlAppendUnicodeToString </h1>
<p>The <span class="function">RtlAppendUnicodeToString</span> function modifes a
<span class="struct"><a href="../../../inc/shared/ntdef/unicode_string.htm">UNICODE_STRING</a></span> structure 
so that the string it describes on input has another string appended to it on output.
</p>
<h2>Declaration </h2>
<pre class="source">NTSTATUS 
RtlAppendUnicodeToString (
    UNICODE_STRING *Destination, 
    PCWSTR Source);</pre>
<h3>Parameters </h3>
<p>The required <span class="argument">Destination</span> argument is the address 
of a structure that already has <span class="member">Length</span> bytes of Unicode 
characters at a <span class="member">Buffer</span> whose size in bytes is
<span class="member">MaximumLength</span>. The function may change the
<span class="member">Length</span>. </p>
<p>The optional <span class="argument">Source</span> argument is the address of 
a null-terminated Unicode string to append to whatever characters are already described 
by <span class="argument">Destination</span>. This argument can be
<span class="constant">NULL</span> to append nothing. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../../_include/ntstatus.htm" TAG="BODY" startspan -->

<p>The function returns <span class="constant">STATUS_SUCCESS</span> if successful, 
else a negative error code. </p>

<!--webbot bot="Include" endspan i-checksum="8" -->
<h2>Availability </h2>
<p>The <span class="function">RtlAppendUnicodeToString</span> function is exported 
by name from the kernel and NTDLL is all known versions, i.e., 3.10 and higher.
</p>
<h2>Documentation Status </h2>
<p>The <span class="function">RtlAppendUnicodeToString</span> function is documented 
in all known editions of the Device Driver Kit (DDK) or Windows Driver Kit (WDK) 
since at least the DDK for Windows NT 3.51. Though this documentation is of the 
kernel-mode function as an export from the kernel, it is mostly applicable to the 
user-mode implementation too, both being plausibly compiled from the same source 
file. </p>
<h2>Behaviour </h2>
<!--webbot bot="Include" U-Include="_include/unicode_string.htm" TAG="BODY" startspan -->

<p>The intention of the <span class="struct">UNICODE_STRING</span> structure is 
to keep together both the address and size of a Unicode string, presumably to save 
on passing them as separate arguments for subsequent work with the string and to 
save on repeated re-reading of the whole string to rediscover its size. Indeed, 
the structure keeps two sizes. The <span class="member">Length</span> member is 
the size in bytes of the array of Unicode characters at <span class="member">Buffer</span>. 
If this array is null-terminated, which it explicitly need not be, then
<span class="member">Length</span> does not count the null terminator. The
<span class="member">MaximumLength</span> member is the size in bytes of the memory 
from <span class="member">Buffer</span> onwards. </p>

<!--webbot bot="Include" endspan i-checksum="43448" -->
<p>The <span class="function">RtlAppendUnicodeToString</span> function appends the 
string from <span class="argument">Source</span> to whatever string is already described 
by <span class="argument">Destination</span>. The null terminator is appended too, 
but not counted in the new <span class="member">Length</span>, if it fits within 
the <span class="member">MaximumLength</span>. </p>
<h3>Implementation Detail </h3>
<p>The function succeeds trivially if <span class="argument">Source</span> is
<span class="constant">NULL</span>. </p>
<p>If the string at <span class="argument">Source</span> has more than 0x7FFE characters, 
not counting its null terminator, it is too long to be represented faithfully by 
the 16-bit <span class="member">Length</span> and <span class="member">MaximumLength</span>, 
and so the function fails, returning <span class="constant">STATUS_BUFFER_TOO_SMALL</span>. 
If appending the characters from <span class="argument">Source</span>, not including 
its null terminator, to the <span class="member">Length</span> bytes that are already 
in the <span class="member">Buffer</span> for the <span class="argument">Destination</span> 
is not possible within this buffer’s <span class="member">MaximumLength</span> bytes, 
then the function fails, again returning <span class="constant">STATUS_BUFFER_TOO_SMALL</span>.
</p>
<p>The function appends the characters from <span class="argument">Source</span>, 
not including the null terminator, to the existing whole characters in the
<span class="member">Length</span> bytes at the <span class="argument">Destination</span> 
and adjusts <span class="member">Length</span> to account for the added characters. 
If the new <span class="member">Length</span> is at least a character short of the
<span class="member">MaximumLength</span>, the function appends a null terminator.
</p>
<h3>Variations </h3>
<p>The defence against the string at <span class="argument">Source</span> being 
too long for representation by a <span class="struct">UNICODE_STRING</span> dates 
from version 5.2 and its introduction of <span class="function">
<a href="../string/initunicodestringex.htm">RtlInitUnicodeStringEx</a></span>. Earlier versions 
do not reject too long a string. They may instead append only a portion of the string.
</p>
<p>All versions, if not all uses of the <span class="struct">UNICODE_STRING</span>, 
are better treated as having undefined behaviour if either <span class="member">
Length</span> or <span class="member">MaximumLength</span> is not even. Versions 
before 5.2 are specially prone: for deciding whether a null terminator will fit 
after appending the string from <span class="argument">Source</span>, they ask only 
that the <span class="member">Length</span> be less <span class="member">MaximumLength</span>. 
If the latter is odd, the function may write one byte beyond the buffer’s end.
</p>
<h3>IRQL </h3>
<p>The kernel-mode implementation is in a non-paged section in all versions. Provided 
that <span class="emphasis">both</span> the <span class="struct">UNICODE_STRING</span> 
and the Unicode string that are addressed through the given arguments are in non-paged 
memory, the <span class="function">RtlAppendUnicodeToString</span> function can 
safely be called at <span class="constant">DISPATCH_LEVEL</span> and higher. That 
it can has been documented by Microsoft since at least the DDK for Windows NT 3.51, 
but with only the one condition that “the <span class="argument">Destination</span> 
buffer must be resident.” </p>
<div class="Footer">
  <p class="Dates">This page was created on 2nd
  <a href="../../../../../../../new/20/06.htm">June 2020</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5634" -->
</div>

</body>

</html>
