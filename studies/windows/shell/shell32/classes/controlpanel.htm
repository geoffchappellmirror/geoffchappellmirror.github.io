<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>ControlPanel</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/shell.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="30135" endspan -->
<!--webbot bot="Include" U-Include="../../_include/preview.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" i-checksum="8381" endspan -->
<h1>ControlPanel </h1>
<p>The <span class="class">ControlPanel</span> class is one of many that SHELL32 
exposes through its exported <span class="function">DllGetClass</span> function. 
Instances can therefore be created using such well-documented COM functions as
<span class="function">CoCreateInstance</span>, by anyone who knows the CLSID:
</p>
<table>
  <tr>
    <td><span class="constant">CLSID_ControlPanel</span> </td>
    <td><span class="iid">{21EC2020-3AEA-1069-A2DD-08002B30309D}</span> </td>
  </tr>
</table>
<p>The class implements the following interfaces (in the SHELL32 version 6.00 from 
Windows Vista): </p>
<ul>
  <li><span class="interface">
  <a href="../interfaces/ialiasregistrationcallback.htm">IAliasRegistrationCallback</a></span>
  </li>
  <li><span class="interface"><a href="../interfaces/ibackreferencedobject.htm">
  IBackReferencedObject</a></span> </li>
  <li><span class="interface">IContextMenuCB</span> </li>
  <li><span class="interface">
  <a href="../interfaces/icontrolpanelenumerator.htm">IControlPanelEnumerator</a></span>
  </li>
  <li><span class="interface">
  <a href="../interfaces/idelegatehostitemcontainer.htm">IDelegateHostItemContainer</a></span>
  </li>
  <li><span class="interface">IExplorerPaneVisibility</span> </li>
  <li><span class="interface"><a href="../interfaces/ifoldertype.htm">IFolderType</a></span>
  </li>
  <li><span class="interface">
  <a href="../interfaces/iobjectwithbackreferences.htm">IObjectWithBackReferences</a></span>
  </li>
  <li><span class="interface">IPersistFolder2</span> and its bases
  <span class="interface">IPersistFolder</span> and <span class="interface">IPersist</span>
  </li>
  <li><span class="interface">
  <a href="../interfaces/iregitemcustomattributes.htm">IRegItemCustomAttributes</a></span>
  </li>
  <li><span class="interface">
  <a href="../interfaces/iregitemcustomenumerator.htm">IRegItemCustomEnumerator</a></span>
  </li>
  <li><span class="interface"><a href="../interfaces/iregitemfolder.htm">IRegItemFolder</a></span>
  </li>
  <li><span class="interface">IShellFolder2</span> and its base
  <span class="interface">IShellFolder</span> </li>
  <li><span class="interface">IShellIconOverlay</span> </li>
  <li><span class="interface"><a href="../interfaces/itransferprovider.htm">ITransferProvider</a></span>
  </li>
</ul>
<p>Note that several of these interfaces are acquired by aggregating a
<span class="class"><a href="regfolder.htm">RegFolder</a></span> object. The
<span class="interface">IControlPanelEnumerator</span>,&nbsp;<span class="interface">IRegItemCustomAttributes</span> and
<span class="interface">IRegItemCustomEnumerator</span> interfaces are special in 
that the <span class="class">ControlPanel</span> class provides the only known implementations.
</p>
<h2>Control Panel Items </h2>
<p>As a registry folder, the <span class="class">ControlPanel</span> object has 
a namespace that is built from a standard pattern defined through registry keys, 
after allowing for items that the Control Panel finds for itself. </p>
<h3>CPL Modules </h3>
<p>The native Control Panel items are supported through specially written DLLs that 
are traditionally (but not necessarily) named with CPL as the file extension. All 
such CPL modules export a function, necessarily named <span class="function">CPlApplet</span>, 
which SHELL32 calls in various circumstances as if to send Control Panel messages. 
These messages provide that a CPL module may support multiple Control Panel items, 
typically with different icons. A well-known example is that the Keyboard and Mouse 
items are both supported from MAIN.CPL. </p>
<p>Candidate CPL modules are discovered from several sources: </p>
<ul>
  <li>the <span class="inisect">[MMCPL]</span> section of the CONTROL.INI file, 
  nowadays mapped to the registry key <span class="regkey">HKEY_CURRENT_USER\Control 
  Panel\MMCPL</span>; </li>
  <li>the Windows system directory; </li>
  <li>the registry key <span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Control 
  Panel\CPLs</span>; </li>
  <li>the registry key <span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Control 
  Panel\CPLs</span>. </li>
</ul>
<p>Each candidate module may however be declined. There are several possible reasons:
</p>
<ul>
  <li>a 64-bit CPL with the same filename is present (applies only to 32-bit processes 
  running on 64-bit Windows); </li>
  <li>the same filename is on a list of CPLs that are not to be loaded; </li>
  <li>a CPL with the same filename is known not to be a valid CPL module; </li>
  <li>a CPL with the same filename is already accepted. </li>
</ul>
<p>This list of accepted CPL modules is built when the enumerator is created for 
the <span class="class">ControlPanel</span> object’s <span class="method">EnumObjects</span> 
method. (This method is not called when enumerating the Control Panel in Category 
View, which subject is left for another time.) Building the list does not require 
that any CPL module be loaded as an executable. That does not happen until the list 
is retrieved in successive calls to the enumerator’s <span class="method">Next</span> 
method, and even then is typically avoided by relying on cached information. </p>
<h4>CONTROL.INI </h4>
<p>CPL modules are specified first from the <span class="inisect">[MMCPL]</span> 
section of the CONTROL.INI file. This must once upon a time have been the only way 
that a CPL module could be usable without being installed in the Windows system 
directory. In Microsoft’s best traditions of attention to backward compatibility, 
this old technique continues to be supported. Note however that the CONTROL.INI 
file has long been subject to an early form of virtualisation, such that the
<span class="function">GetPrivateProfileString</span> function actually reads a 
simulated <span class="inisect">[MMCPL]</span> section from the registry. This redirection 
is set up through well-documented mechanisms whose standard configuration is here 
taken as granted: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_CURRENT_USER\Control Panel\MMCPL</span> </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td>anything other than: <br>
    the case-insensitive <span class="regvalue">NumApps</span>; <br>
    the case-sensitive <span class="regvalue">H</span>, <span class="regvalue">W</span>,
    <span class="regvalue">X</span> or <span class="regvalue">Y</span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td><span class="constant">REG_SZ</span> </td>
  </tr>
</table>
<p>For each value other than the few exceptions, the data for the value is the pathname 
of a CPL module. The name of the value has no known significance. </p>
<h4>System Directory </h4>
<p>Every *.CPL file in the Windows System directory is automatically a candidate 
CPL module. In ordinary practice, this is still the main way that CPL modules are 
discovered, but Microsoft discourages it in the hope that the System directory might 
be left alone for files that actually do come with the system. </p>
<h4>Registry Keys </h4>
<p>The modern way to specify CPL modules is to list them in the registry. Each of 
the following keys is enumerated in turn: </p>
<ul>
  <li><span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Control 
  Panel\CPLs</span> </li>
  <li><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Control 
  Panel\CPLs</span> </li>
</ul>
<p>In each key, the data for each value is interpreted as a pathname to a CPL module. 
The name of the value has no known significance. The type of data is immaterial, 
though clearly string data is intended. Note in particular that the interpretation 
provides for expansion of environment variables even if the data type is not
<span class="constant">REG_EXPAND_SZ</span>. </p>
<h4>WOW64 </h4>
<p>When running in a 32-bit process under 64-bit Windows, the System directory is 
subject to WOW64 File System Redirection. Indeed, 64-bit Windows has two System 
directories. The directory that actually is named SYSTEM32 is the System directory 
for 64-bit Windows executables. The other, named SysWOW64, is the System directory 
for 32-bit Windows executables. A 32-bit process running on 64-bit Windows is told 
that the System directory is named SYSTEM32 and its access to any file that it thinks 
is in the SYSTEM32 directory is actually redirected to the file that has the same 
name in the SysWOW64 directory. </p>
<p>This redirection affects the Control Panel also, not as seen familiarly through 
the (64-bit) Windows Explorer but when browsed from a 32-bit process (including 
when the 32-bit EXPLORER is started to View 32-bit Control Panel Items). As each 
CPL module is learnt from the System directory or from either of the
<span class="regkey">CPLs</span> registry keys, it is rejected as a candidate if 
a file of the same name exists in the true System directory. Note that specification 
through the <span class="inisect">[MMCPL]</span> section is not subject to this 
WOW64 issue. </p>
<h4>The Don’t Load Lists </h4>
<p>A candidate CPL module is rejected if its filename appears as a value in either 
of the following registry keys: </p>
<ul>
  <li><span class="regkey">HKEY_CURRENT_USER\Control Panel\don&#39;t load</span>
  </li>
  <li><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Control 
  Panel\don&#39;t load</span> </li>
</ul>
<p>Data for the value is immaterial. The first of the keys is the registry mapping 
of the <span class="inisect">[don&#39;t load]</span> section of the CONTROL.INI file.
</p>
<h4>Invalid or Duplicated </h4>
<p>A candidate CPL module is rejected if a file with the same filename is known 
not to export a function named <span class="function">CPlApplet</span>. This information 
is remembered from earlier attempts at initialisation (for the same process).
</p>
<p>Note throughout that CPL modules are identified by their filename. There is no 
allowance for different modules in different directories to have the same filename. 
A candidate CPL module is rejected if a file with the same filename is already accepted.
</p>
<h4>Presentation Cache </h4>
<p>Except in any sort of Safe Mode or if the license value
<span class="licvalue">shell32-EnableProxyFeature</span> is not enabled, the discovery 
of CPL modules is completed by loading cached details. This does not cause any new 
CPL modules to be found as candidates. It just identifies some Control Panel items 
as being known already, so that the corresponding CPL modules do not have to be 
loaded when enumerated. That caching is skipped in Safe Mode is unsurprising. The 
significance of the license value is not known. In the SHELL32 from Windows Vista, 
the code that interprets this cache is disguised using a technique with which Microsoft 
protects some license-validation code. Specifically, it is sprinkled with INT 3 
breakpoints which execute code that is ordinarily encrypted. </p>
<p>The cached details include such things as are needed to display the item when 
the Control Panel is browsed. Some, such as the friendly name and the description 
(which is nowadays seen only as an infotip), are language-specific, and the cache 
is therefore only valid if the right language is in use. This is guarded through 
the following registry value: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Controls 
    Folder</span> <br>
    <span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Controls 
    Folder (Wow64)</span> </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">Presentation LCID</span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td><span class="constant">REG_DWORD</span> </td>
  </tr>
</table>
<p>The first key is used ordinarily. The second applies to a 32-bit process on 64-bit 
Windows. Data of any type is accepted, up to 4 bytes. When SHELL32 sets the value, 
it sets it as <span class="constant">REG_DWORD</span>. The dword of data is a language 
ID. If it does match the default UI language, then the cache is ignored. </p>
<p>The cache itself is the data from another value in the same key: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Controls 
    Folder</span> <br>
    <span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Controls 
    Folder (Wow64)</span> </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">Presentation Cache</span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td><span class="constant">REG_BINARY</span> </td>
  </tr>
</table>
<p>Again, any type of data is accepted, but when SHELL32 sets the value, it sets 
it as <span class="constant">REG_BINARY</span>. The data is a sequence of variably-sized 
cache entries, each for a different Control Panel item: </p>
<table class="Struct">
  <tr>
    <th>Offset </th>
    <th>Size or Type </th>
    <th>Description </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>dword </td>
    <td>size of structure, in bytes </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>dword </td>
    <td>bit flags </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td><span class="struct">FILETIME</span> </td>
    <td>creation time of CPL module as file </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>dword </td>
    <td>high dword of CPL module’s file size in bytes </td>
  </tr>
  <tr>
    <td>0x14 </td>
    <td>dword </td>
    <td>low dword of CPL module’s file size in bytes </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>dword </td>
    <td>index of item’s icon as resource in CPL module </td>
  </tr>
  <tr>
    <td>0x1C </td>
    <td>dword </td>
    <td>offset in Unicode characters from start of pathname to start of item’s friendly 
    name </td>
  </tr>
  <tr>
    <td>0x20 </td>
    <td>dword </td>
    <td>offset in Unicode characters from start of pathname to start of item’s description
    </td>
  </tr>
  <tr>
    <td>0x24 </td>
    <td>varies </td>
    <td>pathname of CPL module, as null-terminated Unicode string (allowed
    <span class="constant">MAX_PATH</span> characters) </td>
  </tr>
  <tr>
    <td>varies </td>
    <td>varies </td>
    <td>item’s friendly name, as null-terminated Unicode string (allowed
    <span class="constant">MAX_PATH</span> characters) </td>
  </tr>
  <tr>
    <td>varies </td>
    <td>varies </td>
    <td>item’s description, as null-terminated Unicode string (allowed 0x0200 characters)
    </td>
  </tr>
</table>
<p>Two bit flags are supported at offset 0x08. Persistence of the 0x01 bit has no 
known consequence. The bit is clear in a cache entry when first recorded but is 
set in a cache entry that has been read from the value and written back. The 0x02 
bit indicates that the entry has the format that dates from SHELL32 version 6.00. 
However, the bit wasn’t added as a marker of the new format until the version 6.00 
from Windows Server 2003 and Windows XP SP2. The cache itself dates from version 
4.00. </p>
<p>The only change in the format is in how much space is allowed for the strings 
(which are ANSI in the Windows builds and Unicode in the NT builds). The original 
format provides <span class="constant">MAX_PATH</span> characters for the pathname, 
but only 32 and 64 characters for the friendly name and description. These last 
two conform to the documented allowances in the documented <span class="struct">
NEWCPLINFO</span> structure but are much smaller than the <span class="constant">
MAX_PATH</span> and 0x0200 characters that all SHELL32 versions allow when loading 
these strings from resources IDs (as when learnt from an old
<span class="struct">CPLINFO</span> structure). When such strings are copied to 
cache entries, SHELL32 risks a buffer overflow, if only in theory. In practice, 
the one buffer is used for the total of all cache entries and any excess in one 
entry is therefore compensated by slack from other entries, and there is yet more 
slack because few CPL modules need anywhere near as many as
<span class="constant">MAX_PATH</span> characters for their pathnames. </p>
<p>The cache is ignored if it does not have the new format. The test is not only 
that the first cache entry has the 0x02 bit set in its flags but also that the total 
size of data for the value must be at least 0x0834 bytes. (This is, of course, the 
maximum size for any one entry, but taking it as the minimum for the total size 
means that a cache of only a few small entries is ignored as old.) The cache is 
also ignored if it is not plausibly a sequence of the expected structures, i.e., 
if the size at the beginning of any one cache entry is too small or too large, or 
if the total of sizes is too large for the amount of data. </p>
<p>A valid cache comes into its own when Control Panel items are enumerated. Indeed, 
items are enumerated in their cached order. For each cached item, if an accepted 
CPL module has the same filename as the cached item and has matching file details, 
then the item is knowable in terms of its icon, friendly name and description without 
having to load the module. </p>
<p>Entries are added to the cache (in memory) when uncached items are discovered 
during enumeration. The whole of a dirty cache may be flushed to the registry when 
an enumeration ends with no more items to report and certainly written when the 
enumerator is destroyed. </p>
<h3>Namespace </h3>
<p>Ordinarily, the first item in the Control Panel namespace is a
<span class="class"><a href="printers.htm">Printers</a></span> object as a required 
item. Other items in the namespace are loaded from registry keys in the following 
order: </p>
<ul>
  <li><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel\NameSpace</span>
  </li>
  <li><span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel\NameSpace</span>
  </li>
  <li><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel\NameSpace\DelegateFolders</span>
  </li>
  <li><span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel\NameSpace\DelegateFolders</span>
  </li>
  <li><span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\SessionInfo\<span class="placeholder">session</span>\ControlPanel\NameSpace</span>
  </li>
  <li><span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\SessionInfo\<span class="placeholder">session</span>\ControlPanel\NameSpace\DelegateFolders</span>
  </li>
</ul>
<p>in which <span class="placeholder">session</span> is a decimal representation 
of the current session ID. </p>
<p>When the current process is a 32-bit process on 64-bit Windows, there is no required 
item and the registry keys for the namespace have <span class="regkey">ControlPanel</span> 
changed to <span class="regkey">ControlPanelWOW64</span>. </p>
<p>As with all registry folders, an item can be specified in a
<span class="regkey">NameSpace</span> key in either of two ways. Both require a 
CLSID in the standard string representation with curly braces. It can be specified 
either as the name of a subkey or as the default value of a subkey (in which case, 
the name of the subkey has no known signficance). </p>
<h2>Display Names </h2>
<p>The display names of Control Panel items are parsed first according to the syntax 
of registry folders. An item that is defined by a subkey <span class="regkey">{<span class="placeholder">clsid</span>}</span> 
in any of the namespace keys given above has the display name in the usual form 
with the double colon prefix and can in practice be opened by the command </p>
<pre class="input">explorer ::{21ec2020-3aea-1069-a2dd-08002b30309d}\::{<span class="placeholder">clsid</span>} </pre>
<p>The Control Panel itself supports two other syntaxes, which are presumably intended 
for items that are not picked up from the registry folder’s namespace mechanism. 
A Control Panel item may be represented by a canonical name or by an applet ID.
</p>
<h3>Canonical Name </h3>
<p>To have a canonical name, the item must have at least the following registry 
value: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel\NameSpace\<span class="placeholder">canonical</span></span>
    </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">Module</span> </td>
  </tr>
</table>
<p>Though the type of data is not checked, string data is clearly intended. The 
string data, with environment variables expanded, is a pathname to the item as a 
CPL module. </p>
<p>No particular syntax is expected of the canonical name (though it would be redundant 
to use a CLSID with curly braces). With the Control Panel’s namespace, an item with 
a canonical name is represented by the canonical name. For instance, since Windows 
Vista is installed with the Internet Options item defined under the canonical name 
Internet_Options, it is in practice possible to open the Internet Options dialog 
box by running </p>
<pre class="input">explorer ::{21ec2020-3aea-1069-a2dd-08002b30309d}\Internet_Options </pre>
<p>Definition through a canonical name provides for some other specifications through 
other values in the same key: </p>
<ul>
  <li><span class="regvalue">IconIndex</span>, intended as a dword, to specify an 
  icon (as a resource ID within the module) for use when displaying the item;
  </li>
  <li><span class="regvalue">Info</span>, intended as a string, to provide a description 
  of the item, such as used in tooltips; </li>
  <li><span class="regvalue">Name</span>, intended as a string, to provide the friendly 
  name of the item. </li>
</ul>
<p>Note that one module can provide multiple Control Panel items, with a different 
canonical name for each. </p>
<p>For the purpose just of parsing a display name into a PIDL, use of the canonical 
name is very efficient, since everything that is needed for the item ID list at 
the Control Panel’s level is already known from the values in the one registry key. 
It is strange, then, that Microsoft seems not to document thse registry values. </p>
<h3>Applet ID </h3>
<p>Another set of names for Control Panel items is defined elsewhere in the registry:
</p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Control 
    Panel\Extended Properties\System.Software.AppId</span> </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue"><span class="placeholder">module</span>,@i-<span class="placeholder">iconindex</span></span>
    <br>
    <span class="regvalue"><span class="placeholder">module</span></span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td><span class="constant">REG_SZ</span> </td>
  </tr>
  <tr>
    <td>Data: </td>
    <td><span class="regsz">{<span class="placeholder">appid</span>}</span> </td>
  </tr>
</table>
<p>The item is represented by the applet ID, with its curly braces. For instance, 
Windows Vista is installed with an applet ID for the Internet Options item, which 
may in practice be opened by running </p>
<pre class="input">explorer ::{21ec2020-3aea-1069-a2dd-08002b30309d}\{a3dd4f92-658a-410f-84fd-6fbbbef2fffe} </pre>
<p>Note the (necessary) absence of the double colon in the last path element.
</p>
<p>Again, one module can provide multiple Control Panel items, with a different 
applet ID for each. To do so, each item must have its own registry value. The module 
must therefore specify a different icon for each item and must know the syntax (which 
Microsoft seems not to document). </p>
<p>For the purpose just of parsing a display name into a PIDL, use of an applet 
ID is inefficient. To determine its friendly name and description (and typically 
also the icon index), the module must be found in a list of loaded modules, or it 
must be loaded and interrograted (via its <span class="function">CPlApplet</span> 
function). </p>
<h2>Availability </h2>
<p>The <span class="class">ControlPanel</span> class is implemented in SHELL32 version 
4.00 and higher. </p>
<div class="Footer">
  <p class="Dates">This page was created on 7th August 2009 and was last modified 
  on 29th October 2010. </p>
  <!--webbot bot="Include" U-Include="../../_include/c0910.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009-2010. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62800" endspan -->
</div>

</body>

</html>
