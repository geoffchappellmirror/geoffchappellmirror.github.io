<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CTaskCondition</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/shell.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="30135" endspan -->
<h1>CTaskCondition </h1>
<p>The <span class="class">CTaskCondition</span> class is one of many that SHELL32 
exposes through its exported <span class="function">DllGetClass</span> function. 
Instances can therefore be created using such well-documented COM functions as
<span class="function">CoCreateInstance</span>, by anyone who knows the CLSID:
</p>
<table>
  <tr>
    <td><span class="constant">CLSID_CTaskCondition</span> </td>
    <td><span class="iid">{EE8E4870-A889-4DC4-969F-F38F707F4AC2}</span> </td>
  </tr>
</table>
<p>The <span class="class">CTaskCondition</span> class implements the following 
interfaces (in the SHELL32 version 6.00 from Windows Vista): </p>
<ul>
  <li><span class="interface"><a href="../interfaces/itaskcondition.htm">ITaskCondition</a></span>
  </li>
  <li><span class="interface"><a href="../interfaces/itaskconditioninit.htm">ITaskConditionInit</a></span>
  </li>
</ul>
<p>Though the <span class="class">CTaskCondition</span> class may have been written 
solely to support the Control Panel, the conditions it can test are surely useful 
for many purposes. Each instance of the class tests one condition which can be specified 
through either method of the <span class="interface">ITaskConditionInit</span> interface. 
The <span class="method">Init</span> method provides for the condition to be named, 
for its test to be inverted, and for some number of name-value pairs to be set for 
the condition. The <span class="method">InitFromXML</span> method provides for the 
same, but with the specification to be drawn from an XML DOM node. Once the condition 
has been primed, it may be evaluated any number of times by calling the
<span class="method">Eval</span> method of the <span class="interface">ITaskCondition</span> 
interface. </p>
<p>The point to the XML DOM node is apparent from inspection of SHELL32’s own task 
XML file (number 21 in the SHELL32 resources, if only for the version 6.00 from 
Windows Vista). Though Microsoft does present annotated examples of task XML files 
such as may be followed by non-Microsoft programmers of Control Panel items, the 
examples have no <span class="tag">&lt;sh:conditions&gt;</span> blocks and thus don’t 
demonstrate how to make display of a Control Panel item conditional on some expected 
hardware or software support. </p>
<h2>Supported Conditions </h2>
<p>The following conditions are supported by the SHELL32 version 6.00 from Windows 
Vista: </p>
<table>
  <colgroup>
    <col class="Remarks" span="2">
  </colgroup>
  <tr>
    <th>Condition </th>
    <th>Properties </th>
  </tr>
  <tr>
    <td>shcond://v1#IsAuxDisplayConnected </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsAuxDisplayConnectedAndAutoWakeEnabled </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsBrightnessAvailable </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsConnectedToInternet </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsDateInRange </td>
    <td>Before <br>
    After </td>
  </tr>
  <tr>
    <td>shcond://v1#IsGlassOn </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsMachineOnDomain </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsMachineNotOnDomainAndDomainIsAvail </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsMobilePC </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsMuiEnabled </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsOfflineFilesEnabled </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsPenAvailable </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsPresentationSettingsEnabled </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsServer </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsSlapiEnabled </td>
    <td>ValueName </td>
  </tr>
  <tr>
    <td>shcond://v1#IsTabletPC </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsTouchAvailable </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#IsUserAdmin </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>shcond://v1#RegkeyExists </td>
    <td>Regkey </td>
  </tr>
  <tr>
    <td>shcond://v1#RegvalEquals </td>
    <td>Regkey <br>
    Regval <br>
    RegvalExpected </td>
  </tr>
  <tr>
    <td>shcond://v1#RegvalExists </td>
    <td>Regkey <br>
    Regval </td>
  </tr>
  <tr>
    <td>shcond://v1#SkuEquals </td>
    <td>Sku </td>
  </tr>
</table>
<p>The condition “shcond://v1#IsDateInRange” requires at least one Before or After 
property. It evaluates as many as given, answering for whether all constraints are 
true of the current date and time. For all other conditions where more than one 
property is shown, all are required. </p>
<p>Some of the tested conditions are very much the sort of thing on which programmers 
can spend a lot of time with little certainty of having coded a reliable test. So, 
how nice of the shell to provide a standardisation! </p>
<p>Detailed documentation of <span class="emphasis">all</span> conditions is left 
for another time, not least for the trouble of deciding the most suitable format 
for presenting them. Some are nearly trivial and many are not substantial enough 
to justify separate pages. Yet others involve enough code that the descriptions 
would be too complex for inclusion just as a section on this page. If only for now, 
a selection is documented immediately below. </p>
<h3>IsAuxDisplayConnected </h3>
<p>The “shcond://v1#IsAuxDisplayConnected” condition evaluates as true if a Windows 
SideShow-compatible device is connected. </p>
<p>The test is to ask SETUPAPI whether it has at least some device information for 
the SideShow device class. The <span class="function">SetupDiGetClassDevsEx</span> 
function is called with <span class="constant">GUID_DEVCLASS_SIDESHOW</span> as 
its first argument and with nothing for all other arguments. If this succeeds, then 
the returned handle is passed to the <span class="function">SetupDiEnumDeviceInfo</span> 
function to obtain the first device information element. If this function succeeds 
and the last error code is not <span class="constant">ERROR_NO_MORE_ITEMS</span>, 
then the condition evaluates as true. </p>
<h3>IsAuxDisplayConnectedAndAutoWakeEnabled </h3>
<p>The “shcond://v1#IsAuxDisplayConnectedAndAutoWakeEnabled” condition adds to the 
basic “shcond://v1#IsAuxDisplayConnected” condition by also testing for whether 
automatic waking is allowed. </p>
<p>Automatic waking of SideShow devices is subject to administrative policy, through 
the following registry setting in either of two keys (listed in decreasing order 
of precedence): </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\SideShow</span>
    <br>
    <span class="regkey">HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\SideShow</span>
    </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">AutoWakeDisabled</span> </td>
  </tr>
  <tr>
    <td>Default: </td>
    <td>0 </td>
  </tr>
</table>
<p>Any four bytes of data are accepted. Any non-zero value means that automatic 
waking is disabled and the condition evaluates as false. </p>
<p>This registry setting has user-interface support through the Group Policy Object 
Editor, as “Turn off automatic wake” in the Windows SideShow administrative template 
(shown under Windows Components). </p>
<h3>IsMobilePC </h3>
<p>The “shcond://v1#IsMobilePC” condition evaluates as true if Windows is running 
on a mobile PC (or is configured as if running on a mobile PC). The Control Panel 
uses this condition to decide whether to show the Mobile PC category of Control 
Panel items. </p>
<p>The test has two parts. The condition is true if either part succeeds. </p>
<p>The first determination is of whether the machine has the power configuration 
of a laptop. If the POWRPROF function <span class="function">PowerDeterminePlatformRole</span> 
returns <span class="constant">PlatformRoleMobile</span> (2), then the condition 
evaluates as true. If it returns <span class="constant">PlatformRoleDesktop</span> 
(1), then refinement is sought from another POWRPROF function,
<span class="function">GetPwrCapabilities</span>. If the returned data has the
<span class="member">SystemBatteriesPresent</span> member as true but the
<span class="member">BatteriesAreShortTerm</span> member as false, then the condition 
evaluates as true. </p>
<p>The other part to the test is a registry setting: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel</span>
    </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">ShowCategoryMobilePC</span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td>boolean </td>
  </tr>
  <tr>
    <td>Default: </td>
    <td>false </td>
  </tr>
</table>
<p>Data of various types is accepted (following the rules for the documented
<span class="function">SHRegGetBoolUSValue</span> function). The setting, and thence 
the condition, evaluates as true if <span class="constant">REG_DWORD</span> data 
is non-zero, if any of the first four bytes of <span class="constant">REG_BINARY</span> 
data is non-zero, or if case-insensitive <span class="constant">REG_SZ</span> or
<span class="constant">REG_EXPAND_SZ</span> data is any of <span class="regsz">YES</span>,
<span class="regsz">TRUE</span> or <span class="regsz">1</span>. No user-interface 
support is known for this setting. </p>
<p></p>
<h3>IsPenAvailable </h3>
<p>The “shcond://v1#IsTouchAvailable” condition evaluates as true if a pen device 
is usable. Evaluation is wholly dependent on one registry setting: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Tablet 
    PC</span> </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">DeviceKind</span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td><span class="constant">REG_DWORD</span> </td>
  </tr>
</table>
<p>The condition evaluates as true if the 0x80000000 and 0x00000004 bits are both 
set in the dword of data. </p>
<h3>IsPresentationSettingsEnabled </h3>
<p>The “shcond://v1#IsPresentationSettingsEnabled” condition evaluates as true if 
running on a mobile PC that is allowed Presentation Settings. </p>
<p>Evaluation is in three parts. All must be true for the condition to evaluate 
as true. First, the “shcond://v1#IsMobilePC” condition must evaluate as true. Second, 
Presentation Settings must be licensed. The DWORD data for the license value
<span class="licvalue">MobilePCPresentationSettings-EnablePresentationSettings</span> 
must be non-zero (which is true only for the Home Premium, Business and Ultimate 
editions of WIndows Vista and for no editions of Windows Server 2008.) Finally, 
Presentation Settings must not be disabled by policy. This means that the following 
registry value in either of two keys (listed in decreasing order of precedence) 
must not be non-zero: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\PresentationSettings</span>
    <br>
    <span class="regkey">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\PresentationSettings</span>
    </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">NoPresentationSettings</span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td>boolean </td>
  </tr>
  <tr>
    <td>Default: </td>
    <td>false </td>
  </tr>
</table>
<p>This setting has user-interface support through the Group Policy Object Editor, 
as “Turn off Windows presentation settings” in the Presentation Settings administrative 
template (shown under Windows Components). </p>
<h3>IsTouchAvailable </h3>
<p>The “shcond://v1#IsTouchAvailable” condition evaluates as true if a touch-screen 
device is usable. Evaluation is wholly dependent on one registry setting: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Tablet 
    PC</span> </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">DeviceKind</span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td><span class="constant">REG_DWORD</span> </td>
  </tr>
</table>
<p>The condition evaluates as true if the 0x80000000 and 0x00000001 bits are both 
set in the dword of data. </p>
<h3>IsUserAdmin </h3>
<p>The “shcond://v1#IsUserAdmin” condition evaluates as true if the current user 
has administrative privilege (whether currently elevated or not). </p>
<p>Evaluation involves as many as three queries for information about the access 
token for the current thread, if available, else the current process, but only the 
first two queries actually matter to the result. If a query for the
<span class="constant">TokenElevationType</span> information class succeeds and 
reports the type as <span class="constant">TokenElevationTypeFull</span>, then the 
user is elevated and the condition evaluates as true. If the type is
<span class="constant">TokenElevationTypeLimited</span>, then the user at least 
has the means to be elevated and the condition evaluates as true. If the type is
<span class="constant">TokenElevationTypeDefault</span>, then the token is queried 
for the <span class="constant">TokenElevation</span> information class. If this 
succeeds and the token is elevated, then the condition evaluates as true. In all 
other cases, the condition evaluates as false. The redundant query is for the
<span class="constant">TokenUIAccess</span> information class. </p>
<p>Note that this test is very different from that of the documented
<span class="function">IsUserAnAdmin</span> function (which tests for membership 
of the Administrators group). </p>
<h3>SkuEquals </h3>
<p>The “shcond://v1#SkuEquals” condition evaluates as true if executing on the given 
Windows product type. </p>
<p>The <span class="interface">INamedPropertyStore</span> given to the
<span class="method">Eval</span> method must provide a property named Sku whose 
case-insensitive string value is to be tested against the product type obtained 
from the <span class="function">GetProductInfo</span> function. The following are 
supported by the SHELL32 version 6.00 from Windows Vista (original and SP1): </p>
<table>
  <tr>
    <th>Sku </th>
    <th>Matching Product Types </th>
  </tr>
  <tr>
    <td>anybusiness </td>
    <td><span class="constant">PRODUCT_BUSINESS</span> <br>
    <span class="constant">PRODUCT_SMALLBUSINESS_SERVER</span> <br>
    <span class="constant">PRODUCT_BUSINESS_N</span> </td>
  </tr>
  <tr>
    <td>anyhome </td>
    <td><span class="constant">PRODUCT_HOME_BASIC</span> <br>
    <span class="constant">PRODUCT_HOME_PREMIUM</span> <br>
    <span class="constant">PRODUCT_HOME_BASIC_N</span> <br>
    <span class="constant">PRODUCT_STARTER</span> <br>
    <span class="constant">PRODUCT_HOME_PREMIUM_N</span> <br>
    </td>
  </tr>
  <tr>
    <td>anyn </td>
    <td><span class="constant">PRODUCT_HOME_BASIC_N</span> <br>
    <span class="constant">PRODUCT_BUSINESS_N</span> <br>
    <span class="constant">PRODUCT_HOME_PREMIUM_N</span> <br>
    <span class="constant">PRODUCT_ENTERPRISE_N</span> <br>
    <span class="constant">PRODUCT_ULTIMATE_N</span> </td>
  </tr>
  <tr>
    <td>business </td>
    <td><span class="constant">PRODUCT_BUSINESS</span> </td>
  </tr>
  <tr>
    <td>businessn </td>
    <td><span class="constant">PRODUCT_BUSINESS_N</span> </td>
  </tr>
  <tr>
    <td>enterprise </td>
    <td><span class="constant">PRODUCT_ENTERPRISE</span> <br>
    <span class="constant">PRODUCT_ENTERPRISE_SERVER</span> <br>
    <span class="constant">PRODUCT_ENTERPRISE_SERVER_CORE</span> <br>
    <span class="constant">PRODUCT_ENTERPRISE_SERVER_IA64</span> <br>
    <span class="constant">PRODUCT_ENTERPRISE_N</span> </td>
  </tr>
  <tr>
    <td>enterprisen </td>
    <td><span class="constant">PRODUCT_ENTERPRISE_N</span> </td>
  </tr>
  <tr>
    <td>homebasic </td>
    <td><span class="constant">PRODUCT_HOME_BASIC</span> </td>
  </tr>
  <tr>
    <td>homen </td>
    <td><span class="constant">PRODUCT_HOME_BASIC_N</span> </td>
  </tr>
  <tr>
    <td>homepremium </td>
    <td><span class="constant">PRODUCT_HOME_PREMIUM</span> </td>
  </tr>
  <tr>
    <td>homepremiumn </td>
    <td><span class="constant">PRODUCT_HOME_PREMIUM_N</span> </td>
  </tr>
  <tr>
    <td>smallbusiness </td>
    <td><span class="constant">PRODUCT_SMALLBUSINESS_SERVER</span> </td>
  </tr>
  <tr>
    <td>starter </td>
    <td><span class="constant">PRODUCT_STARTER</span> </td>
  </tr>
  <tr>
    <td>ultimate </td>
    <td><span class="constant">PRODUCT_ULTIMATE</span> </td>
  </tr>
  <tr>
    <td>ultimaten </td>
    <td><span class="constant">PRODUCT_ULTIMATE_N</span> </td>
  </tr>
</table>
<p>The properties “anyn”, “enterprisen”, “homepremiumn” and “ultimaten” are not 
recognised before Windows Vista SP1 and Windows Server 2008. </p>
<h2>Availability </h2>
<p>The <span class="class">CTaskCondition</span> class is implemented in the SHELL32 
version 6.00 from Windows Vista, and higher. </p>
<!--webbot bot="Include" U-Include="_include/undoc600-vista.htm" TAG="BODY" startspan -->

<p>Though new for Windows Vista, this class is not documented by Microsoft in the 
January 2007 edition of the Software Development Kit (SDK) for Windows Vista. </p>

<!--webbot bot="Include" i-checksum="14759" endspan -->
<div class="Footer">
  <p class="Dates">This page was created on 10th August 2009 and was last modified 
  on 26th August 2009. </p>
  <!--webbot bot="Include" U-Include="../../_include/c09.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="53291" endspan -->
</div>

</body>

</html>
