<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>NTDEF.H</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/km.css">
<link rel="stylesheet" type="text/css" href="_styles/extractions.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="54033" -->
<h1>NTDEF.H </h1>
<p>The public symbol file NTKRPAMP.PDB for the original release of Windows 10 tells 
that the kernel is built with the NTDEF.H header at </p>
<blockquote>
  d:\th.public.fre\shared\inc\minwin
</blockquote>
<p>and draws from it the type definitions that are tabulated below. </p>
<p>Nowadays, NTDEF.H is among the headers in the Software Development Kit (SDK). 
It is there in the “shared” subdirectory with many other headers that are intended 
for use in both kernel-mode and user-mode programming. The SDK is intended to be 
installed before the Windows Driver Kit (WDK), typically from having installed Visual 
Studio first. Before Windows 8, kernel-mode programming kits were self-standing 
and so NTDEF.H is in the WDK and is earlier in the Device Driver Kit (DDK). Indeed, 
NTDEF.H is ancient, being one of relatively few headers in the DDK for Windows NT 
3.1. </p>
<p>NTDEF.H defines many of the basic types for all of Windows programming. It is 
directly included by each of the standard headers for kernel-mode programming, here 
meaning WDM.H, NTDDK.H and NTIFS.H. Much of its content is duplicated in other headers, 
both for kernel-mode and user-mode programming. The line numbers on the left are 
known from the symbol file. All agree with the NTDEF.H from the SDK for the original 
release of Windows 10. The line numbers on the right are from headers that are readily 
available in the WDK or SDK and which are thought to acquire their definitions of 
these types as duplicates from NTDEF.H. </p>
<table>
  <colgroup>
    <col class="LineNumber"><col class="Name"><col class="LineNumber" span="4">
  </colgroup>
  <tr>
    <th>Line Number </th>
    <th>Type </th>
    <th>MINIPORT.H </th>
    <th>MINITAPE.H </th>
    <th>WINNT.H </th>
    <th>WUDFWDM.H </th>
  </tr>
  <tr>
    <td>629 </td>
    <td>struct <span class="struct">_QUAD</span> </td>
    <td>582 </td>
    <td>588 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>709 </td>
    <td>struct <span class="struct">_PROCESSOR_NUMBER</span> </td>
    <td>662 </td>
    <td>668 </td>
    <td>567 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>720 </td>
    <td>struct <span class="struct">_GROUP_AFFINITY</span> </td>
    <td>673 </td>
    <td>679 </td>
    <td>578 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1081 </td>
    <td>union <span class="union">_LARGE_INTEGER</span> </td>
    <td>862 </td>
    <td>868 </td>
    <td>791 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1086 </td>
    <td>unnamed struct for <span class="member">u</span> in <span class="union">
    _LARGE_INTEGER</span> </td>
    <td>867 </td>
    <td>873 </td>
    <td>796 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1099 </td>
    <td>union <span class="union">_ULARGE_INTEGER</span> </td>
    <td>880 </td>
    <td>886 </td>
    <td>809 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1104 </td>
    <td>unnamed struct for <span class="member">u</span> in <span class="union">
    _ULARGE_INTEGER</span> </td>
    <td>885 </td>
    <td>891 </td>
    <td>814 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1128 </td>
    <td>struct <span class="struct">_LUID</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>838 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1386 </td>
    <td>enum <span class="enum">_EVENT_TYPE</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>137 </td>
  </tr>
  <tr>
    <td>1427 </td>
    <td>struct <span class="struct">_STRING</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>156 </td>
  </tr>
  <tr>
    <td>1467 </td>
    <td>struct <span class="struct">
    <a href="../../inc/shared/ntdef/unicode_string.htm">_UNICODE_STRING</a></span>
    </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>177 </td>
  </tr>
  <tr>
    <td>1528 </td>
    <td>struct <span class="struct">_LIST_ENTRY</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>1083 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1538 </td>
    <td>struct <span class="struct">_SINGLE_LIST_ENTRY</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>1093 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1552 </td>
    <td>struct <span class="struct">
    <a href="../../inc/shared/ntdef/rtl_balanced_node.htm">_RTL_BALANCED_NODE</a></span>
    </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1583 </td>
    <td>struct <span class="struct">LIST_ENTRY32</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>1104 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1589 </td>
    <td>struct <span class="struct">LIST_ENTRY64</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>1110 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1625 </td>
    <td>struct <span class="struct">_STRING32</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1639 </td>
    <td>struct <span class="struct">_STRING64</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1697 </td>
    <td>struct <span class="struct">_OBJECT_ATTRIBUTES</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>222 </td>
  </tr>
  <tr>
    <td>2085 </td>
    <td>enum <span class="enum">_NT_PRODUCT_TYPE</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>Whether the kernel’s source code includes NTDEF.H directly or through some other 
header is not known, though the latter seems more likely. It is known, however, 
that this header is not WDM.H, NTDDK.H or NTIFS.H. </p>
<h2>Type Information Disclosure </h2>
<p>However NTDEF.H gets included by the kernel’s source code, it’s included early. 
This is true also for nearly all kernel-mode source code since a standard header 
is typically the first inclusion and it in turn includes NTDEF.H very early. What 
type information is present in Microsoft’s public symbol files for kernel-mode executables 
therefore begins identically in almost all of them and in very much the same way 
in the handful of exceptions. If you’re a reverse engineer—or even if you’re a Microsoft 
programmer who is concerned about what’s revealed by public symbol files or has 
an opinion about what can only be learnt from source code—you might do well to familiarise 
from NTDEF.H as the readiest example of type information getting into symbol files 
from headers. </p>
<p>In the public symbol files for the kernel, and in most others that have type 
information, NTDEF.H is the first header to be named in the PDB stream (4) that 
tells which user-defined types came from which headers, but it is only the second 
to contribute type information (to stream 2). How this happens is that before NTDEF.H 
defines any class, structure, union or enumeration, it includes BASETSD.H, which 
in turn defines several inline routines that use built-in types with just enough 
elaboration to need their own entries in the type information. Use of
<span class="type">void const *</span> and <span class="type">void const * __ptr64</span> 
by <span class="routine">PtrToPtr64</span> and <span class="routine">Ptr64ToPtr</span> 
in BASETSD.H accounts for the first three type-information entries in public symbol 
files for the 32-bit kernel. These routines are macros when building for 64-bit 
Windows. Instead, the first seven entries in public symbol files for the 64-bit 
kernel record that the inline routines <span class="routine">HandleToULong</span>,
<span class="routine">ULongToHandle</span>, <span class="routine">LongToHandle</span>,
<span class="routine">IntToPtr</span>, <span class="routine">UIntToPtr</span> and
<span class="routine">Ptr32ToPtr</span> use <span class="type">void const *</span>,
<span class="type">unsigned long const</span>, <span class="type">long const</span>,
<span class="type">int const</span>, <span class="type">unsigned int const</span> 
and <span class="type">void const * __ptr32</span>. Why should you trouble about 
simple compounds of built-in types? Not for themselves, of course, but to learn 
from the start that just using a type in the body of an inline routine is enough 
to get type information created, regardless of whether the inline routine is ever 
referenced anywhere else in any code. </p>
<p>Next come the first entries from NTDEF.H itself. These demonstrate the same point 
but now for user-defined types, here specifically structures. Type information is 
created for <span class="struct">LIST_ENTRY64</span> and <span class="struct">LIST_ENTRY32</span> 
because of their use by the inline routine <span class="routine">ListEntry32To64</span>. 
The only way the kernel is unusual in this respect is that its symbol file would 
eventually pick up these structures from later use, .e.g., from the
<span class="member">TlsLinks</span> member of the <span class="struct">_TEB64</span> 
structure. Almost every kernel-mode executable whose public symbol file has any 
type information at all has it for <span class="struct">LIST_ENTRY32</span> and
<span class="struct">LIST_ENTRY64</span> just for including NTDEF.H. See that it 
doesn’t matter that the executable’s own code makes no use of the structures, just 
that NTDEF.H uses them in inline routines even if these routines never are inlined 
into any of the executable’s code. For these particular structures, the immediate 
result is nothing but a small waste of space in the symbol files. For other structures, 
it’s a possibly unwanted disclosure. </p>
<p>Unnoticed use of a type by otherwise unused inline routines in headers seems 
all too possible as the main mechanism by which Microsoft’s programmers intend that 
a structure is their internal plaything, yet the structure’s name and the names, 
types and offsets of its members end up in public symbol files and then as common 
knowledge. Microsoft’s programmers have even opined in public that inline routines 
in headers that Microsoft doesn’t publish are secrets whose knowledge outside Microsoft 
is explained only by leaked source code. The reality is that if a routine is declared 
in a header and then is used anywhere else, even just in the same or another header, 
then if the public symbol file has type information, the routine’s type is disclosed. 
So too is its name, if building with the compiler from Visual Studio 2012 or later. 
This is very much the sort of disclosure that might be missed by programmers, even 
Microsoft’s, but also by reverse engineers (since their work seems to depend ever 
more on what their tools tell them and less on actually knowing their craft).
</p>
<p>This disclosure of inline routines can be seen at work just from NTDEF.H as the 
most ready example. Indeed, it is shown by the very next entries in the type information 
in the public symbol files for the kernel. It comes about because NTDEF.H includes 
GUIDDEF.H which in turn includes STRING.H from the kernel-mode implementation of 
the C Run Time (CRT). This STRING.H defines <span class="routine">strnlen</span> 
as an inline routine. Its use of <span class="type">char const *</span> creates 
type information, as pointed out above. What’s new in our quick survey of simple 
examples is that <span class="routine">strnlen</span> is called from another inline 
routine, <span class="routine">strnlen_s</span>, not much further into STRING.H. 
That the one routine is called from another counts as use of a type. Specifically, 
it creates type information for a pointer to a function with the prototype of the 
referenced routine. Moreover, the referenced routine gets named in the PDB stream 
that tells which headers supplied which types. See that it doesn’t matter whether 
either routine is used anywhere else in the kernel’s source code. Mere inclusion 
of STRING.H is enough to leave a trace of the inline routine. </p>
<h2>Extraction </h2>
<p>NTDEF.H is also a ready illustration of how some, if not many, headers in the 
WDK and SDK are created from some sort of script or master header that extracts 
from yet more headers. This applies especially to some of the most prominent headers: 
WDM.H, NTDDK.H and NTIFS.H for kernel-mode programming and WINNT.H for user-mode 
programming. As noted above, those three standard headers for kernel-mode programming 
include NTDEF.H directly. Some specialised drivers, known as minidrivers, interact 
with the kernel through a port driver. Ideally, they have no direct interaction 
with the kernel and so their source code does not need any of the big three standard 
headers. What they instead include from the WDK is either MINIPORT.H or MINITAPE.H. 
Rather than include NTDEF.H, these headers duplicate much of it. This duplication 
can also be seen in the WUDFWDM.H that is a standard inclusion in source code for 
user-mode drivers and in WINNT.H which almost all user-mode Windows source code 
includes indirectly through WINDOWS.H. </p>
<p>Each of these headers has one contiguous region in which each line is a duplicate 
or slight edit of a corresponding line in NTDEF.H. For the headers from the WDK 
and SDK for the original release of Windows 10, these regions are: </p>
<ul>
  <li>MINIPORT.H lines 37 to 1359; </li>
  <li>MINITAPE.H lines 43 to 1117; </li>
  <li>WINNT.H lines 34 to 2272; </li>
  <li>WINNT.RH lines 16 to 487; </li>
  <li>WUDFWDM.H lines 38 to 273. </li>
</ul>
<p>Moreover, the correspondence is well-ordered: for each line in succession in 
these headers, the corresponding line is further into NTDEF.H. These corresponding 
lines in NTDEF.H make disjoint regions. Since NTDEF.H is not very large, the full 
map is perhaps instructive without being too tedious: </p>
<table class="Extractions">
  <colgroup class="Master">
    <col class="LineNumber"><col class="Left LineNumber">
    <col class="Left LineNumber">
  </colgroup>
  <colgroup class="Targets">
    <col class="Right LineNumber"><col class="LineNumber" span="4">
  </colgroup>
  <tr>
    <th class="Left" colspan="3">NTDEF.H </th>
    <th class="Right">MINIPORT.H </th>
    <th>MINITAPE.H </th>
    <th>WINNT.H </th>
    <th>WINNT.RH </th>
    <th>WUDFWDM.H </th>
  </tr>
  <tr>
    <td>24-25 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>34-35 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>35-317 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">37-319 </td>
    <td>43-325 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>58</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>36 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>62-201 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>37-176 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>209-317 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>177-285 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>329-418 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">320-409 </td>
    <td>326-415 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>329-404 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>286-361 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>407-417 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>38-48 </td>
  </tr>
  <tr>
    <td>422-453 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>362-393 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>457-868 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">410-821 </td>
    <td>416-827 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>457-619 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>394-556 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td class="Left">571 </td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>16 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td class="Left">595 </td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>17 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td class="Left">597 </td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>18 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td class="Left">614 </td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>19 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td class="Left">616-617&nbsp; </td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>20-21 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>641-642 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>557-558 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>701-842 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>559-700 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>860 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>701 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>875-877 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>702-704 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>880-894 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>705-719 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>907-981 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>49-123 </td>
  </tr>
  <tr>
    <td>986-990 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>720-724 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1011-1036 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>725-750 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1041-1136 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>751-846 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>1041-1119 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">822-900 </td>
    <td>828-906 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1140-1150 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">901-911 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1154-1378 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>847-1071 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1382-1390 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>133-141 </td>
  </tr>
  <tr>
    <td>1413-1438 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>142-167 </td>
  </tr>
  <tr>
    <td>1455 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1072 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1458-1477 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>168-187 </td>
  </tr>
  <tr>
    <td>1480 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1073 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1484-1485 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1074-1075 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1488-1505 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>188-205 </td>
  </tr>
  <tr>
    <td>1512-1519 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">912-919 </td>
    <td>907-914 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>1517-1518 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1076-1077 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1523-1542 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1078-1097 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1577-1594 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1098-1115 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1653-1667 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>206-220 </td>
  </tr>
  <tr>
    <td>1696-1729 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>221-254 </td>
  </tr>
  <tr>
    <td>1743-1761 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">920-938 </td>
    <td>915-933 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1765-1776 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1116-1127 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1780-1788 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1128-1136 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>1796-1803 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>255-262 </td>
  </tr>
  <tr>
    <td>1806-1981 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1137-1312 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>1806-1873 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">939-1006 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>1880-1884 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">1007-1011 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>1891-2041 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">1012-1162 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>2021-2063 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1313-1353 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>2066-2078 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">1163-1175 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>2067-2077 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>263-273 </td>
  </tr>
  <tr>
    <td>2120-2139 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1354-1373 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>2143-2282 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1374-1513 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>2286 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">1176 </td>
    <td>934 </td>
    <td>1514 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>2290-3047 </td>
    <td>&nbsp;</td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>1515-2272 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>2290-2755 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>22-487 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>2883-3065 </td>
    <td class="Left">&nbsp;</td>
    <td class="Right">1177-1359 </td>
    <td>935-1117 </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>The map is consistent with a process of extraction. At some point in preparing 
each output header, the extraction selects NTDEF.H as input, parses successive lines 
in NTDEF.H, and extracts some to the output. Be aware, though, that this is only 
the simplest process that is consistent with the files as observed. The input could 
instead be another header that is also the input for constructing NTDEF.H. Either 
way, the choosing of which lines to extract is fully accounted by directions within 
NTDEF.H. </p>
<h3>Output Selection </h3>
<p>These directions for selecting which lines are in both NTDEF.H and another header 
are keywords in single-line comments. What can be seen in NTDEF.H are keywords to
</p>
<ul>
  <li>begin extraction with the line immediately after the comment; </li>
  <li>end extraction with the line immediately before the comment; </li>
  <li>extract the same line up to but not including the comment. </li>
</ul>
<p>It is observed that the keywords for these three cases are begin_<span class="placeholder">key</span>, 
end_<span class="placeholder">key</span> and <span class="placeholder">key</span>, 
where the placeholder <span class="placeholder">key</span> differs for each output 
header: </p>
<table>
  <tr>
    <th>Begin Range </th>
    <th>End Range </th>
    <th>Same Line </th>
    <th>Versions </th>
    <th>Output Header </th>
  </tr>
  <tr>
    <td>begin_ntminiport </td>
    <td>end_ntminiport </td>
    <td>&nbsp;</td>
    <td>all </td>
    <td>MINIPORT.H </td>
  </tr>
  <tr>
    <td>begin_ntminitape </td>
    <td>end_ntminitape </td>
    <td>&nbsp;</td>
    <td>4.0 and higher </td>
    <td>MINITAPE.H </td>
  </tr>
  <tr>
    <td rowspan="2">begin_ntndis </td>
    <td rowspan="2">end_ntndis </td>
    <td rowspan="2">ntndis </td>
    <td>3.51 to 5.2 </td>
    <td>NDIS.H </td>
  </tr>
  <tr>
    <td>6.0 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>begin_ntoshvp </td>
    <td>end_ntoshvp </td>
    <td>&nbsp;</td>
    <td>6.2 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>begin_r_winnt </td>
    <td>end_r_winnt </td>
    <td>r_winnt </td>
    <td>4.0 and higher </td>
    <td>WINNT.RH </td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>windbgkd </td>
    <td>3.10 to 4.0 </td>
    <td rowspan="2">WINDBGKD.H </td>
  </tr>
  <tr>
    <td>begin_windbgkd </td>
    <td>end_windbgkd </td>
    <td>&nbsp;</td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>begin_winnt </td>
    <td>end_winnt </td>
    <td>winnt </td>
    <td>all </td>
    <td>WINNT.H </td>
  </tr>
  <tr>
    <td>begin_wudfwdm </td>
    <td>end_wudfwdm </td>
    <td>&nbsp;</td>
    <td>6.2 and higher </td>
    <td>WUDFWDM.H </td>
  </tr>
</table>
<p>Whether Microsoft still has a header named WINDBGKD.H is not known. None is supplied 
with any WDK or SDK nowadays, but a header with this name was supplied among the 
directories of sample code up to and including the DDK for Windows NT 4.0 and in 
the ordinary INC directory in the DDK for Windows 2000. Its contents in these versions 
are consistent with extraction directed by windbgkd comments. It is not impossible 
that the windbgkd comments remain in NTDEF.H even though no WINDBGKD.H is ever created 
or that they now govern extraction to some unpublished header that superseded WINDBGKD.H.
</p>
<p>Comments for extraction to NDIS.H must be vestigial. They evidently were active 
for the NDIS.H that Microsoft supplied first among the NETWORK samples in the DDK 
for Windows NT 3.51 and later among the general headers in the DDK for Windows 2000. 
Before Windows Vista, NDIS.H was not just a standard inclusion for network drivers: 
it also aimed to limit these drivers to interacting with NDIS.SYS, and thus only 
indirectly with the kernel, much as if network drivers are miniport drivers and 
NDIS.SYS is the corresponding port driver. Much like MINIPORT.H still, NDIS.H in 
these early versions has its own knowledge of the kernel, substantially less than 
defined in WDM.H. This reduction shows in NDIS.H as its own section of INTERNAL 
DEFINITIONS. The first thousand lines or so are duplicated from NTDEF.H, consistently 
with extraction according to ntndis comments. For Windows Vista, however, this section 
of NDIS.H was reworked to include NTDDK.H. </p>
<p>No header from any WDK or SDK is known to have lines in common with NTDEF.H such 
as selected by ntoshvp comments. An obvious guess is that Microsoft has a header 
named NTOSHVP.H and even that it’s something like NTOSP.H but for Hyper-V components. 
The guess may even be sound. Headers other than NTDEF.H have comments that are similarly 
suggestive of an NTHAL.H and the public symbol files for the HAL do indeed confirm 
that an NTHAL.H is compiled when building the HAL. No such sign, however, is known 
of an NTOSHVP.H. If it exists, Microsoft is keeping it very private. </p>
<h3>Translation </h3>
<p>Lines in MINIPORT.H and MINITAPE.H that have corresponding lines in NTDEF.H are 
exact duplicates from NTDEF.H, but some lines in WINNT.H and WUDFWDM.H differ very 
slightly from their corresponding lines in NTDEF.H. What editing, if any, is done 
of each line in the output is apparently specified as part of the process, not from 
directions in the input. No evidence is known for the mechanism, only for what it 
must be capable of. </p>
<p>One option for editing the output concerns the comments that direct which lines 
to extract. Inasmuch as this extraction is a detail of construction, an ideal might 
be that these comments stay in master headers, which Microsoft keeps private, and 
are eliminated from headers that Microsoft publishes. Instead, some such comments 
are in plain sight all the way back to the DDK for Windows NT 3.1. Just as plain 
is that elimination is provided for but also that it is applied imperfectly. Exactly 
how it works is unclear. At one extreme, all lines that MINIPORT.H and MINITAPE.H 
have in common with NTDEF.H have the comments intact. At the other extreme, WUDFWDM.H 
has none. For instance, where NTDEF.H has begin_wudfwdm and begin_ntoshvp comments 
on successive lines, the second contributes to WUDFWDM.H only as an empty line: 
the comment is stripped. Contrast with WINNT.H, which does not have this filtering: 
where NTDEF.H has a begin_winnt and begin_ntoshvp on successive lines, WINNT.H has 
the whole begin_ntoshvp line. </p>
<p>WINNT.H demonstrates a much more significant translation. All Microsoft’s literature 
for kernel-mode programming uses <span class="type">UCHAR</span>,
<span class="type">USHORT</span> and <span class="type">ULONG</span> for unsigned 
integral types. The headers do not even define the <span class="type">BYTE</span>,
<span class="type">WORD</span> and <span class="type">DWORD</span> that were long 
preferred in user-mode programming (even before any Windows NT existed). Since NTDEF.H 
is written for kernel-mode programming, it uses <span class="type">UCHAR</span>, 
etc., and never the others. For all the lines that WINNT.H has in common with NTDEF.H, 
every <span class="type">UCHAR</span>, etc., in NTDEF.H is instead a
<span class="type">BYTE</span>, etc., in WINNT.H. Again, how the translation is 
specified is unclear. It even translates <span class="type">TUCHAR</span> and
<span class="constant">MAXUCHAR</span> to <span class="type">TBYTE</span> and
<span class="constant">MAXBYTE</span>. </p>
<div class="Footer">
  <p class="Dates">This page was created on 2nd
  <a href="../../../../../../new/20/11.htm">November 2020</a> and was last modified 
  on 27th December 2020. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="61845" -->
</div>

</body>

</html>
