<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>RtlInitUnicodeString</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>RtlInitUnicodeString </h1>
<p>The <span class="function">RtlInitUnicodeString</span> function initialises a
<span class="struct"><a href="../../../inc/shared/ntdef/unicode_string.htm">UNICODE_STRING</a></span> structure 
as describing a given null-terminated Unicode string. </p>
<h2>Declaration </h2>
<pre class="source">VOID 
RtlInitUnicodeString (
    UNICODE_STRING *DestinationString, 
    PCWSTR SourceString);</pre>
<h3>Parameters </h3>
<!--webbot bot="Include" U-Include="_include/initunicodestring_parameters.htm" TAG="BODY" startspan -->

<p>The required <span class="argument">DestinationString</span> argument provides 
the address of a <span class="struct">UNICODE_STRING</span> structure that the function 
is to initialise. </p>
<p>The optional <span class="argument">SourceString</span> argument is the address 
of a null-terminated Unicode string that is to be represented by the structure. 
This argument can be <span class="constant">NULL</span> to initialise the struture 
as representing no string. </p>

<!--webbot bot="Include" endspan i-checksum="19344" -->
<h2>Availability </h2>
<p>The <span class="function">RtlInitUnicodeString</span> function is exported by 
name from the kernel and from NTDLL in all known versions, i.e., 3.10 and higher.
</p>
<h2>Documentation Status </h2>
<p>The <span class="function">RtlInitUnicodeString</span> function is documented 
in all known editions of the Device Driver Kit (DDK) or Windows Driver Kit (WDK) 
since at least the DDK for Windows NT 3.51. Though this documentation is of the 
kernel-mode function as an export from the kernel, it is mostly applicable to the 
user-mode implementation too, both being plausibly compiled from the same source 
file. </p>
<p>Starting with the WDK for Windows 7, Microsoft documents the availability of
<span class="function">RtlInitUnicodeString</span> as “Windows 2000 and later versions 
of Windows.” </p>
<p>Documentation of <span class="function">RtlInitUnicodeString</span> explicitly 
for user mode was added to the Software Development Kit (SDK) in 2002, concurrently 
with its declaration in WINTERNL.H, apparently for Microsoft’s compliance with a 
settlement concerning unfair use of internal Windows APIs by “middleware” products 
such as Internet Explorer. (For instance, it is linked to by the WININET.DLL version 
6.0 from Windows versions 5.1 and 5.2 and Internet Explorer version 6.0.) </p>
<h2>Behaviour </h2>
<!--webbot bot="Include" U-Include="../nls/_include/unicode_string.htm" TAG="BODY" startspan -->

<p>The intention of the <span class="struct">UNICODE_STRING</span> structure is 
to keep together both the address and size of a Unicode string, presumably to save 
on passing them as separate arguments for subsequent work with the string and to 
save on repeated re-reading of the whole string to rediscover its size. Indeed, 
the structure keeps two sizes. The <span class="member">Length</span> member is 
the size in bytes of the array of Unicode characters at <span class="member">Buffer</span>. 
If this array is null-terminated, which it explicitly need not be, then
<span class="member">Length</span> does not count the null terminator. The
<span class="member">MaximumLength</span> member is the size in bytes of the memory 
from <span class="member">Buffer</span> onwards. </p>

<!--webbot bot="Include" endspan i-checksum="43448" -->
<p>The <span class="function">RtlInitUnicodeString</span> function initialises a
<span class="struct">UNICODE_STRING</span> so that it describes a buffer that contains 
exactly the given null-terminated Unicode string. Microsoft’s names
<span class="argument">DestinationString</span> and <span class="argument">SourceString</span> 
for the function’s arguments are unfortunate for suggesting some sort of data transfer. 
No source string is copied, only its address. </p>
<h3>Initialisation </h3>
<p>If the <span class="argument">SourceString</span> argument is
<span class="constant">NULL</span>, the <span class="argument">DestinationString</span> 
gets a minimal initialisation to represent nothing: <span class="member">Length</span> 
and <span class="member">MaximumLength</span> are zero and <span class="member">
Buffer</span> is <span class="constant">NULL</span>. Ordinarily,
<span class="argument">SourceString</span> is not <span class="constant">NULL</span>, 
and <span class="argument">DestinationString</span> gets initialised such that
<span class="member">Length</span> and <span class="member">MaximumLength</span> 
are respectively the sizes in bytes of the string not counting and counting its 
null terminator, and <span class="member">Buffer</span> is the string’s address 
as given. </p>
<h3>Long Strings </h3>
<p>A complication to the <span class="function">RtlInitUnicodeString</span> function 
is that <span class="member">Length</span> and <span class="member">MaximumLength</span> 
are 16-bit. This is not a practical worry when initialising a
<span class="struct">UNICODE_STRING</span> for a string literal, but is when the
<span class="argument">SourceString</span> is received as input from some unknown 
caller and may be unexpectedly large, whether by accident, design or mischief. Early 
versions do not anticipate this at all. They simply set <span class="member">Length</span> 
and <span class="member">MaximumLength</span> to the low 16 bits of the computed 
32-bit sizes. Starting with version 5.2, if the string including its null terminator 
exceeds 0xFFFE bytes, then <span class="member">Length</span> and
<span class="member">MaximumLength</span> become 0xFFFC and 0xFFFE respectively. 
Either way, the string is not faithfully represented. The function has no success 
or failure to signify this misrepresentation. </p>
<p>Although a <span class="struct">UNICODE_STRING</span> in general need not have 
a null terminator after <span class="member">Length</span> bytes of Unicode characters, 
programmers evidently do sometimes work with those characters as if they belong 
to a null-terminated string, especially if they know the <span class="struct">UNICODE_STRING</span> 
was prepared by <span class="function">RtlInitUnicodeString</span>. It is true that 
such preparation means there is a null character somewhere after
<span class="member">Buffer</span>, but if the <span class="argument">SourceString</span> 
is arbitrary, then this null terminator is not certainly <span class="member">Length</span> 
bytes from <span class="member">Buffer</span> and neither is it certainly within
<span class="member">MaximumLength</span> bytes of <span class="member">Buffer</span>.
</p>
<p>Microsoft started dealing with this problem in version 5.1. Rather than store 
an incorrect <span class="member">Length</span> and <span class="member">MaximumLength</span>, 
as do all versions of <span class="function">RtlInitUnicodeString</span> when given 
too long a string, a new function named <span class="function">
<a href="initunicodestringex.htm">RtlInitUnicodeStringEx</a></span> fails. In version 
5.1, this is a user-mode export only. The kernel has it in version 5.2 and higher. 
Microsoft’s own kernel-mode programming makes extensive use of it as an
<span class="function">RtlInitUnicodeString</span> replacement, but the new function 
(itself) seems never to have been documented. </p>
<h3>IRQL </h3>
<p>The kernel-mode implementation is in a non-paged section in all versions. Provided 
that <span class="emphasis">both</span> the <span class="struct">UNICODE_STRING</span> 
and the Unicode string that are addressed through the given arguments are in non-paged 
memory, the <span class="function">RtlnitUnicodeString</span> function can safely 
be called at <span class="constant">DISPATCH_LEVEL</span> and higher. That it can 
has been documented by Microsoft since at least the DDK for Windows NT 3.51, but 
with only the one condition that “the <span class="argument">DestinationString</span> 
buffer is nonpageable.” </p>
<h2>Alternatives </h2>
<p>For a string whose address and size are known at compile time, as with a string 
literal, representation by a <span class="struct">UNICODE_STRING</span> may better 
be arranged at compile-time rather than by calling <span class="function">RtlInitUnicodeString</span> 
at run time. Starting with the DDK for Windows XP, Microsoft supplies helpful macros 
in NTDEF.H (and reproduces them in some other headers). </p>
<h3>RTL_CONSTANT_STRING </h3>
<p>When given a compile-time constant Unicode string, the <span class="macro">RTL_CONSTANT_STRING</span> 
macro expands to an aggregate initialiser for a <span class="struct">UNICODE_STRING</span> 
to represent the string. By providing just the right-hand side of a declarator, 
the macro leaves to the programmer the maximum flexibility for the left side. For 
example, </p>
<pre class="source">DECLSPEC_SELECTANY
extern UNICODE_STRING const UnicodeString = RTL_CONSTANT_STRING (L"String");</pre>
<p>and </p>
<pre class="source">static WCHAR const String [] = L"String";
static UNICODE_STRING const UnicodeString = RTL_CONSTANT_STRING (String);</pre>
<p>or </p>
<pre class="source">DECLSPEC_SELECTANY 
extern WCHAR const String [] = L"String";
static UNICODE_STRING UnicodeString = RTL_CONSTANT_STRING (String);</pre>
<p>all have their uses, and their pros and cons both for questions of taste and 
for implications regarding string pooling. </p>
<h4>Quirks </h4>
<p>Beware that <span class="macro">RTL_CONSTANT_STRING</span> is not without surprises. 
For instance, </p>
<pre class="source">PCWSTR Pointer = L"String";
UNICODE_STRING UnicodeString = RTL_CONSTANT_STRING (Pointer);</pre>
<p>seems plausible as a mistake by a real-world programmer, yet it compiles without 
warning. The less plausible </p>
<pre class="source">UNICODE_STRING UnicodeString = RTL_CONSTANT_STRING ((PWSTR) NULL);</pre>
<p>compiles too. Neither produces anything a programmer seems likely to want.
</p>
<h4>Documentation Status </h4>
<p>Formal documentation of <span class="macro">RTL_CONSTANT_STRING</span> is known 
first from the WDK for Windows Vista. It is there said to replace
<span class="function">RtlInitUnicodeString</span> “when passing a constant string.”
</p>
<h3>DECLARE_CONST_UNICODE_STRING </h3>
<p>Another macro, <span class="macro">DECLARE_CONST_UNICODE_STRING</span>, is less 
flexible since it doesn’t provide just the initialiser but the whole declarator. 
Its first argument names the <span class="struct">UNICODE_STRING</span> variable. 
Its second is a string literal. The expansion of </p>
<pre class="source">DECLARE_CONST_UNICODE_STRING (UnicodeString, L"String");</pre>
<p>is much like </p>
<pre class="source">WCHAR const UnicodeString_buffer [] = L"String";
UNICODE_STRING const UnicodeString = RTL_CONSTANT_STRING (UnicodeString_buffer);</pre>
<p>including to append “_buffer” to compose a name for the variable that acts as 
the buffer. The reverse engineer who encounters such names in public symbol files 
has a not unreasable inference that they signify the use of this macro. </p>
<p>Note, by the way, that “much like” hides that the real expansion does not use
<span class="macro">RTL_CONSTANT_STRING</span> but has its own aggregate initialiser. 
It is here thought that <span class="macro">DECLARE_CONST_UNICODE_STRING</span> 
is older, even though both macros are known first from the DDK for Windows XP.
</p>
<h3>DECLARE_GLOBAL_CONST_UNICODE_STRING </h3>
<p>By the time that the WDK for Windows Vista was released, <span class="macro">
RTL_CONSTANT_STRING</span> was not just documented, and improved, but was apparently 
established well enough that yet another macro, named <span class="macro">DECLARE_GLOBAL_CONST_UNICODE_STRING</span>, 
does use <span class="macro">RTL_CONSTANT_STRING</span>. What </p>
<pre class="source">DECLARE_GLOBAL_CONST_UNICODE_STRING (UnicodeString, L"String");</pre>
<p>expands to is very close to </p>
<pre class="source">DECLSPEC_SELECTANY 
extern UNICODE_STRING const UnicodeString = RTL_CONSTANT_STRING (L"String");</pre>
<p>Either way, this is in most cases the best initialisation of a
<span class="struct">UNICODE_STRING</span> in read-only data to describe a string 
literal that is also in read-only data. See especially that with string pooling 
and COMDAT folding, two <span class="struct">UNICODE_STRING</span> variables for 
the same Unicode string end up in the executable as only structure describing one 
string. Kernel-mode programmers still care about such efficiencies! </p>
<div class="Footer">
  <p class="Dates">This page was created on 16th
  <a href="../../../../../../../new/19/03.htm">March 2019</a> and was last modified 
  on 1st June 2020. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1920.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5277" -->
</div>

</body>

</html>
