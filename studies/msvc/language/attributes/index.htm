<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>C++ Attributes</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<!--webbot bot="Include" U-Include="../../_include/draft.htm" TAG="BODY" startspan -->

<p class="alert">ROUGH DRAFT </p>

<!--webbot bot="Include" i-checksum="20300" endspan -->
<p class="alert">Please beware that every page on attributes, i.e., every page deeper 
than this index page, is not only a very rough draft but does not yet have its final 
position settled. URLs are likely to change without notice or explanation. </p>
<h1>C++ Attributes </h1>
<p>Microsoft Visual C++ extends the C++ language to recognise blocks of text between 
square brackets. The enclosed text specifies <span class="definition">attributes</span> 
for whatever programming element follows the block. </p>
<p>The intention seems to be that the attributes configure an automated generation 
of possibly large amounts of boilerplate that the programmer might otherwise have 
to write (or, more likely, cut and paste) into the source code, typically with small 
adaptations. Even with the assistance of macros and libraries, the writing of such 
boilerplate is both tedious and prone to silly errors. Its reading is not trivial, 
either: nobody ought ever have to wade through lines of boilerplate just to check 
that it truly is just (the expected) boilerplate. Far better to have such code generated 
mechanically by a program rather than by a programmer. Then, no programmer or reviewer 
need ever grapple with more than a concise statement of how the boilerplate is configured. 
Attributes seem intended to act as that statement. </p>
<p>Indeed, the boilerplate needn’t ever be seen by the programmer. The compiler 
comes across an attribute, possibly with arguments, and passes it to a corresponding
<span class="definition">attribute provider</span>, which may be internal to the 
compiler or be supplied externally as a DLL. The provider generates whatever code 
is indicated by the attribute and arguments, and passes it to the compiler as if 
it were extra text to be <span class="definition">injected</span> at some specified 
position in the text that the compiler has already loaded from the source file. 
The source file itself is unaltered but it is compiled as if it had contained 
the injected code. </p>
<p>The programmer who wants to see the injected code may compile with the
<span class="switch"><a href="../../cl/cl/options/f$x.htm">/Fx</a></span> option. 
For each source file that caused any injection of text, the compiler then generates 
a new file containing both the given contents and the injected text, intended as 
a more or less faithful representation of what the compiler actually did end up 
compiling. </p>
<p>Needless to say, the recognition of an attribute and the injection of code in 
response to an attribute depend on a substantial interface between the compiler 
and the attribute providers. Nothing of this interface seems to be documented. </p>
<p>Of the built-in attributes and the attributes that are supported through ATLPROV, 
almost all are documented. That said, for a “technology” that Microsoft promotes 
as new and useful, rather much is left undocumented. Moreover, in what is documented, 
errors of fact are numerous. </p>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="58117" endspan -->
</div>

</body>

</html>
