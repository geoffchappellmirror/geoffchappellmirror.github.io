<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>OBJECT_DIRECTORY</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <!--webbot bot="Include" U-Include="../../../../_include/preview.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" endspan i-checksum="8381" -->
  <h1>OBJECT_DIRECTORY </h1>
  <p>The <span class="struct">OBJECT_DIRECTORY</span> structure (formally
  <span class="struct">_OBJECT_DIRECTORY</span>) is the Object Manager object that 
  the Object Manager itself uses for representing a directory in the object namespace. 
  The directory object is a container of other objects, including more directory 
  objects. All versions of Windows provide for creating directory objects from both 
  kernel mode and user mode through the functions <span class="function">NtCreateDirectoryObject</span> 
  (in user mode only) and <span class="function">ZwCreateDirectoryObject</span> 
  and all versions provide similarly for opening directory objects through
  <span class="function">NtOpenDirectoryObject</span> and <span class="function">
  ZwOpenDirectoryObject</span>. These functions give their callers a handle to the 
  directory object. When kernel-mode software that has such a handle feeds it to 
  some such function as <span class="function">ObReferenceObjectByHandle</span>, 
  then the reference it gets back is a pointer to an <span class="struct">OBJECT_DIRECTORY</span>.
  </p>
  <h2>Variability </h2>
  <p>The <span class="struct">OBJECT_DIRECTORY</span> is highly susceptible to changing 
  between builds. The following changes of size give some rough indication: </p>
  <table class="Sizes">
    <colgroup>
      <col class="Version"><col class="Size" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Version </th>
        <th>Size (x86) </th>
        <th>Size (x64) </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>3.10 to 4.0 </td>
        <td>0x9C </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>5.0 </td>
        <td>0xA0 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>early 5.1 (before SP2) </td>
        <td>0xA0 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>late 5.1 </td>
        <td>0xA4 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>5.2 </td>
        <td>0xA0 </td>
        <td>0x0140 </td>
      </tr>
      <tr>
        <td>6.0 to 6.3 </td>
        <td>0xA8 </td>
        <td>0x0150 </td>
      </tr>
      <tr>
        <td>10.0 to 1607 </td>
        <td>0xAC </td>
        <td>0x0158 </td>
      </tr>
      <tr>
        <td>1703 to 2004 </td>
        <td>0xB0 </td>
        <td>0x0158 </td>
      </tr>
    </tbody>
  </table>
  <h2>Layout </h2>
  <p>The sizes in the preceding table and the offsets, names and types in the next 
  are from type information in public symbol files for the kernel, starting from 
  Windows 2000 SP3. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source"><a href="object_directory_entry.htm">OBJECT_DIRECTORY_ENTRY</a> *HashBuckets [37];</pre>
        </td>
        <td>all </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x94 (3.10 to 5.0) </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">OBJECT_DIRECTORY_ENTRY **LookupBucket;</pre>
        </td>
        <td>3.10 to 5.0 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x98 (3.10 to 5.0) </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">BOOLEAN LookupFound;</pre>
        </td>
        <td>3.10 to 5.0 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x9A (4.0 to 5.0) </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">USHORT SymbolicLinkUsageCount;</pre>
        </td>
        <td>4.0 to 5.0 </td>
        <td>next at 0x9E </td>
      </tr>
      <tr>
        <td>0x94 </td>
        <td>0x0128 </td>
        <td>
        <pre class="source">EX_PUSH_LOCK Lock;</pre>
        </td>
        <td>5.1 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="3">0x9C (5.0); <br>
        0x98 </td>
        <td rowspan="3">0x0130 </td>
        <td>
        <pre class="source"><a href="device_map.htm">DEVICE_MAP</a> *DeviceMap;</pre>
        </td>
        <td>5.0 to 6.1 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    DEVICE_MAP *DeviceMap;
    OBJECT_DIRECTORY *ShadowDirectory;
};</pre>
        </td>
        <td>6.2 to 6.3 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">DEVICE_MAP *DeviceMap;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x9C </td>
        <td>0x0138 </td>
        <td>
        <pre class="source">OBJECT_DIRECTORY *ShadowDirectory;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x9C (late 5.1 to 6.3); <br>
        0xA0 (10.0 to 1607) </td>
        <td>0x0138 (late 5.2 to 6.3); <br>
        0x0140 (10.0 to 1607) </td>
        <td>
        <pre class="source">ULONG SessionId;</pre>
        </td>
        <td>late 5.1 to 1607 </td>
        <td>next at 0xAC and 0x0154 </td>
      </tr>
      <tr>
        <td>0x9C (early 5.1); <br>
        0xA0 (late 5.1) </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">USHORT Reserved;</pre>
        </td>
        <td>5.1 only </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x9E (early 5.1); <br>
        0xA2 (late 5.1) </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">USHORT SymbolicLinkUsageCount;</pre>
        </td>
        <td>5.1 only </td>
        <td>previously at 0x9A </td>
      </tr>
      <tr>
        <td>0xA0 (6.0 to 6.3); <br>
        0xA4 (10.0 to 1607); <br>
        0xA0 </td>
        <td>0x0140 (6.0 to 6.3); <br>
        0x0148 (10.0 to 1607); <br>
        0x0140 </td>
        <td>
        <pre class="source">PVOID NamespaceEntry;</pre>
        </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0xA4 </td>
        <td>0x0148 </td>
        <td>
        <pre class="source">PVOID SessionObject;</pre>
        </td>
        <td>1703 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0xA4 (6.0 to 6.3); <br>
        0xA8 </td>
        <td>0x0148 (6.0 to 6.3); <br>
        0x0150 </td>
        <td>
        <pre class="source">ULONG Flags;</pre>
        </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0xAC </td>
        <td>0x0154 </td>
        <td>
        <pre class="source">ULONG SessionId;</pre>
        </td>
        <td>1703 and higher </td>
        <td>previously at 0xA0 and 0x0140 </td>
      </tr>
    </tbody>
  </table>
  <p>Each of the <span class="member">HashBuckets</span> is a single-linked list 
  of potentially many <span class="struct">OBJECT_DIRECTORY_ENTRY</span> 
  structures. Each of these points to an object that is in the directory. The 
  gain is, of course, that instead of having one long list of all such objects, 
  the directory has 37 shorter lists of directory entries for objects whose name 
  within the directory have the same hash. The hashing algorithm is surely well 
  known and just as surely doesn’t matter much. All that is required of it is 
  that it (quickly) produces a more or less uniform distribution of (typical) 
  names into hash buckets. Yet perhaps because the details are unimportant, the 
  algorithm does happen to have been left alone. Its code for 32-bit Windows 
  plausibly has been untouched from Windows NT 3.51 to at least the original 
  Windows 10. The essence is that successive characters are converted to upper 
  case for adding to the hash, which in turn has its bits spread in a particular 
  way on each loop. Given <span class="placeholder">Count</span> Unicode 
  characters at address <span class="placeholder">Pointer</span>, the 
  computation for 32-bit Windows goes something very like </p>
  <pre class="source">ULONG Hash (PWCHAR Pointer, ULONG Count)
{
    ULONG hash = 0;
    while (Count -- != 0) {
        WCHAR ch = *Pointer ++;
        hash = (hash &lt;&lt; 1) + hash + (hash &gt;&gt; 1);
        if (ch &lt; L'a') hash += ch;
        else if (ch &lt;= L'z') hash += ch - (L'a' - L'A');
        else hash += RtlUpcaseUnicodeChar (ch);
    }
    return hash;
}</pre>
  <p>See that the <span class="member">ShadowDirectory</span> litterally grew 
  out of the <span class="member">DeviceMap</span>. </p>
  <p>Since the <span class="member">Flags</span> are not in union with a formal 
  definition of bit fields, Microsoft’s names for the flags are presumably defined 
  by macro and don’t show in type information even in the private symbol files that 
  Microsoft keeps to itself. That said, Microsoft’s names for some of the
  <span class="member">Flags</span> bits are known from the possibly accidental 
  publication of NTOSP.H in the original and Version 1511 editions of the WDK for 
  Windows 10: </p>
  <table>
    <tbody>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>Versions </th>
      </tr>
      <tr>
        <td>0x00000001 </td>
        <td><span class="constant">OBP_DIRECTORY_NAMESPACE</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000002 </td>
        <td><span class="constant">OBP_NAMESPACE_DELETED</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x00000004 </td>
        <td><span class="constant">OBP_SEARCH_SHADOW</span> </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x00000008 </td>
        <td><span class="constant">OBP_INHERIT_SECURITY</span> </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x00000010 </td>
        <td>&nbsp;</td>
        <td>1607 and higher </td>
      </tr>
      <tr>
        <td>0x00000020 </td>
        <td>&nbsp;</td>
        <td>1703 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Microsoft’s names for the last two flags above aren’t known to have been published. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 15th
    <a href="../../../../../../../new/22/07.htm">August 2022</a> and was last 
    modified on 22nd August 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c22.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5890" -->
  </div>
</div>

</body>

</html>
