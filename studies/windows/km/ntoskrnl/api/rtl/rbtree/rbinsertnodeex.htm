<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>RtlRbInsertNodeEx</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<h1>RtlRbInsertNodeEx </h1>
<p>The <span class="function">RtlRbInsertNodeEx</span> function inserts a node into 
a Red Black tree. </p>
<h2>Declaration </h2>
<pre class="source">VOID 
RtlRbInsertNodeEx (
    <a href="../../../inc/shared/rtlrbtree/rtl_rb_tree.htm">RTL_RB_TREE</a> *Tree, 
    <a href="../../../inc/shared/ntdef/rtl_balanced_node.htm">RTL_BALANCED_NODE</a> *Parent, 
    BOOLEAN Right, 
    RTL_BALANCED_NODE *Node);</pre>
<h3>Parameters </h3>
<p>The required <span class="argument">Tree</span> argument is the address of a 
control structure for the tree. It maintains pointers to the tree’s root node and 
left-most node. </p>
<p>The optional <span class="argument">Parent</span> argument is the address of 
a node, assumed to be already in the tree, which is to become the inserted node’s 
parent. This argument can be <span class="constant">NULL</span> if the inserted 
node is to be the tree’s root. </p>
<p>The <span class="argument">Right</span> argument is <span class="constant">TRUE</span> 
or <span class="constant">FALSE</span> to insert to the right or left of the
<span class="argument">Parent</span>, which is assumed to have no right or left 
child already. This argument is ignored if inserting as the root. </p>
<p>The required <span class="argument">Node</span> argument is the address of the 
node that is to be inserted. This node is assumed to be not already in the tree.
</p>
<h3>Return Value </h3>
<p>The function returns no indication of success or failure. It can fail, notably 
for perceiving the tree as corrupt, but it indicates this by
<span class="intrinsic">__fastfail</span> with <span class="constant">FAST_FAIL_INVALID_BALANCED_TREE</span> 
as the error code. </p>
<h2>Availability </h2>
<p>The <span class="function">RtlRbInsertNodeEx</span> function is exported by name 
from the kernel and from NTDLL in version 6.2 and higher. </p>
<h2>Documentation Status </h2>
<p>The <span class="function">RtlRbInsertNodeEx</span> function is not documented. 
The function’s type is disclosed in public symbol files, starting with Windows 8, 
but Microsoft’s names for the arguments are not. The names used in this note are 
suppositions. </p>
<h2>Behaviour </h2>
<p>The function initialises the inserted <span class="argument">Node</span> as having 
no children. Insertion is trivial if <span class="argument">Parent</span> is
<span class="constant">NULL</span>: the <span class="argument">Node</span> becomes 
the <span class="argument">Tree</span>’s root node and left-most node; the
<span class="argument">Node</span> has no parent; and the <span class="argument">
Node</span> is black. Ordinarily, the <span class="argument">Node</span> is inserted 
as the <span class="argument">Parent</span>’s right or left child according to the
<span class="argument">Right</span> argument, and is red. If inserting to the left 
of a parent that is the tree’s left-most node, then the newly inserted node becomes 
the tree’s left-most node. </p>
<p>And that would be the whole of it except for red-black colouring and balancing!
</p>
<p>The essential rules of the tree’s colouring are that: each node is either red 
or black; a red node is not allowed any red child; and the root node is necessarily 
black. The algorithm for inserting a node starts with the node as red (if it’s not 
the root). If the new node’s parent is red, this insertion conflicts with the rules 
and is put right by non-trivial adjustment of the tree. Because the parent is not 
black, it cannot be the root. It may therefore have a sibling. If this sibling is 
also red, then the adjustment starts as a relatively simple recolouring. The parent 
and its sibling are both changed to black, and if the grandparent is not the root, 
it is changed to red. (It cannot have been red already, since it had a red child.) 
This adjustment then recurses as if the grandparent were the newly inserted (red) 
node. It stops trivially on reaching the root. The adjustment becomes very much 
more substantial if the recursion reaches a (red) node whose parent is red and either 
has no sibling or has a black sibling. The tree gets rebalanced by promoting the 
node to be closer to the root than is its present grandparent. The node, which now 
has the (red) ex-parent as a child, and may now be the root, is changed to black. 
The ex-grandparent, which now either has no child or has as its one child the ex-parent’s 
(black) ex-sibling, is changed to red, and the tree’s adjustment is complete.
</p>
<h3>Intended Use </h3>
<p>The <span class="argument">Node</span>’s insertion to the
<span class="argument">Right</span> of the <span class="argument">Parent</span> 
(or as the root if <span class="argument">Parent</span> is
<span class="constant">NULL</span>) replaces anything that was there. For all practical 
effect, the function assumes that the <span class="argument">Parent</span> has no
<span class="argument">Right</span> node. In the intended circumstances, the caller 
has scanned the tree enough to identify <span class="argument">Parent</span> and
<span class="argument">Right</span> as the appropriate location and direction for 
inserting the <span class="argument">Node</span> consistently with some left-right 
ordering that is the caller’s to design and manage. The function knows nothing of 
what governs the ordering, only that rebalancing the tree preserves the left-right 
ordering established by the insertions. </p>
<p>By inserting <span class="argument">Node</span> to the right of
<span class="argument">Parent</span>, the caller establishes
that
<span class="argument">Parent</span> is the right-most node to the left of
<span class="argument">Node</span> and that <span class="argument">Parent</span> 
had no right child. If <span class="argument">Parent</span> had 
a right child that the caller regards as being left of <span class="argument">Node</span>, 
then this child would have been the proper choice of <span class="argument">Parent</span>. 
If <span class="argument">Parent</span> had a right child that the caller regards 
as right of <span class="argument">Node</span>, then the proper insertion would 
be to the left of this child’s left-most descendant (else of the child itself). 
Microsoft’s programmers have inline routines named <span class="inline routine">
RtlTreeFindInsertLocation</span> and <span class="inline routine">RtlTreeFindInsertLocationOrExistingNode</span> 
for scanning the tree to obtain <span class="argument">Node</span> and
<span class="argument">Right</span> arguments for the call to
<span class="function">RtlRbInsertNodeEx</span>. </p>
<h3>Warnings </h3>
<p>Beware that the function merely assumes that <span class="argument">Right</span> 
is either <span class="constant">TRUE</span> or <span class="constant">FALSE</span>, 
being immediately ready for use as an index into the <span class="member">Children</span> 
array of an <span class="struct">RTL_BALANCED_NODE</span>. Indeed, for all that 
can be known without documentation, <span class="argument">Right</span> is not a
<span class="type">BOOLEAN</span> but is instead a <span class="type">UCHAR</span>, 
perhaps taking values from macro definitions of 0 and 1 for left and right. </p>
<p>The function assumes that nodes have (at least) four-byte alignment. This allows 
that the one-bit colour of red versus black is safely encoded into the node’s pointer 
to its parent and therefore keeps the overhead per node to the space taken by its 
three pointers to left, right and parent nodes. </p>
<h3>IRQL </h3>
<p>The function is self-contained in a non-paged code section. Provided all inputs 
are also in non-paged memory, the function can safely be called at any IRQL. </p>
<div class="Footer">
  <p class="Dates">This page was created on 14th May 2020 but was not published 
  until 28th <a href="../../../../../../../new/20/05.htm">May 2020</a>. It was last 
  modified on 21st December 2020. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5634" -->
</div>

</body>

</html>
