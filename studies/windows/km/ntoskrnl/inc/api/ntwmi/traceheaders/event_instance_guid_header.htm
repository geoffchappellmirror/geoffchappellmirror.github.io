<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EVENT_INSTANCE_GUID_HEADER</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="33595" -->
<div class="Main">
  <p class="alert">This page is being prepared for a substantial reworking. Some 
  content may be temporarily missing. Temporarily may turn into indefinitely. New 
  content may be more than usually defective. The page is now published only as 
  a revision in progress. Use with caution. </p>
  <h1>EVENT_INSTANCE_GUID_HEADER </h1>
  <p>The <span class="struct">EVENT_INSTANCE_GUID_HEADER</span> is one of several 
  types of fixed-size header that introduce variable-size data for events that are 
  logged through Event Tracing for Windows (ETW). As with other types of event, 
  those that begin with an <span class="struct">EVENT_INSTANCE_GUID_HEADER</span> 
  accumulate first in trace buffers. To have these events persist in this raw form 
  for ready inspection, configure the event tracing session to flush the trace buffers 
  to an Event Trace Log (ETL) file. </p>
  <h2>Usage </h2>
  <p>An event that begins with an <span class="struct">EVENT_INSTANCE_GUID_HEADER</span> 
  gets into the trace buffers by being presented to the kernel through the
  <span class="function"><a href="../../../../api/etw/traceapi/event/index.htm">NtTraceEvent</a></span> 
  function. The expected user-mode caller is the NTDLL function
  <span class="function">EtwTraceEventInstance</span>, which is in turn typically 
  (and better) called as a forward from the documented ADVAPI32 export
  <span class="function">TraceEventInstance</span>. The NTDLL function creates the
  <span class="struct">EVENT_INSTANCE_GUID_HEADER</span> from the
  <span class="struct">EVENT_INSTANCE_HEADER</span> and <span class="struct">EVENT_INSTANCE_INFO</span> 
  structures that are its inputs. Well-behaved user-mode software other than NTDLL 
  therefore has no need to know of the <span class="struct">EVENT_INSTANCE_GUID_HEADER</span>.
  </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">EVENT_INSTANCE_GUID_HEADER</span> structure is not 
  documented. </p>
  <!--webbot bot="Include" U-Include="../_include/typeinfo_struct.htm" TAG="BODY" startspan -->

<p>Only two public disclosures are known from Microsoft, not that either is any 
sort of plain-English documentation. One is that a previously unpublished header 
named NTWMI.H was published in the original and Version 1511 editions of the Windows 
Driver Kit (WDK) for Windows 10, and this header contains a C-language definition 
of the structure. </p>
<p>Were it not for this limited and possibly unintended disclosure of NTWMI.H, a 
practical equivalent of the C-language definition (but missing comments, of course) 
would anyway be known from type information in symbol files. But this too has the 
look of an oversight. Type information for this structure has never appeared in 
any public symbol files for the kernel or for the obvious low-level user-mode DLLs. 
It has instead slipped out in symbol files for a smattering of higher-level user-mode 
DLLs, starting with Windows 8. For these few, the readily available symbol files 
actually are private symbol files and show that the unpublished
<a href="../../../../source/inc/ntwmi.htm">NTWMI.H</a> was included when compiling 
the corresponding binaries. </p>

<!--webbot bot="Include" endspan i-checksum="9248" -->
  <p>Incidentally, the definition in NTWMI.H is preceded by several lines of comment. 
  This would be unusual enough, but is specially instructive for what it says of 
  an intention that the structure is not public: </p>
  <pre class="source">// New struct that replaces EVENT_INSTANCE_GUID_HEADER. It is basically
// EVENT_TRACE_HEADER + 2 Guids.
// For XP, we will not publish this struct and hide it from users.
// TRACE_VERSION in LOG_FILE_HEADER will tell the consumer APIs to use
// this struct instead of EVENT_TRACE_HEADER.</pre>
  <h2>Layout </h2>
  <p>The <span class="struct">EVENT_INSTANCE_GUID_HEADER</span> is 0x48 bytes in 
  both 32-bit and 64-bit Windows in all known versions that have it, i.e., 5.2 and 
  higher. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
        <th>NtTraceEvent Input and Output </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">USHORT Size;</pre>
        </td>
        <td>both (may change) </td>
      </tr>
      <tr>
        <td>0x02 </td>
        <td>
        <pre class="source">union {
    USHORT FieldTypeFlags;
    struct {
        UCHAR HeaderType;
        UCHAR MarkerFlags;
    };
};</pre>
        </td>
        <td>output </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>
        <pre class="source">union {
    ULONG Version;
    struct {
        UCHAR Type;
        UCHAR Level;
        USHORT Version;
    } Class;
};</pre>
        </td>
        <td>passed through </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>
        <pre class="source">ULONG ThreadId;</pre>
        </td>
        <td>output </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>
        <pre class="source">ULONG ProcessId;</pre>
        </td>
        <td>output </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>
        <pre class="source">LARGE_INTEGER TimeStamp;</pre>
        </td>
        <td>output </td>
      </tr>
      <tr>
        <td>0x18 </td>
        <td>
        <pre class="source">union {
    GUID Guid;
    ULONGLONG GuidPtr;
};</pre>
        </td>
        <td><span class="member">Guid</span> is both (may change); <br>
        <span class="member">GuidPtr</span> is input </td>
      </tr>
      <tr>
        <td>0x28 </td>
        <td>
        <pre class="source">union {
    struct {
        ULONG ClientContext;
        ULONG Flags;
    };
    struct {
        ULONG KernelTime;
        ULONG UserTime;
    };
    ULONG64 ProcessorTime;
};</pre>
        </td>
        <td><span class="member">Flags</span> are input; <br>
        <span class="member">KernelTime</span> is output; <br>
        <span class="member">UserTime</span> is output </td>
      </tr>
      <tr>
        <td>0x30 </td>
        <td>
        <pre class="source">ULONG InstanceId;</pre>
        </td>
        <td>passed through </td>
      </tr>
      <tr>
        <td>0x34 </td>
        <td>
        <pre class="source">ULONG ParentInstanceId;</pre>
        </td>
        <td>passed through </td>
      </tr>
      <tr>
        <td>0x38 </td>
        <td>
        <pre class="source">GUID ParentGuid;</pre>
        </td>
        <td>passed through </td>
      </tr>
    </tbody>
  </table>
  <p>The first 4 bytes have common elements in all the various
  <a href="index.htm">Trace Headers</a>. They are 
  distinguished from the <span class="struct">WNODE_HEADER</span> by making its 
  32-bit <span class="member">BufferSize</span> look implausible for having its 
  highest bit set. For the <span class="struct">EVENT_INSTANCE_GUID_HEADER</span>, 
  this is the high bit in the <span class="member">MarkerFlags</span> at offset 
  0x03. Of trace headers that have the two highest bits set, what distinguishes 
  a header as continuing specifically as an <span class="struct">EVENT_INSTANCE_GUID_HEADER</span> 
  is the <span class="member">HeaderType</span> at offset 0x02: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>Implied Layout </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0B </td>
        <td><span class="constant">TRACE_HEADER_TYPE_INSTANCE32</span> </td>
        <td>0x48 bytes of header followed by 32-bit event data </td>
      </tr>
      <tr>
        <td>0x15 </td>
        <td><span class="constant">TRACE_HEADER_TYPE_INSTANCE64</span> </td>
        <td>0x48 bytes of header followed by 64-bit event data </td>
      </tr>
    </tbody>
  </table>
  <p>These names are from Microsoft’s NTWMI.H. Also given in the similarly semi-secret 
  NTETW.H are 32-bit values for the first four bytes without the
  <span class="member">Size</span>: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0xC00B0000 </td>
        <td><span class="constant">TRACE_HEADER_INSTANCE32</span> </td>
      </tr>
      <tr>
        <td>0xC0150000 </td>
        <td><span class="constant">TRACE_HEADER_INSTANCE64</span> </td>
      </tr>
    </tbody>
  </table>
  <p>The first 0x30 bytes of the <span class="struct">EVENT_INSTANCE_GUID_HEADER</span> 
  are those of the <span class="struct">
  <a href="../../../shared/evntrace/event_trace_header.htm">EVENT_TRACE_HEADER</a></span>. 
  The additional members support the event’s placement in a hierarchical relationship 
  of events. The <span class="member">InstanceId</span> labels this event, along 
  with its <span class="member">Guid</span>. All being well, the
  <span class="member">ParentInstanceId</span> and <span class="member">ParentGuid</span> 
  for this event are the <span class="member">InstanceId</span> and
  <span class="member">Guid</span> of some other event, which can then be recognised 
  as this event’s parent. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 7th
    <a href="../../../../../../../../new/16/12.htm">December 2016</a> and was last 
    modified on 30th <a href="../../../../../../../../new/22/10.htm">November 2022</a>.
    </p>
    <!--webbot bot="Include" U-Include="../../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="14250" -->
  </div>
</div>

</body>

</html>
