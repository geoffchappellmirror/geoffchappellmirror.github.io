<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Security-Policy" content="default-src 'none'; frame-src 'self'; img-src 'self'; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self'">
<title>MSHTML Methods: execCommand</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/controls.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/demo.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/ie.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/controls.js" defer></script>
<script type="text/javascript" src="../../../../../../_scripts/demo.js" defer></script>
<script type="text/javascript" src="../../../_scripts/ie.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="43332" -->
<div class="Main">
  <h1>MSHTML Methods: execCommand </h1>
  <h2>Scripting Syntax </h2>
  <pre class="source">bSuccess = object.execCommand (sCommand, bUserInterface, vValue);</pre>
  <h3>Object </h3>
  <p>The <span class="method">execCommand</span> method applies to the
  <span class="object">document</span> and <span class="object">TextRange</span> 
  objects and the <span class="collection">controlRange</span> collection. </p>
  <h3>Arguments </h3>
  <p>The required <span class="argument">sCommand</span> argument names a command 
  to execute. There are many <a href="index.htm">supported commands</a>. </p>
  <p>The optional <span class="argument">bUserInterface</span> argument is
  <span class="keyword">true</span> to have the command prompt the user. The default 
  is <span class="keyword">false</span>. Some commands do not respect this argument.
  </p>
  <p>The optional <span class="argument">vValue</span> argument provides input for 
  the command. Interpretation varies with the command. The default is to have no 
  input. Of course, some commands do not succeed without input (or do nothing useful).
  </p>
  <h3>Return Value </h3>
  <p>The method returns <span class="keyword">true</span> for success, else
  <span class="keyword">false</span>. </p>
  <h2>Behaviour </h2>
  <p>The <span class="method">execCommand</span> method provides scriptable access 
  to the object’s <span class="interface">IOleCommandTarget</span> functionality, 
  specifically to call the <span class="method">Exec</span> method. </p>
  <!--webbot bot="Include" U-Include="_include/commands.htm" TAG="BODY" startspan -->

<p>The case-insensitive command name given as <span class="argument">sCommand</span> 
translates to a numeric command ID in the MSHTML command group represented 
programmatically by <span class="cgid">CGID_MSHTML</span>. Even within this 
command group, only a small subset of the commands that are supported through 
the
<span class="interface">IOleCommandTarget</span> interface are supported for 
scripting.
</p>

<!--webbot bot="Include" endspan i-checksum="9044" -->
  <p>The three implementations each have preparatory work of their own and then 
  some in common. The variations are presently beyond the scope of these brief notes 
  except to note that failure in any of these preparations causes the
  <span class="object">document</span> and <span class="collection">controlRange</span> 
  implementations to throw a runtime script error, as opposed to having
  <span class="method">execCommand</span> return <span class="keyword">false</span>. 
  Two preparations are common to all three implementations. First, the
  <span class="method">execCommand</span> method fails if the given command name 
  is not supported for scripting. Second, the following commands fail (subject to 
  the notes on coding errors, below) if they cannot get clipboard access before 
  calling <span class="method">Exec</span>: </p>
  <ul>
    <li>Copy </li>
    <li>Cut </li>
    <li>InsertParagraph </li>
    <li>Paste </li>
  </ul>
  <p>The <span class="method">Exec</span> method is called with execution options 
  constrained to <span class="constant">OLECMDEXECOPT_PROMPTUSER</span> and
  <span class="constant">OLECMDEXECOPT_DONTPROMPTUSER</span>, depending on whether
  <span class="argument">bUserInterface</span> is true, and with no provision for 
  receiving any output. The success or failure of calling <span class="method">Exec</span> 
  becomes success or failure of the <span class="method">execCommand</span> method.
  </p>
  <!--webbot bot="Include" U-Include="_include/exec.htm" TAG="BODY" startspan -->

<p>What happens in the call to <span class="method">Exec</span> varies with the 
command and is anyway left for the different topic of MSHTML’s
<span class="interface">IOleCommandTarget</span> functionality. </p>

<!--webbot bot="Include" endspan i-checksum="18362" -->
  <h3>Demonstrations </h3>
  <p>The demonstration script that follows prompts for a command name which is then 
  fed as the <span class="argument">sCommand</span> argument to the
  <span class="object">document</span> object’s implementation of
  <span class="method">execCommand</span>, with the remaining arguments left to 
  default. This is simple but suffices for several demonstrations: to confirm that 
  some undocumented commands, such as “Open”, have non-trivial implementations; 
  to test the effect of the Internet Security setting “Allow Programmatic clipboard 
  access” on the commands that are listed above as requiring clipboard access; and 
  also to see that passing a genuinely unsupported command is more serious than 
  it ought to be. </p>
  <div id="document" class="Demonstration">
    <!--webbot bot="Include" U-Include="../../../_include/showdemo.htm" TAG="BODY" startspan -->

<p class="NoScript alert">There is a demonstration here. To see it, please enable 
scripting and then refresh this page.</p>

<!--webbot bot="Include" endspan i-checksum="36776" -->
    <pre id="Test_document_execCommand" class="Script">function Test_document_execCommand ()
{
    var cmd = prompt ("Enter the name of an MSHTML command to execute as a test:", "");
    if (cmd == null) return;

    var result = document.execCommand (cmd);
    alert ('execCommand ("' + cmd + '") for the document returned ' + result);
}</pre>
  </div>
  <p>A second demonstration is the same but for a <span class="object">TextRange</span> 
  object created for the document’s first button (since buttons are among the objects 
  that support the <span class="method">createTextRange</span> method and we already 
  have at least one button because of the demonstration). Note that unsupported 
  commands sent to this object do not cause runtime script errors. </p>
  <div id="TextRange" class="Demonstration">
    <!--webbot bot="Include" U-Include="../../../_include/showdemo.htm" TAG="BODY" startspan -->

<p class="NoScript alert">There is a demonstration here. To see it, please enable 
scripting and then refresh this page.</p>

<!--webbot bot="Include" endspan i-checksum="36776" -->
    <pre id="Test_TextRange_execCommand" class="Script">function Test_TextRange_execCommand ()
{
    var cmd = prompt ("Enter the name of an MSHTML command to execute as a test:", "");
    if (cmd == null) return;

    var range = document.getElementsByTagName ("BUTTON") [0].createTextRange ();
    if (range == null) return;

    var result = range.execCommand (cmd);
    alert ('execCommand ("' + cmd + '") for a TextRange returned ' + result);
}</pre>
  </div>
  <h3>Coding Errors </h3>
  <p>That the <span class="object">document</span> and <span class="collection">
  controlRange</span> implementations so readily cause runtime script errors, including 
  in cases for which the <span class="object">TextRange</span> implementation returns 
  an orderly failure, is presumably not deliberate but might be. Even if it is deliberate, 
  there is one coding error for certain. To assess, you must know that although
  <span class="method">execCommand</span> has the scripting syntax given above, 
  the actual method as coded in MSHTML has a prototype more like </p>
  <pre class="source">HRESULT
<span class="placeholder">classname</span> :: execCommand (
    PWSTR sCommand,
    VARIANT_BOOL bUserInterface,
    VARIANT vValue,
    VARIANT_BOOL *pbSuccess);</pre>
  <p>To fail for scripting purposes, the actual method must succeed, i.e., must 
  return <span class="constant">S_OK</span> (zero) as its <span class="type">HRESULT</span>. 
  The failure is returned indirectly, by having stored <span class="constant">VARIANT_FALSE</span> 
  at the address given by the extra argument <span class="argument">pbSuccess</span>. 
  In the MSHTML code when <span class="placeholder">classname</span> is
  <span class="class">CDocument</span> or <span class="class">CAutoTxtSiteRange</span>, 
  early failures that are represented internally by a non-zero
  <span class="type">HRESULT</span> are instead handled by returning this
  <span class="type">HRESULT</span>. When this gets back to the script engine, the 
  interpretation is not that the method has failed but that it has not worked at 
  all, hence the runtime script error. </p>
  <p>To misunderstand all this is also to risk a converse error, namely of returning 
  a random success. To return success for scripting purposes, it is not enough to 
  return a successful <span class="type">HRESULT</span>. It is also required that
  <span class="constant">VARIANT_TRUE</span> be returned indirectly via the extra 
  argument. The risk is of returning <span class="constant">S_OK</span> without 
  having stored either <span class="constant">VARIANT_TRUE</span> or
  <span class="constant">VARIANT_FALSE</span> via the extra argument. The caller 
  may or may not have initialised the intended storage. If not—and the internal 
  MSHTML routine which translates the <span class="interface">IDispatch</span> parameters 
  to the particular types of arguments required for the <span class="method">execCommand</span> 
  method does not— then because all non-zero values count as
  <span class="keyword">true</span>, the likely result is that the function will 
  be seen to have succeeded, but by accident not design. </p>
  <p>This is in fact what happens when <span class="method">execCommand</span> does 
  not proceed to <span class="method">Exec</span> because clipboard access is unavailable. 
  This case is described above as failure, on the presumption that this must be 
  the intention, but the reality is that the <span class="object">document</span> 
  and <span class="collection">controlRange</span> implementations do not actually 
  set success or failure. </p>
  <p>The flow of the code is different when <span class="placeholder">classname</span> 
  is <span class="class">CAutoRange</span> (representing the
  <span class="object">TextRange</span> object). Except if the mechanism of translating 
  dispatch parameters to method arguments has gone wrong, the internal
  <span class="type">HRESULT</span> is always converted to success or failure via 
  the extra argument, and so there are no runtime script errors. However, this has 
  its own coding oversight, because in the case where clipboard access is required 
  but unavailable, the internal <span class="type">HRESULT</span> is
  <span class="constant">S_OK</span> and the early exit is returned as a well-defined 
  success. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 10th February 2008 and was last modified 
    on 11th December 2011. </p>
    <!--webbot bot="Include" U-Include="../../../_include/c0809.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2008-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4447" -->
  </div>
</div>

</body>

</html>
