<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CL /WL</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>CL /WL </h1>
<h2>Syntax </h2>
<p>positive: </p>
<blockquote>
  <p><span class="switch">/WL</span> </p>
</blockquote>
<p>negative: </p>
<blockquote>
  <p><span class="switch">/WL-</span> </p>
</blockquote>
<h3>Relations </h3>
<p>The positive and negative forms override each other, of course. </p>
<p>The positive form passes to the front-end C and C++ compilers. The negative form 
is not passed (though it is recognised by the compilers, if passed via the
<span class="switch"><a href="d1.htm">/d1</a></span> option). </p>
<h2>Behaviour </h2>
<p>This option keeps diagnostic messages (for warnings, errors and fatal errors) 
to one line each. </p>
<p>In the typical case, the same information as would be displayed without
<span class="switch">/WL</span> is reformatted with spaces and/or semicolons instead 
of line breaks. However, it can be that the restriction to a single line is achieved 
by omitting information, though in the only known cases the information would anyway 
be displayed only on using an undocumented option. </p>
<p>Diagnostic messages each begin in the form: </p>
<pre class="output"><span class="placeholder">position</span> : <span class="placeholder">style</span> C<span class="placeholder">number</span>: <span class="placeholder">text</span> </pre>
<p>where <span class="placeholder">position</span> is typically a filename and line 
number, <span class="placeholder">style</span> is one of warning, error or fatal 
error, <span class="placeholder">number</span> is particular to whatever condition 
prompted the message, and <span class="placeholder">text</span> is the corresponding 
description of this particular instance of that condition. The
<span class="placeholder">text</span> is in something approaching human language 
and is taken from looking up <span class="placeholder">number</span> among the string 
resources in the relevant executable (C1 or C1XX) and resolving placeholders. Depending 
on the condition that prompted the diagnostic, there may then follow additional 
information, here called <span class="placeholder">notes</span>, to refine the description 
in ways that are not easily accommodated just by resolving placeholders in the
<span class="placeholder">text</span>. </p>
<p>Diagnostic messages have several opportunities to spread over multiple lines. 
First, the <span class="placeholder">text</span> itself, especially if long, may 
have been composed with line breaks (indicated by a %$N placeholder in the string 
resource). Second, placeholders in the <span class="placeholder">text</span> may 
have a complex resolution. This applies most notably to the elaboration of an identifier 
that is formed from a template. Third, each note is ordinarily displayed on a new 
line. In any one diagnostic, all extra lines have some indentation, typically of 
eight spaces. Some lines have a nested formatting, with further indentation in multiples 
of four. </p>
<p>The <span class="switch">/WL</span> option defeats each of these opportunities 
for the diagnostic to run to a second line. Each line break in the
<span class="placeholder">text</span> is instead resolved to a space. Each
<span class="placeholder">note</span> does not get a new line but instead continues 
the one line after a semicolon and a space. Both behaviours may be seen by compiling 
a file named TEST.CPP containing </p>
<pre class="source">class Test
{
    void operator delete (void *, char *);
};

void func (Test *t)
{
    delete t;
}</pre>
<p>The code is in error (C2573). In the English-language version 13.00.9466 inspected 
for this report, this is the only error (along with a handful of warnings) for which 
the <span class="placeholder">text</span> contains a line break. The whole error 
message is ordinarily </p>
<pre class="output">TEST.CPP(9) : error C2573: &#39;Test&#39; : cannot delete pointers to objects of this type; the class has no non-placement overload for &#39;operator delete&#39;.
        Use ::delete, or add &#39;operator delete(void*)&#39; to the class
        TEST.CPP(3) : see declaration of &#39;Test&#39;</pre>
<p>showing a long first line of <span class="placeholder">text</span>, a continuation 
of the <span class="placeholder">text</span> to an indented second line, and finally 
a <span class="placeholder">note</span>, also indented. With
<span class="switch">/WL</span>, the error message becomes </p>
<pre class="output">TEST.CPP(9) : error C2573: &#39;Test&#39; : cannot delete pointers to objects of this type; the class has no non-placement overload for &#39;operator delete&#39;. Use ::delete, or add &#39;operator delete(void*)&#39; to the class; TEST.CPP(3) : see declaration of &#39;Test&#39;</pre>
<p>Where <span class="switch">/WL</span> may lose information is with resolution 
of placeholders in the <span class="placeholder">text</span>. Compile </p>
<p class="alert">TO BE DONE </p>
<div class="Footer">
  <p class="Dates">This page was created on 27th October 2005 and was last modified 
  on 14th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0509.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62424" endspan -->
</div>

</body>

</html>
