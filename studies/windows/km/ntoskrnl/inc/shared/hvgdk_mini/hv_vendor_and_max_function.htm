<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>HV_VENDOR_AND_MAX_FUNCTION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>HV_VENDOR_AND_MAX_FUNCTION </h1>
  <p>The <span class="struct">HV_VENDOR_AND_MAX_FUNCTION</span> structure (formally
  <span class="struct">_HV_VENDOR_AND_MAX_FUNCTION</span>) collects the information 
  that a hypervisor’s <span class="instruction">
  <a href="../../../../cpu/cpuid/index.htm">cpuid</a></span> leaf 0x40000000 produces 
  in the <span class="register">eax</span>, <span class="register">ebx</span>,
  <span class="register">ecx</span> and <span class="register">edx</span> registers. 
  It may also be intended to do the same for a Microsoft hypervisor’s implementation 
  of <span class="instruction">cpuid</span> leaf 0x40000080. </p>
  <h2>Availability </h2>
  <p>The <span class="struct">HV_VENDOR_AND_MAX_FUNCTION</span> is defined in version 
  6.3 and higher, having developed from what had been an unnamed structure that 
  versions 6.0 to 6.2 define for the <span class="member">HvVendorAndMaxFunction</span> 
  member of the <span class="union"><a href="hv_cpuid_result.htm">HV_CPUID_RESULT</a></span> 
  union. </p>
  <h3>Access </h3>
  <p>The kernel provides two ways to get the whole output from
  <span class="instruction">cpuid</span> leaf 0x40000000 into a caller-supplied
  <span class="struct">HV_VENDOR_AND_MAX_FUNCTION</span>: </p>
  <ul>
    <li>in kernel mode, as the output from <span class="function">
    <a href="../../../api/hvilib/hviintel/gethypervisorvendorandmaxfunction.htm">
    HviGetHypervisorVendorAndMaxFunction</a></span>; </li>
    <li>in user mode too, as the <span class="member">HvVendorAndMaxFunction</span> 
    member of the <span class="struct">
    <a href="../../api/ntexapi/system_hypervisor_detail_information.htm">SYSTEM_HYPERVISOR_DETAIL_INFORMATION</a></span> 
    that is the output of a successful call to <span class="function">
    <a href="../../../api/ex/sysinfo/query.htm">ZwQuerySystemInformation</a></span> 
    when given the information class <span class="constant">SystemHypervisorDetailInformation</span> 
    (0x9F). </li>
  </ul>
  <p>Both are available only in version 10.0 or higher. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">HV_VENDOR_AND_MAX_FUNCTION</span> structure itself 
  is not documented. Its members, having previously been defined in the
  <span class="union">HV_CPUID_RESULT</span>, are documented in the Windows Driver 
  Kit (WDK) for Windows 7, which also provided a C-language definition (of the structure’s 
  unnamed ancestor) in the HVGDK.H header file. Except that documentation continued 
  to a separately downloadable package for merging into Visual Studio 2012, later 
  kits have neither the documentation nor the header. </p>
  <p>The structure anyway repackages material that Microsoft documents in the
  <a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/reference/tlfs">
  Hypervisor Top-Level Functional Specification</a> (TLFS). If it or its members’ 
  previous definitions have become undocumented, it may be just that Microsoft regards 
  the structure as no more than a convenience for Microsoft’s own programming in 
  the loader and kernel, if not in the hypervisor itself. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">HV_VENDOR_AND_MAX_FUNCTION</span> is 0x10 bytes in 
  both 32-bit and 64-bit Windows, as was the unnamed structure that it was developed 
  from. The definition of members has never changed. </p>
  <p>Offsets and definitions below are from type information in symbol files for 
  the kernel in Windows 8.1 (only) and for URLMON.DLL in Windows 8.1 through to 
  the 1709 release of Windows 10. Well might you wonder what URLMON.DLL has to do 
  with the hypervisor such that its symbol files have type information for this 
  structure but the kernel’s don’t! Offsets and definitions for later versions, 
  presently up to and including Version 2004, are checked against type information 
  in a statically linked library named KDHV.LIB which Microsoft distributes with 
  programming samples in the Debugging Tools for Windows. </p>
  <p>Also checked are earlier versions for which the <span class="struct">HV_VENDOR_AND_MAX_FUNCTION</span> 
  was not yet a named structure. Offsets, names and types are from (in roughly decreasing 
  order of forensic quality): the C-language definition of the
  <span class="union">HV_CPUID_RESULT</span> in the WDK for Windows 7; type information 
  in symbol files for URLMON.DLL for Windows 8; and type information in the (32-bit) 
  statically linked library CLFSMGMT.LIB from the Software Development Kit (SDK) 
  for Windows Vista. </p>
  <table class="Struct">
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">UINT32 MaxFunction;</pre>
        </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>
        <pre class="source">UINT8 VendorName [12];</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <p>The kernel’s primary interest is in <span class="member">MaxFunction</span>. 
  This tells which <span class="instruction">cpuid</span> leaf is the last in the 
  series that begins at 0x40000000. Even after <span class="instruction">cpuid</span> 
  leaf 0x40000001 establishes that the hypervisor is Microsoft-compatible, which 
  guarantees the existence of leaves 0x40000002 to 0x40000005, the kernel never 
  queries for <span class="instruction">cpuid</span> leaf 0x40000006 or higher without 
  checking against what <span class="instruction">cpuid</span> leaf 0x40000000 produces 
  in <span class="register">eax</span> as <span class="member">MaxFunction</span>.
  </p>
  <p>Microsoft documents that Microsoft’s hypervisors have “Microsoft Hv” as the
  <span class="member">VendorName</span>, but this is largely irrelevant to the 
  kernel. For the practical matter of determining whether the hypervisor is Microsoft-compatible, 
  the kernel instead relies on <span class="instruction">cpuid</span> leaf 0x40000001. 
  Note that this is consistent with the TLFS, which advises that “The vendor ID 
  signature should be used only for reporting and diagnostic purposes” and recommends 
  “that software only base compatibility decisions on the interface signature reported 
  through leaf 0x40000001.” </p>
  <p>That said, largely irrelevant is not completely irrelevant. Aside from retrieving 
  the whole of the <span class="instruction">cpuid</span> output on behalf of external 
  callers, as noted above as Access, the kernel interprets the
  <span class="member">VendorName</span> for callers of <span class="function">
  <a href="../../../api/hvilib/hviintel/ishypervisorvendormicrosoft.htm">HviIsHypervisorVendorMicrosoft</a></span>.
  </p>
  <p>Beyond reporting, there is one case of the kernel itself giving significance 
  to “Microsoft Hv” as the <span class="member">VendorName</span>. Without it, the 
  exported function <span class="function">
  <a href="../../../api/hvilib/hviintel/getdebugdeviceoptions.htm">HviGetDeviceDebugOptions</a></span> 
  gets no options. With it, the hypervisor is understood to have a Model-Specific 
  Register (MSR) numbered 0x400000FF. Microsoft does not document the function. 
  The MSR is somehow omitted from what might be thought an extensive list of them 
  in the TLFS. </p>
  <p>Starting with 64-bit Windows 8 and 32-bit WIndows 8.1, the boot manager, boot 
  loader and a changing selection of other software (but not the kernel) expects 
  that a hypervisor with “Microsoft Hv” as the <span class="member">VendorName</span> 
  from <span class="instruction">cpuid</span> leaf 0x40000000 has a
  <span class="instruction">cpuid</span> leaf 0x40000080 whose output also fits 
  the <span class="struct">HV_VENDOR_AND_MAX_FUNCTION</span>. The
  <span class="member">VendorName</span> “Microsoft VS” signifies that 0x40000080 
  begins a second series of hypervisor leaves, certainly such that
  <span class="instruction">cpuid</span> has a leaf 0x40000081. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 13th
    <a href="../../../../../../../new/16/11.htm">November 2016</a> and was last 
    modified on 10th December 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
