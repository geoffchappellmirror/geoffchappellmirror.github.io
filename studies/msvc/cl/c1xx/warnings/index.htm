<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>C1XX Warnings</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>C1XX Warnings </h1>
<p>The table below lists the warning numbers that the front-end C++ compiler (C1XX) 
is known to be capable of issuing in version 13.00.9466. </p>
<p>Warning numbers that the product documentation does not list among the
<span class="citation">C/C++ Build Errors</span> are highlighted yellow. For some, 
the code that can raise the warning may turn out at closer inspection to be unreachable. 
That some warnings are undocumented ought be no surprise. The compiler has undocumented 
features and, assuming that this is deliberate, it would be careless of Microsoft 
to let the documentation reveal an undocumented feature by listing the errors that 
can follow from misuse of that feature. For instance, since
<span class="keyword">
<a href="../../../language/preprocessor/directives/pragma/start_map_region.htm">
start_map_region</a></span> is not documented as an argument for
<a href="../../../language/preprocessor/directives/pragma/index.htm">
<span class="directive">#pragma</span></a> directives, it is no surprise that warnings 
C4194 and C4195 are also not documented. </p>
<p>Text for each warning message is reproduced from the corresponding resource string 
in the executable, with placeholders resolved as much as possible in the style of 
the product documentation. </p>
<p>Each warning number is shown with a warning level, and sometimes levels, from 
1 to 4. These are the levels at which the compiler is known to request the warning 
(perhaps at different levels in different circumstances). If the warning occurs 
while in its default state, it is displayed if and only if this requested warning 
level does not exceed the cut-off level (0 to 4, such as set through the
<span class="switch"><a href="../../cl/options/w.htm">/W</a></span> option). The 
requested level is ignored if a level has been forced for the warning (as through
<span class="switch"><a href="../../cl/options/$w1.htm">/w1</a></span>,
<span class="switch"><a href="../../cl/options/$w2.htm">/w2</a></span>,
<span class="switch"><a href="../../cl/options/$w3.htm">/w3</a></span> and
<span class="switch"><a href="../../cl/options/$w4.htm">/w4</a></span>) or if the 
warning has been disabled (as through <span class="switch">
<a href="../../cl/options/$wd.htm">/wd</a></span>) or if the warning has been promoted 
to an error (as through <span class="switch"><a href="../../cl/options/$we.htm">
/we</a></span>). A warning that has been set to display once (as through
<span class="switch"><a href="../../cl/options/$wo.htm">/wo</a></span>) is in the 
default state until its first occurrence, then it is disabled. </p>
<p>For two warnings, C4165 and C4294, the corresponding level is shown as D. This 
indicates a contrivance in the code, as if to request “disabled” as the warning 
level. If the warning is in its default state, then it does not display, no matter 
what the cut-off level. It displays only if a level has been forced for it or if 
it has been promoted to an error. These warnings are unaffected by
<span class="switch"><a href="../../cl/options/w$all.htm">/Wall</a></span>. </p>
<p>For some warnings, only the warning level is highlighted yellow. Again, this 
indicates a disagreement with the product documentation, specifically that the latter 
gives a different level or omits the highlighted level. In many of these cases, 
the product documentation is demonstrably incorrect even with its own examples. 
Such evident carelessness presumably arises because the product documentation was 
correct once upon a time but has not been updated by the technical writers when 
the programmers have changed the software. Not even a company with Microsoft’s resources 
can attend to every minutia, but one must wonder what meaning to give to claims 
of having made a reasonable effort when such basic (and essentially unskilled) checking 
is neglected. </p>
<p>Warning C4199 is shown with two cases. For one, no level is shown. This is meant 
to indicate that the warning level is not entirely in the control of the compiler. 
This warning, which Microsoft does not document, can be triggered externally and 
seems to be intended for use by attribute provider DLLs. The other case arises internally. 
Its message text is not from a resource string but is hard-coded in the compiler’s 
data. </p>
<table class="ErrorMessages">
  <colgroup>
    <col class="Number" span="2"><col class="Message">
  </colgroup>
  <tr>
    <th>Warning </th>
    <th>Levels </th>
    <th>Message </th>
  </tr>
  <tr>
    <td>C4002 </td>
    <td>1 </td>
    <td>too many actual parameters for macro &#39;<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td>C4003 </td>
    <td>1 </td>
    <td>not enough actual parameters for macro &#39;<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td>C4005 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : macro redefinition</td>
  </tr>
  <tr>
    <td>C4006 </td>
    <td>1 </td>
    <td>#undef expected an identifier</td>
  </tr>
  <tr>
    <td><a href="c4007.htm">C4007</a> </td>
    <td><span class="undocumented">3</span> </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : must be &#39;<span class="placeholder">attribute</span>&#39;</td>
  </tr>
  <tr>
    <td><a href="c4008.htm">C4008</a> </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : &#39;<span class="placeholder">attribute</span>&#39; 
    attribute ignored</td>
  </tr>
  <tr>
    <td><a href="c4010.htm">C4010</a> </td>
    <td>1 </td>
    <td>single-line comment contains line-continuation character</td>
  </tr>
  <tr>
    <td>C4012 </td>
    <td>1 </td>
    <td>float constant in a cross compilation</td>
  </tr>
  <tr>
    <td>C4018 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">expression</span>&#39; : signed/unsigned mismatch</td>
  </tr>
  <tr>
    <td>C4028 </td>
    <td>1 </td>
    <td>formal parameter <span class="placeholder">number</span> different from 
    declaration</td>
  </tr>
  <tr>
    <td>C4030 </td>
    <td>1 </td>
    <td>first formal parameter list longer than the second list</td>
  </tr>
  <tr>
    <td>C4031 </td>
    <td>1 </td>
    <td>second formal parameter list longer than the first list</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4035</span> </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : no return value</td>
  </tr>
  <tr>
    <td>C4036 </td>
    <td>1 </td>
    <td>unnamed <span class="placeholder">type</span> as actual parameter</td>
  </tr>
  <tr>
    <td><a href="c4038.htm">C4038</a> </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">modifier</span>&#39; : illegal class modifier</td>
  </tr>
  <tr>
    <td>C4042 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : has bad storage class</td>
  </tr>
  <tr>
    <td>C4044 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">macro_name</span>&#39;: macros are not expanded for 
    attribute names or properties</td>
  </tr>
  <tr>
    <td>C4047 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : &#39;<span class="placeholder">identifier1</span>&#39; 
    differs in levels of indirection from &#39;<span class="placeholder">identifier2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4048 </td>
    <td>1 </td>
    <td>different array subscripts : &#39;<span class="placeholder">identifier1</span>&#39; 
    and &#39;<span class="placeholder">identifier2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4049 </td>
    <td>1 </td>
    <td>compiler limit : terminating line number emission</td>
  </tr>
  <tr>
    <td>C4053 </td>
    <td>4 </td>
    <td>one void operand for &#39;?:&#39;</td>
  </tr>
  <tr>
    <td>C4056 </td>
    <td>2 </td>
    <td>overflow in floating-point constant arithmetic</td>
  </tr>
  <tr>
    <td>C4059 </td>
    <td>1 </td>
    <td>pascal string too big, length byte is length % 256</td>
  </tr>
  <tr>
    <td>C4060 </td>
    <td>3 </td>
    <td>switch statement contains no &#39;case&#39; or &#39;default&#39; labels</td>
  </tr>
  <tr>
    <td>C4061 </td>
    <td>4 </td>
    <td>enumerate &#39;<span class="placeholder">identifier</span>&#39; in switch of enum 
    &#39;<span class="placeholder">enumeration</span>&#39; is not explicitly handled by 
    a case label</td>
  </tr>
  <tr>
    <td>C4062 </td>
    <td>3 </td>
    <td>enumerate &#39;<span class="placeholder">identifier</span>&#39; in switch of enum 
    &#39;<span class="placeholder">enumeration</span>&#39; is not handled</td>
  </tr>
  <tr>
    <td>C4063 </td>
    <td>4 </td>
    <td>case &#39;<span class="placeholder">identifier</span>&#39; is not a valid value 
    for switch of enum &#39;<span class="placeholder">enumeration</span>&#39;</td>
  </tr>
  <tr>
    <td>C4064 </td>
    <td>4 </td>
    <td>switch of incomplete enum &#39;<span class="placeholder">enumeration</span>&#39;</td>
  </tr>
  <tr>
    <td>C4065 </td>
    <td>3 </td>
    <td>switch statement contains &#39;default&#39; but no &#39;case&#39; labels</td>
  </tr>
  <tr>
    <td>C4066 </td>
    <td>3 </td>
    <td>characters beyond first in wide-character constant ignored</td>
  </tr>
  <tr>
    <td>C4067 </td>
    <td>1 </td>
    <td>unexpected tokens following preprocessor directive - expected a newline</td>
  </tr>
  <tr>
    <td><a href="c4068.htm">C4068</a> </td>
    <td>1 or <span class="undocumented">4</span> </td>
    <td>unknown pragma</td>
  </tr>
  <tr>
    <td>C4073 </td>
    <td>3 </td>
    <td>initializers put in library initialization area</td>
  </tr>
  <tr>
    <td>C4074 </td>
    <td>1 </td>
    <td>initializers put in compiler reserved initialization area</td>
  </tr>
  <tr>
    <td>C4075 </td>
    <td>1 </td>
    <td>initializers put in unrecognized initialization area</td>
  </tr>
  <tr>
    <td>C4076 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">typemod</span>&#39; : can not be used with type &#39;<span class="placeholder">typename</span>&#39;</td>
  </tr>
  <tr>
    <td>C4077 </td>
    <td>1 </td>
    <td>unknown check_stack option</td>
  </tr>
  <tr>
    <td>C4079 </td>
    <td>1 </td>
    <td>unexpected token &#39;<span class="placeholder">token</span>&#39;</td>
  </tr>
  <tr>
    <td>C4080 </td>
    <td>1 </td>
    <td>expected identifier for segment name; found &#39;<span class="placeholder">symbol</span>&#39;</td>
  </tr>
  <tr>
    <td>C4081 </td>
    <td>1 </td>
    <td>expected &#39;<span class="placeholder">token1</span>&#39;; found &#39;<span class="placeholder">token2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4083 </td>
    <td>1 </td>
    <td>expected &#39;<span class="placeholder">token</span>&#39;; found identifier &#39;<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td>C4085 </td>
    <td>1 </td>
    <td>expected pragma parameter to be &#39;on&#39; or &#39;off&#39;</td>
  </tr>
  <tr>
    <td>C4086 </td>
    <td>1 </td>
    <td>expected pragma parameter to be &#39;1&#39;, &#39;2&#39;, &#39;4&#39;, &#39;8&#39;, or &#39;16&#39;</td>
  </tr>
  <tr>
    <td><a href="c4091.htm">C4091</a> </td>
    <td><span class="undocumented">1 or 2</span> </td>
    <td>&#39;<span class="placeholder">attributes</span>&#39; : ignored on left of &#39;<span class="placeholder">type</span>&#39; 
    when no variable is declared</td>
  </tr>
  <tr>
    <td>C4094 </td>
    <td>2 </td>
    <td>untagged &#39;<span class="placeholder">token</span>&#39; declared no symbols</td>
  </tr>
  <tr>
    <td>C4096 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">a</span>&#39;: interface is not a COM interface; 
    will not be emitted to IDL</td>
  </tr>
  <tr>
    <td>C4097 </td>
    <td>1 </td>
    <td>expected pragma parameter to be &#39;restore&#39; or &#39;off&#39;</td>
  </tr>
  <tr>
    <td>C4099 </td>
    <td>2 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : type name first seen using 
    &#39;<span class="placeholder">objecttype1</span>&#39; now seen using &#39;<span class="placeholder">objecttype2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4100 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : unreferenced formal parameter</td>
  </tr>
  <tr>
    <td>C4101 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : unreferenced local variable</td>
  </tr>
  <tr>
    <td>C4102 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">label</span>&#39; : unreferenced label</td>
  </tr>
  <tr>
    <td>C4103 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">filename</span>&#39; : used #pragma pack to change 
    alignment</td>
  </tr>
  <tr>
    <td>C4109 </td>
    <td>1 </td>
    <td>unexpected identifier &#39;<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td>C4112 </td>
    <td>1 or 4 </td>
    <td>#line requires an integer between 1 and <span class="placeholder">number</span></td>
  </tr>
  <tr>
    <td><a href="c4114.htm">C4114</a> </td>
    <td>1 </td>
    <td>same type qualifier used more than once</td>
  </tr>
  <tr>
    <td>C4116 </td>
    <td>1 </td>
    <td>unnamed type definition in parentheses</td>
  </tr>
  <tr>
    <td>C4117 </td>
    <td>1 </td>
    <td>macro name &#39;<span class="placeholder">name</span>&#39; is reserved, &#39;<span class="placeholder">Command</span>&#39; 
    ignored</td>
  </tr>
  <tr>
    <td>C4119 </td>
    <td>1 </td>
    <td>different bases &#39;<span class="placeholder">base1</span>&#39; and &#39;<span class="placeholder">base2</span>&#39; 
    specified</td>
  </tr>
  <tr>
    <td>C4121 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">symbol</span>&#39; : alignment of a member was sensitive 
    to packing</td>
  </tr>
  <tr>
    <td>C4122 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : alloc_text applicable only 
    to functions with C linkage</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4123</span> </td>
    <td>1 </td>
    <td>different base expressions specified</td>
  </tr>
  <tr>
    <td>C4124 </td>
    <td>1 </td>
    <td>__fastcall with stack checking is inefficient</td>
  </tr>
  <tr>
    <td>C4125 </td>
    <td>4 </td>
    <td>decimal digit terminates octal escape sequence</td>
  </tr>
  <tr>
    <td>C4127 </td>
    <td>4 </td>
    <td>conditional expression is constant</td>
  </tr>
  <tr>
    <td>C4129 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">character</span>&#39; : unrecognized character escape 
    sequence</td>
  </tr>
  <tr>
    <td>C4130 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : logical operation on address 
    of string constant</td>
  </tr>
  <tr>
    <td>C4133 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">type</span>&#39; : incompatible types - from &#39;<span class="placeholder">type1</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4138 </td>
    <td>1 </td>
    <td>&#39;*/&#39; found outside of comment</td>
  </tr>
  <tr>
    <td>C4141 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">modifier</span>&#39; : used more than once</td>
  </tr>
  <tr>
    <td>C4143 </td>
    <td>1 </td>
    <td>pragma &#39;same_seg&#39; not supported; use __based allocation</td>
  </tr>
  <tr>
    <td>C4144 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">expression</span>&#39; : relational expression as 
    switch expression</td>
  </tr>
  <tr>
    <td>C4145 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">expression1</span>&#39; : relational expression as 
    switch expression; possible confusion with &#39;<span class="placeholder">expression2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4146 </td>
    <td>2 </td>
    <td>unary minus operator applied to unsigned type, result still unsigned</td>
  </tr>
  <tr>
    <td>C4150 </td>
    <td>2 </td>
    <td>deletion of pointer to incomplete type &#39;<span class="placeholder">type</span>&#39;; 
    no destructor called</td>
  </tr>
  <tr>
    <td>C4154 </td>
    <td>1 </td>
    <td>deletion of an array expression; conversion to pointer supplied</td>
  </tr>
  <tr>
    <td>C4155 </td>
    <td>1 </td>
    <td>deletion of an array expression without using the array form of &#39;delete&#39;</td>
  </tr>
  <tr>
    <td>C4156 </td>
    <td>2 </td>
    <td>deletion of an array expression without using the array form of &#39;delete&#39;; 
    array form substituted</td>
  </tr>
  <tr>
    <td>C4158 </td>
    <td>1 </td>
    <td>assuming #pragma pointers_to_members(full_generality,
    <span class="placeholder">inheritance</span>)</td>
  </tr>
  <tr>
    <td>C4159 </td>
    <td>3 </td>
    <td>#pragma <span class="placeholder">pragma</span>(pop,...) : has popped previously 
    pushed identifier &#39;<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td>C4160 </td>
    <td>1 </td>
    <td>#pragma <span class="placeholder">pragma</span>(pop,...) : did not find 
    previously pushed identifier &#39;<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td>C4161 </td>
    <td>3 </td>
    <td>#pragma <span class="placeholder">pragma</span>(pop...) : more pops than 
    pushes</td>
  </tr>
  <tr>
    <td>C4162 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : no function with C linkage 
    found</td>
  </tr>
  <tr>
    <td>C4163 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : not available as an intrinsic 
    function</td>
  </tr>
  <tr>
    <td>C4164 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : intrinsic function not declared</td>
  </tr>
  <tr>
    <td>C4165 </td>
    <td>D </td>
    <td>&#39;HRESULT&#39; is being converted to &#39;bool&#39;; are you sure this is what you want?</td>
  </tr>
  <tr>
    <td>C4166 </td>
    <td>1 </td>
    <td>illegal calling convention for constructor/destructor</td>
  </tr>
  <tr>
    <td>C4167 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : only available as an intrinsic 
    function</td>
  </tr>
  <tr>
    <td>C4168 </td>
    <td>1 </td>
    <td>compiler limit : out of debugger types, delete program database &#39;<span class="placeholder">database</span>&#39; 
    and rebuild</td>
  </tr>
  <tr>
    <td>C4172 </td>
    <td>1 </td>
    <td>returning address of local variable or temporary</td>
  </tr>
  <tr>
    <td>C4174 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">name</span>&#39; : not available as a #pragma component</td>
  </tr>
  <tr>
    <td>C4175 </td>
    <td>1 </td>
    <td>#pragma component(browser, on) : browser info must initially be specified 
    on the command line</td>
  </tr>
  <tr>
    <td>C4176 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">subcomponent</span>&#39; : unknown subcomponent for 
    #pragma component browser</td>
  </tr>
  <tr>
    <td><a href="c4177.htm">C4177</a> </td>
    <td>1 </td>
    <td>pragma <span class="placeholder">pragma</span> should be at global scope</td>
  </tr>
  <tr>
    <td>C4178 </td>
    <td>1 </td>
    <td>case constant &#39;<span class="placeholder">constant</span>&#39; too big for the 
    type of the switch expression</td>
  </tr>
  <tr>
    <td>C4180 </td>
    <td>1 </td>
    <td>qualifier applied to function type has no meaning</td>
  </tr>
  <tr>
    <td>C4181 </td>
    <td>1 </td>
    <td>qualifier applied to reference type ignored</td>
  </tr>
  <tr>
    <td>C4182 </td>
    <td>1 </td>
    <td>#include nesting level is <span class="placeholder">number</span> deep; 
    possible infinite recursion</td>
  </tr>
  <tr>
    <td>C4183 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39;: missing return type; assumed 
    to be a member function returning &#39;int&#39;</td>
  </tr>
  <tr>
    <td>C4185 </td>
    <td>1 </td>
    <td>ignoring unknown #%s attribute &#39;<span class="placeholder">attribute</span>&#39;</td>
  </tr>
  <tr>
    <td>C4186 </td>
    <td>1 </td>
    <td>#<span class="placeholder">directive</span> attribute &#39;<span class="placeholder">attribute</span>&#39; 
    requires <span class="placeholder">count</span> arguments; ignored</td>
  </tr>
  <tr>
    <td><a href="c4187.htm">C4187</a> </td>
    <td>1 </td>
    <td>#<span class="placeholder">directive</span> attributes &#39;<span class="placeholder">attribute1</span>&#39; 
    and &#39;<span class="placeholder">attribute2</span>&#39; are incompatible; both ignored</td>
  </tr>
  <tr>
    <td><span class="undocumented"><a href="c4188.htm">C4188</a></span> </td>
    <td>1 </td>
    <td>constant expression is not integral</td>
  </tr>
  <tr>
    <td>C4189 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : local variable is initialized 
    but not referenced</td>
  </tr>
  <tr>
    <td>C4190 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier1</span>&#39; has C-linkage specified, 
    but returns UDT &#39;<span class="placeholder">identifier2</span>&#39; which is incompatible 
    with C</td>
  </tr>
  <tr>
    <td height="38">C4191 </td>
    <td height="38">3 </td>
    <td height="38">&#39;<span class="placeholder">operator/operation</span>&#39; : unsafe 
    conversion from &#39;<span class="placeholder">type of expression</span>&#39; to &#39;<span class="placeholder">type 
    required</span>&#39;<br>
    Calling this function through the result pointer may cause your program to fail</td>
  </tr>
  <tr>
    <td height="38">C4192 </td>
    <td height="38">3 </td>
    <td height="38">automatically excluding &#39;<span class="placeholder">name</span>&#39; 
    while importing type library &#39;<span class="placeholder">library</span>&#39;</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented">C4193</span> </td>
    <td height="38">3 </td>
    <td height="38">#pragma warning(pop) : no matching &#39;#pragma warning(push)&#39;</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented">C4194</span> </td>
    <td height="38">1 </td>
    <td height="38">#pragma start_map_region cannot be nested; ignored</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented">C4195</span> </td>
    <td height="38">1 </td>
    <td height="38">#pragma stop_map_region used without matching #pragma start_map_region; 
    ignored</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented">C4196</span> </td>
    <td height="38">1 </td>
    <td height="38">expected &#39;<span class="placeholder">token1</span>&#39; or &#39;<span class="placeholder">token2</span>&#39;; 
    found &#39;<span class="placeholder">token3</span>&#39;</td>
  </tr>
  <tr>
    <td height="38">C4197 </td>
    <td height="38">3 </td>
    <td height="38">&#39;<span class="placeholder">type</span>&#39; : top-level volatile 
    in cast is ignored</td>
  </tr>
  <tr>
    <td height="38" rowspan="2"><span class="undocumented"><a href="c4199.htm">C4199</a></span>
    </td>
    <td>&nbsp;</td>
    <td><span class="placeholder">text</span></td>
  </tr>
  <tr>
    <td>1 </td>
    <td>please use __typeof</td>
  </tr>
  <tr>
    <td>C4200 </td>
    <td>2 </td>
    <td>nonstandard extension used : zero-sized array in struct/union </td>
  </tr>
  <tr>
    <td>C4201 </td>
    <td>4 </td>
    <td>nonstandard extension used : nameless struct/union</td>
  </tr>
  <tr>
    <td>C4203 </td>
    <td>4 </td>
    <td>nonstandard extension used : union with static member variable</td>
  </tr>
  <tr>
    <td>C4207 </td>
    <td>4 </td>
    <td>nonstandard extension used : extended initializer form</td>
  </tr>
  <tr>
    <td>C4208 </td>
    <td>4 </td>
    <td>nonstandard extension used : delete [exp] - exp evaluated but ignored</td>
  </tr>
  <tr>
    <td>C4211 </td>
    <td>4 </td>
    <td>nonstandard extension used : redefined extern to static</td>
  </tr>
  <tr>
    <td>C4213 </td>
    <td>4 </td>
    <td>nonstandard extension used : cast on l-value</td>
  </tr>
  <tr>
    <td>C4215 </td>
    <td>1 </td>
    <td>nonstandard extension used : long float</td>
  </tr>
  <tr>
    <td>C4216 </td>
    <td>1 </td>
    <td>nonstandard extension used : float long</td>
  </tr>
  <tr>
    <td height="38">C4217 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">operator</span>&#39; : member template 
    functions cannot be used for copy-assignment or copy-construction</td>
  </tr>
  <tr>
    <td height="38">C4223 </td>
    <td height="38">1 or 4 </td>
    <td height="38">nonstandard extension used : non-lvalue array converted to pointer</td>
  </tr>
  <tr>
    <td height="38">C4224 </td>
    <td height="38">1 </td>
    <td height="38">nonstandard extension used : formal parameter &#39;<span class="placeholder">identifier</span>&#39; 
    was previously defined as a type</td>
  </tr>
  <tr>
    <td height="38"><a href="c4226.htm">C4226</a> </td>
    <td height="38">1 </td>
    <td height="38">nonstandard extension used : &#39;<span class="placeholder">keyword</span>&#39; 
    is an obsolete keyword</td>
  </tr>
  <tr>
    <td height="38">C4227 </td>
    <td height="38">1 </td>
    <td height="38">anachronism used : qualifiers on reference are ignored</td>
  </tr>
  <tr>
    <td height="38">C4228 </td>
    <td height="38">1 </td>
    <td height="38">nonstandard extension used : qualifiers after comma in declarator 
    list are ignored</td>
  </tr>
  <tr>
    <td height="38">C4229 </td>
    <td height="38">1 </td>
    <td height="38">anachronism used : modifiers on data are ignored</td>
  </tr>
  <tr>
    <td height="38">C4230 </td>
    <td height="38">1 </td>
    <td height="38">anachronism used : modifiers/qualifiers interspersed, qualifier 
    ignored</td>
  </tr>
  <tr>
    <td height="38">C4231 </td>
    <td height="38">3 </td>
    <td height="38">nonstandard extension used : &#39;<span class="placeholder">identifier</span>&#39; 
    before template explicit instantiation</td>
  </tr>
  <tr>
    <td height="38"><a href="c4233.htm">C4233</a> </td>
    <td height="38"><span class="undocumented">1</span> </td>
    <td height="38">nonstandard extension used : &#39;<span class="placeholder">keyword</span>&#39; 
    keyword only supported in C++, not C</td>
  </tr>
  <tr>
    <td height="38"><a href="c4234.htm">C4234</a> </td>
    <td height="38"><span class="undocumented">1</span> </td>
    <td height="38">nonstandard extension used : &#39;<span class="placeholder">keyword</span>&#39; 
    keyword reserved for future use</td>
  </tr>
  <tr>
    <td height="38"><a href="c4235.htm">C4235</a> </td>
    <td height="38"><span class="undocumented">1</span> </td>
    <td height="38">nonstandard extension used : &#39;<span class="placeholder">keyword</span>&#39; 
    keyword not supported in this product</td>
  </tr>
  <tr>
    <td height="38"><a href="c4236.htm">C4236</a> </td>
    <td height="38"><span class="undocumented">1</span> </td>
    <td height="38">nonstandard extension used : &#39;<span class="placeholder">keyword</span>&#39; 
    is an obsolete keyword, see documentation for __declspec(dllexport)</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented"><a href="c4237.htm">C4237</a></span>
    </td>
    <td height="38">1 </td>
    <td height="38">nonstandard extension used : &#39;<span class="placeholder">keyword</span>&#39; 
    keyword is reserved for future use</td>
  </tr>
  <tr>
    <td height="38">C4238 </td>
    <td height="38">4 </td>
    <td height="38">nonstandard extension used : class rvalue used as lvalue</td>
  </tr>
  <tr>
    <td>C4239 </td>
    <td>4 </td>
    <td>nonstandard extension used : &#39;<span class="placeholder">token</span>&#39; : 
    conversion from &#39;<span class="placeholder">type</span>&#39; to &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td>C4240 </td>
    <td>3 </td>
    <td>nonstandard extension used : access to &#39;<span class="placeholder">classname</span>&#39; 
    now defined to be &#39;<span class="placeholder">access specifier</span>&#39;, previously 
    it was defined to be &#39;<span class="placeholder">access specifier</span>&#39;</td>
  </tr>
  <tr>
    <td>C4242 </td>
    <td><span class="undocumented">3</span> </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : conversion from &#39;<span class="placeholder">type1</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39;, possible loss of data</td>
  </tr>
  <tr>
    <td>C4243 </td>
    <td>3 </td>
    <td><span class="placeholder">conversion</span> conversion from &#39;<span class="placeholder">type1</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39; exists, but is inaccessible</td>
  </tr>
  <tr>
    <td height="38">C4244 </td>
    <td height="38"><span class="undocumented">2</span>, 3 or 4 </td>
    <td height="38">&#39;<span class="placeholder">conversion</span>&#39; : conversion from 
    &#39;<span class="placeholder">type1</span>&#39; to &#39;<span class="placeholder">type2</span>&#39;, 
    possible loss of data</td>
  </tr>
  <tr>
    <td height="38">C4245 </td>
    <td height="38">4 </td>
    <td height="38">&#39;<span class="placeholder">conversion</span>&#39; : conversion from 
    &#39;<span class="placeholder">type1</span>&#39; to &#39;<span class="placeholder">type2</span>&#39;, 
    signed/unsigned mismatch</td>
  </tr>
  <tr>
    <td height="38">C4250 </td>
    <td height="38">2 </td>
    <td height="38">&#39;<span class="placeholder">class1</span>&#39; : inherits &#39;<span class="placeholder">class2</span>::<span class="placeholder">member</span>&#39; 
    via dominance</td>
  </tr>
  <tr>
    <td height="17">C4251 </td>
    <td height="17"><span class="undocumented">2</span> </td>
    <td height="17">&#39;<span class="placeholder">identifier</span>&#39; :
    <span class="placeholder">classkey</span> &#39;<span class="placeholder">identifier</span>&#39; 
    needs to have dll-interface to be used by clients of
    <span class="placeholder">classkey</span> &#39;<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td height="17">C4254 </td>
    <td height="17">4 </td>
    <td height="17">&#39;<span class="placeholder">operator</span>&#39; : conversion from 
    &#39;<span class="placeholder">type1</span>&#39;:&#39;<span class="placeholder">bits</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39;:&#39;<span class="placeholder">bits</span>&#39;, 
    possible loss of data</td>
  </tr>
  <tr>
    <td height="17">C4256 </td>
    <td height="17">4 </td>
    <td height="17">&#39;<span class="placeholder">function</span>&#39; : constructor for 
    class with virtual bases has &#39;...&#39;; calls may not be compatible with older versions 
    of Visual C++</td>
  </tr>
  <tr>
    <td height="17">C4257 </td>
    <td height="17">1 </td>
    <td height="17">&#39;<span class="placeholder">structure_name</span>&#39; : class has 
    no data members; initialization ignored</td>
  </tr>
  <tr>
    <td height="17">C4258 </td>
    <td height="17">1 </td>
    <td height="17">&#39;<span class="placeholder">variable</span>&#39; : definition from 
    the for loop is ignored; the definition from the enclosing scope is used</td>
  </tr>
  <tr>
    <td height="17">C4263 </td>
    <td height="17">4 </td>
    <td height="17">&#39;<span class="placeholder">function</span>&#39; : member function 
    does not override any base class virtual member function</td>
  </tr>
  <tr>
    <td height="17">C4264 </td>
    <td height="17"><span class="undocumented">4</span> </td>
    <td height="17">&#39;<span class="placeholder">virtual_function</span>&#39; : no override 
    available for virtual member function from base &#39;<span class="placeholder">class</span>&#39;; 
    function is hidden</td>
  </tr>
  <tr>
    <td height="38">C4265 </td>
    <td height="38">3 </td>
    <td height="38">&#39;<span class="placeholder">class</span>&#39; : class has virtual 
    functions, but destructor is not virtual<br>
&nbsp;instances of this class may not be destructed correctly</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented">C4266</span> </td>
    <td height="38">4 </td>
    <td height="38">&#39;<span class="placeholder">virtual_function</span>&#39; : no override 
    available for virtual member function from base &#39;<span class="placeholder">class</span>&#39;; 
    function is hidden</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented">C4267</span> </td>
    <td height="38">3 </td>
    <td height="38">&#39;<span class="placeholder">conversion</span>&#39; : conversion from 
    &#39;size_t&#39; to &#39;<span class="placeholder">type</span>&#39;, possible loss of data</td>
  </tr>
  <tr>
    <td height="38">C4268 </td>
    <td height="38">4 </td>
    <td height="38">&#39;<span class="placeholder">identifier</span>&#39; : &#39;const&#39; static/global 
    data initialized with compiler generated default constructor fills the object 
    with zeros</td>
  </tr>
  <tr>
    <td height="38">C4273 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">function</span>&#39; : inconsistent dll 
    linkage</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented">C4274</span> </td>
    <td height="38">1 </td>
    <td height="38">#ident ignored; see documentation for #pragma comment(exestr, 
    &#39;string&#39;)</td>
  </tr>
  <tr>
    <td height="38">C4275 </td>
    <td height="38">2 </td>
    <td height="38">non dll-interface <span class="placeholder">classkey</span> 
    &#39;<span class="placeholder">identifier</span>&#39; used as base for dll-interface
    <span class="placeholder">classkey</span> &#39;<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented">C4277</span> </td>
    <td height="38">1 </td>
    <td height="38">imported item &#39;<span class="placeholder">class</span>::<span class="placeholder">identifier</span>&#39; 
    exists as both data member and function member; data member ignored</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented">C4279</span> </td>
    <td height="38">3 </td>
    <td height="38">&#39;<span class="placeholder">identifier</span>&#39;: identifier in 
    type library &#39;<span class="placeholder">library</span>&#39; is a keyword; use the 
    &#39;rename&#39; qualifier</td>
  </tr>
  <tr>
    <td height="38">C4280 </td>
    <td height="38">3 </td>
    <td height="38">&#39;operator -&gt;&#39; was self recursive through type &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td height="38">C4281 </td>
    <td height="38">3 </td>
    <td height="38">&#39;operator -&gt;&#39; recursion occurred through type &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td height="38">C4282 </td>
    <td height="38">3 </td>
    <td height="38">then through type &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td height="38">C4283 </td>
    <td height="38">3 </td>
    <td height="38">and through type &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td height="38">C4285 </td>
    <td height="38">2 </td>
    <td height="38">return type for &#39;<span class="placeholder">identifier</span>::operator 
    -&gt;&#39; is recursive if applied using infix notation</td>
  </tr>
  <tr>
    <td height="38">C4286 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">type1</span>&#39; : is caught by base 
    class (&#39;<span class="placeholder">type2</span>&#39;) on line
    <span class="placeholder">number</span></td>
  </tr>
  <tr>
    <td height="38">C4287 </td>
    <td height="38">3 </td>
    <td height="38">&#39;<span class="placeholder">operator</span>&#39; : unsigned/negative 
    constant mismatch</td>
  </tr>
  <tr>
    <td height="38">C4288 </td>
    <td height="38">1 </td>
    <td height="38">nonstandard extension used : &#39;<span class="placeholder">var</span>&#39; 
    : loop control variable declared in the for-loop is used outside the for-loop 
    scope; it conflicts with the declaration in the outer scope</td>
  </tr>
  <tr>
    <td height="38">C4289 </td>
    <td height="38">4 </td>
    <td height="38">nonstandard extension used : &#39;<span class="placeholder">var</span>&#39; 
    : loop control variable declared in the for-loop is used outside the for-loop 
    scope</td>
  </tr>
  <tr>
    <td height="38">C4290 </td>
    <td height="38">3 </td>
    <td height="38">C++ exception specification ignored except to indicate a function 
    is not __declspec(nothrow)</td>
  </tr>
  <tr>
    <td height="38">C4291 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">declaration</span>&#39; : no matching 
    operator delete found; memory will not be freed if initialization throws an 
    exception</td>
  </tr>
  <tr>
    <td height="38">C4292 </td>
    <td height="38">3 </td>
    <td height="38">compiler limit : terminating debug information emission for 
    enum &#39;<span class="placeholder">enum</span>&#39; with member &#39;<span class="placeholder">member</span>&#39;</td>
  </tr>
  <tr>
    <td><a href="c4294.htm">C4294</a> </td>
    <td>D </td>
    <td>C++ Exception Specification missing</td>
  </tr>
  <tr>
    <td>C4296 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : expression is always
    <span class="placeholder">constant</span></td>
  </tr>
  <tr>
    <td>C4297 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : function assumed not to throw 
    an exception but does</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4298</span> </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39;: identifier in type library 
    &#39;<span class="placeholder">library</span>&#39; is already a macro; renaming to &#39;__<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4299</span> </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39;: identifier in type library 
    &#39;<span class="placeholder">library</span>&#39; is a keyword; renaming to &#39;__<span class="placeholder">identifier</span>&#39;</td>
  </tr>
  <tr>
    <td>C4301 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">derivedclass::function</span>&#39;: overriding virtual 
    function only differs from &#39;<span class="placeholder">baseclass::function</span>&#39; 
    by const/volatile qualifier</td>
  </tr>
  <tr>
    <td>C4302 </td>
    <td>2 </td>
    <td>&#39;<span class="placeholder">conversion</span>&#39; : truncation from &#39;<span class="placeholder">type1</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4303 </td>
    <td>1 </td>
    <td><span class="placeholder">cast</span> from &#39;<span class="placeholder">type1</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39; is deprecated, use static_cast, 
    __try_cast or dynamic_cast</td>
  </tr>
  <tr>
    <td>C4305 </td>
    <td>1, <span class="undocumented">2</span> or <span class="undocumented">4</span>
    </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : truncation from &#39;<span class="placeholder">type1</span>&#39; 
    to &#39;<span class="placeholder">type2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4307 </td>
    <td>2 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : integral constant overflow</td>
  </tr>
  <tr>
    <td>C4308 </td>
    <td>2 </td>
    <td>negative integral constant converted to unsigned type</td>
  </tr>
  <tr>
    <td>C4309 </td>
    <td>2 </td>
    <td>&#39;<span class="placeholder">conversion</span>&#39; : truncation of constant value</td>
  </tr>
  <tr>
    <td>C4310 </td>
    <td><span class="undocumented">4</span> </td>
    <td>cast truncates constant value</td>
  </tr>
  <tr>
    <td>C4311 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">variable</span>&#39; : pointer truncation from &#39;<span class="placeholder">type</span>&#39; 
    to &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td>C4312 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">variable</span>&#39; : conversion from &#39;<span class="placeholder">type</span>&#39; 
    to &#39;<span class="placeholder">type</span>&#39; of greater size</td>
  </tr>
  <tr>
    <td>C4313 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : &#39;%%<span class="placeholder">specifier</span>&#39; 
    in format string conflicts with argument <span class="placeholder">number</span> 
    of type &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td>C4318 </td>
    <td>1 </td>
    <td>passing constant zero as the length to memset</td>
  </tr>
  <tr>
    <td>C4319 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : zero extending &#39;<span class="placeholder">type</span>&#39; 
    to &#39;<span class="placeholder">type</span>&#39; of greater size</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4321</span> </td>
    <td>1 </td>
    <td>automatically generating an IID for interface &#39;<span class="placeholder">interface</span>&#39;</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4322</span> </td>
    <td>1 </td>
    <td>automatically generating a CLSID for class &#39;<span class="placeholder">class</span>&#39;</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4323</span> </td>
    <td>1 </td>
    <td>re-using registered CLSID for class &#39;<span class="placeholder">class</span>&#39;</td>
  </tr>
  <tr>
    <td>C4324 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">struct_name</span>&#39; : structure was padded due 
    to __declspec(align())</td>
  </tr>
  <tr>
    <td>C4325 </td>
    <td>1 </td>
    <td>attributes for standard section &#39;<span class="placeholder">section</span>&#39; 
    ignored</td>
  </tr>
  <tr>
    <td>C4326 </td>
    <td>1 </td>
    <td>return type of &#39;<span class="placeholder">function</span>&#39; should be &#39;<span class="placeholder">type1</span>&#39; 
    instead of &#39;<span class="placeholder">type2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4329 </td>
    <td>1 </td>
    <td>__declspec(align()) is ignored on enum</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4336</span> </td>
    <td>4 </td>
    <td>import cross-referenced type library &#39;<span class="placeholder">type_lib1</span>&#39; 
    before importing &#39;<span class="placeholder">type_lib1</span>&#39;</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4337</span> </td>
    <td>4 </td>
    <td>cross-referenced type library &#39;<span class="placeholder">typelib1</span>&#39; 
    in &#39;<span class="placeholder">typelib2</span>&#39; is being automatically imported</td>
  </tr>
  <tr>
    <td>C4339 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">type</span>&#39; : use of undefined type detected 
    in CLR meta-data - use of this type may lead to a runtime exception</td>
  </tr>
  <tr>
    <td>C4340 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">value</span>&#39; : value wrapped from positive to 
    negative value</td>
  </tr>
  <tr>
    <td>C4341 </td>
    <td>1 or 3 </td>
    <td>&#39;<span class="placeholder">value</span>&#39; : signed value is out of range 
    for enum constant</td>
  </tr>
  <tr>
    <td>C4353 </td>
    <td>1 </td>
    <td>nonstandard extension used: constant 0 as function expression. Use &#39;__noop&#39; 
    function intrinsic instead</td>
  </tr>
  <tr>
    <td>C4355 </td>
    <td>1 or 4 </td>
    <td>&#39;this&#39; : used in base member initializer list</td>
  </tr>
  <tr>
    <td>C4360 </td>
    <td>1 </td>
    <td>the template parameter list for &#39;<span class="placeholder">function</span>&#39; 
    is incompatible with the template parameter list for its parent class &#39;<span class="placeholder">class</span>&#39;</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4370</span> </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : layout of class has changed from 
    a previous version of the compiler due to better packing</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4371</span> </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : layout of class may have changed 
    from a previous version of the compiler due to better packing of member &#39;<span class="placeholder">member</span>&#39;</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4372</span> </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : calling convention for UDT 
    return value has changed from a previous version of the compiler</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4373</span> </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">derived-class function</span>&#39;: virtual function 
    overrides &#39;<span class="placeholder">base-class function</span>&#39;, previous versions 
    of the compiler did not override when parameters only differed by const/volatile 
    qualifiers</td>
  </tr>
  <tr>
    <td>C4374 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function1</span>&#39;: pure virtual function will 
    not be overridden by non-virtual &#39;<span class="placeholder">function2</span>&#39; 
    in superclass</td>
  </tr>
  <tr>
    <td>C4389 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">operator</span>&#39; : signed/unsigned mismatch</td>
  </tr>
  <tr>
    <td>C4390 </td>
    <td>3 </td>
    <td>&#39;;&#39; : empty controlled statement found; is this the intent?</td>
  </tr>
  <tr>
    <td>C4391 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">signature</span>&#39; : incorrect return type for 
    intrinsic function, expected &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td>C4392 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">signature</span>&#39; : incorrect number of arguments 
    for intrinsic function, expected &#39;<span class="placeholder">number</span>&#39; arguments</td>
  </tr>
  <tr>
    <td>C4401 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">bitfield</span>&#39; : member is bit field</td>
  </tr>
  <tr>
    <td>C4402 </td>
    <td>1 </td>
    <td>must use PTR operator</td>
  </tr>
  <tr>
    <td>C4403 </td>
    <td>1 </td>
    <td>illegal PTR operator</td>
  </tr>
  <tr>
    <td>C4404 </td>
    <td>3 </td>
    <td>period on directive ignored</td>
  </tr>
  <tr>
    <td>C4405 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : identifier is reserved word</td>
  </tr>
  <tr>
    <td>C4406 </td>
    <td>1 </td>
    <td>operand on directive ignored</td>
  </tr>
  <tr>
    <td>C4407 </td>
    <td>1 </td>
    <td>cast between different pointer to member representations, compiler may generate 
    incorrect code</td>
  </tr>
  <tr>
    <td>C4409 </td>
    <td>1 </td>
    <td>illegal instruction size</td>
  </tr>
  <tr>
    <td>C4410 </td>
    <td>1 </td>
    <td>illegal size for operand</td>
  </tr>
  <tr>
    <td>C4411 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : symbol resolves to displacement 
    register</td>
  </tr>
  <tr>
    <td>C4414 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : short jump to function converted 
    to near</td>
  </tr>
  <tr>
    <td>C4440 </td>
    <td>1 </td>
    <td>calling convention redefinition from &#39;<span class="placeholder">convention</span>&#39; 
    to &#39;<span class="placeholder">convention</span>&#39; ignored</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4442</span> </td>
    <td>1 </td>
    <td>embedded null terminator in __annotation argument. Value will be truncated.</td>
  </tr>
  <tr>
    <td>C4502 </td>
    <td>1 </td>
    <td>&#39;linkage specification&#39; requires use of keyword &#39;extern&#39; and must precede 
    all other specifiers</td>
  </tr>
  <tr>
    <td>C4503 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : decorated name length exceeded, 
    name was truncated</td>
  </tr>
  <tr>
    <td>C4505 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : unreferenced local function 
    has been removed</td>
  </tr>
  <tr>
    <td>C4506 </td>
    <td>1 </td>
    <td>no definition for inline function &#39;<span class="placeholder">function</span>&#39;</td>
  </tr>
  <tr>
    <td>C4508 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : function should return a value; 
    &#39;void&#39; return type assumed</td>
  </tr>
  <tr>
    <td>C4509 </td>
    <td>3 </td>
    <td>nonstandard extension used: &#39;<span class="placeholder">function</span>&#39; 
    uses SEH and &#39;<span class="placeholder">object</span>&#39; has destructor</td>
  </tr>
  <tr>
    <td>C4510 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : default constructor could not 
    be generated</td>
  </tr>
  <tr>
    <td>C4511 </td>
    <td><span class="undocumented">4</span> </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : copy constructor could not be 
    generated</td>
  </tr>
  <tr>
    <td>C4512 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : assignment operator could not 
    be generated</td>
  </tr>
  <tr>
    <td>C4513 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : destructor could not be generated</td>
  </tr>
  <tr>
    <td>C4514 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : unreferenced inline function 
    has been removed</td>
  </tr>
  <tr>
    <td>C4515 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">namespace</span>&#39; : namespace uses itself</td>
  </tr>
  <tr>
    <td>C4516 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">class</span>::<span class="placeholder">symbol</span>&#39; 
    : access-declarations are deprecated; member using-declarations provide a better 
    alternative</td>
  </tr>
  <tr>
    <td>C4517 </td>
    <td>4 </td>
    <td>access-declarations are deprecated; member using-declarations provide a 
    better alternative</td>
  </tr>
  <tr>
    <td>C4518 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">specifier</span>&#39; : storage-class or type specifier(s) 
    unexpected here; ignored</td>
  </tr>
  <tr>
    <td>C4519 </td>
    <td>1 </td>
    <td>default template arguments are only allowed on a class template; ignored</td>
  </tr>
  <tr>
    <td>C4520 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : multiple default constructors 
    specified</td>
  </tr>
  <tr>
    <td>C4521 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : multiple copy constructors specified</td>
  </tr>
  <tr>
    <td>C4522 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : multiple assignment operators 
    specified</td>
  </tr>
  <tr>
    <td>C4523 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : multiple destructors specified</td>
  </tr>
  <tr>
    <td>C4526 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : static member function cannot 
    override virtual function &#39;<span class="placeholder">virtual function</span>&#39;<br>
    override ignored, virtual function will be hidden</td>
  </tr>
  <tr>
    <td>C4527 </td>
    <td>4 </td>
    <td>instances of <span class="placeholder">type</span> &#39;<span class="placeholder">class</span>&#39; 
    can never be destroyed - user-defined destructor required</td>
  </tr>
  <tr>
    <td height="38">C4529 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">member_name</span>&#39; : forming a pointer-to-member 
    requires explicit use of the address-of operator (&#39;&amp;&#39;) and a qualified name</td>
  </tr>
  <tr>
    <td height="38">C4530 </td>
    <td height="38">1 </td>
    <td height="38">C++ exception handler used, but unwind semantics are not enabled. 
    Specify /EHsc</td>
  </tr>
  <tr>
    <td height="38">C4532 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">continue</span>&#39; : jump out of __finally 
    block has undefined behavior during termination handling</td>
  </tr>
  <tr>
    <td height="38">C4533 </td>
    <td height="38">1 </td>
    <td height="38">initialization of &#39;<span class="placeholder">variable</span>&#39; 
    is skipped by &#39;goto <span class="placeholder">label</span>&#39;</td>
  </tr>
  <tr>
    <td height="38">C4534 </td>
    <td height="38">3 </td>
    <td height="38">&#39;<span class="placeholder">constructor</span>&#39; will not be a 
    default constructor for <span class="placeholder">classkey</span> &#39;<span class="placeholder">class</span>&#39; 
    due to the default argument</td>
  </tr>
  <tr>
    <td height="38">C4535 </td>
    <td height="38">3 </td>
    <td height="38">calling _set_se_translator() requires /EHa</td>
  </tr>
  <tr>
    <td height="38">C4536 </td>
    <td height="38">4 </td>
    <td height="38">&#39;<span class="placeholder">type-name</span>&#39; : type-name exceeds 
    meta-data limit of &#39;<span class="placeholder">limit</span>&#39; characters</td>
  </tr>
  <tr>
    <td height="38">C4537 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">object</span>&#39; : &#39;.&#39; applied to non-UDT 
    type</td>
  </tr>
  <tr>
    <td height="38">C4540 </td>
    <td height="38">1 </td>
    <td height="38">dynamic_cast used to convert to inaccessible or ambiguous base; 
    run-time test will fail (&#39;<span class="placeholder">type1</span>&#39; to &#39;<span class="placeholder">type2</span>&#39;)</td>
  </tr>
  <tr>
    <td height="38">C4541 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">identifier</span>&#39; used on polymorphic 
    type &#39;<span class="placeholder">type</span>&#39; with /GR-; unpredictable behavior 
    may result</td>
  </tr>
  <tr>
    <td height="38"><span class="undocumented"><a href="c4542.htm">C4542</a></span>
    </td>
    <td height="38">1 </td>
    <td height="38">Skipping generation of merged injected text file, cannot write
    <span class="placeholder">filetype</span> file: &#39;<span class="placeholder">file</span>&#39;:
    <span class="placeholder">message</span></td>
  </tr>
  <tr>
    <td height="38">C4543 </td>
    <td height="38">3 </td>
    <td height="38">Injected text suppressed by attribute &#39;no_injected_text&#39;</td>
  </tr>
  <tr>
    <td height="38">C4550 </td>
    <td height="38">1 </td>
    <td height="38">expression evaluates to a function which is missing an argument 
    list</td>
  </tr>
  <tr>
    <td height="38">C4551 </td>
    <td height="38">1 </td>
    <td height="38">function call missing argument list</td>
  </tr>
  <tr>
    <td height="38">C4552 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">operator</span>&#39; : operator has no 
    effect; expected operator with side-effect</td>
  </tr>
  <tr>
    <td height="38">C4553 </td>
    <td height="38">1 </td>
    <td height="38">&#39;<span class="placeholder">operator</span>&#39; : operator has no 
    effect; did you intend &#39;<span class="placeholder">operator</span>&#39;?</td>
  </tr>
  <tr>
    <td height="38">C4554 </td>
    <td height="38">3 </td>
    <td height="38">&#39;<span class="placeholder">operator</span>&#39; : check operator 
    precedence for possible error; use parentheses to clarify precedence</td>
  </tr>
  <tr>
    <td>C4555 </td>
    <td>1 </td>
    <td>expression has no effect; expected expression with side-effect</td>
  </tr>
  <tr>
    <td>C4556 </td>
    <td>1 </td>
    <td>value of intrinsic immediate argument &#39;<span class="placeholder">value</span>&#39; 
    is out of range &#39;<span class="placeholder">lowerbound</span> -
    <span class="placeholder">upperbound</span>&#39;</td>
  </tr>
  <tr>
    <td>C4557 </td>
    <td>3 </td>
    <td>&#39;__assume&#39; contains effect &#39;<span class="placeholder">effect</span>&#39;</td>
  </tr>
  <tr>
    <td>C4558 </td>
    <td>1 </td>
    <td>value of operand &#39;<span class="placeholder">value</span>&#39; is out of range 
    &#39;<span class="placeholder">lowerbound</span> - <span class="placeholder">upperbound</span>&#39;</td>
  </tr>
  <tr>
    <td>C4560 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">argument</span>&#39; : non-constant default arguments 
    unavailable when importing function</td>
  </tr>
  <tr>
    <td>C4561 </td>
    <td>1 </td>
    <td>&#39;__fastcall&#39; incompatible with the &#39;/clr&#39; option: converting to &#39;__stdcall&#39;</td>
  </tr>
  <tr>
    <td>C4563 </td>
    <td>1 </td>
    <td>&#39;/Gr - __fastcall calling convention&#39; option incompatible with the &#39;/clr&#39; 
    option: changing to &#39;/Gz - __stdcall calling convention&#39;</td>
  </tr>
  <tr>
    <td>C4564 </td>
    <td>4 </td>
    <td>method &#39;<span class="placeholder">method</span>&#39; of
    <span class="placeholder">classkey</span> &#39;<span class="placeholder">class</span>&#39; 
    defines unsupported default parameter &#39;<span class="placeholder">parameter</span>&#39;</td>
  </tr>
  <tr>
    <td>C4584 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">class1</span>&#39; : base-class &#39;<span class="placeholder">class2</span>&#39; 
    is already a base-class of &#39;<span class="placeholder">class3</span>&#39;</td>
  </tr>
  <tr>
    <td>C4600 </td>
    <td>1 </td>
    <td>#pragma &#39;<span class="placeholder">macro name</span>&#39; : expected a valid 
    non-empty string</td>
  </tr>
  <tr>
    <td>C4602 </td>
    <td>1 </td>
    <td>#pragma pop_macro : &#39;<span class="placeholder">macro name</span>&#39; no previous 
    #pragma push_macro for this identifier</td>
  </tr>
  <tr>
    <td>C4608 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">union_member</span>&#39; has already been initialized 
    by another union member in the initializer list, &#39;<span class="placeholder">union</span>::<span class="placeholder">member</span>&#39;</td>
  </tr>
  <tr>
    <td>C4610 </td>
    <td>4 </td>
    <td><span class="placeholder">object</span> &#39;<span class="placeholder">class</span>&#39; 
    can never be instantiated - user defined constructor required</td>
  </tr>
  <tr>
    <td>C4611 </td>
    <td>4 </td>
    <td>interaction between &#39;<span class="placeholder">function</span>&#39; and C++ 
    object destruction is non-portable</td>
  </tr>
  <tr>
    <td>C4612 </td>
    <td>1 </td>
    <td>error in include filename</td>
  </tr>
  <tr>
    <td>C4613 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">segment</span>&#39; : class of segment cannot be 
    changed</td>
  </tr>
  <tr>
    <td>C4615 </td>
    <td>1 </td>
    <td>#pragma warning : unknown user warning type</td>
  </tr>
  <tr>
    <td>C4616 </td>
    <td>1 </td>
    <td>#pragma warning : warning number &#39;<span class="placeholder">number1</span>&#39; 
    out of range, must be between &#39;<span class="placeholder">number2</span>&#39; and 
    &#39;<span class="placeholder">number3</span>&#39;</td>
  </tr>
  <tr>
    <td>C4618 </td>
    <td>1 </td>
    <td>pragma parameters included an empty string, pragma ignored</td>
  </tr>
  <tr>
    <td>C4619 </td>
    <td>3 </td>
    <td>#pragma warning : there is no warning number &#39;<span class="placeholder">number</span>&#39;</td>
  </tr>
  <tr>
    <td>C4620 </td>
    <td>1 </td>
    <td>no postfix form of &#39;operator ++&#39; found for type &#39;<span class="placeholder">type</span>&#39;, 
    using prefix form</td>
  </tr>
  <tr>
    <td>C4621 </td>
    <td>1 </td>
    <td>no postfix form of &#39;operator --&#39; found for type &#39;%$pS&#39;, using prefix form</td>
  </tr>
  <tr>
    <td>C4622 </td>
    <td>3 </td>
    <td>overwriting debug information formed during creation of the precompiled 
    header in object file: &#39;<span class="placeholder">file</span>&#39;</td>
  </tr>
  <tr>
    <td>C4623 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">derived class</span>&#39; : default constructor could 
    not be generated because a base class default constructor is inaccessible</td>
  </tr>
  <tr>
    <td>C4624 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">derived class</span>&#39; : destructor could not 
    be generated because a base class destructor is inaccessible</td>
  </tr>
  <tr>
    <td height="38">C4625 </td>
    <td height="38">4 </td>
    <td height="38">&#39;<span class="placeholder">derived class</span>&#39; : copy constructor 
    could not be generated because a base class copy constructor is inaccessible</td>
  </tr>
  <tr>
    <td height="38">C4626 </td>
    <td height="38">4 </td>
    <td height="38">&#39;<span class="placeholder">derived class</span>&#39; : assignment 
    operator could not be generated because a base class assignment operator is 
    inaccessible</td>
  </tr>
  <tr>
    <td>C4630 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">symbol</span>&#39; : &#39;<span class="placeholder">specifier</span>&#39; 
    storage-class specifier illegal on member definition</td>
  </tr>
  <tr>
    <td>C4640 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">instance</span>&#39; : construction of local static 
    object is not thread-safe</td>
  </tr>
  <tr>
    <td>C4645 </td>
    <td>3 </td>
    <td>function declared with __declspec(noreturn) has a return statement</td>
  </tr>
  <tr>
    <td>C4646 </td>
    <td>3 </td>
    <td>function declared with __declspec(noreturn) has non-void return type</td>
  </tr>
  <tr>
    <td>C4650 </td>
    <td>1 </td>
    <td>debugging information not in precompiled header; only global symbols from 
    the header will be available</td>
  </tr>
  <tr>
    <td>C4651 </td>
    <td>1 </td>
    <td>&#39;/D<span class="placeholder">macro</span>&#39; specified for precompiled header 
    but not for current compile</td>
  </tr>
  <tr>
    <td>C4652 </td>
    <td>1 </td>
    <td>compiler option &#39;<span class="placeholder">option</span>&#39; inconsistent with 
    precompiled header; current command-line option will override that defined in 
    the precompiled header</td>
  </tr>
  <tr>
    <td>C4653 </td>
    <td><span class="undocumented">1</span> </td>
    <td>compiler option &#39;<span class="placeholder">option</span>&#39; inconsistent with 
    precompiled header; current command-line option ignored</td>
  </tr>
  <tr>
    <td>C4655 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">symbol</span>&#39; : variable type is new since the 
    latest build, or is defined differently elsewhere</td>
  </tr>
  <tr>
    <td>C4656 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">symbol</span>&#39; : data type is new or has changed 
    since the latest build, or is defined differently elsewhere</td>
  </tr>
  <tr>
    <td>C4657 </td>
    <td>1 </td>
    <td>expression involves a data type that is new since the latest build</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4658</span> </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">symbol</span>&#39; : function prototype is new since 
    the latest build, or is declared differently elsewhere</td>
  </tr>
  <tr>
    <td>C4659 </td>
    <td>1 </td>
    <td>#pragma &#39;<span class="placeholder">pragma</span>&#39; : use of reserved segment 
    &#39;<span class="placeholder">segment</span>&#39; has undefined behavior, use #pragma 
    comment(linker, ...)</td>
  </tr>
  <tr>
    <td>C4661 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : no suitable definition provided 
    for explicit template instantiation request</td>
  </tr>
  <tr>
    <td>C4662 </td>
    <td>1 </td>
    <td>explicit instantiation; template-class &#39;<span class="placeholder">identifier1</span>&#39; 
    has no definition from which to specialize &#39;<span class="placeholder">identifier2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4663 </td>
    <td>4 </td>
    <td>C++ language change: to explicitly specialize class template &#39;<span class="placeholder">identifier</span>&#39; 
    use the following syntax:</td>
  </tr>
  <tr>
    <td>C4666 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">declaration</span>&#39; : function differs from &#39;<span class="placeholder">declaration</span>&#39; 
    only by calling convention</td>
  </tr>
  <tr>
    <td>C4667 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : no function template defined 
    that matches forced instantiation</td>
  </tr>
  <tr>
    <td>C4668 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">symbol</span>&#39; is not defined as a preprocessor 
    macro, replacing with &#39;0&#39; for &#39;<span class="placeholder">directives</span>&#39;</td>
  </tr>
  <tr>
    <td>C4669 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">cast</span>&#39; : unsafe conversion: &#39;<span class="placeholder">class</span>&#39; 
    is a managed type object</td>
  </tr>
  <tr>
    <td>C4670 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : this base class is inaccessible</td>
  </tr>
  <tr>
    <td>C4672 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">identifier1</span>&#39; : ambiguous. First seen as 
    &#39;<span class="placeholder">identifier2</span>&#39;</td>
  </tr>
  <tr>
    <td>C4673 </td>
    <td>4 </td>
    <td>throwing &#39;<span class="placeholder">identifier</span>&#39; the following types 
    will not be considered at the catch site</td>
  </tr>
  <tr>
    <td>C4674 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">method</span>&#39; should be declared &#39;static&#39; and 
    have exactly one parameter</td>
  </tr>
  <tr>
    <td>C4680 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : coclass does not specify a default 
    interface</td>
  </tr>
  <tr>
    <td>C4681 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">class</span>&#39; : coclass does not specify a default 
    interface that is an event source</td>
  </tr>
  <tr>
    <td>C4682 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">parameter</span>&#39; : no directional parameter 
    attribute specified, defaulting to [in]</td>
  </tr>
  <tr>
    <td>C4683 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39;: event source has an &#39;out&#39;-parameter; 
    exercise caution when hooking multiple event handlers</td>
  </tr>
  <tr>
    <td><a href="c4684.htm">C4684</a> </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">attribute</span>&#39; : WARNING!! attribute may cause 
    invalid code generation: use with caution</td>
  </tr>
  <tr>
    <td>C4685 </td>
    <td>1 </td>
    <td>expecting &#39;&gt; &gt;&#39; found &#39;&gt;&gt;&#39; when parsing template parameters</td>
  </tr>
  <tr>
    <td><span class="undocumented"><a href="c4696.htm">C4696</a></span> </td>
    <td>1 </td>
    <td>/ZB<span class="placeholder">number</span> option out of range; assuming 
    &#39;<span class="placeholder">number</span>&#39;</td>
  </tr>
  <tr>
    <td>C4709 </td>
    <td>4 </td>
    <td>comma operator within array index expression</td>
  </tr>
  <tr>
    <td>C4710 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; : function not inlined</td>
  </tr>
  <tr>
    <td>C4714 </td>
    <td>4 </td>
    <td>function &#39;<span class="placeholder">function</span>&#39; marked as __forceinline 
    not inlined</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4772</span> </td>
    <td>1 </td>
    <td>#import referenced a type from a missing type library; &#39;<span class="placeholder">type</span>&#39; 
    used as a placeholder</td>
  </tr>
  <tr>
    <td>C4786 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : identifier was truncated 
    to &#39;<span class="placeholder">number</span>&#39; characters in the
    <span class="placeholder">category</span> information</td>
  </tr>
  <tr>
    <td>C4793 </td>
    <td><span class="undocumented">4</span> </td>
    <td>native code generated for &#39;<span class="placeholder">attribute</span>&#39; function 
    &#39;<span class="placeholder">function</span>&#39;</td>
  </tr>
  <tr>
    <td>C4800 </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">type</span>&#39; : forcing value to bool &#39;true&#39; or 
    &#39;false&#39; (performance warning)</td>
  </tr>
  <tr>
    <td>C4803 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">method</span>&#39; : the raise method has a different 
    storage class from that of the event, &#39;<span class="placeholder">event</span>&#39;</td>
  </tr>
  <tr>
    <td>C4804 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">operation</span>&#39; : unsafe use of type &#39;bool&#39; 
    in operation</td>
  </tr>
  <tr>
    <td>C4805 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">operation</span>&#39; : unsafe mix of type &#39;<span class="placeholder">type</span>&#39; 
    and type &#39;<span class="placeholder">type</span>&#39; in operation</td>
  </tr>
  <tr>
    <td>C4806 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">operation</span>&#39; : unsafe operation: no value 
    of type &#39;<span class="placeholder">type</span>&#39; promoted to type &#39;<span class="placeholder">type</span>&#39; 
    can equal the given constant</td>
  </tr>
  <tr>
    <td>C4807 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">operation</span>&#39; : unsafe mix of type &#39;<span class="placeholder">type</span>&#39; 
    and signed bit field of type &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td>C4808 </td>
    <td>1 </td>
    <td>case &#39;<span class="placeholder">value</span>&#39; is not a valid value for switch 
    condition of type &#39;bool&#39;</td>
  </tr>
  <tr>
    <td>C4809 </td>
    <td>1 </td>
    <td>switch statement has redundant &#39;default&#39; label; all possible &#39;case&#39; labels 
    are given</td>
  </tr>
  <tr>
    <td><a href="c4810.htm">C4810</a> </td>
    <td>1 </td>
    <td>value of pragma pack(show) == <span class="placeholder">n</span></td>
  </tr>
  <tr>
    <td><a href="c4811.htm">C4811</a> </td>
    <td>1 </td>
    <td>value of pragma conform(forScope, show) == <span class="placeholder">value</span></td>
  </tr>
  <tr>
    <td>C4820 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39; : &#39;<span class="placeholder">bytes</span>&#39; 
    bytes padding added after member &#39;<span class="placeholder">member</span>&#39;</td>
  </tr>
  <tr>
    <td><a href="c4821.htm">C4821</a> </td>
    <td>1 </td>
    <td>Unicode files are not currently supported.</td>
  </tr>
  <tr>
    <td>C4829 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39;: parameters of gc type or value 
    type are not supported; standard &#39;<span class="placeholder">function</span>&#39; 
    signature required</td>
  </tr>
  <tr>
    <td>C4832 </td>
    <td>1 </td>
    <td>token &#39;<span class="placeholder">token</span>&#39; is illegal after UDT &#39;<span class="placeholder">type 
    name</span>&#39;</td>
  </tr>
  <tr>
    <td>C4906 </td>
    <td>1 </td>
    <td>string literal cast to &#39;<span class="placeholder">type</span>&#39;</td>
  </tr>
  <tr>
    <td><a href="c4912.htm">C4912</a> </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">attribute</span>&#39;: attribute has undefined behavior 
    on a nested UDT</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4916</span> </td>
    <td>1 </td>
    <td>in order to have a dispid, &#39;<span class="placeholder">function</span>&#39;: 
    must be introduced by an interface</td>
  </tr>
  <tr>
    <td>C4917 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">declarator</span>&#39; : a GUID can only be associated 
    with a class, interface or namespace</td>
  </tr>
  <tr>
    <td>C4918 </td>
    <td>4 </td>
    <td>&#39;<span class="placeholder">character</span>&#39; : invalid character in pragma 
    optimization list</td>
  </tr>
  <tr>
    <td>C4920 </td>
    <td>1 </td>
    <td>enum <span class="placeholder">enum</span> member
    <span class="placeholder">member</span>=<span class="placeholder">value</span> 
    already seen in enum <span class="placeholder">enum</span> as
    <span class="placeholder">member</span>=<span class="placeholder">value</span></td>
  </tr>
  <tr>
    <td><span class="undocumented">C4921</span> </td>
    <td>3 </td>
    <td>&#39;<span class="placeholder">attribute</span>&#39;: attribute value &#39;<span class="placeholder">value</span>&#39; 
    should not be multiply specified</td>
  </tr>
  <tr>
    <td>C4922 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">base-class function</span>&#39;: function declared 
    as &#39;__sealed&#39;; will not be overridden by &#39;<span class="placeholder">derived-class 
    function</span>&#39;</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4924</span> </td>
    <td>1 </td>
    <td>#import: enum &#39;<span class="placeholder">enum</span>&#39; declared inside &#39;%s&#39; 
    - ignored (not yet supported)</td>
  </tr>
  <tr>
    <td>C4925 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">method</span>&#39;: dispinterface method cannot be 
    called from script</td>
  </tr>
  <tr>
    <td>C4926 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">identifier</span>&#39;: symbol is already defined: 
    attributes ignored</td>
  </tr>
  <tr>
    <td>C4928 </td>
    <td>1 </td>
    <td>illegal copy-initialization; more than one user-defined conversion has been 
    implicitly applied</td>
  </tr>
  <tr>
    <td>C4929 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">file</span>&#39;: typelibary contains a union; ignoring 
    the &#39;embedded_idl&#39; qualifier</td>
  </tr>
  <tr>
    <td>C4930 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">prototype</span>&#39;: prototyped function not called 
    (was a variable definition intended?)</td>
  </tr>
  <tr>
    <td>C4931 </td>
    <td>4 </td>
    <td>we are assuming the type library was built for <span class="placeholder">
    number</span>-bit pointers</td>
  </tr>
  <tr>
    <td><a href="c4932.htm">C4932</a> </td>
    <td>4 </td>
    <td>__identifier(<span class="placeholder">identifier</span>) and __identifier(<span class="placeholder">identifier</span>) 
    are indistinguishable</td>
  </tr>
  <tr>
    <td>C4933 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function1</span>&#39; and &#39;<span class="placeholder">function2</span>&#39; 
    only differ by top-level CV-qualifiers in their arguments. This usage is deprecated 
    and may be an error in the future</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4934</span> </td>
    <td>1 </td>
    <td>&#39;__delegate(multicast)&#39; is deprecated, use &#39;__delegate&#39; instead</td>
  </tr>
  <tr>
    <td>C4935 </td>
    <td>1 </td>
    <td>assembly access specifier modified from &#39;<span class="placeholder">access</span>&#39;</td>
  </tr>
  <tr>
    <td>C4944 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">symbol</span>&#39; : cannot import symbol from &#39;<span class="placeholder">assembly1</span>&#39;: 
    as &#39;<span class="placeholder">symbol</span>&#39; already exists in the current scope</td>
  </tr>
  <tr>
    <td>C4945 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">symbol</span>&#39; : cannot import symbol from &#39;<span class="placeholder">assembly2</span>&#39;: 
    as &#39;<span class="placeholder">symbol</span>&#39; has already been imported from 
    another assembly &#39;<span class="placeholder">assembly1</span>&#39;</td>
  </tr>
  <tr>
    <td>C4946 </td>
    <td>1 </td>
    <td>reinterpret_cast used between related classes: &#39;<span class="placeholder">class1</span>&#39; 
    and &#39;<span class="placeholder">class2</span>&#39;</td>
  </tr>
  <tr>
    <td><span class="undocumented"><a href="c4994.htm">C4994</a></span> </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">attribute</span>&#39;: attribute is marked with the 
    &#39;<span class="placeholder">qualifier</span>::&#39; or &#39;__<span class="placeholder">qualifier</span>::&#39; 
    usage qualifier, please use &#39;<span class="placeholder">qualifier</span>:&#39; instead</td>
  </tr>
  <tr>
    <td>C4995 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39;: name was marked as #pragma 
    deprecated</td>
  </tr>
  <tr>
    <td>C4996 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">function</span>&#39; was declared deprecated</td>
  </tr>
  <tr>
    <td>C4997 </td>
    <td>1 </td>
    <td>&#39;<span class="placeholder">class</span>&#39;: coclass does not implement a COM 
    interface or pseudo-interface</td>
  </tr>
  <tr>
    <td><span class="undocumented">C4998</span> </td>
    <td>1 </td>
    <td>EXPECTATION FAILED: <span class="placeholder">source file</span>(<span class="placeholder">line 
    number</span>)</td>
  </tr>
</table>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62552" endspan -->
</div>

</body>

</html>
