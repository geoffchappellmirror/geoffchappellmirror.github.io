<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>HV_ENLIGHTENMENT_INFORMATION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>HV_ENLIGHTENMENT_INFORMATION </h1>
  <p>The <span class="struct">HV_ENLIGHTENMENT_INFORMATION</span> structure collects 
  the flags that a Microsoft-compatible hypervisor’s <span class="instruction">cpuid</span> 
  leaf 0x40000004 produces in the <span class="register">eax</span>,
  <span class="register">ebx</span>, <span class="register">ecx</span> and
  <span class="register">edx</span> registers. </p>
  <h2>Availability </h2>
  <p>The <span class="struct">HV_ENLIGHTENMENT_INFORMATION</span> is defined in 
  version 6.3, having developed from the unnamed structure that versions 6.0 to 
  6.2 define for the <span class="member">MsHvEnlightenmentInformation</span> member 
  of the <span class="union"><a href="hv_cpuid_result.htm">HV_CPUID_RESULT</a></span> 
  union. It is superseded in version 10.0 by the <span class="struct">
  <a href="hv_x64_enlightenment_information.htm">HV_X64_ENLIGHTENMENT_INFORMATION</a></span>. 
  Version 10.0 also defines an <span class="struct">HV_ARM64_ENLIGHTENMENT_INFORMATION</span>, 
  but what this represents on the applicable processors lies (far) outside the scope 
  of this article. </p>
  <p>It is here thought that <span class="macro">HV_ENLIGHTENMENT_INFORMATION</span> 
  is retained in version 10.0 and higher as a macro for the appropriate processor-specific 
  structure: <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span> when building 
  for the x86 and x64 processors; but <span class="struct">HV_ARM64_ENLIGHTENMENT_INFORMATION</span> 
  for the 32-bit and 64-bit ARM processors. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">HV_ENLIGHTENMENT_INFORMATION</span> is not documented. 
  Some of its members, having previously been defined in the <span class="union">
  HV_CPUID_RESULT</span>, are documented in the Windows Driver Kit (WDK) for Windows 
  7, which also provided a C-language definition (of the structure’s unnamed ancestor) 
  in the HVGDK.H header file. Except that documentation continued to a separately 
  downloadable package for merging into Visual Studio 2012, later kits have neither 
  the documentation nor the header. </p>
  <p>The structure anyway repackages material that Microsoft documents in the
  <a href="https://msdn.microsoft.com/en-us/virtualization/hyperv_on_windows/reference/tlfs">
  Hypervisor Top-Level Functional Specification</a>. If it or its members’ previous 
  definitions have become undocumented, it may be just that Microsoft regards the 
  structure as no more than a convenience for Microsoft’s own programming in the 
  loader and kernel, if not in the hypervisor itself. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">HV_ENLIGHTENMENT_INFORMATION</span> is 0x10 bytes 
  in both 32-bit and 64-bit Windows, as was the unnamed structure that it was developed 
  from. Offsets and definitions below are from type information in symbol files 
  for URLMON.DLL in Windows 8.1. Well might you wonder what URLMON.DLL has to do 
  with the hypervisor such that its symbol files have type information for this 
  structure but the kernel’s don’t! </p>
  <p>These tables also survey the structure’s development in earlier versions when 
  it was not yet a named structure. Offsets, names and types are from (in roughly 
  decreasing order of forensic quality): the C-language definition of the
  <span class="union">HV_CPUID_RESULT</span> in the WDK for Windows 7; type information 
  in symbol files for URLMON.DLL for Windows 8; and type information in the statically 
  linked library CLFSMGMT.LIB from the Software Development Kit (SDK) for Windows 
  Vista. Some development within version 6.0 is inferred from inspection of binaries: 
  late 6.0 starts with Windows Vista SP1. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">/*  bit fields for EAX, see below  */</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
      <tr>
        <td rowspan="2">0x04 </td>
        <td>
        <pre class="source">UINT32 ReservedEbx;</pre>
        </td>
        <td>early 6.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 LongSpinWaitCount;</pre>
        </td>
        <td>late 6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>
        <pre class="source">UINT32 ReservedEcx;</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>
        <pre class="source">UINT32 ReservedEdx;</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
    </tbody>
  </table>
  <p>Version numbers before 6.3 refer to prior appearance in the
  <span class="member">MsHvEnlightenmentInformation</span> member of the
  <span class="struct">HV_CPUID_RESULT</span>. </p>
  <p>Though no definition of <span class="member">LongSpinWaitCount</span> is known 
  before Windows 7, one surely did exist since the kernel’s interpretation of the 
  output in <span class="register">ebx</span> starts at Windows Vista SP1. </p>
  <h3>Offset 0x00 (<span class="register">EAX</span>) </h3>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>&nbsp;0x00000001 </td>
        <td>
        <pre class="source">UINT32 UseHypercallForAddressSpaceSwitch : 1;</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>0x00000002 </td>
        <td>
        <pre class="source">UINT32 UseHypercallForLocalFlush : 1;</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>0x00000004 </td>
        <td>
        <pre class="source">UINT32 UseHypercallForRemoteFlush : 1;</pre>
        </td>
        <td>6.0 to 6.3 </td>
      </tr>
      <tr>
        <td rowspan="2">0x00000008 </td>
        <td>
        <pre class="source">UINT32 UseMsrForApicAccess : 1;</pre>
        </td>
        <td>early 6.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 UseApicMsrs : 1;</pre>
        </td>
        <td>late 6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>0x00000010 </td>
        <td>
        <pre class="source">UINT32 UseMsrForReset : 1;</pre>
        </td>
        <td>late 6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>0x00000020 </td>
        <td>
        <pre class="source">UINT32 UseRelaxedTiming : 1;</pre>
        </td>
        <td>late 6.0 to 6.3 </td>
      </tr>
      <tr>
        <td>0x00000040 </td>
        <td>
        <pre class="source">UINT32 UseDmaRemapping : 1;</pre>
        </td>
        <td>6.2 to 6.3 </td>
      </tr>
      <tr>
        <td>0x00000080 </td>
        <td>
        <pre class="source">UINT32 UseInterruptRemapping : 1;</pre>
        </td>
        <td>6.2 to 6.3 </td>
      </tr>
      <tr>
        <td>0x00000100 </td>
        <td>
        <pre class="source">UINT32 UseX2ApicMsrs : 1;</pre>
        </td>
        <td>6.2 to 6.3 </td>
      </tr>
      <tr>
        <td>0x00000200 </td>
        <td>
        <pre class="source">UINT32 DeprecateAutoEoi : 1;</pre>
        </td>
        <td>6.2 to 6.3 </td>
      </tr>
      <tr>
        <td rowspan="3">&nbsp;</td>
        <td>
        <pre class="source">UINT32 Reserved : 28;</pre>
        </td>
        <td>6.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved : 26;</pre>
        </td>
        <td>6.1 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UINT32 Reserved : 22;</pre>
        </td>
        <td>6.2 to 6.3 </td>
      </tr>
    </tbody>
  </table>
  <p>When the 0x00000008 bit changed name is not known with the certainty of formal 
  definition or even of type information, but inspection of the kernel and HAL binaries 
  shows that interpretation of <span class="instruction">cpuid</span> leaf 0x40000004 
  was extended for Windows Vista SP1 (see next paragraph) and it is here thought 
  more likely that the name changes will have been done then rather than separately 
  for Windows 7. </p>
  <p>Though no definition is known for any bit beyond 0x00000008 before Windows 
  7, the HAL and the kernel in Windows Vista SP1 use the 0x00000010 and 0x00000020 
  bits, respectively, for the same purposes as do later versions. </p>
  <p>All flags that are defined for version 6.3 continue to version 10.0 in the
  <span class="struct">HV_X64_ENLIGHTENMENT_INFORMATION</span>, but
  <span class="member">UseMsrForReset</span> changes name to
  <span class="member">UseHvRegisterForReset</span>. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 12th
    <a href="../../../../../../../new/16/11.htm">November 2016</a> and was last 
    modified on 10th December 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
