<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>IA32_MISC_ENABLE</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/km.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="63592" -->
<div class="Main">
  <h1>IA32_MISC_ENABLE </h1>
  <p>The Model Specific Register (MSR) to Enable Miscellaneous Processor Features 
  has the register address 0x000001A0 on Intel processors. No use of this register 
  is known by the x86 or x64 kernels before version 6.0 or if the vendor string 
  from <span class="instruction"><a href="../cpuid/index.htm">cpuid</a></span> leaf 
  0 is not GenuineIntel. </p>
  <p>Windows cares about very few of the bits in this MSR. Yet in anticipation of 
  coming across code that accesses an unfamiliar bit, it may be as well to collect 
  at least Intel’s titles even for the non-architectural bits that exist only in 
  some models: much of the point to this page is to have it as a ready reference 
  just in case. Anyway, one bit that the Windows kernel does access in
  <span class="register">IA32_MISC_ENABLE</span> is not yet known to have been documented 
  by either Intel or Microsoft. </p>
  <h2>Fast-Strings Enable (Bit 0) </h2>
  <p>The Windows kernel is not known to use this bit. </p>
  <h2>x87 FPU Fopcode Compatibility Mode Enable (Bit 2) </h2>
  <p>This bit is not architectural. Intel has sometimes named this bit
  <span class="bit">ENABLEFOPCODE</span>. The Windows kernel is not known to use 
  this bit. </p>
  <h2>Automatic Thermal Control Circuit Enable (Bit 3) </h2>
  <p>The Windows kernel is not known to use this bit. </p>
  <h2>Split-Lock Disable (Bit 4) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Third-Level Cache Disable (Bit 6) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Performance Monitoring Available (Bit 7) </h2>
  <p>Intel has sometimes used the symbolic names <span class="bit">PERFMON_AVAILABLE</span> 
  and <span class="constant">EMON_AVAILABLE</span> for this bit. </p>
  <p>A set bit 7 in <span class="register">IA32_MISC_ENABLE</span> (and a clear 
  bit 12) is required for the <span class="function">
  <a href="../../ntoskrnl/api/ex/sysinfo/set.htm">NtSetSystemInformation</a></span> 
  function’s support of its information class <span class="constant">SystemProcessorProfileControlArea</span> 
  (0x81) in version 6.2 and higher. The 32-bit kernel requires additionally that 
  the <span class="bit">DTES64</span> bit (2) be set in
  <a href="../cpuid/00000001h/ecx.htm"><span class="register">ecx</span> from
  <span class="instruction">cpuid</span> leaf 1</a>. </p>
  <p>This information class prepares a <span class="struct">
  <a href="../../ntoskrnl/inc/api/ntexapi/processor_profile_control_area.htm">PROCESSOR_PROFILE_CONTROL_AREA</a></span> 
  for the processor so that one kernel-mode caller can manage the processor’s tracing 
  of Processor Event Based Sampling (PEBS) records to caller-supplied buffers and 
  the kernel can have access to the PEBS index for stamping some of its own events. 
  The control area is what Intel’s literature presents as the DS Save Area—specifically 
  in its 64-bit format (hence the 32-bit kernel’s additional requirement, above). 
  The kernel merely prepares the zero-initialised control area in suitable memory. 
  The caller must fill it in, notably to set the buffer into which the processor 
  is to store PEBS records, and the caller must write to the
  <span class="register">IA32_DS_AREA</span> register (0x0600) to tell the processor 
  where to find the DS Save Area. Identifying an intended caller is for further 
  study. </p>
  <p>The same requirement of a set bit 7 and clear bit 12 is known in version 6.1 
  to the 64-bit kernel only. Control areas for each processor are in an array whose 
  address is in an internal variable named <span class="internal variable">BBTBuffer</span>. 
  In versions 6.1 to 6.3 for both the 32-bit and 64-bit kernels, this variable looks 
  to have no way of ever being loaded with any address. In versions 5.0 to 6.0, 
  however, and again for version 10.0, it gets loaded at startup with the address 
  of an amount of memory that comes ultimately from the <span class="bcdopt">perfmem</span> 
  boot option (or <span class="switch">/PERFMEM</span> switch in BOOT.INI). In all 
  versions 5.0 and higher, the variable is copied to <span class="member">ReservedForPerf</span> 
  in every <span class="struct">
  <a href="../../ntoskrnl/inc/api/pebteb/teb/index.htm">TEB</a></span>. It’s some 
  small mystery, and will remain so without further study. </p>
  <h2>Suppress Lock Enable (Bit 8) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Hardware Prefetcher Disable (Bit 9) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Prefetch Queue Disable (Bit 9) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>FERR# Multiplexing Enable (Bit 10) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>FERR# Interrupt Reporting Enable (Bit 10) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Branch Trace Storage Unavailable (Bit 11) </h2>
  <p>Intel has sometimes used the symbolic name <span class="bit">BTS_UNAVAILABLE</span> 
  for this bit. </p>
  <p>Branch Trace Storage (BTS) gets some specialised use by the kernel in version 
  6.0 and higher for the Driver Verifier. BTS is available if all processors satisfy 
  the following conditions: </p>
  <ul>
    <li>the vendor is Intel; </li>
    <li>the family is 15 or 6; </li>
    <li>the <span class="bit">DS</span> bit (21) is set in
    <a href="../cpuid/00000001h/edx.htm"><span class="register">edx</span> from
    <span class="instruction">cpuid</span> leaf 1</a>; </li>
  </ul>
  <p>and none have bit 11 set in <span class="register">IA32_MISC_ENABLE</span>.
  </p>
  <p>This use of BTS has the following several quirks, which are presently left 
  for further study. </p>
  <p>First, both BTS and Processor Event Based Sampling (PEBS, see bit 12) require 
  that the <span class="register">IA32_DS_AREA</span> register (0x0600) be programmed 
  with the address of a Debug Store (DS) save area, which in turn provides the addresses 
  of buffers in which the processor is to store branch records and PEBS records. 
  Yet no coordination is known between the kernel’s own use of BTS in version 6.0 
  and higher and its support for PEBS in version 6.2 and higher. </p>
  <p>Second, the 32-bit kernel’s code for using BTS knows only of the 32-bit DS 
  save area and its 12-byte branch records. Intel’s documentation seems to read 
  that if <span class="instruction">cpuid</span> leaf 1 returns
  <span class="register">ecx</span> with a set <span class="bit">DTES64</span> bit 
  (2), then the processor uses the 64-bit DS save area and 24-byte branch records 
  even when not in IA-32e mode. Perhaps processors can’t show both the
  <span class="bit">DS</span> and <span class="bit">DTES64</span> bits, else this 
  use of BTS is surely broken. Contrast with the 32-bit kernel’s code that supports 
  PEBS: it requires the <span class="bit">DTES64</span> bit and knows only of the 
  64-bit DS save area. </p>
  <p>Third, when the kernel starts its BTS recording by setting appropriate bits 
  in the <span class="register">IA32_DEBUGCTL</span> register (0x01D9) it sets the
  <span class="bit">TR</span> and <span class="bit">BTS</span> bits (6 and 7), as 
  documented, if the family is 6. If the family is 15, however, it sets the reserved 
  bits 2 and 3 instead. </p>
  <h2>Processor Event Based Sampling Unavailable (Bit 12) </h2>
  <p>Intel has sometimes used the symbolic name <span class="bit">PEBS_UNAVAILABLE</span> 
  for this bit. </p>
  <p>A clear bit 12 in <span class="register">IA32_MISC_ENABLE</span> (and a set 
  bit 7) is required for the <span class="function">NtSetSystemInformation</span> 
  function’s support of its information class <span class="constant">SystemProcessorProfileControlArea</span> 
  (0x81) in version 6.2 and higher. The 32-bit kernel requires additionally that 
  the <span class="bit">DTES64</span> bit (2) be set in <span class="register">ecx</span> 
  from <span class="instruction">cpuid</span> leaf 1. Refer above to bit 7 for additional 
  notes. </p>
  <h2>TM2 Enable (Bit 13) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Enhanced Intel SpeedStep Technology Enable (Bit 16) </h2>
  <p>The Windows kernel is not known to use this bit. </p>
  <h2>ENABLE MONITOR FSM (Bit 18) </h2>
  <p>The Windows kernel is not known to use this bit. </p>
  <h2>Adjacent Cache Line Prefetch Disable (Bit 19) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Enhanced Intel SpeedStep Technology Select Lock (Bit 20) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Limit CPUID Maxval (Bit 22) </h2>
  <p>Bit 22 may have made <span class="register">IA32_MISC_ENABLE</span> the best 
  known of all MSRs that are in any sense quirky. When this bit is set, the processor 
  varies the behaviour of the <span class="instruction">cpuid</span> instruction 
  so that leaf 0 reports that the instruction allows only 2 or 3 as its maximum 
  valid input for <span class="register">eax</span>. Intel’s manuals say 2 now but 
  have said 3. A known reason for wanting to limit the maximum is that early versions 
  of Windows, before Windows NT 4.0 SP6, from a time when the
  <span class="instruction">cpuid</span> instruction was relatively new, were skeptical 
  of any supposed <span class="instruction">cpuid</span> support that claimed implausibly 
  much. If <span class="instruction">cpuid</span> leaf 0 returns with
  <span class="register">eax</span> greater than 3, these versions recognise the 
  processor as a Pentium whose <span class="instruction">cpuid</span> is completely 
  unusable. With bit 22 set in <span class="register">IA32_MISC_ENABLE</span>, early 
  Windows versions can run on new processors. </p>
  <p>The intention, apparently, was that a BIOS knew or determined that the processor 
  is too new for these early Windows versions, it could at least offer to set this 
  bit, or not, according to some setup option. In the usual nature of such workarounds, 
  this presents a sort of reverse problem: what is a new Windows to do with a new 
  processor if this BIOS option is set? For a while, an acceptable answer was that 
  if the user chooses to constrain Windows to do without processor functionality 
  whose existence is reported by <span class="instruction">cpuid</span> leaves higher 
  than 3, then so be it: computers are meant to obey their masters. Anyway, it was 
  years yet before the Windows kernel would be troubled. Eventually, though, ever 
  more new functionality would become less an option than a necessity or at least 
  so desirable an option that nobody should sensibly want to hobble a new Windows 
  on a computer whose BIOS retains this option from ancient history. </p>
  <p>Both the 32-bit and 64-bit kernels in version 6.0 and higher clear this bit 
  at startup if either: </p>
  <ul>
    <li>the family is at least 15; </li>
    <li>or the family is 6 and the model is greater than 13. </li>
  </ul>
  <p>This cut-off for family 6 is presumably not arbitrary. The earlier models extend 
  to the Pentium III, Pentium M and Celeron M. Model 14 marks the change from manufacturing 
  with the 90nm process to 65nm for the Intel Core™. Family 15 began with the Pentium 
  4. The cut-off for the Windows version isn’t arbitrary, either. For 32-bit Windows, 
  version 6.0 is the first that seeks to use a <span class="instruction">cpuid</span> 
  leaf higher than 3. This is not quite true of 64-bit Windows, though. Its first 
  version, 5.2 from Windows Server 2003 SP1, uses <span class="instruction">cpuid</span> 
  leaf 4: it is not known whether anyone had real-world experience of their top-shelf 
  server under-performing because the kernel could not read Intel-specific cache 
  information. </p>
  <p>What the kernel does with this MSR bit is nowadays immaterial for the boot 
  processor: in version 6.3 and higher, the bit will have been cleared already by 
  the loader. This happens because the loader knows that kernel stacks have an area 
  at the top for saving floating-point state, originally, but now extended to a 
  possibly much larger XSAVE Area. For the loader’s preparation of a stack for the 
  kernel’s first execution, it naturally seeks more space according to how much 
  bigger the XSAVE Area could be. Its calculation of how big depends on which state 
  components the processor can save and restore. Finding these is done by querying 
  through <span class="instruction">cpuid</span> leaf 13, which is not possible 
  if bit 22 is set in <span class="register">IA32_MISC_ENABLE</span>. The loader 
  for Windows 8 doesn’t notice, but the loader for Windows 8.1 does: if the
  <span class="bit">XSAVE</span> bit (26) is set in <span class="register">ecx</span> 
  from <span class="instruction">cpuid</span> leaf 1 for a GenuineIntel processor, 
  then the loader clears this MSR bit so that it can enumerate state components 
  and compute the maximum size that can be needed for an XSAVE Area. The family 
  and model are irrelevant. To the loader for Windows 10, so too is the
  <span class="bit">XSAVE</span> bit. </p>
  <h2>xTPR Message Disable (Bit 23) </h2>
  <p>The Windows kernel is not known to use this bit. </p>
  <h2>L1 Data Cache Context Mode (Bit 24) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Reserved Bit 27 </h2>
  <p>The 32-bit and 64-bit kernels in version 6.1 and higher both set this bit for 
  all processors if all have bit 1 set in <span class="register">ecx</span> from
  <span class="instruction">cpuid</span> leaf 6. Both bits are described by Intel 
  as reserved. </p>
  <h2>XD Bit Disable (Bit 34) </h2>
  <p>The purpose of this bit is to control whether <span class="instruction">cpuid</span> 
  reveals the availability of functionality that Intel names Execute Disable, but 
  which has become much better known as No Execute. When bit 34 is set in
  <span class="register">IA32_MISC_ENABLE</span>, <span class="instruction">cpuid</span> 
  leaf 0x80000001 returns with a clear <span class="bit">XD</span> or
  <span class="bit">NX</span> bit (20) in <span class="register">edx</span>. </p>
  <p>What the <span class="bit">NX</span> bit represents is that the most significant 
  bit in a 64-bit Page Table Entry (PTE) can tell whether the memory that is described 
  by the PTE is non-executable. Note that the <span class="bit">NX</span> bit represents 
  only capability. The PTE bit can have this meaning but only if it is enabled, 
  which is done by setting the <span class="bit">NXE</span> bit (11) in MSR 0xC0000080, 
  which Intel names <span class="register">IA32_EFER</span>. When this is done, 
  the kernel can enforce a clean separation of code and data: code gets loaded onto 
  pages that can be read and executed and are then ideally not written to; data 
  can be read and written, but ideally is never executed. </p>
  <p>That such separation is natural and desirable does not mean that it has always 
  been practical. The kernel did not use the <span class="bit">NX</span> functionality 
  until the version 5.1 from Windows XP SP2 and the version 5.2 from Windows Server 
  2003 SP1. By then and for a few years after, much software, including from Microsoft, 
  was written without respect for these ideals and so the kernel’s enforcement of 
  them was always configurable. A BIOS option to set bit 34 in
  <span class="register">IA32_MISC_ENABLE</span> was arguably the most severe configuration: 
  with <span class="instruction">cpuid</span> reporting a clear
  <span class="bit">NX</span> bit, the kernel would not perceive that it even the 
  means to enforce that data is not executable, even if configured to. </p>
  <!-- p>Again as the usual nature of such workarounds (see bit 22 above), time marches 
on. Versions 6.2 and higher of both 32-bit and 64-bit Windows require that all processors 
have the <span class="bit">NX</span> functionality. </p>
<p>There was a time when much software, including from Microsoft, was written without 
respect for these ideals, and so the kernel’s enforcement was configurable. </p -->
  <p>In versions 6.2 and 6.3, if the <span class="bit">SSE2</span> bit (26) is set 
  in <span class="register">edx</span> from <span class="instruction">cpuid</span> 
  leaf 1 and the processor’s vendor string from <span class="instruction">cpuid</span> 
  leaf 0 is GenuineIntel and this bit in this MSR is set, then the kernel clears 
  the bit. The involvement of the <span class="bit">SSE2</span> bit may be a mystery 
  forever: it is here thought to be a coding error, but with the reservation that 
  it’s difficult to see how such an error could get made. </p>
  <p>In version 10, clearing this bit for the boot processor is instead done by 
  the loader (WINLOAD). In contrast to the kernel’s test of the
  <span class="bit">SSE2</span> bit, the loader tests what is much more easily understood 
  as the right bit. If the <span class="bit">XD</span> bit (20) is clear in
  <span class="register">edx</span> from <span class="instruction">cpuid</span> 
  leaf 0x80000001 and the processor’s vendor string is GenuineIntel, then the loader 
  clears bit 34 in <span class="register">IA32_MISC_ENABLE</span>. The plain intention 
  is that the <span class="bit">XD</span> bit can only have been clear from having 
  been disabled through this MSR and now it should be set. the availability of a 
  No Execute bit in 64-bit page table entries can thence be taken as granted. The 
  loader proceeds immediately to enabling this functionality by setting the
  <span class="bit">NXE</span> bit (11) in MSR 0xC0000080 (<span class="register">IA32_EFER</span>).
  </p>
  <h2>DCU Prefetcher Disable (Bit 37) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>IDA Disable (Bit 38) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>Turbo Mode Disable (Bit 38) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <h2>IP Prefetcher Disable (Bit 39) </h2>
  <p>This bit is not architectural. The Windows kernel is not known to use this 
  bit. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 2nd
    <a href="../../../../../new/19/12.htm">January 2020</a> and was last modified 
    on 2nd February 2020. </p>
    <!--webbot bot="Include" U-Include="../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="46495" -->
  </div>
</div>

</body>

</html>
