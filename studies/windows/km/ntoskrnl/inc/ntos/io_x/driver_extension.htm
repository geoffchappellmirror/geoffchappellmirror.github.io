<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>DRIVER_EXTENSION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>DRIVER_EXTENSION </h1>
<p>The <span class="struct">DRIVER_EXTENSION</span> structure is an adjunct to the 
well-known (though partially opaque) <span class="struct">DRIVER_OBJECT</span>. 
It was added when introduction of the PnP Manager for Windows NT 4.0 needed that 
drivers implement another calling point through which to learn of device addition. 
The address to call might be set into the <span class="struct">DRIVER_OBJECT</span> 
except for compatibility constraints. Pre-existing drivers depended on at least 
some members, which therefore could not shift. Members could not be appended without 
risking a future problem for the <span class="member">MajorFunction</span> array 
were new types of I/O request ever to be defined. The solution was to replace the
<span class="member">Count</span> member, which no drivers should have been accessing, 
by a pointer to an extension. Thereafter, the <span class="member">Count</span> 
and anything new that is ever wanted for the <span class="struct">DRIVER_OBJECT</span> 
go to the extension. </p>
<h2>Documentation Status </h2>
<p>Because writers of device drivers that actually do drive a physical device, here 
meaning one that’s known to the PnP Manager, need to know of the
<span class="struct">DRIVER_EXTENSION</span> so that they can set the
<span class="member">AddDevice</span> member, the <span class="struct">DRIVER_EXTENSION</span> 
has long been documented—but only indirectly and only to the bare minimum for this 
one need. Since the structure itself is not even mentioned in the documentation, 
saying it’s documented indirectly is generous. It is, however, literal: what programmers 
are told is that they set their <span class="placeholder">AddDevice</span> routine 
not directly in their driver object but indirectly through its
<span class="member">DriverExtension</span> member. It wasn’t until the DDK for 
Windows XP that they were told in the documentatin that the <span class="member">
DriverExtension</span> is a <span class="type">PDRIVER_EXTENSION</span> and that
<span class="member">AddDevice</span> is “the only accessible member of the driver 
extension”. </p>
<p>A C-language definition is in the NTDDK.H from the Device Driver Kit (DDK) for 
Windows NT 4.0. It moved to WDM.H in the DDK for Windows 2000. No definition in 
the NTDDK.H or WDM.H from any DDK or in the WDM.H or NTOSP.H from any Windows Driver 
Kit (WDK) has yet extended beyond the <span class="member">ServiceKeyName</span> 
member. Type information in public symbol files, however, has always told of more.
</p>
<h2>Layout </h2>
<p>The <span class="struct">DRIVER_EXTENSION</span> has varied from version to version 
only by appending new members. The following table summarises the growing size:
</p>
<table>
  <tr>
    <th>Version </th>
    <th>Size (x86) </th>
    <th>Size (x64) </th>
  </tr>
  <tr>
    <td>4.0 </td>
    <td>0x14 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.0 </td>
    <td>0x18 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.1 to 6.1 </td>
    <td>0x1C </td>
    <td>0x38 </td>
  </tr>
  <tr>
    <td>6.2 </td>
    <td>0x24 </td>
    <td>0x48 </td>
  </tr>
  <tr>
    <td>6.3 to 2004 </td>
    <td>0x28 </td>
    <td>0x50 </td>
  </tr>
</table>
<p>These sizes, and the offsets, types and names in the tables that follow, are 
from Microsoft’s symbol files for the kernel starting with Windows 2000 SP3 (except 
as noted after the table). Before then, offsets and names are in tables in the KDEX2X86 
debugger extension to support its <span class="command">
<a href="../../../../debug/kdex2x86/strct.htm">!strct</a></span> command. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">DRIVER_OBJECT *DriverObject;</pre>
    </td>
    <td>4.0 and higher </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>
    <pre class="source">PDRIVER_ADD_DEVICE AddDevice;</pre>
    </td>
    <td>4.0 and higher </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>0x10 </td>
    <td>
    <pre class="source">ULONG Count;</pre>
    </td>
    <td>4.0 and higher </td>
  </tr>
  <tr>
    <td>0x0C </td>
    <td>0x18 </td>
    <td>
    <pre class="source">UNICODE_STRING ServiceKeyName;</pre>
    </td>
    <td>4.0 and higher </td>
  </tr>
  <tr>
    <td>0x14 </td>
    <td>0x28 </td>
    <td>
    <pre class="source">IO_CLIENT_EXTENSION *ClientDriverExtension;</pre>
    </td>
    <td>5.0 and higher </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>0x30 </td>
    <td>
    <pre class="source">FS_FILTER_CALLBACKS *FsFilterCallbacks;</pre>
    </td>
    <td>5.1 and higher </td>
  </tr>
  <tr>
    <td>0x1C </td>
    <td>0x38 </td>
    <td>
    <pre class="source">PVOID KseCallbacks;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x20 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">PVOID DvCallbacks;</pre>
    </td>
    <td>6.2 and higher </td>
  </tr>
  <tr>
    <td>0x24 </td>
    <td>0x48 </td>
    <td>
    <pre class="source">PVOID VerifierContext;</pre>
    </td>
    <td>6.3 and higher </td>
  </tr>
</table>
<p>For no reason that is yet understood, the public symbol file for the 64-bit kernel 
in the 2004 edition of Windows 10 would have it that the structure extends no further 
than <span class="member">ServiceKeyName</span>. That this is deliberate, to make 
the type information consistent with the definition in WDM.H, seems unlikely. The 
type information in just this one PDB is here taken as aberrant. The corresponding 
symbol file for the 32-bit kernel is not affected, nor is the code in the 64-bit 
kernel, which continues to allow 0x50 bytes for the extension. </p>
<div class="Footer">
  <p class="Dates">This page was created on 10th August 2016 and was last modified 
  on 26th <a href="../../../../../../../new/20/11.htm">November 2020</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1620.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4893" -->
</div>

</body>

</html>
