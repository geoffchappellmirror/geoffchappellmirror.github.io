<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Keywords</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<h1>C/C++ Keywords </h1>
<p>A keyword is an identifier to which the compiler assigns a formal meaning 
during tokenisation, such that the identifier is in general reserved for the 
compiler’s interpretation of the language and is not usable for naming code or 
data. </p>
<p>Note however that this generality has two broad exceptions. One is provided 
by the preprocessor: a keyword can be redefined by a macro and thus hidden from 
the compiler. Another exception is provided by the compiler itself: a keyword 
can be referred to explicitly as an identifier by giving it as an argument to
<span class="keyword"><a href="identifier.htm">__identifier</a></span> (though 
some need enclosure in double-quotes). </p>
<h2>Conditions </h2>
<p>Some identifiers become keywords only in some conditions. Many depend on 
command-line options (most notably <span class="switch"><a href="../../cl/cl/options/clr.htm">
/clr</a></span>,
<span class="switch"><a href="../../cl/cl/options/nobool.htm">/noBool</a></span>,
<span class="switch"><a href="../../cl/cl/options/zb.htm">/ZB</a></span>,
<span class="switch"><a href="../../cl/cl/options/z$c.htm">/Zc:wchar_t</a></span> 
and
<span class="switch"><a href="../../cl/cl/options/z$e.htm">/Ze</a></span>). Some 
are keywords in C++ but not in C. Where the table below lists no condition, the 
identifier is recognised as a keyword by both the C and C++ compilers in all 
circumstances.
</p>
<p>Of the command-line options that affect the list of keywords,
<span class="switch"><a href="../../cl/c1xx/options/ze.htm">-ZE</a></span> and
<span class="switch"><a href="../../cl/c1xx/options/z$f.htm">-Zf</a></span> are 
not known to CL.EXE but can be passed to the front-end compiler modules 
indirectly, via the <span class="switch"><a href="../../cl/cl/options/d1.htm">
/d1</a></span> option. The term “managed build” is shorthand for any of the C1XX 
options
<span class="switch">-Gil</span>, <span class="switch">-Gmanaged</span> or
<span class="switch">-Goptil</span>, the first of which is an ordinary outcome 
of giving CL the <span class="switch">/clr</span> option. </p>
<h2>Tokenisation </h2>
<p>Though keywords are C/C++ identifiers when examined as text, they do not 
tokenise as identifiers. See, for instance, that </p>
<pre class="source">#pragma message rubbish                 // C4083
#pragma message void                    // C4081</pre>
<p>produces two different warnings, the first to complain about the identifier
<span class="identifier">rubbish</span>, the second just about (the token)
<span class="keyword">void</span>. </p>
<p>Among the several hundred types of token recognised by the compiler are many 
that are dedicated to keywords and operators. Tokenisation maps each keyword to 
one of these dedicated tokens. Multiple keywords can map to the same token. </p>
<p>The text of a keyword is for all practical purposes lost during tokenisation. 
Error and warning messages that cite the token show the standard text for that 
token, which may differ from the text that actually produced the token. For 
instance, the warning produced by </p>
<pre class="source">#pragma message __alignof               // C4081</pre>
<p>complains about finding something called <span class="keyword">
__builtin_alignof</span>. Similarly, where a keyword is given as input to <span class="keyword">
__identifier</span> 
for conversion back to an identifier, the text given for the keyword is long 
gone and the name produced for the identifier is the standard name of the 
keyword as a token. For instance, in the function declaration </p>
<pre class="source">int __identifier (__alignof) (void *);  // C4932 if /Ze </pre>
<p>the name given to the function is <span class="keyword">__builtin_alignof</span>. 
Moreover, the warning, <a href="../../cl/c1xx/warnings/c4932.htm">C4932</a>, at 
level 4 and not raised at all if compiled with <span class="switch">
<a href="../../cl/cl/options/z$a.htm">/Za</a></span>, speaks only of confusion 
over whether <span class="keyword">__builtin_alignof</span> has one or two 
leading underscores.
</p>
<p>For each keyword, the table below shows the standard text of the 
corresponding token, if this differs from the text of the keyword. </p>
<h3>Disabled Keywords </h3>
<p>Many identifiers that are defined as keywords are disabled, as a special case 
of keyword tokenisation. Every disabled keyword maps to the one token, just for 
disabled keywords, which gets discarded from the token stream after showing a 
warning (<a href="../../cl/c1xx/warnings/c4226.htm">C4226</a>,
<a href="../../cl/c1xx/warnings/c4233.htm">C4233</a>,
<a href="../../cl/c1xx/warnings/c4234.htm">C4234</a>,
<a href="../../cl/c1xx/warnings/c4235.htm">C4235</a> or
<a href="../../cl/c1xx/warnings/c4236.htm">C4236</a>). For instance, in </p>
<pre class="source">#pragma message __huge rubbish          // C4226 and C4083</pre>
<p>retrieval of the disabled-keyword token that represents the text
<span class="keyword">__huge</span> produces warning C4226, after which
<span class="keyword">__huge</span> may as well have been white space. </p>
<h2>Master List of C/C++ Keywords </h2>
<p>With keywords acting essentially as reserved words in the language, a master 
list is surely helpful. In the table below of keywords recognised by Microsoft 
Visual C++ version 13.00.9466, those that are omitted from the product 
documentation’s list of <span class="citation">C++ Keywords</span> are 
highlighted yellow. They are not all undocumented: they are just not included in 
what the documentation seems to present as its master list. Some are mentioned 
elsewhere in the product documentation, even as keywords. Some are disabled, 
mostly as being obsolete or unsupported (in this product). All nonetheless are 
keywords and “cannot be used as identifiers in your program” any more than can 
the identifiers that Microsoft does happen to list as keywords. </p>
<p>The product documentation lists <span class="keyword">__m64</span>,
<span class="keyword">__m128</span>, <span class="keyword">__m128d</span>,
<span class="keyword">__m128i</span> and <span class="keyword">__noop</span> as 
keywords. They may be significant to the compiler, and in interesting ways, but 
they are not actually implemented as keywords and they are therefore not listed 
as keywords in these notes. </p>
<table>
  <tr>
    <th>Keyword </th>
    <th>Conditions to be Keyword </th>
    <th>Tokenisation </th>
  </tr>
  <tr>
    <td><span class="keyword">__abstract</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__alignof</span> </td>
    <td>&nbsp;</td>
    <td><span class="keyword">__builtin_alignof</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">_alignof</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__builtin_alignof</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">and</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">&amp;&amp;</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">and_eq</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">&amp;=</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">__asm</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_asm</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__asm</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">asm</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__assume</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_assume</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__assume</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">auto</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__based</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_based</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__based</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">bitand</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">&amp;</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">bitor</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">|</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">bool</span> </td>
    <td>C++ and neither <span class="switch">/noBool</span> nor
    <span class="switch">/Ze</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__box</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">break</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__builtin_alignof</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_builtin_alignof</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__builtin_alignof</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__builtin_isfloat</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4235) </td>
  </tr>
  <tr>
    <td><span class="keyword">case</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">catch</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__cdecl</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_cdecl</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__cdecl</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">cdecl</span> </td>
    <td><span class="switch">/Ze</span> </td>
    <td><span class="keyword">__cdecl</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">char</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">class</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="compilebreak.htm">
    __compileBreak</a></span>
    </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="compilebreak.htm">
    _compileBreak</a></span>
    </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__compileBreak</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">compl</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">~</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">const</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">const_cast</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">continue</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword"><a href="declspec/index.htm">__declspec</a></span>
    </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword"><a href="declspec/index.htm">_declspec</a></span>
    </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__declspec</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">default</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__delegate</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">delete</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">do</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">double</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">dynamic_cast</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">else</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">enum</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__event</span> </td>
    <td>C++ and <span class="switch">/Ze</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__except</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_except</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__except</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">explicit</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__export</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4236) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_export</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4236) </td>
  </tr>
  <tr>
    <td><span class="keyword">extern</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">false</span> </td>
    <td>C++ and not <span class="switch">/noBool</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__far</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_far</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">far</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-Zf</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__far16</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_far16</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="keyword">__fastcall</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_fastcall</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__fastcall</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="feacpbreak.htm">__feacpBreak</a></span>
    </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="feacpbreak.htm">_feacpBreak</a></span>
    </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__feacpBreak</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">__finally</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_finally</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__finally</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">float</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">for</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__forceinline</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_forceinline</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__forceinline</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__fortran</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_fortran</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">fortran</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-Zf</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="keyword">friend</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__gc</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">goto</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__hook</span> </td>
    <td>C++ and <span class="switch">/Ze</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__huge</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_huge</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">huge</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-Zf</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="keyword"><a href="identifier.htm">__identifier</a></span>
    </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">if</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__if_exists</span> </td>
    <td>C++ and <span class="switch">/Ze</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__if_not_exists</span> </td>
    <td>C++ and <span class="switch">/Ze</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__inline</span> </td>
    <td>&nbsp;</td>
    <td><span class="keyword">inline</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">_inline</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">inline</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">inline</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">int</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__int128</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4235) </td>
  </tr>
  <tr>
    <td><span class="keyword">__int16</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_int16</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__int16</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">__int32</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_int32</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__int32</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">__int64</span> </td>
    <td>&nbsp;</td>
    <td>if <span class="switch">/ZB</span> &lt; 64, disabled (warning C4235) </td>
  </tr>
  <tr>
    <td><span class="keyword">_int64</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span>, and
    <span class="switch">/ZB</span> ≥ 64 </td>
    <td><span class="keyword">__int64</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">__int8</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_int8</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__int8</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">__interface</span> </td>
    <td>C++ and <span class="switch">/Ze</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__leave</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_leave</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__leave</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">long</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__multiple_inheritance</span> </td>
    <td>&nbsp;</td>
    <td>if C, disabled (warning C4233) </td>
  </tr>
  <tr>
    <td><span class="keyword">_multiple_inheritance</span> </td>
    <td>C++ and either <span class="switch">/Ze</span> or <span class="switch">
    -ZE</span>
    </td>
    <td><span class="keyword">__multiple_inheritance</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">mutable</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">namespace</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__near</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_near</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">near</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-Zf</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="keyword">new</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__nodefault</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4235) </td>
  </tr>
  <tr>
    <td><span class="keyword">__nogc</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__nontemporal</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4235) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">not</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">!</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">not_eq</a></span>
    </td>
    <td>and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">!=</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__nounwind</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4234) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__novtordisp</span> </td>
    <td>&nbsp;</td>
    <td>if C, disabled (warning C4233) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_novtordisp</span> </td>
    <td>C++ and either <span class="switch">/Ze</span> or <span class="switch">
    -ZE</span>
    </td>
    <td><span class="keyword">__novtordisp</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">operator</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">or</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">||</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">or_eq</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">|=</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__pascal</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_pascal</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">pascal</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-Zf</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="keyword">__pin</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="pragma.htm">__pragma</a></span>
    </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="pragma.htm">_pragma</a></span>
    </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__pragma</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">private</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__probability</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4235) </td>
  </tr>
  <tr>
    <td><span class="keyword">__property</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">protected</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__ptr32</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_ptr32</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__ptr32</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__ptr64</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_ptr64</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__ptr64</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">public</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__raise</span> </td>
    <td>C++ and <span class="switch">/Ze</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">register</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">reinterpret_cast</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__restrict</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4235) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__resume</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4234) </td>
  </tr>
  <tr>
    <td><span class="keyword">return</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__sealed</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__serializable</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_serializable</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="keyword">short</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">signed</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__single_inheritance</span> </td>
    <td>&nbsp;</td>
    <td>if C, disabled (warning C4233) </td>
  </tr>
  <tr>
    <td><span class="keyword">_single_inheritance</span> </td>
    <td>C++ and either <span class="switch">/Ze</span> or <span class="switch">
    -ZE</span>
    </td>
    <td><span class="keyword">__single_inheritance</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">sizeof</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">static</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">static_cast</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__stdcall</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_stdcall</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__stdcall</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">struct</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__super</span> </td>
    <td>C++ and <span class="switch">/Ze</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">switch</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__sysapi</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4235) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__syscall</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_syscall</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="keyword">template</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">this</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__thiscall</span> </td>
    <td>&nbsp;</td>
    <td>if C, disabled (warning C4234); <br>
    if C++ and not <span class="switch">-Binl</span>, disabled (warning C4234)
    </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_thiscall</span> </td>
    <td>C++ and <span class="switch">-Binl</span> and either
    <span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__thiscall</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">throw</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__transient</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_transient</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td>disabled (warning C4226) </td>
  </tr>
  <tr>
    <td><span class="keyword">true</span> </td>
    <td>C++ and not <span class="switch">/noBool</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__try</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">_try</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__try</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">try</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__try_cast</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">typedef</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">typeid</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">typename</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__typeof</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword">__unaligned</span> </td>
    <td>&nbsp;</td>
    <td>disabled (warning C4235) </td>
  </tr>
  <tr>
    <td><span class="keyword">__unhook</span> </td>
    <td>C++ and <span class="switch">/Ze</span> </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">union</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">unsigned</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">using</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__uuidof</span> </td>
    <td>&nbsp;</td>
    <td>if C, disabled (warning C4233) </td>
  </tr>
  <tr>
    <td><span class="keyword">_uuidof</span> </td>
    <td>C++ and either <span class="switch">/Ze</span> or <span class="switch">
    -ZE</span>
    </td>
    <td><span class="keyword">__uuidof</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">__value</span> </td>
    <td>C++ and managed build </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">virtual</span> </td>
    <td>C++ </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__virtual_inheritance</span> </td>
    <td>&nbsp;</td>
    <td>if C, disabled (warning C4233) </td>
  </tr>
  <tr>
    <td><span class="keyword">_virtual_inheritance</span> </td>
    <td>C++ and either <span class="switch">/Ze</span> or <span class="switch">
    -ZE</span>
    </td>
    <td><span class="keyword">__virtual_inheritance</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">void</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">volatile</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">__w64</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">_w64</span> </td>
    <td><span class="switch">/Ze</span> or <span class="switch">-ZE</span> </td>
    <td><span class="keyword">__w64</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">__wchar_t</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="keyword">wchar_t</span> </td>
    <td>C++ and <span class="switch">/Zc:wchar_t</span> </td>
    <td><span class="keyword">__wchar_t</span> </td>
  </tr>
  <tr>
    <td><span class="keyword">while</span> </td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">xor</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">^</span> </td>
  </tr>
  <tr>
    <td><span class="undocumented keyword"><a href="iso646.htm">xor_eq</a></span>
    </td>
    <td>C++ and not <span class="switch">/Ze</span> </td>
    <td><span class="operator">^=</span> </td>
  </tr>
</table>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="58117" endspan -->
</div>

</body>

</html>