<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CL /P</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>CL /P </h1>
<h2>Syntax </h2>
<p>This option has no arguments. It is <span class="switch">/P</span> only. </p>
<h3>Relations </h3>
<p>The <span class="switch">/P</span> option </p>
<ul>
  <li>weakly overrides <span class="switch"><a href="g$m.htm">/Gm</a></span>
  </li>
  <li>is a sufficient prerequisite for <span class="switch"><a href="c.htm">/C</a></span>
  </li>
</ul>
<p>It translates to a combination of other options for the front-end C and C++ compilers 
(C1 and C1XX). These others are: </p>
<ul>
  <li><span class="switch"><a href="e.htm">-E</a></span> </li>
  <li><span class="switch"><a href="../../c1xx/options/f$i.htm">-Fi</a> </span>
  <span class="placeholder">filename</span>, </li>
</ul>
<p>where <span class="placeholder">filename</span> is formed by appending the extension 
“.i” to the file name of the source file. </p>
<h2>Behaviour (CL) </h2>
<p>The <span class="switch">/P</span> option leaves only the front-end C and C++ 
compilers as active. It disables all the remaining build stages: namely, Processing, 
Generating Code and Linking (though Processing can later be enabled by following 
with <span class="switch"><a href="b1_5.htm">/B1_5</a></span>). </p>
<h3>Standard Output </h3>
<p>CL understands the primary outcome from the compiler modules is to write text 
to standard output, albeit with the compiler modules expected to have redirected 
their standard output to <span class="placeholder">filename</span>. CL protects 
this outcome by disabling a mechanism that might otherwise cause the compiler modules 
to write other text to standard output. </p>
<p>Specifically, the <span class="switch">/P</span> option stops CL from duplicating 
standard output as standard error. Both CL (after its command-line analysis) and 
the compiler modules write most text, particularly error and warning messages and 
related notes, to standard error. By duplicating standard output as standard error 
before executing compiler modules, CL arranges that these messages, though still 
written to standard error, end up with whatever file or device CL was given as standard 
output. The ordinarily desirable effect is that these messages become subject to 
command-line redirection for easy capture to a file. Use of <span class="switch">
/P</span> implies that this effect is not wanted. Whatever text the compiler modules 
are expected to produce because of <span class="switch">/P</span> goes to
<span class="placeholder">filename</span>, but error messages, etc, go to the file 
or device that was given to CL as standard error (and are not subject to command-line 
redirection). </p>
<p>For example, check that no file named RUBBISH.H exists, then create TEST.CPP 
containing </p>
<pre class="source">#define TEST

#include    &quot;rubbish.h&quot;</pre>
<p>The idea is that first line suffices for producing something non-trivial from 
the preprocessor (for output to a file named TEST.I) before the second line produces 
a fatal error (C1083). Now run the command </p>
<pre class="input">cl /P /rubbish test.cpp &gt;test.txt</pre>
<p>This produces a warning from CL for the unrecognised <span class="switch">/rubbish</span> 
option and a fatal error from C1XX for the attempted inclusion of the non-existent 
RUBBISH.H header. However, neither message is captured to TEST.TXT, which remains 
empty. </p>
<h2>Behaviour (Compiler Modules) </h2>
<p>As far as concerns the compiler module C1XX, the <span class="switch">/P</span> 
option is exactly a <span class="switch">/E</span> except that C1XX redirects its 
standard output to <span class="placeholder">filename</span>. It is a fatal error 
(C1083) if C1XX cannot open <span class="placeholder">filename</span> for read-write 
access in text mode. </p>
<div class="Footer">
  <p class="Dates">This page was created on 27th October 2005 and was last modified 
  on 13th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0509.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62424" endspan -->
</div>

</body>

</html>
