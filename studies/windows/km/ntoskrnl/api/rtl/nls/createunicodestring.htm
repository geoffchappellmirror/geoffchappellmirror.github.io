<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>RtlCreateUnicodeString</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>RtlCreateUnicodeString </h1>
<p>The <span class="function">RtlCopyUnicodeString</span> function copies a null-terminated 
Unicode string to new memory and initialises a <span class="struct">
<a href="../../../inc/shared/ntdef/unicode_string.htm">UNICODE_STRING</a></span> to describe the new copy.
</p>
<h2>Declaration </h2>
<pre class="source">BOOLEAN 
RtlCreateUnicodeString (
    UNICODE_STRING *DestinationString, 
    PCWSTR SourceString);</pre>
<h3>Parameters </h3>
<p>The required <span class="argument">DestinationString</span> argument addresses 
the <span class="struct">UNICODE_STRING</span> structure that the successful function 
initialises. This structure’s contents on input are immaterial. </p>
<p>The required <span class="argument">SourceString</span> argument is the address 
of a null-terminated string of Unicode characters to copy. </p>
<h3>Return Value </h3>
<p>The function returns <span class="constant">TRUE</span> if successful, else
<span class="constant">FALSE</span>. </p>
<h2>Availability </h2>
<p>The <span class="function">RtlCreateUnicodeString</span> function is exported 
by name from the kernel in version 3.51 and higher, and from NTDLL in all known 
versions, i.e., 3.10 and higher. It is present in earlier versions of the kernel, 
but only as an internal routine. </p>
<h2>Documentation Status </h2>
<p>The <span class="function">RtlCreateUnicodeString</span> function is documented 
but has not always been. The first known documentation is from the Installable File 
System (IFS) Kit for Windows 2000, which was not widely circulated. Though Microsoft’s 
documentation is of the kernel-mode function as an export from the kernel, it is 
mostly applicable to the user-mode implementation too, both being plausibly compiled 
from the same source file. </p>
<p>Starting with the WDK for Windows Vista, Microsoft documents the availability 
of <span class="function">RtlCreateUnicodeString</span> as “Windows 2000 and later.”
</p>
<h2>Behaviour </h2>
<!--webbot bot="Include" U-Include="_include/unicode_string.htm" TAG="BODY" startspan -->

<p>The intention of the <span class="struct">UNICODE_STRING</span> structure is 
to keep together both the address and size of a Unicode string, presumably to save 
on passing them as separate arguments for subsequent work with the string and to 
save on repeated re-reading of the whole string to rediscover its size. Indeed, 
the structure keeps two sizes. The <span class="member">Length</span> member is 
the size in bytes of the array of Unicode characters at <span class="member">Buffer</span>. 
If this array is null-terminated, which it explicitly need not be, then
<span class="member">Length</span> does not count the null terminator. The
<span class="member">MaximumLength</span> member is the size in bytes of the memory 
from <span class="member">Buffer</span> onwards. </p>

<!--webbot bot="Include" endspan i-checksum="43448" -->
<p>The <span class="function">RtlCreateUnicodeString</span> function will copy all 
the characters from <span class="argument">SourceString</span>, including the terminating 
null, to new memory and initialise the structure at <span class="argument">DestinationString</span> 
to describe this new copy. </p>
<p>If the characters to copy amount to more than 0xFFFE bytes or to zero (by overflow), 
then the string will be too large for description by a <span class="struct">UNICODE_STRING</span>, 
and the function fails. Microsoft defines this limit symbolically as
<span class="constant">UNICODE_STRING_MAX_BYTES</span>. The function also fails 
if it cannot obtain this many bytes of memory from the paged pool (with tag 'GrtS') 
or the process heap in kernel and user modes respectively. </p>
<p>The function copies the characters from <span class="argument">SourceString</span> 
to the new memory and sets the <span class="member">Length</span>,
<span class="member">MaximumLength</span> and <span class="member">Buffer</span> 
members at <span class="argument">DestinationString</span>. Occurrence of an exception 
while copying or while setting some of the members of the <span class="struct">UNICODE_STRING</span> 
is failure for the function. </p>
<h3>Variations </h3>
<p>Defence against exceeding 0xFFFE bytes begins in version 5.2. Defence against 
copying zero bytes begins in version 6.0. Note that this guarding against overflowing 
to zero is an example of caution being taken to senseless extreme: it would require 
that the whole of memory has no more than one word that is zero. </p>
<p>Version 6.0 also introduced the exception handling. It too has some senselessness. 
The exception handling guards the reading of the source string only while copying 
it, not earlier to determine the string’s size. Neither is it much use while writing 
to the structure, since it guards against exceptions while setting the
<span class="member">Length</span> and <span class="member">MaximumLength</span> 
but not the <span class="member">Buffer</span>. Whatever its reason for existence, 
it’s certainly not robust enough to support the function’s use in kernel mode to 
capture a string from user-mode address space—and presumably is not intended to 
be. But what is it good for? Further research would be needed. </p>
<h3>IRQL </h3>
<p>The kernel-mode implementation is in paged memory and must not be called at
<span class="constant">DISPATCH_LEVEL</span> or higher. Microsoft’s documentation 
explicitly requires <span class="constant">PASSIVE_LEVEL</span>. </p>
<div class="Footer">
  <p class="Dates">This page was created on 1st
  <a href="../../../../../../../new/20/06.htm">June 2020</a>. and was last modified 
  on 2nd June 2020. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5634" -->
</div>

</body>

</html>
