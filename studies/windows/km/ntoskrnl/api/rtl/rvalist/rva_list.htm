<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>RTL_RVA_LIST</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<!--webbot bot="Include" U-Include="../../../../_include/sketch.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">SKETCH OF HOW RESEARCH MIGHT CONTINUE AND RESULTS BE PRESENTED
  </p>
</div>

<!--webbot bot="Include" endspan i-checksum="5204" -->
<h1>RTL_RVA_LIST </h1>
<p>The <span class="structure"><span class="struct">RTL_RVA_LIST</span></span> structure 
is used internally by the kernel to support Control Flow Guard (CFG). Central to 
this feature is that each executable image can be built with a table of acceptable 
targets for indirect calls. Indeed, later versions of Windows 10 can have as many 
as three such tables, each for slightly different sorts of call (or jump). All these 
tables are reached through an <span class="struct">IMAGE_LOAD_CONFIG_DIRECTORY</span> 
structure (the <span class="definition">load config</span>) which is in turn located 
from the corresponding entry in the <span class="member">DataDirectory</span> of 
the <span class="struct">IMAGE_OPTIONAL_HEADER</span> in what is widely known as 
the image’s PE header. </p>
<p>Each target is represented by its Relative Virtual Address (RVA), meaning its 
offset in bytes from the image base. When the image is first loaded, the kernel 
prepares its own representation of the image’s list of RVAs and their related flags, 
and keeps it handy as a saving on the expense of re-parsing from the load config.
</p>
<h2>Availability </h2>
<p>The <span class="struct">RTL_RVA_LIST</span> structure looks to have been introduced 
for the 1703 release of Windows 10 to accommodate the CFG feature’s expansion of 
tables and flags. </p>
<p>Earlier versions, with just one table and no state to keep for each RVA, have 
a much simpler structure: a dword for the whole size, and then a compessed RVA list. 
Microsoft’s name for this structure is not known: both its production and interpretation 
were done by the Memory Manager, plausibly with no visibility outside one source 
file. The feature’s expansion for the 1703 release brought with it the complications 
of creating one ordered (compressed) list from multiple ordered (uncompressed) tables 
and of tracking such things as which table each RVA came from. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">RTL_RVA_LIST</span> structure is not documented. Neither 
is it declared in any C-language header that Microsoft has published with any sort 
of software development kit that has yet been obtained for inspection. The structure’s 
name and the names and types of the structure’s members are known from the public 
symbol files for URLMON.DLL. </p>
<h2>Layout </h2>
<p>The <span class="struct">RTL_RVA_LIST</span> is 0x20 and 0x40 bytes, respectively, 
in 32-bit and 64-bit Windows. </p>
<table class="Struct">
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>
    <pre class="source">ULONG_PTR RvaCount;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>
    <pre class="source">ULONG StateBitsPerRva;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>0x10 </td>
    <td>
    <pre class="source">UCHAR *CompressedBuffer;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x0C </td>
    <td>0x18 </td>
    <td>
    <pre class="source">ULONG_PTR CompressedBufferSize;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>0x20 </td>
    <td>
    <pre class="source">RTL_BITMAP RvaStateBitMap;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>0x30 </td>
    <td>
    <pre class="source">ULONG *StateBitValueMap;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
  <tr>
    <td>0x1C </td>
    <td>0x38 </td>
    <td>
    <pre class="source">PVOID ExtensionBuffer;</pre>
    </td>
    <td>1703 and higher </td>
  </tr>
</table>
<p>The aim of the <span class="struct">RTL_RVA_LIST</span> is to package an efficient 
representation of possibly very many 32-bit RVAs which each have some 32-bit non-zero 
state. The <span class="struct">RTL_RVA_LIST</span> is always created with additional 
material in one allocation from the paged pool: </p>
<ul>
  <li>the fixed-size <span class="struct">RTL_RVA_LIST</span>; </li>
  <li>the variable-size <span class="member">CompressedBuffer</span>, being a compression 
  of an ordered list of <span class="member">RvaCount</span> RVAs; </li>
  <li>the variable-size <span class="member">StateBitValueMap</span>, being one
  <span class="type">ULONG</span> for each of the <span class="member">StateBitsPerRva</span>;
  </li>
  <li>optionally, the variable-size array of bits for the <span class="member">RvaStateBitMap</span>, 
  being <span class="member">StateBitsPerRva</span> bits for each of
  <span class="member">RvaCount</span> RVAs. </li>
</ul>
<h3>Compressed RVA List </h3>
<p>The compressed RVA list, even in versions that predate the
<span class="struct">RTL_RVA_LIST</span> structure, is one uncompressed dword that 
is the first RVA and then a sequence of bytes that encode the differences between 
successive RVAs. In each byte, the high two bits select a scaling factor (a power 
of 0x40) for the low six bits: </p>
<table>
  <tr>
    <th>Byte </th>
    <th>Scaling Factor </th>
  </tr>
  <tr>
    <td>00xxxxxx </td>
    <td>0x00040000 </td>
  </tr>
  <tr>
    <td>01xxxxxx </td>
    <td>0x00001000 </td>
  </tr>
  <tr>
    <td>10xxxxxx </td>
    <td>0x00000040 </td>
  </tr>
  <tr>
    <td>11xxxxxx </td>
    <td>0x00000001 </td>
  </tr>
</table>
<p>The sequence for any one difference ends with a byte that has both its high bits 
set. In no byte are the low six bits ever zero except when 0xC0 terminates the representation 
of a difference that is a whole multiple of 0x40. See that every difference that 
is less than 0x40 encodes to one byte and every other difference up less than 0x1040 
encodes to two bytes. For almost all images in real-world conditions, the compressed 
RVA list will be something like half the size of the corresponding array of 32-bit 
RVAs or a good bit less. </p>
<h3>State Values and Bit Map </h3>
<p>Just as an efficient representation doesn’t keep an array of 32-bit RVAs, neither 
does it keep an array of 32-bit states for each RVA. The possible values for an 
arbitrary RVA’s state are bitwise combinations of the 32-bit component values in 
the <span class="member">StateBitValueMap</span>. The number of these components 
is the <span class="member">StateBitsPerRva</span> since each RVA’s state can be 
represented by a sequence of this many bits that select from the components. The 
states for all the RVAs in the same order as for the compressed RVA list is then 
the <span class="member">RvaStateBitMap</span>. </p>
<p>When the component values are successive powers of two, the indirection through 
the <span class="member">StateBitValueMap</span> is redundant and
<span class="member">StateBitValueMap</span> can instead be
<span class="constant">NULL</span>. </p>
<p>When <span class="member">StateBitsPerRva</span> is 1, then the expectation that 
the state is non-zero means that all RVAs have the same state. No space is prepared 
for the bitmap in this case (and <span class="member">RvaStateBitMap</span> is not 
initialised). The state is the one value in the <span class="member">StateBitValueMap</span>, 
defaulting to 1 if there is no <span class="member">StateBitValueMap</span>. </p>
<h3>Unused </h3>
<p>The <span class="member">ExtensionBuffer</span> is left uninitialised. No use 
of it is known. </p>
<div class="Footer">
  <p class="Dates">This page was created on 3rd May 2019 but was not published until 
  26th <a href="../../../../../../../new/19/05.htm">May 2019</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c19.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6722" -->
</div>

</body>

</html>
