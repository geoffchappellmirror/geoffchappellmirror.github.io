<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>I386_LOADER_BLOCK</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>I386_LOADER_BLOCK </h1>
  <p>The <span class="struct">I386_LOADER_BLOCK</span> is a structure within the 
  x86 and x64 builds of the <span class="struct">
  <a href="loader_parameter_block.htm">LOADER_PARAMETER_BLOCK</a></span>, which 
  is in turn the structure through which the kernel and HAL learn the initialisation 
  data that was gathered by the loader. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">I386_LOADER_BLOCK</span> has changed just once, in 
  the version 4.0 from Windows NT 4.0 SP3. This extended it from 0x08 to 0x0C bytes 
  in 32-bit Windows. It is 0x10 bytes in all known versions of 64-bit Windows. Offsets, 
  names and types in the table that follows are from type information in public 
  symbol files for occasional Windows versions: first for Windows 2000 SP3 and SP4; 
  next for all releases of Windows Vista and Windows 7; and starting again with 
  the 1803 release of Windows 10. How the type information gets into symbol files 
  for some versions but not others is not known. A C-language definition is published 
  in a header named <a href="../../../source/inc/arc.htm">arc.h</a> from editions 
  of the Windows Driver Kit (WDK) for the original release of Windows 10 and for 
  Version 1511. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">PVOID CommonDataArea;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">ULONG MachineType;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x0C </td>
        <td>
        <pre class="source">ULONG VirtualBias;</pre>
        </td>
        <td>late 4.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <h3>Common Data Area </h3>
  <p>The <span class="member">CommonDataArea</span> is for the 32-bit kernel’s use 
  of the Advanced BIOS (ABIOS) through the exported functions
  <span class="function">KeI386AbiosCall</span> and <span class="function">KeI386GetLid</span>. 
  The ABIOS was a Basic I/O System (BIOS) that could operate peripheral devices 
  from protected mode without needing a reversion to real-mode addressing. </p>
  <p>That all the necessary details for using a computer’s hardware are built into 
  firmware by the computer’s manufacturer would surely have seemed attractive to 
  the manufacturer of an operating system. ABIOS support was evidently important 
  enough that it was given its own <span class="type">NTSTATUS</span> codes: eight 
  of them, starting with <span class="constant">STATUS_ABIOS_NOT_PRESENT</span> 
  (0xC000010F). That the kernel’s functions for ABIOS support never got documented 
  may mean they were important as an internal detail to be kept just for Microsoft 
  to use within the kernel or even for its own system-supplied drivers—but might 
  as easily mean they were soon seen as not worth bothering with. </p>
  <p>In some sense it no longer matters, perhaps not even as history. All ABIOS 
  support was removed from the kernel for version 6.2. But this had been a long 
  time coming. The loader lost its code for preparing the <span class="member">CommonDataArea</span> 
  in version 5.1. This anyway was a holdover: only one driver from Microsoft, named 
  ABIOSDSK.SYS, is known to have used ABIOS support, and it had not survived even 
  to version 5.0. </p>
  <h3>Machine Type </h3>
  <p>A comment in the C-language definition that Microsoft published for the first 
  two releases of Windows 10 would have it that the <span class="member">MachineType</span> 
  is “Temporary only”. This comment is plausibly very old. The low byte of the
  <span class="member">MachineType</span>, zero-extended to a dword, is the source 
  of what all versions of the 32-bit kernel export as the <span class="variable">
  KeI386MachineType</span> variable, but it is very many years since either had 
  any known usefulness to anyone. The last driver from Microsoft that is known to 
  have used the <span class="variable">KeI386MachineType</span> variable is SETUPDD.SYS, 
  and it stopped this for Windows XP. The kernel has its own use for the variable 
  in versions 4.0 to 5.2. Further study may be justified. </p>
  <p>Except for initialising the kernel’s <span class="variable">KeI386MachineType</span>, 
  the last-known use of the <span class="member">MachineType</span> is by the HAL. 
  Up to and including Windows Vista, the HAL interprets the low byte of the
  <span class="member">MachineType</span> as a bus type. Early versions depend on 
  knowing this bus type for correctly initialising such vital peripherals as the 
  Programmable Interrupt Controller (PIC), so much so that most HAL variants before 
  Windows Vista stop Windows at startup (with the <span class="constant">
  <a href="../../../../bugchecks/79.htm">MISMATCHED_HAL</a></span> bug check) if 
  the <span class="member">MachineType</span> is incompatible with whether the HAL 
  does or does not support the Micro Channel Architecture (MCA). Aside from this 
  particular interpretation within the HAL, most HAL variants map the undocumented
  <span class="member">MachineType</span> to the documented <span class="type">INTERFACE_TYPE</span> 
  for the HAL’s report of resource usage, such as persists under the registry key
  <span class="regkey">HKEY_LOCAL_MACHINE\HARDWARE\RESOURCEMAP\Hardware Abstraction 
  Layer</span>: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value" span="2"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th><span class="member">MachineType</span> </th>
        <th><span class="enum">INTERFACE_TYPE</span> </th>
        <th>HAL Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="constant">MACHINE_TYPE_ISA</span> (0) </td>
        <td><span class="constant">Isa</span> (1) </td>
        <td>3.10 to 6.0 </td>
      </tr>
      <tr>
        <td><span class="constant">MACHINE_TYPE_EISA</span> (1) </td>
        <td><span class="constant">Eisa</span> (2) </td>
        <td>3.10 to 6.0 </td>
      </tr>
      <tr>
        <td rowspan="2"><span class="constant">MACHINE_TYPE_MCA</span> (2) </td>
        <td><span class="constant">Internal</span> (0) </td>
        <td>3.10 to 3.50 for some variants, e.g., HALCBUS </td>
      </tr>
      <tr>
        <td><span class="constant">MicroChannel</span> (3) </td>
        <td>3.10 to 6.0 </td>
      </tr>
      <tr>
        <td rowspan="2">else </td>
        <td><span class="constant">PCIBus</span> (5) </td>
        <td>5.1 to 6.0 for some variants, e.g., HALAACPI, HALAPIC, HALMACPI, HALMPS
        </td>
      </tr>
      <tr>
        <td><span class="constant">Internal</span> (0) </td>
        <td>3.10 to 6.0 </td>
      </tr>
    </tbody>
  </table>
  <p>Be aware, however, that some HAL variants ignore the <span class="member">MachineType</span> 
  for this purpose and instead report a hard-coded <span class="enum">INTERFACE_TYPE</span>. 
  Notable examples are: <span class="constant">Internal</span> by HALBORG;
  <span class="constant">Eisa</span> by HALAST, HALOLI, HALSP and HALWYSE7; and
  <span class="constant">MicroChannel</span> by HALNCR. None of these particular 
  cases are known beyond Windows XP, but their ignoring of the
  <span class="member">MachineType</span> becomes the generality in Windows 7, both 
  of whose HALs are hard-coded to report <span class="constant">Isa</span> as if 
  the <span class="member">MachineType</span> could only be zero. Windows 8 and 
  higher have just the one HAL: it changes the hard coding to
  <span class="constant">Internal</span>, as if a valid <span class="member">MachineType</span> 
  were not provided. </p>
  <p>Windows 8 thus formalised that the <span class="member">MachineType</span> 
  had been meaningless for years. In the reworking from NTLDR and its embedded OSLOADER 
  to a separate BOOTMGR and WINLOAD for Windows Vista, the loader simply stopped 
  setting the <span class="member">MachineType</span>. Where Windows Vista shows 
  Isa as the Interface Type among the Resource Lists for the HAL, as in </p>
  <img src="_images/resourcemap.jpg" height="404" width="701" alt="Windows Vista HAL mistakenly showing ISA bus in registry">
  <p>it’s not that there actually is an ISA bus: it’s just that the loader left 
  the <span class="member">MachineType</span> as zero-initialised. </p>
  <p>Even before Windows Vista, the loader had long before cut down on what it can 
  set for the <span class="member">MachineType</span>. The work of determining the 
  machine type is done during real-mode execution by the NTLDR and is passed as 
  input to the protected-mode OSLOADER.EXE (which is embedded in the NTLDR binary). 
  Though the OSLOADER before Windows Vista and the HAL before Windows 7 have code 
  that would vary their behaviour if the machine type is MCA, it’s redundant in 
  Windows XP and higher, since the NTLDR no longer bothers with Micro Channel detection.
  </p>
  <h3>Virtual Bias </h3>
  <p>The <span class="member">VirtualBias</span> member was added in version 4.0, 
  apparently for Windows NT 4.0 SP3, to allow for increasing user-mode address space 
  at the expense of kernel-mode (via the <span class="switch">/3GB</span> switch 
  in the BOOT.INI configuration file). What contortions await the kernel for fitting 
  its work into a system address space that may be only half of the usual 2GB are 
  a long way off, but some adjustment is needed by the loader just for choosing 
  where to place the kernel. The loader would ordinarily treat 0x80000000 as a base 
  address for what it prepares of the system address space. The
  <span class="member">VirtualBias</span> tells how much higher the loader chose 
  instead. </p>
  <h4>Multi-Boot Compatibility </h4>
  <p>Appending the <span class="member">VirtualBias</span> brought an under-noted 
  side-effect. The kernels for which the <span class="member">VirtualBias</span> 
  is intended merely assume that it’s provided and is meaningful. An older NTLDR 
  cannot have made any such provision. Before Windows NT 4.0 SP3, having NTLDR from 
  the latest Windows installation that might be booted was desirable but not vital. 
  The interface between the loader and kernel had not changed. The worst to expect 
  of a mismatch was that an old loader might not detect new features that a new 
  kernel could use. When Windows NT 4.0 SP3 extended the <span class="struct">I386_LOADER_BLOCK</span>, 
  this was a breaking change of interface. For booting a new kernel, it became vital 
  that the matching NTLDR not have been replaced by one from an earlier Windows 
  version. </p>
  <p>If Microsoft ever did document this—it could easily have been hard to tell 
  at the time, let alone two decades on—then candidates in the Microsoft Knowledge 
  Base include <span class="title">Dualboot of WinNT 3.51 and 4.0 Fails After SP 
  Installation</span> (Q149180, October 1, 1997) and the section headed
  <span class="title">Installing Windows NT 4.0 on a Windows NT 5.0 Computer</span> 
  in the <span class="title">Windows NT 4.0 Service Pack 4.0 Readme.txt File</span> 
  (Q194507, October 29, 1998). Both have advice that boils down to copying NTLDR 
  from the newer operating system, an inference being that this is a restoration, 
  the newer file having been overwritten by installing the older operating system. 
  Both artlcles are long gone from Microsoft’s website. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 24th
    <a href="../../../../../../../new/19/12.htm">December 2019</a> from material 
    first published on 28th <a href="../../../../../../../new/16/04.htm">April 2016</a>. 
    It was last modified on 29th <a href="../../../../../../../new/22/12.htm">January 
    2023</a>. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1623.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4941" -->
  </div>
</div>

</body>

</html>
