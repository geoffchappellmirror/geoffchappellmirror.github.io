<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EtwEventWriteEx</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<!--webbot bot="Include" U-Include="../../../../_include/sketch.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">SKETCH OF HOW RESEARCH MIGHT CONTINUE AND RESULTS BE PRESENTED
  </p>
</div>

<!--webbot bot="Include" endspan i-checksum="5204" -->
<h1>EtwEventWriteEx </h1>
<p>An event provider calls this function to write an event. Like
<span class="function"><a href="writetransfer.htm">EtwEventWriteTransfer</a></span>, 
this function allows for relating the event to others. It also can specify two other 
points of handling that are not supported through any other Event API function.
</p>
<h2>Declaration </h2>
<pre>ULONG
EtwEventWriteEx (
    REGHANDLE RegHandle, 
    EVENT_DESCRIPTOR const *EventDescriptor, 
    ULONG64 Filter, 
    ULONG Flags, 
    GUID const *ActivityId, 
    GUID const *RelatedActivityId, 
    ULONG UserDataCount, 
    EVENT_DATA_DESCRIPTOR *UserData);</pre>
<h3>Parameters </h3>
<p>The required <span class="argument">RegHandle</span> argument identifies which 
registration of an event provider is writing the event. </p>
<p>The required <span class="argument">EventDescriptor</span> argument tells which 
event is to be written. </p>
<p>The <span class="argument">Filter</span> argument specifies tracing sessions 
for which the event provider is enabled but which are not to receive this event.
</p>
<p>The <span class="argument">Flags</span> argument allows for variation in the 
handling of the event. This argument is ignored before version 10.0. </p>
<p>The optional <span class="argument">ActivityId</span> argument tags the event 
with an identifier that other events may refer to as their related activity. This 
argument can be <span class="constant">NULL</span> to stand for whatever activity 
identifier is current set for the calling thread. </p>
<p>The optional <span class="argument">RelatedActivityId</span> argument tags the 
event as being related to the activity of some other event. </p>
<p>The optional <span class="argument">UserDataCount</span> and
<span class="argument">UserData</span> arguments are respectively the element count 
and address of an array of structures that supply event-specific data to record 
with the event. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../../_include/winerror.htm" TAG="BODY" startspan -->

<p>The function returns zero for success, else a Win32 error code. </p>

<!--webbot bot="Include" endspan i-checksum="16666" -->
<h2>Availability </h2>
<p>The <span class="function">EtwEventWriteEx</span> function is exported by name 
from NTDLL.DLL in version 6.1 and higher. Well-behaved software does not call this 
function but instead calls <span class="function">EventWriteEx</span>, which is 
exported by name from ADVAPI32.DLL in version 6.1 and higher as a forward to
<span class="function">EtwEventWriteEx</span>. </p>
<h2>Documentation Status </h2>
<p>As with many NTDLL exports, Microsoft does not document
<span class="function">EtwEventWriteEx</span>. The higher-level ADVAPI32 function
<span class="function">EventWriteEx</span> is documented. </p>
<p>A C-language declaration of <span class="function">EtwEventWriteEx</span> is 
published by Microsoft in a file named NTETW.H in the Enterprise edition of the 
Windows Driver Kit (WDK) for Windows 10 Version 1511. </p>
<h2>Behaviour </h2>
<p>The <span class="function">EtwEventWriteEx</span> function exists only as an 
embellishment of <span class="function">EtwEventWriteTransfer</span>, specifically 
to add the <span class="argument">Filter</span> and <span class="argument">Flags</span> 
arguments. Note that it does not provide for the <span class="argument">EventProperty</span> 
argument, as does <span class="function"><a href="writefull.htm">EtwEventWriteFull</a></span>.
</p>
<h3>General Event Writing </h3>
<p>If <span class="argument">EventDescriptor</span> is <span class="constant">NULL</span>, 
the function has no event to write: it returns <span class="constant">ERROR_INVALID_PARAMETER</span>.
</p>
<p>If the <span class="argument">RegHandle</span> is not valid, the function has 
no event provider to write an event from: it returns <span class="constant">ERROR_INVALID_HANDLE</span>. 
A valid <span class="type">REGHANDLE</span> is produced by the
<span class="function">EtwEventRegister</span> function and is made invalid by
<span class="function">EtwEventUnregister</span>. </p>
<p>Event providers send events into the ETW mechanism. Tracing sessions receive 
them. Each tracing session chooses which event providers they want events from. 
For each event provider that they so enable, a tracing session may also specify 
a level and keyword to match against events from that provider. In later versions, 
they may also specify properties that affect the matching. If the
<span class="member">Level</span> and <span class="member">Keyword</span> in at
<span class="argument">EventDescriptor</span> match this specification, then the 
event is said to be enabled for the session. </p>
<p>If the event is enabled for any private tracing session, the function writes 
the event to the user-mode tracing buffers of each such session for which the event 
is enabled. Failure to write to any such session is failure for the function.
</p>
<p>If the event is enabled for any tracing session that is managed by the kernel, 
the function sends the event to the kernel for distribution to each tracing session 
for which the event is enabled. Inputs and defaults are packaged as an
<span class="struct">EVENT_HEADER</span> for <span class="function">NtTraceEvent</span> 
with <span class="constant">ETW_NT_FLAGS_TRACE_EVENT</span> as its
<span class="argument">Flags</span> argument. Failure from the kernel is failure 
for the function. </p>
<h3>Filter </h3>
<p>The background to the <span class="argument">Filter</span> is that when a tracing 
session enables an event provider, the tracing session can specify various kinds 
of filters for what events it receives. There are system-side filters which add 
to the old methods of filtering by level and keyword. Importantly, there are also 
provider-side filters. A tracing session may know of these through some private 
understanding of the provider, typically helped by descriptions in the provider’s 
instrumentation manifest. Presumably because of the manifest, provider-side filters 
are named schematized filters. For any given event that the provider might write, 
only the provider can determine whether the event meets the conditions of the filter. 
If the event fails the provider-side filtering for some tracing sessions but not 
for all (including because some tracing sessions have no such filter), the provider 
proceeds with writing the event but sets its <span class="argument">Filter</span> 
argument to tell the ETW machinery which tracing sessions to omit from delivery.
</p>
<p>The general interpretation is that each of the <span class="argument">Filter</span> 
argument’s 64 bits may correspond to a tracing session that has enabled the provider. 
If a bit is set, then the corresponding tracing session, if any, does not receive 
the event even if the event is otherwise enabled for the session. The bit that corresponds 
to any one tracing session is communicated to the event provider when the tracing 
session enables its use of the provider. The event provider must have supplied a 
callback routine when registering. If this routine is called with its
<span class="argument">FilterData</span> argument pointing to an
<span class="struct">EVENT_FILTER_DESCRIPTOR</span> whose <span class="member">Type</span> 
is <span class="constant">EVENT_FILTER_TYPE_SCHEMATIZED</span>, then its
<span class="member">Ptr</span> is the address of the schematized filter data, starting 
with an <span class="struct">EVENT_FILTER_HEADER</span> in which the
<span class="member">InstanceId</span> has the one set bit that would represent 
the tracing session in this function’s <span class="argument">Filter</span> argument.
</p>
<p>Note that the caller of this function does not need to interpret the bits in
<span class="argument">Filter</span> except to know that they are bits, one per 
tracing session, the correspondence being learnt as each tracing session enables 
the provider. The following few notes, then, are just implementation details. Though 
the <span class="argument">Filter</span> is 64 bits, only two sets of 16 matter: 
for sending to the kernel, just the lowest 16, i.e., bits 0 to 15; for private tracing 
sessions, only bits 32 to 47, and only then in version 6.3 and higher. That each 
set is allowed 16 bits is presumably for the future. For now, the kernel-mode and 
user-mode implementations allow at most eight and four tracing sessions, respectively.
</p>
<h3>Flags </h3>
<p>The <span class="argument">Flags</span> are ignored before version 10.0. Even 
in version 10.0, the <span class="argument">Flags</span> are ignored for private 
tracing sessions. Microsoft’s EVNTPROV.H defines two flags: </p>
<table class="Constants">
  <tr>
    <th>Value </th>
    <th>Name </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00000001 </td>
    <td><span class="constant">EVENT_WRITE_FLAG_NO_FAULTING</span> </td>
    <td>10.0 and higher </td>
  </tr>
  <tr>
    <td>0x00000002 </td>
    <td><span class="constant">EVENT_WRITE_FLAG_INPRIVATE</span> </td>
    <td>10.0 and higher </td>
  </tr>
</table>
<p>If <span class="constant">EVENT_WRITE_FLAG_INPRIVATE</span> is set, the event 
is not written to any tracing session that set <span class="constant">EVENT_ENABLE_PROPERTY_EXCLUDE_INPRIVATE</span> 
as an <span class="argument">EnableProperty</span> when enabling the provider. Note 
that Microsoft’s documentation of the property, in several places, leaves it “up 
to the process or event to designate itself as InPrivate for this to work.” Setting 
this bit in the <span class="argument">Flags</span> is how to designate this for 
the event, no matter that Microsoft’s documentation of <span class="function">EventWriteEx</span> 
has it that <span class="argument">Flags</span> is “Reserved. Must be zero.” To 
learn this from Microsoft, do not heed the documentation but instead read EVNTPROV.H 
for its comments. </p>
<div class="Footer">
  <p class="Dates">This page was created on 17th May 2020 but was not published 
  until 28th <a href="../../../../../../../new/20/05.htm">May 2020</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c20.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5634" -->
</div>

</body>

</html>
