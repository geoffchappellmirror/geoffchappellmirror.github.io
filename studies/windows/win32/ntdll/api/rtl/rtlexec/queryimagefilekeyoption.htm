<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>LdrQueryImageFileExecutionOptions</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>LdrQueryImageFileKeyOption </h1>
<p>The <span class="function">LdrQueryImageFileKeyOption</span> function queries 
a value from among the Image File Execution Options 
in a given registry key. </p>
<h2>Declaration </h2>
<pre class="source">NTSTATUS 
LdrQueryImageFileKeyOption (
    HANDLE hKey, 
    PCWSTR lpszOption, 
    ULONG dwType, 
    PVOID lpData, 
    ULONG cbData, 
    ULONG *lpcbData);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">hKey</span> argument is a handle to a registry key 
that contains Image File Execution Options. </p>
<!--webbot bot="Include" U-Include="../../ldrinit/_include/ifeoargs.htm" TAG="BODY" startspan -->

<p>The <span class="argument">lpszOption</span> argument names the one option whose 
value is sought. </p>
<p>The <span class="argument">dwType</span> argument specifies the type for the 
value as produced in the output buffer. This is typically also, but need not be, 
the required type for the value as stored in the registry. </p>
<p>The optional <span class="argument">lpData</span> and <span class="argument">
cbData</span> arguments are respectively the address and size of the output buffer 
that is to receive the value. These arguments can be <span class="constant">NULL</span> 
and zero to query for the option’s existence or size. </p>
<p>The optional <span class="argument">lpcbData</span> argument provides the address 
of a variable that is to receive the size, in bytes, of the value that the successful 
function has put into the buffer and which may receive the size that the failed 
function might have put into the buffer (had the buffer been large enough). This 
argument can be <span class="constant">NULL</span> if the caller does not want to 
know how much data is produced or is available. </p>

<!--webbot bot="Include" endspan i-checksum="29951" -->
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../../_include/ntstatus.htm" TAG="BODY" startspan -->

<p>The function returns <span class="constant">STATUS_SUCCESS</span> if successful, 
else a negative error code. </p>

<!--webbot bot="Include" endspan i-checksum="8" -->
<!--webbot bot="Include" U-Include="../../ldrinit/_include/80000005.htm" TAG="BODY" startspan -->

<p>Of particular importance is <span class="constant">STATUS_BUFFER_OVERFLOW</span>, 
which is the function’s indication that the buffer, if any, is too small for the 
whole value and that a size that would have sufficed has been set into the variable, 
if any, that was specified through the <span class="argument">lpcbData</span> argument.
</p>

<!--webbot bot="Include" endspan i-checksum="30326" -->
<h2>Availability </h2>
<p>The <span class="function">LdrQueryImageFileKeyOption</span> function is exported 
by name from NTDLL.DLL in version 5.2 starting from Windows Server 2003 SP1, and 
higher. </p>
<p>In version 6.0 and higher, the name <span class="function">LdrQueryImageFileKeyOption</span> 
exists just for export. Were the function not exported, it would be an internal 
routine whose only name is <span class="routine">RtlQueryImageFileKeyOption</span>. 
As usual for Run Time Library (RTL) routines, the code is written for both kernel 
and user modes. The kernel has this routine since version 6.0 and exports it without 
the name change starting with the 1709 release of version 10.0. </p>
<h2>Documentation Status </h2>
<p>The <span class="function">LdrQueryImageFileKeyOption</span> function is not 
documented. Neither is it declared in any C-language header that Microsoft is known 
to have published in any development kit for either user-mode or kernel-mode software. 
While Microsoft’s names and types for the function’s arguments are not known, this 
article uses inventions. </p>
<h2>Behaviour </h2>
<p>This function’s introduction for Windows Server 2003 SP1 comes from NTDLL exporting 
separate functions (that had developed as internal routines in version 5.1) for 
opening the key and for querying its potentially numerous values. The
<span class="function"><a href="openimagefileoptionskey.htm">LdrOpenImageFileOptionsKey</a></span> 
function opens the key. This <span class="function">LdrQueryImageFileKeyOption</span> 
function queries the values. The caller is expected to close the key when done. 
This separation leaves the ancient <span class="function">
<a href="../../ldrinit/queryimagefileexecutionoptions.htm">LdrQueryImageFileExecutionOptions</a></span> 
and the relatively new <span class="function">
<a href="queryimagefileexecutionoptionsex.htm">LdrQueryImageFileExecutionOptionsEx</a></span> 
as compounds which open the key, query one value and close the key. </p>
<h3>Parameter Validation </h3>
<p>The function trusts its caller. That there actually is valid memory at and beyond
<span class="argument">lpszOption</span> up to and including some null character 
is just assumed. Similarly, it is just assumed that there are
<span class="argument">cbData</span> bytes of writable memory at
<span class="argument">lpData</span>. This is here taken to mean that the function 
can as well assume that <span class="argument">lpData</span> isn’t
<span class="constant">NULL</span> unless <span class="argument">cbData</span> is 
zero. That <span class="argument">lpcbData</span>, if not <span class="constant">
NULL</span>, addresses a writable dword is just assumed. Behaviour when these assumptions 
are not satisfied is the caller’s problem and is not the business of these notes.
</p>
<h3>Registry Key and Value </h3>
<p>The function’s essential task is to query the given option as a registry value 
in the given registry key. If the value’s name at <span class="argument">lpszOption</span> 
is too long for representation in a <span class="struct">UNICODE_STRING</span>, 
the function returns <span class="constant">STATUS_NAME_TOO_LONG</span>. Failure 
at querying the value for all its data, after allowing for retrying into sufficient 
memory, is failure for the function. The error code if new memory is needed but 
cannot be obtained is <span class="constant">STATUS_NO_MEMORY</span>. </p>
<h3>Supported Data Types </h3>
<p>Note that there is no rule that the <span class="argument">hKey</span> argument 
actually was obtained through the <span class="function">LdrOpenImageFileOptionsKey</span> 
function. Yet the function plainly does not exist to query an arbitrary value from 
an arbitrary registry key. Instead, it enforces some expectations that are particular 
to Image File Execution Options. Notably, there are restrictions on the value’s 
type and there’s some capability for translating from one type to another. </p>
<p>Before version 5.0, when the function was not yet separated from
<span class="function">LdrQueryImageFileExecutionOptions</span> even as an internal 
routine, the only supported type for an Image File Execution Option as stored in 
the registry was <span class="constant">REG_SZ</span> but callers could ask for
<span class="constant">REG_DWORD</span>, get a conversion, and perhaps never know 
(or care) that their dword of data was actually in the registry as a string. Though 
this behaviour is clearly deliberate, and the conversion is done still, the purpose 
may be lost to history. After all, Microsoft’s documentation in the late 90s never 
abounded with examples, let alone with explanation. It’s not unthinkable that the 
conversion from string to dword was intended less as a convenience for callers than 
as some small defence against setting options inadvertently or ignorantly: a dword 
option could usefully be set only by tools or users who knew to set it as a string.
</p>
<p>Even for version 10.0, to query this function is to ask for the option if its 
type as a registry value is either <span class="argument">dwType</span> or
<span class="constant">REG_SZ</span>. Since version 6.0, however, if an option is 
in the registry as any supported type other than <span class="constant">REG_SZ</span>, 
then it can be successfully queried only by asking for that exact type. In all versions, 
if the registry value is present as an unsupported type or if its type does not 
agree sufficiently well with the <span class="argument">dwType</span> argument, 
the function returns <span class="constant">STATUS_OBJECT_TYPE_MISMATCH</span>.
</p>
<table>
  <tr>
    <th>Type Stored </th>
    <th>Type Asked </th>
    <th>Applicable Versions </th>
  </tr>
  <tr>
    <td><span class="constant">REG_SZ</span> </td>
    <td>any </td>
    <td>5.2 and higher </td>
  </tr>
  <tr>
    <td rowspan="2"><span class="constant">REG_BINARY</span> </td>
    <td>any </td>
    <td>5.2 only </td>
  </tr>
  <tr>
    <td><span class="constant">REG_BINARY</span> </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td><span class="constant">REG_DWORD</span> </td>
    <td><span class="constant">REG_DWORD</span> </td>
    <td>5.2 and higher </td>
  </tr>
  <tr>
    <td><span class="constant">REG_MULTI_SZ</span> </td>
    <td><span class="constant">REG_MULTI_SZ</span> </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td><span class="constant">REG_QWORD</span> </td>
    <td><span class="constant">REG_QWORD</span> </td>
    <td>6.2 and higher </td>
  </tr>
</table>
<p>If the registry value has the <span class="constant">REG_DWORD</span> or
<span class="constant">REG_QWORD</span> type, then the caller must ask not only 
for this type but also for the right size. If <span class="argument">cbData</span> 
is not four or eight, respectively—or if the data from the registry is not exactly 
four or eight bytes—the function returns <span class="constant">STATUS_INFO_LENGTH_MISMATCH</span>.
</p>
<h3>Type Conversion </h3>
<p>If the registry value has the <span class="constant">REG_SZ</span> type but
<span class="argument">dwType</span> is <span class="constant">REG_DWORD</span>, 
then the function parses the string as a 32-bit integer. Just as if the value had 
been in the registry as a dword, the caller must supply exactly four bytes for this 
output, i.e., <span class="argument">cbData</span> must be four, else the function 
returns <span class="constant">STATUS_INFO_LENGTH_MISMATCH</span>. Version 6.0 introduces 
a requirement that <span class="argument">lpData</span> be dword-aligned, else the 
function returns <span class="constant">STATUS_DATATYPE_MISALIGNMENT</span>. </p>
<p>The conversion from string to dword is done by <span class="function">
<a href="../../../../../km/ntoskrnl/api/rtl/cnvint/unicodestringtointeger.htm">RtlUnicodeStringToInteger</a></span> 
with zero for its <span class="argument">Base</span> argument. Perhaps the most 
notable consequence in practice is that this allows C-language hexadecimal representation. 
Likely users of Image File Execution Options surely will find this easier than decimal 
for those options, such as the ancient <span class="regvalue">GlobalFlag</span>, 
whose values can be combined from bit flags. As a lesser consequence, string data 
that doesn’t parse to a dword is not an error but evaluates as zero. </p>
<h3>Output </h3>
<p>Whatever other conversions may ever have been intended, translation of string 
data to dword output is all that ever got implemented. For all other types of data 
as stored in the registry and types as requested, if the value’s data is produced 
as output at all, it is produced as is. </p>
<p>In general, if an output buffer is not provided or if what’s provided is too 
small, i.e., if <span class="argument">lpData</span> is <span class="constant">NULL</span> 
or if the amount of data available from the registry exceeds
<span class="argument">cbData</span>, then the function sets the amount available 
into the variable, if any, at <span class="argument">lpcbData</span> and returns
<span class="constant">STATUS_BUFFER_OVERFLOW</span>. If, however, the value has 
the <span class="constant">REG_SZ</span> type and <span class="argument">dwType</span> 
is not <span class="constant">REG_DWORD</span>, the function ignores
<span class="argument">lpData</span> when testing whether the output buffer is big 
enough to copy to. It is not clear whether this difference for this particular case 
is by design. </p>
<p>It cannot be stressed enough that except for the historical case of conversion 
from string to dword, data that has the <span class="constant">REG_SZ</span> type 
as stored in the registry is copied to the output buffer <span class="emphasis">
as is</span>. This has two implications. One is that the data need not have the 
form that was sought. For instance, provide eight bytes to receive
<span class="constant">REG_QWORD</span> data, and even if you are told that eight 
bytes are produced they may be just the raw bytes of a small Unicode string. The 
other implication is no mere nuisance for interpretation but a trap for the caller’s 
integrity, albeit a trap that affects most functions that query the registry for 
string data: the output from a successful query for <span class="constant">REG_SZ</span> 
(or <span class="constant">REG_MULTI_SZ</span>) does not necessarily end with a 
null nor even comprise whole Unicode characters. </p>
<h3>Early History </h3>
<p>Version 5.2 retains logic from when the function was an internal routine and 
even from when it was not yet separated from <span class="function">LdrQueryImageFileExecutionOptions</span>.
</p>
<p>Querying for the value is done by asking the <span class="function">NtQueryValueKey</span> 
function for <span class="constant">KeyValuePartialInformation</span>, initially 
using 0x0400 bytes on the stack for the output buffer (including a
<span class="struct">KEY_VALUE_PARTIAL_INFORMATION</span> at its start). The implementation 
has varied in its technique for assessing how much memory to ask for from the process 
heap when repeating a query that failed with <span class="constant">STATUS_BUFFER_OVERFLOW</span> 
as the error code. The technique that Microsoft has always documented, if only in 
the Device Driver Kit (DDK) for <span class="function">ZwQueryValueKey</span> as 
a kernel export, is that the function’s last argument is the address of a variable 
that the function sets to the size that would have sufficed for the output buffer. 
Version 5.2 does not use this, however. It instead relies on the function to have 
set at least the <span class="member">DataLength</span> member of the
<span class="struct">KEY_VALUE_PARTIAL_INFORMATION</span> at the start of the output 
buffer when returning <span class="constant">STATUS_BUFFER_OVERFLOW</span>. This 
alternative technique is here thought to have been reliable all along—not just for 
setting <span class="member">DataLength</span> but for filling the buffer with as 
much as fits—but no reason is known why Microsoft’s programmers ever used it rather 
than the documented technique. </p>
<p>If the registry value has the <span class="constant">REG_SZ</span> type and
<span class="argument">dwType</span> is <span class="constant">REG_DWORD</span>, 
then version 5.2 ignores the last two bytes of the string data (presumably on the 
grounds that these bytes are ordinarily the terminating null character of a Unicode 
string). </p>
<p>If the registry value has the <span class="constant">REG_DWORD</span> type but
<span class="argument">cbData</span> is not four or the data from the registry is 
not exactly four bytes, then where later versions return <span class="constant">
STATUS_INFO_LENGTH_MISMATCH</span>, version 5.2 returns <span class="constant">STATUS_BUFFER_OVERFLOW</span> 
and indicates the data’s size (which may, confusingly, be less than
<span class="argument">cbData</span>). </p>
<p>Version 5.2 can set the variable, if any, at <span class="argument">lpcbData</span> 
even when the returned error code is not <span class="constant">STATUS_BUFFER_OVERFLOW</span>.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 3rd
  <a href="../../../../../../../new/19/03.htm">March 2019</a> and was last modified 
  on 26th May 2019. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c19.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6722" -->
</div>

</body>

</html>
