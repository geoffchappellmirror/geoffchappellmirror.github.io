<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>PS_SYSTEM_DLL_INIT_BLOCK</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <!--webbot bot="Include" U-Include="../../../../_include/preview.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" endspan i-checksum="8381" -->
  <h1>PS_SYSTEM_DLL_INIT_BLOCK </h1>
  <p>The <span class="struct">PS_SYSTEM_DLL_INIT_BLOCK</span> structure (formally
  <span class="enum">_PS_SYSTEM_DLL_INIT_BLOCK</span>) is the type of a variable 
  named <span class="variable">LdrSystemDllInitBlock</span> that is exported by 
  name from NTDLL.DLL in version 6.2 and higher. NTDLL exports this variable not 
  so that it is imported by any user-mode software but by the kernel. Having loaded 
  NTDLL into a newly created process, the kernel locates this variable and populates 
  the structure with information for NTDLL to use when it gets to execute. </p>
  <p>It happens, but is surely not necessary to the design, that NTDLL treats this 
  structure not just as input for wider configuration but as data for continued 
  use. That this data is then easily located (for being exported) seems to have 
  been soon regarded as problematic. Starting with version 6.3, NTDLL is built with 
  the <span class="variable">LdrSystemDllInitBlock</span> variable and other mutable 
  read-only data in a section named <span class="section">.mrdata</span>. The whole 
  section is initially read-write, but very soon into NTDLL’s initialisation it 
  is made read-only—and failure to make it so is fatal. </p>
  <p>That “m” in the section’s name stands for mutable is inferred from the name 
  of a relevant internal routine, <span class="internal routine">LdrpProtectMutableReadOnlyData</span>, 
  as known from public symbols for the Windows 8.1 NTDLL. Its point is that NTDLL 
  itself has occasional need to change the data and so the read-only protection 
  is not permanent. Whenever NTDLL seeks write access to data in this section, it 
  unprotects the data and then re-protects it. That protection has page granularity 
  means that changes to other data in this section can have as a side-effect that 
  the <span class="variable">LdrSystemDllInitBlock</span> also can be temporarily 
  writable. This side-effect is perhaps even more likely in Windows 10 which unprotects 
  and re-protects not just one page each time but the whole section. Either way, 
  though the <span class="variable">LdrSystemDllInitBlock</span> is ordinarily read-only 
  in version 6.3 and higher, it can sometimes be written to. </p>
  <h2>Documentation Status </h2>
  <p>Neither the <span class="struct">PS_SYSTEM_DLL_INIT_BLOCK</span> structure 
  nor the <span class="variable">LdrSystemDllInitBlock</span> variable is documented. 
  This is no surprise: they are plainly intended as a private matter between the 
  kernel and NTDLL. </p>
  <p>The variable has an <span class="keyword">extern</span> declaration in a header 
  that Microsoft published in the Windows Driver Kit (WDK) for Windows 10 in its 
  original and Version 1511 editions. Publication was almost certainly an oversight. 
  The header, named <a href="../../../source/inc/wow64t.htm">wow64t.h</a>, does 
  not compile without error. One cause is that the variable’s declaration gives
  <span class="struct">PS_SYSTEM_DLL_INIT_BLOCK</span> as the variable’s type but 
  this type is not referenced in this or any other WDK header—not even to be defined 
  as opaque. </p>
  <p>The practical equivalent of a C-language definition is available as type information 
  in symbol files that Microsoft publishes for debugging support. Here too there 
  is some sense of the obscure. Although the structure exists only for the kernel 
  and NTDLL, it does not appear in the symbol files for either the kernel or NTDLL. 
  It can instead be found in a smattering of symbol files for higher-level user-mode 
  modules. These actually are private symbols whose distribution in downloadable 
  packages of public symbols and through Microsoft’s public symbol server may be 
  another oversight. Still, published they are. </p>
  <h2>Variability </h2>
  <p>Unsurprisingly for a structure that’s surely intended as private to two vital 
  Windows components that ought never to be mismatched, the <span class="struct">
  PS_SYSTEM_DLL_INIT_BLOCK</span> varies between versions. As seen below, the structure’s 
  first member in all versions is a size in bytes. The kernel checks the size, and 
  It has never yet happened that a change within the structure has not also changed 
  the size: </p>
  <table class="Sizes">
    <colgroup>
      <col class="Version"><col class="Size">
    </colgroup>
    <thead>
      <tr>
        <th>Versions </th>
        <th>Size </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>6.2 </td>
        <td>0x60 </td>
      </tr>
      <tr>
        <td>6.3 </td>
        <td>0x70 </td>
      </tr>
      <tr>
        <td>10.0 to 1607 </td>
        <td>0x80 </td>
      </tr>
      <tr>
        <td>1703 </td>
        <td>0xD0 </td>
      </tr>
      <tr>
        <td>1709 to 1903 </td>
        <td>0xE0 </td>
      </tr>
      <tr>
        <td>2004 </td>
        <td>0xF0 </td>
      </tr>
    </tbody>
  </table>
  <p>Note that the structure is identical for 32-bit and 64-bit Windows. </p>
  <h2>Layout </h2>
  <p>The sizes in the preceding table and the offsets and definition in the table 
  that follows are from public symbols as noted above. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">ULONG Size;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x04 (6.2 to 1607); <br>
        0x08 </td>
        <td>
        <pre class="source">ULONG SystemDllWowRelocation;</pre>
        </td>
        <td>6.2 to 1607 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONGLONG SystemDllWowRelocation;</pre>
        </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td>0x08 (6.2 to 1607); <br>
        0x10 </td>
        <td>
        <pre class="source">ULONGLONG SystemDllNativeRelocation;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x10 (6.2 to 1607); <br>
        0x18 </td>
        <td>
        <pre class="source">ULONG Wow64SharedInformation [0x10];</pre>
        </td>
        <td>6.2 to 1607 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONGLONG Wow64SharedInformation [0x10];</pre>
        </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td>0x50 (6.2 to 1607); <br>
        0x98 </td>
        <td>
        <pre class="source">ULONG RngData;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x9C </td>
        <td>
        <pre class="source">union {
    ULONG Flags;
    struct {
        ULONG CfgOverride : 1;
        ULONG Reserved : 31;
    };
};</pre>
        </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x58 (6.2 to 1607); <br>
        0xA0 </td>
        <td>
        <pre class="source">ULONGLONG MitigationOptions;</pre>
        </td>
        <td>6.2 to 1607 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">PS_MITIGATION_OPTIONS_MAP MitigationOptionsMap;</pre>
        </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td>0x60 (6.2 to 1607); <br>
        0xB0 (1703 to 1903); <br>
        0xB8 </td>
        <td>
        <pre class="source">ULONGLONG CfgBitMap;</pre>
        </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x68 (6.2 to 1607); <br>
        0xB8 (1703 to 1903); <br>
        0xC0 </td>
        <td>
        <pre class="source">ULONGLONG CfgBitMapSize;</pre>
        </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x70 (6.2 to 1607); <br>
        0xC0 (1703 to 1903); <br>
        0xC8 </td>
        <td>
        <pre class="source">ULONGLONG Wow64CfgBitMap;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0x78 (6.2 to 1607); <br>
        0xC8 (1703 to 1903); <br>
        0xD0 </td>
        <td>
        <pre class="source">ULONGLONG Wow64CfgBitMapSize;</pre>
        </td>
        <td>10.0 and higher </td>
      </tr>
      <tr>
        <td>0xD0 (1709 to 1903); <br>
        0xD8 </td>
        <td>
        <pre class="source">PS_MITIGATION_AUDIT_OPTIONS_MAP MitigationAuditOptionsMap;</pre>
        </td>
        <td>1709 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">Size</span> must be correct by the time the kernel 
  inspects it in the loaded NTDLL. This means in practice that it must be set in 
  the static initialisation of the <span class="variable">LdrSystemDllInitBlock</span> 
  variable. Everything else in the variable is set or cleared by the kernel before 
  NTDLL gets to execute. </p>
  <p>Some members, e.g., the <span class="member">MitigationOptions</span>, are 
  read by NTDLL only while initialising. Others, notably the
  <span class="member">RngData</span> and the <span class="member">CfgBitMap</span>, 
  are live. For instance, NTDLL’s own tests for Control Flow Guard read the
  <span class="member">CfgBitMap</span> from the <span class="variable">LdrSystemDllInitBlock</span>.
  </p>
  <h2>Mitigation Options </h2>
  <p>The <span class="member">MitigationOptions</span> are bits, at first in one
  <span class="type">ULONGLONG</span> but eventually spreading to a second and then 
  to a third. To go by names, Microsoft defines some seemingly applicable bits in 
  WINBASE.H from the Software Development Kit (SDK). They are, of course, not defined 
  there for their role in the <span class="struct">PS_SYSTEM_DLL_INIT_BLOCK</span>. 
  Which of them are meaningful in the <span class="member">MitigationOptions</span> 
  of a <span class="struct">PS_SYSTEM_DLL_INIT_BLOCK</span>, to whom in what circumstances 
  in which versions, requires some study. For now, the table below offers only the 
  few that are obviously meaningful to the initialising NTDLL. </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Name"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Name </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00000000`00000010 </td>
        <td>unknown </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00000020 </td>
        <td>unknown </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00000030 </td>
        <td>unknown </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x00000000`00001000 </td>
        <td><span class="constant">PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON</span>
        </td>
        <td>6.2 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>A comment in WINBASE.H has it that “Bits 0-5 are legacy bits” but then does 
  not define any use of bits 3 and 4. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 28th
    <a href="../../../../../../../new/22/12.htm">January 2023</a> and was last modified 
    on 22nd February 2023. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c23.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6018" -->
  </div>
</div>

</body>

</html>
