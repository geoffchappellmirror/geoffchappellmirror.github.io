<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Visual C++ Compiler Fatal Error C1903</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>Visual C++ Compiler Fatal Error C1903 </h1>
<h2>Message Text </h2>
<pre class="output">unable to recover from previous error(s); stopping compilation</pre>
<h2>Circumstances </h2>
<p>The compiler typically attempts some sort of continuation after an error, and 
it is not the policy of these notes ever to criticise (or even bring to attention) 
any quirks in the compiler’s sometimes valiant attempts at such continuation. In 
some cases, the compiler declines to try continuing, even though the error would 
ideally not be fatal. The visible result is fatal error C1903. It may be that something 
unusual is noticed about the circumstances, such that the error is ordinarily not 
fatal but in these circumstances is too difficult and is instead declared fatal. 
It may just be that the error is always fatal in practice because although the compiler’s 
writers have not defined a fatal error number for it, and might not want to, neither 
have they yet got round to writing code for any continuation. </p>
<p>One error for which the front-end C++ compiler presently provides no continuation 
in any circumstances is C2687. To generate this error, ignore everything that the 
product documentation says about it, and instead attempt an out-of-line definition 
of a class that is nested in a template class, e.g., </p>
<pre class="source">template &lt;typename T&gt; class Test
{
    class Nested;
};

template &lt;typename T&gt; class Test &lt;int&gt; :: Nested        // C2687 and C1903
{
};</pre>
<p>One case is known where fatal error C1903 is the one and only message given to 
the user, who may then puzzle over the “previous error(s)” that are never described. 
To observe, compile the one-line source file: </p>
<pre class="source">#import &lt;rubbish&gt; ptrsize (0)</pre>
<h3>CPU Exceptions </h3>
<p>Fatal error C1903 can also occur in response to a CPU exception. If there has 
already been an error during compilation, no matter how long before and how well 
recovered, then a CPU exception that would ordinarily be reported as an internal 
compiler error <a href="c1001.htm">C1001</a>, specifically in the case that version 
13.00.9466 attributes to </p>
<pre class="output">compiler file &#39;msc1.cpp&#39;, line 2844</pre>
<p>is instead reported as fatal error C1903. The thinking is presumably that the 
compiler is continuing from an error and the CPU exception is an artifact of the 
continuation having been too bold. Though the exception is more or less by definition 
a coding error in the compiler, it may reasonably be forgiven and should be regarded 
as an internal compiler error only if it persists after the other errors have been 
fixed. </p>
<p>For example, compile the following with the <span class="switch">/Zc:wchar_t</span> 
option and without <span class="switch">/Yu</span>. </p>
<pre class="source">1;                              // C2059
#if _WCHAR_T_DEFINED            // C1903
#endif</pre>
<p>The second line (indeed, any evaluation of the built-in macro
<span class="macro">
<a href="../../../language/preprocessor/macros/builtin/wchar_t_defined.htm">_WCHAR_T_DEFINED</a></span>) 
is known to trigger a coding error in the compiler. The first line is added just 
to contrive a previous error. Delete the first line, i.e., deal with the contrived 
error, to reveal that the C1903 is really a C1001. </p>
<div class="Footer">
  <p class="Dates">This page was created on 27th March 2006 and was last modified 
  on 10th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62552" endspan -->
</div>

</body>

</html>
