<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Visual C++ Compiler Fatal Error C1904</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>Visual C++ Compiler Fatal Error C1904 </h1>
<h2>Message Text </h2>
<pre class="output">bad provider interaction: <span class="placeholder">file</span></pre>
<h2>Circumstances </h2>
<p>To get an attribute handled, the compiler called an external attribute provider, 
i.e., not one of the two that are implemented within the compiler. An exception 
occurred during the call and the provider left the exception unhandled. The compiler 
has caught the exception and reported it as fatal error C1904. The
<span class="placeholder">file</span> placeholder either names the provider as a 
ProgID or shows its CLSID. </p>
<p>As with other fatal errors that may originate as exceptions (such as
<a href="c1001.htm">C1001</a> and <a href="c1903.htm">C1903</a>), compiling with 
the <span class="switch"><a href="../../cl/options/b$d.htm">/Bd</a></span> option 
will typically let the exception pass from the compiler as unhandled. This applies 
especially to exceptions of the sort that are raised by the operating system in 
response to a CPU fault, as when a coding error in the attribute provider causes 
it to try dereferencing a bad pointer. </p>
<p>The product documentation’s sole comment on this fatal error is to advise reinstalling 
Visual C++ and possibly contacting Microsoft Product Support Services. In some sense, 
this is perfectly reasonable. Since Microsoft does not document how anyone external 
to Microsoft might write an attribute provider, occurrence of an exception in an 
attribute provider can only be an internal error of Microsoft’s. </p>
<p>This aside however, for a coding error in the provider to be described as a “bad 
provider interaction” seems the height of euphemism. Perhaps the author of this 
message text sincerely had in mind that an exception would occur only because the 
compiler and provider disagree on some detail of their interface. Perhaps the division 
of responsibility in the interface is supposed to include that the provider should 
see to its own exception handling for its own coding errors. Whatever the thinking, 
what Microsoft has ended up showing its customers is yet another instance of Microsoft’s 
readiness to disguise bugs in Microsoft’s software. </p>
<h3>Example </h3>
<p>As it happens, an internal error in an external attribute provider is known, 
and so an example can be given. The only external attribute provider that Microsoft 
supplies with Visual C++ is ATLPROV. There is a bug in the coding of this provider’s
<span class="attribute">
<a href="../../../libraries/atl/attributes/perf_object.htm">perf_object</a></span> 
attribute, such that the provider can be induced to dereference a bad pointer. All 
that’s required is to contrive an ATL2102 error for a source file’s first use of
<span class="attribute">perf_object</span>. Compile </p>
<pre class="source">#define     _ATL_ATTRIBUTES
#include    &lt;atlbase.h&gt;
#include    &lt;atlperf.h&gt;

[
    perf_object (0)
]
class Test
{               // ATL2102 (C2338)
};              // C1904</pre>
<p>To some extent, this example is unfair. The source code is incorrect for not 
presenting the expected pair of <span class="argument">name_res</span> and
<span class="argument">help_res</span> arguments or of <span class="argument">namestring</span> 
and <span class="argument">helpstring</span> arguments. Fix the source code, and 
not only does the ATL2102 error go away, but so too does the exception that shows 
as fatal error C1904. </p>
<p>On the other hand, the example demonstrates well the inevitability of defects 
where a product is under-documented. The product documentation describes ATL2102 
only by reciting the text of the error message. Had Microsoft bothered with even 
a simple example, which surely is a minimal requirement for a multi-billion dollar 
company to claim reasonable effort (whether at testing or documentation), then the 
coding error would have been exposed and, presumably, corrected. </p>
<h2>Compiler Bug </h2>
<p>A special case of attribute-provider exception exists such that the compiler 
attempts to raise fatal error C1904 but is thwarted by yet another exception. It 
gets only as far as asking for the ProgID to use as the
<span class="placeholder">file</span> placeholder in the message text. When this 
goes wrong, the hapless programmer isn’t even told of a “bad provider interaction”, 
but sees instead </p>
<pre class="output">This application has requested the Runtime to terminate it in an unusual way.
Please contact the application&#39;s support team for more information.</pre>
<p>To appreciate this case, it helps to know that the ordinary progress of a fatal 
error is that the compiler (C1XX) displays an error message, cleans up its use of 
system resources such as files and memory, and then unwinds its stack by raising 
a custom exception (0xE0005031). This last operation enables the compiler to make 
an orderly return to the CL.EXE program, which called C1XX and which now exits cleanly. 
Note however that this technique for returning to CL requires that all the compiler’s 
exception handlers recognise the custom exception code and know not to depend on 
anything that the compiler has already cleaned up. </p>
<p>Now consider what happens when code injected by an attribute provider is defective, 
such that compiling it causes a fatal error. The compiler has called the attribute 
provider, which has called back into the compiler to deliver the injected code and 
get it compiled. On finding the fatal error in the injected code, the compiler raises 
the custom exception. Among the exception handlers that now get to execute (unless 
the <span class="switch">/Bd</span> option is active) is the one that the compiler 
set up to guard against exceptions occurring inside the call to the provider. Unfortunately, 
this exception handler knows nothing of the custom exception code and is unaware 
that the compiler has already released all but the most critical of its resources. 
In particular, the memory that held the provider’s CLSID, which the exception handler 
wants for the message text of fatal error C1904, is long gone. Giving its address 
to the OLE32 function <span class="function">ProgIDFromCLSID</span> causes a CPU 
fault. As usual for CPU faults, the compiler seeks to handle the fault as a fatal 
error. Of course, a fatal error while still handling a fatal error is hardly something 
the compiler can proceed with as usual. The compiler instead exits by calling the 
CRT function <span class="function">abort</span>, whence the message shown above.
</p>
<p>It is ironic that this case does not succeed in getting described as a “bad provider 
interaction” even though it actually does require coding errors on both sides of 
the interface between compiler and provider. On the one side, the provider must 
inject code that is sufficiently defective to cause a fatal error when compiled. 
On the other side, the compiler has a bug in not anticipating that the exception 
from the call to the provider may be the compiler’s own fatal error. </p>
<h3>Example </h3>
<p>For an example of all this, compile the following (without
<span class="switch">/Bd</span>): </p>
<pre class="source">#define     _WIN32_WINNT    0x0400
#define     _ATL_ATTRIBUTES
#include    &lt;atlbase.h&gt;
#include    &lt;atlisapi.h&gt;

[
    module (type = &quot;service&quot;, name = &quot;Test&quot;)    // errors plus fatal error C1004
];</pre>
<p>ATLPROV assumes that when <span class="value">service</span> is given as the
<span class="argument">type</span> argument for the <span class="attribute">module</span> 
attribute, then a non-empty <span class="argument">resource_name</span> argument 
is also given. When this assumption is not met, as in the example, ATLPROV raises 
no error or warning: it just injects bad code. </p>
<div class="Footer">
  <p class="Dates">This page was created on 8th July 2006 and was last modified 
  on 10th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62552" endspan -->
</div>

</body>

</html>
