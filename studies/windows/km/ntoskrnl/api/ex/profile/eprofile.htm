<html>

<head>
<title>The Executive Profile Object</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>The Executive Profile Object </h1>
<p>The <span class="struct">EPROFILE</span> structure is the kernel’s representation 
of an executive profile object such as can be created from user mode by the
<span class="function"><a href="create.htm">NtCreateProfile</a></span> and
<span class="function"><a href="createex.htm">NtCreateProfileEx</a></span> functions 
and worked with through the <span class="function"><a href="start.htm">NtStartProfile</a></span> 
and <span class="function"><a href="stop.htm">NtStopProfile</a></span> functions.
</p>
<p>The name <span class="struct">EPROFILE</span> is hypothesised, Microsoft’s name 
not being known even from symbol files. That is some measure of the structure’s 
being internal to the kernel. Against that, however, is that the structure does 
model a formal object that exists precisely so that a handle can be obtained from 
user mode. As for any handle, it can be useful to inspect the corresponding object 
when doing kernel-mode debugging. Indeed, any user-mode program that knows the handle 
can obtain the kernel-mode address of the object via <span class="function">
<a href="../sysinfo/query.htm">NtQuerySystemInformation</a></span> without needing 
unusual privilege and can even read from the address with the help of a kernel-mode 
driver (which sounds more demanding than it often is). </p>
<h2>Layout </h2>
<p>Though the <span class="struct">EPROFILE</span> is too internal to be described 
even in symbol files, it is almost as stable as many a documented structure, presumably 
as a side-effect of its very tightly constrained use. After version 3.51 allowed 
for specification of the profile source and of which processors will have their 
execution profiled, the only formal change is for Windows 7 to support more than 
32 or 64 processors by way of processor groups. That the size then increases for 
64-bit Windows 8 is simply from allowing for more processor groups. </p>
<table>
  <colgroup>
    <col class="Versions"><col class="Size" span="2">
  </colgroup>
  <tr>
    <th>Version </th>
    <th>Size (x86) </th>
    <th>Size (x64) </th>
  </tr>
  <tr>
    <td>3.10 to 3.50 </td>
    <td>0x28 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>3.51 to 6.0 </td>
    <td>0x30 </td>
    <td>0x50 </td>
  </tr>
  <tr>
    <td>6.1 </td>
    <td>0x38 </td>
    <td>0x70 </td>
  </tr>
  <tr>
    <td>6.2 to 10.0 </td>
    <td>0x38 </td>
    <td>0xF0 </td>
  </tr>
</table>
<p>The layout below does not attempt any C-language definition of members as if 
such things can be inferred from type information in symbol files. Types in a fixed-pitch 
font as if for programming are ventured only where the member is copied from a function 
argument such that Microsoft’s choice of formal type is known and plausibly 
(but not certainly) passes into the structure. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Type"><col class="Remarks">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Type </th>
    <th>Description </th>
  </tr>
  <tr>
    <td>0x00 </td>
    <td>0x00 </td>
    <td>pointer </td>
    <td>address of <span class="struct">
    <a href="../../../inc/ntos/ps/eprocess/index.htm">EPROCESS</a></span> for process 
    whose address space is profiled; <br>
    else <span class="constant">NULL</span> if profiling globally </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>0x08 </td>
    <td>
    <pre class="source">PVOID</pre>
    </td>
    <td>start address of profiled area; <br>
    else <span class="constant">NULL</span> if profiling a segment (x86 only)
    </td>
  </tr>
  <tr>
    <td>0x08 </td>
    <td>0x10 </td>
    <td>
    <pre class="source">SIZE_T</pre>
    </td>
    <td>size, in bytes, of profiled area </td>
  </tr>
  <tr>
    <td>0x0C </td>
    <td>0x18 </td>
    <td>
    <pre class="source">ULONG *</pre>
    </td>
    <td>user-supplied address of buffer that is to receive execution counts </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td>0x20 </td>
    <td>
    <pre class="source">ULONG</pre>
    </td>
    <td>size, in bytes, of buffer that is to receive execution counts </td>
  </tr>
  <tr>
    <td>0x14 </td>
    <td>0x24 </td>
    <td>
    <pre class="source">ULONG</pre>
    </td>
    <td>logarithm base 2 of size, in bytes, of bucket for sampling the profiled 
    area </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td>0x28 </td>
    <td>pointer </td>
    <td>while profiling is started: <br>
    address of <a href="../../ke/profobj/kprofile.htm">kernel profile object</a> </td>
  </tr>
  <tr>
    <td>0x1C </td>
    <td>0x30 </td>
    <td>pointer </td>
    <td>address of buffer that is to receive execution counts; <br>
    as locked into physical memory and mapped into system address space; <br>
    else <span class="constant">NULL</span> while profiling is not started </td>
  </tr>
  <tr>
    <td>0x20 </td>
    <td>0x38 </td>
    <td>pointer </td>
    <td>while profiling is started: <br>
    address of <span class="struct">MDL</span> for buffer that is to receive execution 
    counts </td>
  </tr>
  <tr>
    <td>0x24 </td>
    <td>0x40 </td>
    <td>dword </td>
    <td>segment address of profiled area (x86 only); <br>
    else zero </td>
  </tr>
  </table>
<h3>Appended for Version 3.51 </h3>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Type"><col class="Remarks">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Type </th>
    <th>Description </th>
  </tr>
  <tr>
    <td>0x28 </td>
    <td>0x44 </td>
    <td>
    <pre class="source">KPROFILE_SOURCE</pre>
    </td>
    <td>profile source for generation of profile interrupt </td>
  </tr>
  <tr>
    <td>0x2C </td>
    <td>0x48 </td>
    <td><span class="type">KAFFINITY</span> (3.51 to 6.0); <br>
    <span class="struct"><a href="../../ke/affinity/kaffinity_ex.htm">KAFFINITY_EX</a></span> 
    (6.1 and higher) </td>
    <td>processors to be profiled </td>
  </tr>
</table>
<div class="Footer">
  <p class="Dates">This page was created on 5th
  <a href="../../../../../../../new/17/01.htm">January 2017</a> and was last modified 
  on 23rd May 2017. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c17.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6466" -->
</div>

</body>

</html>
