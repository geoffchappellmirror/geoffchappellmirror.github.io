<html>

<head>
<title>KeConnectInterrupt</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<h1>KeReleaseInterruptSpinLock </h1>
<p>This function releases the spin lock that is associated with a hardware interrupt.
</p>
<h2>Declaration </h2>
<pre class="source">VOID KeReleaseInterruptSpinLock (<a href="../intobj/kinterrupt.htm">KINTERRUPT</a> *Interrupt, KIRQL OldIrql);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">Interrupt</span> argument is the address of a structure 
that represents the interrupt. </p>
<p>The <span class="argument">OldIrql</span> argument is the Interrupt Request Level 
(IRQL) to execute at once the lock is released. This is typically the IRQL to restore 
from before the lock’s acquisition. </p>
<h3>Constraints </h3>
<p>The function assumes it executes at the IRQL that is specified as the
<span class="member">SynchronizeIrql</span> for the interrupt. </p>
<h2>Availability </h2>
<p>The <span class="function">KeAcquireInterruptSpinLock</span> function is exported 
by name from the kernel in version 5.1 and higher. </p>
<h2>Documentation Status </h2>
<p>The <span class="function">KeAcquireInterruptSpinLock</span> function is documented.
</p>
<h2>Behaviour </h2>
<p>An interrupt spin lock is just a classic <a href="../spinlock/index.htm">spin 
lock</a> that has been associated with the handling of an interrupt. The
<span class="function">KeReleaseInterruptSpinLock</span> function is a convenience. 
Its work is in two parts which can be done independently by calling other exported 
functions if the caller knows how the interrupt has been prepared. </p>
<p>The first part is to release the lock at high IRQL. An equivalent exported function 
is <span class="function">KeReleaseSpinLockFromDpcLevel</span>. 
The lock is built into the <span class="struct">KINTERRUPT</span> by default but 
can have been supplied externally when registering to handle the interrupt, e.g., 
as the <span class="argument">SpinLock</span> argument to the
<span class="function">IoConnectInterrupt</span> routine. The second part is to 
restore the IRQL. An equivalent exported function for this first part is
<span class="function">KeLowerIrql</span>. </p>
<p>Historically, the function takes as granted that it executes at least at
<span class="constant">DISPATCH_LEVEL</span>, as it will be if the interrupt handling 
is correctly configured. In version 6.2 and higher, new functionality for interrupt 
handling allows that the <span class="member">SynchronizeIrql</span> in a
<span class="struct">KINTERRUPT</span> can correctly be <span class="constant">PASSIVE_LEVEL</span>. 
If it is, then this function stops Windows with the bugcheck
<span class="constant">PASSIVE_INTERRUPT_ERROR</span>. </p>
<div class="Footer">
  <p class="Dates">This page was created on 15th
  <a href="../../../../../../../new/19/12.htm">December 2019</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c19.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6722" -->
</div>

</body>

</html>
