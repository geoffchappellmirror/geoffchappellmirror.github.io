<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EXPORTS</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>EXPORTS </h1>
<h2>Syntax </h2>
<p><span class="def">EXPORTS</span> is a multi-definition statement. An empty 
statement is valid. The <span class="def">EXPORTS</span> tag must run to the end 
of the line, else be followed by a space or tab. If the first definition is on 
the same line as the tag, then the space or tab may be followed by any amount of 
white space, including none, before the definition. Definitions other than the 
first must each start on a new line. </p>
<h3>Ordinary Builds </h3>
<p>When not building for a VxD, each definition has the general form: </p>
<blockquote>
  <p><span class="placeholder">entryname</span>[<span class="def">=</span><span class="placeholder">internalname</span>]<span class="def">
  </span>[<span class="def">@</span><span class="placeholder">ordinal</span><span class="def">
  </span>[<span class="keyword">NONAME</span>]]<span class="def"> </span>[<span class="keyword">CONSTANT</span><span class="def">
  </span>|<span class="def"> </span><span class="keyword">PRIVATE</span><span class="def">
  </span>|<span class="def"> </span><span class="keyword">DATA</span>]<span class="def">
  </span></p>
</blockquote>
<p>The <span class="placeholder">entryname</span> extends up to but not 
including a space, tab or equals sign. However, if this token is a recognised 
statement tag, then the <span class="def">EXPORTS</span> statement is considered 
to have ended with the preceding definition (if any), so that the token is not 
an
<span class="placeholder">entryname</span> but is instead the beginning of a new 
statement. For the purpose of parsing that next statement, an equals sign such 
as might have meaningfully separated an <span class="placeholder">entryname</span> 
from an <span class="placeholder">internalname</span> is effectively a space or 
tab after the statement tag. </p>
<p>An equals sign after any number of spaces or tabs, including none, introduces 
an <span class="placeholder">internalname</span>. There may be any number of 
spaces or tabs between the equals sign and the <span class="placeholder">
internalname</span>, which then extends up to but not including the next space 
or tab. It is not an error if there is no text for the <span class="placeholder">
internalname</span>: it is just that the definition has ended (and has provided 
just an
<span class="placeholder">entryname</span>). </p>
<p>An @ sign, with at least one space or tab before it (to separate it from the
<span class="placeholder">entryname</span> or <span class="placeholder">
internalname</span>), introduces an <span class="placeholder">ordinal</span>. 
There may be any number of spaces or tabs, including none, between the @ and the
<span class="placeholder">ordinal</span>, which then extends up to but not 
including the next space or tab. The <span class="placeholder">ordinal</span> is 
expected to begin with decimal digits that evaluate to a non-zero number less 
than 64K. The present coding ignores any characters that remain after the 
digits. It is a fatal error (LNK1119) to have the @ but either no <span class="placeholder">
ordinal</span> 
or an invalid <span class="placeholder">ordinal</span>. </p>
<p>The remaining one or two arguments are case-insensitive keywords delimited by 
spaces or tabs. <span class="keyword">NONAME</span> is recognised only if an
<span class="placeholder">ordinal</span> is given. LIB allows for only one of
<span class="keyword">CONSTANT</span>, <span class="keyword">PRIVATE</span> and
<span class="keyword">DATA</span>. Specification of <span class="keyword">
CONSTANT</span> 
results in a warning (LNK4087) about being obsolete. </p>
<p>It is a fatal error (LNK1118) to have any additional text in the definition.
</p>
<h3>VxD Builds </h3>
<p>The form that seems intended for an <span class="def">EXPORTS</span> 
definition when building for a VxD is: </p>
<blockquote>
  <p><span class="placeholder">entryname</span><span class="def"> </span>[<span class="def">@</span>[<span class="placeholder">ordinal</span>]][<span class="placeholder">ignored</span>]<span class="def">
  </span></p>
</blockquote>
<p>Another form is coded but not obviously intended: </p>
<blockquote>
  <p><span class="placeholder">entryname</span><span class="def">=</span>[<span class="placeholder">ignored</span>]<span class="def">
  </span></p>
</blockquote>
<p>Either way, the <span class="placeholder">entryname</span> extends up to but 
not including a space, tab or equals sign. However, if this token is a 
recognised statement tag, then the <span class="def">EXPORTS</span> statement is 
considered to have ended with the preceding definition (if any), so that the 
token is not an
<span class="placeholder">entryname</span> but is instead the beginning of a new 
statement. For the purpose of parsing that next statement, an equals sign after 
what would otherwise have been the <span class="placeholder">entryname</span> is 
effectively a space or tab after the statement tag. </p>
<p>When the <span class="placeholder">entryname</span> is delimited by a space 
or tab, if the first character after any amount of white space, including none, 
is an @ sign, there may follow a sequence of decimal digits that form the
<span class="placeholder">ordinal</span>. Anything else or anything extra, 
including non-numerical characters immediately after the digits of the
<span class="placeholder">ordinal</span>, is ignored. </p>
<p>When the <span class="placeholder">entryname</span> is delimited by an equals 
sign, all remaining characters on the line are ignored. </p>
<h2>Output (Ordinary Builds) </h2>
<p>When not building for a VxD, LIB processes the definitions of an
<span class="def">EXPORTS</span> statement directly into the import library and 
export file, as opposed to translating them to a command line in the export 
file. The details are presently beyond the scope of these notes. </p>
<h2>Command-Line Translation (VxD Builds) </h2>
<p>When building for a VxD, each definition in an <span class="def">EXPORTS</span> 
statement is translated into a <span class="switch">/exports</span> option for 
the export-file command line: </p>
<blockquote>
  <p><span class="switch">/EXPORT:</span><span class="placeholder">entryname</span>[<span class="switch">,@</span>[<span class="placeholder">ordinal</span>]]<span class="switch">
  </span></p>
</blockquote>
<p>The digits that form the <span class="placeholder">ordinal</span> in the 
command line are copied from the <span class="def">EXPORTS</span> definition 
character by character without interpretation. If the @ is given in the 
definition, but without being followed by decimal digits for an <span class="placeholder">
ordinal</span>, then the command line will continue to the @ even though the
<span class="placeholder">ordinal</span> is empty. </p>
<h3>Parsing Error </h3>
<p>If there is no space, tab or equals sign to terminate the
<span class="placeholder">entryname</span> before the end of the line, LIB 
continues parsing. The subsequent coding allows that if the <span class="placeholder">
entryname</span> 
starts with an @ sign then LIB can pick up an <span class="placeholder">ordinal</span> 
from a comment and pass this into the command-line translation. For a 
demonstration, prepare a module definition file, here named TEST.DEF, with the 
line </p>
<pre class="source">EXPORTS @ContrivedEntryName;  12345678 would be an invalid ordinal</pre>
<p>and run the command </p>
<pre class="input">lib /def:test.def /machine:x86 /vxd</pre>
<p>This executes without complaint to create the export file TEST.EXP, within 
which may be found the command line </p>
<pre class="output">/EXPORT:@ContrivedEntryName,@12345678</pre>
<h3>Buffer Overrun </h3>
<p>The code that generates the <span class="switch">/export</span> switch uses a 
128-byte buffer on the stack but does not check the lengths of the strings it 
copies there. A sufficiently long <span class="placeholder">entryname</span> or
<span class="placeholder">ordinal</span> can therefore induce an overrun and 
corrupt the stack, including to overwrite the relevant procedure’s return 
address. In the version studied for these notes, namely 7.00.9466, the procedure 
has been compiled with the Buffer Security Check enabled and the placement of 
the buffer is such that even a one-byte overrun is caught. </p>
<p>In practice, of course, the <span class="placeholder">entryname</span> and
<span class="placeholder">ordinal</span> are not nearly long enough to exceed 
these assumed limits and cause a problem. However, a demonstration is easy 
enough. Prepare a module definition file, again named TEST.DEF, containing the 
following two lines:
</p>
<pre class="output">EXPORTS
12345678901234567890...1234567890</pre>
<p>where the ellipsis stands for as many repetitions of 1234567890 as needed for 
the <span class="placeholder">entryname</span> argument to count to 120. With 8 
bytes for the characters of the <span class="switch">/export</span> switch and 
its colon, the null byte at the end of the string will be one byte too many. 
Running
</p>
<pre class="input">lib /def:test.def /machine:x86 /vxd</pre>
<p>triggers the buffer overrun. Repeat with <span class="placeholder">entryname</span> 
reduced by one byte, and there is no buffer overrun. </p>
<div class="Footer">
  <p class="Dates">This page was created on 8th May 1999 and was last modified 
  on 7th January 2010. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c9910.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 1999-2010. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="63648" endspan -->
</div>

</body>

</html>