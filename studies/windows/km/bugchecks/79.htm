<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Bug Check 0x79: MISMATCHED_HAL</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../_styles/km.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="57102" -->
<div class="Main">
  <h1>Bug Check 0x79: Mismatched HAL </h1>
  <p>The <span class="constant">MISMATCHED_HAL</span> bug check reports that the 
  loader, kernel and HAL disagree about their combination. </p>
  <h2>Availability </h2>
  <p>The <span class="constant">MISMATCHED_HAL</span> bug check can occur in all 
  known Windows versions, i.e., 3.10 and higher. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="constant">MISMATCHED_HAL</span> bug check is documented, but 
  not to cover all the known cases that are distinguished by the first bug check 
  parameter. Known cases are 0, 1, 2, 3, 4, and 6. Documentation is known only of 
  cases 1, 2 and 3. Case 3 fell out of use after Windows XP and was repurposed for 
  Windows Vista. Old documentation can of course have only the old interpretation. 
  New documentation has only the new. </p>
  <h2>Parameters </h2>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">MISMATCHED_HAL</span> (0x79) </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>case number, see below for details </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td>in some cases, a vital property as actually found; <br>
      otherwise depends on case </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>in some cases, what was expected for the property from the 2nd parameter;
      <br>
      otherwise depends on case </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>0 typically; <br>
      but depends on case </td>
    </tr>
  </table>
  <p>This bug check is mostly raised by the HAL but can also be raised by the kernel 
  (up to and including version 6.2). Half a dozen different cases are indicated 
  by the first argument. The bug check seems to have started with a consistent scheme 
  in which the 2nd and 3rd parameters describe respectively what was found and what 
  was expected for a property that corresponds to the 1st parameter. However, additions 
  have not kept to the pattern, and since at least one case is interpreted very 
  differently in different Windows versions, the cases are here taken separately.
  </p>
  <h3>No Parameters </h3>
  <p>A 1st parameter of zero is merely incidental, the bug check having been raised 
  by calling the simpler <span class="function">KeBugCheck</span> function rather 
  than <span class="function">KeBugCheckEx</span>: </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">MISMATCHED_HAL</span> </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>0, apparently not intended as anything specific </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td>0 </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>0 </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>0 </td>
    </tr>
  </table>
  <p>The HALCBUS and HALCBUSM variants raise case 0 if they are unable to find the 
  identifying string “Corollary” in the BIOS. These variants are not known from 
  later than version 4.0. </p>
  <p>In versions 4.0 to 6.2, the x86 kernel raises case 0 if ever the HAL function
  <span class="function">HalSystemVectorDispatchEntry</span> returns anything other 
  than 0 or 1, but no known HAL implements this function to return anything else. 
  Indeed, only one known HAL can return anything other than 0: this is HALSP.DLL, 
  which is last known in version 5.1. </p>
  <h3>Processor Control Block </h3>
  <p>Cases 1 and 2 are raised by the HAL. Both concern the <span class="struct">
  <a href="../ntoskrnl/inc/ntos/kprcb.htm">KPRCB</a></span>, which is an important 
  kernel-mode structure on which the kernel and HAL must agree. Both these cases 
  of the bug check are supported from the start, i.e., version 3.10, but case 2 
  is x86-specific. </p>
  <h4>Major Version </h4>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">MISMATCHED_HAL</span> </td>
    </tr>
    <tr>
      <td>1st Argument </td>
      <td>1, indicating mismatched <span class="member">MajorVersion</span> in
      <span class="struct">KPRCB</span> </td>
    </tr>
    <tr>
      <td>2nd Argument </td>
      <td><span class="member">MajorVersion</span> from <span class="struct">KPRCB</span>
      </td>
    </tr>
    <tr>
      <td>3rd Argument </td>
      <td>1, presumably as HAL’s expected <span class="member">MajorVersion</span>
      </td>
    </tr>
    <tr>
      <td>4th Argument </td>
      <td>0 </td>
    </tr>
  </table>
  <p>The <span class="member">MajorVersion</span> is the word at offset 0x02 in 
  the <a href="../ntoskrnl/inc/ntos/i386_x/kprcb/index.htm">x86
  <span class="struct">KPRCB</span></a> in all known Windows versions. All known 
  HALs require it to be 1. All known kernels set it to 1, too, which means that 
  this case of the bug check cannot occur in real-world practice. In the
  <a href="../ntoskrnl/inc/ntos/amd64_x/kprcb/index.htm">x64
  <span class="struct">KPRCB</span></a>, the <span class="member">MajorVersion</span> 
  is deeper into the structure. It is the word at offset 0x063A up to and including 
  the 1607 release of Windows 10 and then moves to offset 0x8A. Again, however, 
  all known HALs require it to be 1 and all known kernels set it to 1. A mismatch 
  can perhaps be detected if one of the kernel and HAL is more recent than the 1607 
  release but the other is older. </p>
  <p>Though the <span class="struct">KPRCB</span> has maintained the same version 
  number for the whole history of Windows, it has of course not kept to one layout—not 
  even for the relatively small part of it at the front which is mostly all that 
  is shared between the kernel and the HAL. The kernel and HAL could be seriously 
  mismatched with very different expectations of the <span class="struct">KPRCB</span> 
  and not trigger this bug check. It’s usefulness as any sort of defence is at best 
  dubious. </p>
  <h4>Build Type </h4>
  <p>The <span class="member">BuildType</span> in the <span class="struct">KPRCB</span> 
  distinguishes two characteristics of how the kernel is built. The kernel can on 
  one hand be a free build (also named retail or release) or a checked build (also 
  named debug). This note is concerned only with free builds. The kernel can also 
  be built with savings of space and speed for single-processor execution, else 
  more generally for multi-processor systems. The HAL can have these same contrasting 
  characteristics. The x86 HAL has always required some agreement. No known x64 
  HAL does. </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">MISMATCHED_HAL</span> </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>2, indicating mismatched <span class="member">BuildType</span> in x86
      <span class="struct">KPRCB</span> </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td><span class="member">BuildType</span> from <span class="struct">KPRCB</span>
      </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>HAL’s expected or preferred <span class="member">BuildType</span> </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>0 </td>
    </tr>
  </table>
  <p>The <span class="member">BuildType</span> is the word at offset 0x12 in the 
  x86 <span class="struct">KPRCB</span>. It has the 0x01 bit set for a checked build 
  and the 0x02 bit set for a single-processor build. Different HAL variants, all 
  inspected only as free builds, have different expectations of the
  <span class="member">BuildType</span> if they are to initialise without raising 
  this bugcheck: </p>
  <table>
    <tr>
      <th><span class="member">BuildType</span> Requirement </th>
      <th>HAL Variants </th>
    </tr>
    <tr>
      <td>equals 2; <br>
      free single-processor HAL requiring free single-processor kernel; <br>
      3rd parameter is 2 </td>
      <td>HAL (version 3.10), <br>
      HAL486C (version 3.10), <br>
      HALMCA (version 3.10) </td>
    </tr>
    <tr>
      <td>equals zero; <br>
      free multi-processor HAL requiring free multi-processor kernel; <br>
      3rd parameter is 0 </td>
      <td>HALAST, <br>
      HALCBUS, <br>
      HALCBUSM, <br>
      HALNCR (version 3.10), <br>
      HALOLI (version 3.10), <br>
      HALSP (version 3.10), <br>
      HALWYSE7 </td>
    </tr>
    <tr>
      <td>0x01 bit clear, 0x02 bit ignored; <br>
      free single-processor HAL requiring free kernel, either single-processor or 
      multi-processor; <br>
      3rd parameter is 0 </td>
      <td>HAL, <br>
      HAL486C, <br>
      HAL98APC, <br>
      HAL98TMR, <br>
      HAL98UP, <br>
      HALAACPI, <br>
      HALACPI (before version 6.0), <br>
      HALAPIC <br>
      HALMCA </td>
    </tr>
    <tr>
      <td>0x01 and 0x02 bits both clear; <br>
      free multi-processor HAL requiring free multi-processor kernel; <br>
      3rd parameter is 0 </td>
      <td>HAL98MP, <br>
      HALACPI (version 6.0 to 6.1), <br>
      HALBORG, <br>
      HALMACPI, <br>
      HALMPS, <br>
      HALMPSM, <br>
      HALNCR, <br>
      HALOLI, <br>
      HALSP <br>
      HALWS3 </td>
    </tr>
  </table>
  <p>The discrepancy about testing for bit flags or comparing for particular values 
  may tell something about the process of HAL adaptation. Early documentation, such 
  as the Knowledge Base article <span class="citation">Descriptions of Bug Codes 
  for Windows NT</span> (number 103059, apparently no longer available at Microsoft’s 
  website), presented the build type as an enumeration with just three values:
  </p>
  <ul>
    <li>0 - Free multiprocessor-enabled build </li>
    <li>1 - Checked multiprocessor-enabled build </li>
    <li>2 - Free uniprocessor build </li>
  </ul>
  <p>Later documentation has four values, with interpretation in bit flags being 
  obvious, but what does Microsoft define in the source code that is surely available 
  to the manufacturers who pay for some sort of HAL development kit? Some HALs changed 
  to testing for bit flags as early as version 3.50. Others never did, though none 
  of those (which all require <span class="member">BuildType</span> to equal zero) 
  survive to version 5.0. </p>
  <p>See that the change has a non-trivial implication. For version 3.10, every 
  known HAL requires exact agreement: a single-processor HAL and kernel; or a multi-processor 
  HAL and kernel; but no mixture. Version 3.50 and higher permit a relaxation: a 
  single-processor HAL can tolerate a multi-processor kernel; but every known multi-processor 
  x86 HAL insists on having a multi-processor kernel. </p>
  <h3>Bus Type </h3>
  <p>Before version 6.0, case 3 of the bug check indicates that the bus type as 
  learnt from the loader is not acceptable to the x86 HAL. </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">MISMATCHED_HAL</span> </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>3, indicating mismatched bus type </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td>bus type from loader </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>HAL’s expected or preferred bus type </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>0 </td>
    </tr>
  </table>
  <p>The bus type is passed from the loader to the x86 kernel and HAL as the byte 
  at offset 0x60 in the <span class="struct">
  <a href="../ntoskrnl/inc/api/arc/loader_parameter_block.htm">LOADER_PARAMETER_BLOCK</a></span> 
  structure (whose address the kernel keeps in an exported variable named
  <span class="variable">KeLoaderBlock</span>). Microsoft’s assembly-language names 
  for some possible values are known from the KS386.INC header:&nbsp; </p>
  <ul>
    <li>0 for <span class="constant">MACHINE_TYPE_ISA</span>; </li>
    <li>1 for <span class="constant">MACHINE_TYPE_EISA</span>; </li>
    <li>2 for <span class="constant">MACHINE_TYPE_MCA</span>. </li>
  </ul>
  <p>The only bus type that any known HAL cares about mismatching is the MCA. The 
  HAL, HAL486C, HAL98TMR, HAL98UP, HALACPI, HALCBUS, HALOLI and HALSP variants all 
  reject the MCA bus (reporting 0 for the 3rd argument), but HALCBUSM, HALMCA and 
  HALNCR insist on it. Curiously, though HALMPS and HALMPSM differentiate themselves 
  on the latter’s support for MCA, neither raises this bug check if loaded on a 
  computer with the wrong bus type. None of the MCA-specific HALs survive to Windows 
  2000. The loader does not bother with MCA detection in Windows XP and higher.
  </p>
  <h3>Loader Parameter Extension </h3>
  <p>In version 6.0 only, case 3 is instead raised by the kernel to report a mismatch 
  with the loader. The <span class="struct">
  <a href="../ntoskrnl/inc/api/arc/loader_parameter_extension/index.htm">LOADER_PARAMETER_EXTENSION</a></span> 
  is a structure whose address is provided as the <span class="member">Extension</span> 
  member of the <span class="struct">LOADER_PARAMETER_BLOCK</span>. </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">MISMATCHED_HAL</span> </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>3, indicating mismached <span class="struct">LOADER_PARAMETER_EXTENSION</span>
      </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td><span class="member">Size</span> from <span class="struct">LOADER_PARAMETER_EXTENSION</span>
      </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td><span class="member">MajorVersion</span> from <span class="struct">LOADER_PARAMETER_EXTENSION</span>
      </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td><span class="member">MinorVersion</span> from <span class="struct">LOADER_PARAMETER_EXTENSION</span>
      </td>
    </tr>
  </table>
  <p>The <span class="struct">LOADER_PARAMETER_EXTENSION</span> is shared with the 
  HAL since at least version 5.2, such that agreement about its layout is surely 
  good to check. The extension is deemed mismatched if: </p>
  <ul>
    <li>its <span class="member">Size</span> (the dword at offset 0x00) is too small 
    for the structure as defined for version 6.0 (0x7C and 0xB8 for x86 and x64, 
    respectively); </li>
    <li>its <span class="member">MajorVersion</span> (the dword at offset 0x14) 
    is not 6; </li>
    <li>or its <span class="member">MinorVersion</span> (the dword at offset 0x18) 
    is not 0. </li>
  </ul>
  <p>Given that the structure’s <span class="member">MajorVersion</span> and
  <span class="member">MinorVersion</span> are Windows version numbers, checking 
  the <span class="member">Size</span> too will have looked prudent since the
  <span class="struct">LOADER_PARAMETER_EXTENSION</span> structure had changed for 
  service packs of both versions 5.1 and 5.2, i.e., without a change of version 
  numbers. </p>
  <p>However prudent, it was soon superseded. The very next version makes a new 
  bugcheck, <span class="constant"><a href="0100.htm">LOADER_BLOCK_MISMATCH</a></span>, 
  for the kernel’s disagreement with the loader about either the
  <span class="struct">LOADER_PARAMETER_BLOCK</span> or <span class="struct">LOADER_PARAMETER_EXTENSION</span>.
  </p>
  <h3>Advanced Configuration and Power Interface (ACPI) </h3>
  <p>Case 4 of the bug check reports an inability to find the root of the ACPI tables. 
  It applies only in versions 5.0 to 5.2 and only then to the HAL variants that 
  know of ACPI version 1.0: the x86 HALAACPI, HALACPI and HALMACPI, and the x64 
  HAL. </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">MISMATCHED_HAL</span> </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>4 </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td>0xAC31 </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>0 or 1 </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>0 </td>
    </tr>
  </table>
  <p>The significance of the 2nd parameter is unknown. The 3rd parameter can be 
  0 or 1 in version 5.0 to differentiate two conditions: </p>
  <ul>
    <li>0, if no Root System Descriptor Table (RSDT) is found; </li>
    <li>1, if whatever is found does not have the RSDT signature. </li>
  </ul>
  <p>Version 5.1 continues to check for both conditions but does not differentiate 
  them for the 3rd parameter, which is only 0. For the second condition, version 
  5.1 adds the XSDT signature as acceptable and explains the bad signature by writing 
  “Bad RSDT pointer” to the display (version 5.0 having kept it just as something 
  to report through the kernel-mode debugger). The version 5.2 from Windows Server 
  2003 SP1 drops the first condition, so that although its occurrence may eventually 
  be a problem elsewhere, it does not cause the bug check. </p>
  <h3>Advanced Programmable Interrupt Controller (APIC) </h3>
  <p>Before version 6.2, the HALAACPI, the HALMACPI and the x64 HAL must not only 
  find the root of the ACPI tables, as above for case 4 before version 6.0, but 
  must find specifically a Multiple APIC Description Table (with APIC as its signature). 
  Without one, they halt the system at startup, i.e., by executing the
  <span class="instruction">hlt</span> instruction, having displayed the message
  </p>
  <pre class="output">HAL: No ACPI APIC Table Found

HAL: This HAL.DLL requires an MPS version 1.1 system
Replace HAL.DLL with the correct hal for this system
The system is halting</pre>
  <p>Even if these HALs find the APIC table, they raise case 6 of the
  <span class="constant">MISMATCHED_HAL</span> bug check unless the APIC table reports 
  a PC-compatible configuration, i.e., unless the APIC table has
  <span class="bit">PCAT_COMPAT</span> bit (0x01) set in the flags at offset 0x28:
  </p>
  <table>
    <tr>
      <td>Bug Check Code: </td>
      <td><span class="constant">MISMATCHED_HAL</span> </td>
    </tr>
    <tr>
      <td>1st Parameter: </td>
      <td>6, indicating APIC table without PC-compatible configuration </td>
    </tr>
    <tr>
      <td>2nd Parameter: </td>
      <td>0 </td>
    </tr>
    <tr>
      <td>3rd Parameter: </td>
      <td>0 </td>
    </tr>
    <tr>
      <td>4th Parameter: </td>
      <td>0 </td>
    </tr>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 4th May 2009 and was last modified 
    on 7th July 2020. </p>
    <!--webbot bot="Include" U-Include="../_include/c0920.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="49264" -->
  </div>
</div>

</body>

</html>
