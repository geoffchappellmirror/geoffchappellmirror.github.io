<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>The CL.EXE Command Line</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<h1>The CL.EXE Command Line </h1>
<p>The compiler receives its first directions from the user as text, primarily from 
the command line, but also from files and environment variables. This text is parsed 
into tokens, which are typically referred to as <span class="definition">command-line 
tokens</span> even when drawn from other sources. Tokens are separated by white 
space in general, but the <a href="argv.htm">command-line parsing</a> does have 
several special cases. A quick summary is that: white space is allowed within a 
token if enclosed by double-quotes; the support for double-quotes has consequences 
for interpreting backslashes; and tokens that contain wildcard characters * and 
? may be subjected to wildcard expansion. </p>
<h2>Types </h2>
<p>Each command-line <span class="definition">directive</span> consists of one or 
more whole tokens. Three general categories are recognised: </p>
<ul>
  <li>An <a href="options.htm">option</a> begins with a hyphen or forward slash. 
  For some options, one or more of the command-line tokens that follow may continue 
  the option (as <span class="definition">arguments</span> for the option, instead 
  of being new directives). </li>
  <li>Otherwise, a command-line token that begins with an @ names a
  <a href="cmdfiles.htm">command file</a>, also called a response file, whose text 
  provides more command-line tokens. </li>
  <li>Any other command-line token names an <a href="infiles.htm">input file</a>.
  </li>
</ul>
<p>There is some mixing of the various types of directive. As suggested already, 
a directive that names a command file may in turn provide more directives of each 
sort, including to name more command files. It is also provided that input files 
can be named by options (specifically, by <span class="switch">
<a href="options/t$c.htm">/Tc</a></span>, <span class="switch">
<a href="options/t$o.htm">/To</a></span> and <span class="switch">
<a href="options/t$p.htm">/Tp</a></span>). </p>
<h2>Sources </h2>
<p>The compiler finds its directives on an effective command line composed from 
the following sources in the following order: </p>
<ul>
  <li>the value of the <span class="env">CL</span> environment variable; </li>
  <li>the actual command line; </li>
  <li>the value of the <span class="env">_CL_</span> environment variable; </li>
</ul>
<p>with the understanding that in each of these sources, each token that names a 
command file is replaced by the text from that file. Each of the sources, and each 
line from a command file, is parsed independently. This means in particular that 
no token can carry over to the next of these sources or to another line, and neither 
can any option that is otherwise permitted to spread to subsequent tokens. </p>
<p>Only in very few cases does it matter whether an instruction to the compiler 
has been drawn from one source or another. It is the standard practice of these 
notes that all references to the command line, unless qualified as the
<span class="emphasis">actual</span> command line, mean an effective command line 
composed as above. </p>
<p>Strictly speaking, the command line as composed above is just what can be supplied 
by the user. It is as well to be aware that CL may draw upon two hard-coded command-line 
contributions. One precedes the user-supplied command line and acts to set
<a href="initial.htm">initial options</a> which the user is free to override. Indeed, 
if a user-supplied option overrides or is incompatible with an initial option, then 
the initial option is discarded silently. Otherwise, the initial option persists 
by default. The other case applies after the user-supplied command line and acts 
to ensure that <a href="compulsory.htm">compulsory options</a> are set even if neglected 
by the user. </p>
<p>While noting exceptional cases, it is as well to mention that the command line 
receives both an ordinary processing, as described above, and an
<a href="early.htm">early pass</a>. The latter is a quick scan, mostly to decide 
a few points of behaviour for the ordinary processing and for such things as the 
startup logo that are attended to before any substantial work begins. The early 
pass affects only a handful of options (<span class="switch"><a href="options/b$e.htm">/Be</a></span>,
<span class="switch"><a href="options/clr.htm">/clr</a></span>,
<span class="switch"><a href="options/nologo.htm">/nologo</a></span>,
<span class="switch"><a href="options/noover.htm">/noover</a></span> and
<span class="switch"><a href="options/zx.htm">/ZX</a></span>), and in some cases 
only very slightly. </p>
<h2>Order </h2>
<p>After expansion of command files, each directive names an input file directly, 
or is an option that names an input file indirectly, or is any other option. Directives 
that name input files, directly or not, build a list of input files. When adding 
input files to the list, CL does not check for repetitions. Directives that do not 
name input files build a list of options. When adding options, CL checks for duplicates 
(except of <span class="switch"><a href="options/i.htm">/I</a></span> options), 
overrides, incompatibilities and prerequisites. The two lists, of input files and 
of options, are essentially separate. All the options apply to all the input files. 
No record is kept of the ordering of options relative to directives that name input 
files. However, intermingling may attract a warning (<a href="warnings/d4026.htm">D4026</a>), 
specifically for the first occurrence of an option between two directives that name 
input files. </p>
<div class="Footer">
  <p class="Dates">This page was created on 29th October 2005 and was last modified 
  on 9th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../_include/c0509.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="57989" endspan -->
</div>

</body>

</html>
