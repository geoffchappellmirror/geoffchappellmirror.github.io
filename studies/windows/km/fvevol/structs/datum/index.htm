<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>FVE_DATUM</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="43332" -->
<div class="Main">
  <!--webbot bot="Include" U-Include="../../../_include/sketch.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">SKETCH OF HOW RESEARCH MIGHT CONTINUE AND RESULTS BE PRESENTED
  </p>
</div>

<!--webbot bot="Include" endspan i-checksum="5204" -->
  <h1>FVE_DATUM </h1>
  <p>The <span class="struct">FVE_DATUM</span> structure (formally
  <span class="struct">_FVE_DATUM</span>) is the most basic of fixed-size headers 
  in the packaging of arbitrary BitLocker data. Each datum is wrapped with descriptions 
  of such things as its type and purpose. For instance, the raw bytes of an encryption 
  key may be packaged with indications of which algorithm to use and of what it’s 
  intended to encrypt. The whole datum is a fixed-size header and some variable-size 
  continuation. The header is the wrapping. The continuation is the raw datum. Different 
  types of datum have different fixed-size headers, but all begin the same way: 
  the <span class="struct">FVE_DATUM</span> is the fixed-size header that is common 
  to all the type-specific headers. </p>
  <h2>Documentation Status </h2>
  <p>No documentation of the <span class="struct">FVE_DATUM</span> structure is 
  known from Microsoft, but the name is Microsoft’s. This is knowable from public 
  symbol files for the user-mode FVEAPI.DLL, many of whose internal routines are 
  written in C++ such that types of arguments survive in decorated names. </p>
  <p>For some types of datum, the variable-size continuation beyond the 
  fixed-size header is a sequence of nested data, each 
  in this form of a fixed-size header and variable-size continuation. Most types 
  of datum do not allow such nesting and the continuation is then known as the
  <span class="definition">data segment</span>. This term data segment is inferred 
  from the name of the internal routine <span class="internal routine">FveDatumGetDataSegment</span> 
  which FVEVOL, FVEAPI and even the boot manager pick up from a library. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">FVE_DATUM</span> structure is eight bytes: </p>
  <table class="Struct">
    <thead>
      <tr>
        <th>Offset </th>
        <th>Size </th>
        <th>Description </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>word </td>
        <td>total size in bytes </td>
      </tr>
      <tr>
        <td>0x02 </td>
        <td>word </td>
        <td>role </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>word </td>
        <td>type </td>
      </tr>
      <tr>
        <td>0x06 </td>
        <td>word </td>
        <td>bit flags </td>
      </tr>
    </tbody>
  </table>
  <p>The size at offset 0x00 is that of the fixed-size header, which may itself 
  be larger than the <span class="struct">FVE_DATUM</span>, and of any variable-size 
  continuation whether this be a single data segment or a sequence of nested data.
  </p>
  <h3>Type </h3>
  <p>What follows the eight bytes of the <span class="struct">FVE_DATUM</span> depends 
  on the type at offset 0x04. For many types, the <span class="struct">FVE_DATUM</span> 
  is the start of a larger fixed-size header. For most types, the header is followed 
  immediately by the data segment. For five types, the header is followed by nested 
  data. </p>
  <p>For the following table of defined types, each Description is Microsoft’s name 
  for the corresponding type-specific header, if known from public symbol files, but is otherwise inferred from the names of internal variables that 
  are addressed from a table of datum properties. </p>
  <table>
    <thead>
      <tr>
        <th>Type </th>
        <th>Description </th>
        <th>Size of Header </th>
        <th>Nested Data </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0000 </td>
        <td>Erased </td>
        <td>0x08 </td>
        <td>no </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0001 </td>
        <td><span class="struct"><a href="key.htm">FVE_DATUM_KEY</a></span> </td>
        <td>0x0C </td>
        <td>no </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0002 </td>
        <td><span class="struct"><a href="unicode.htm">FVE_DATUM_UNICODE</a></span> </td>
        <td>0x08 </td>
        <td>no </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0003 </td>
        <td>Stretch Key </td>
        <td>0x1C </td>
        <td>yes </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0004 </td>
        <td>Use Key </td>
        <td>0x0C </td>
        <td>yes </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0005 </td>
        <td><span class="struct">FVE_DATUM_AESCCM_ENC</span> </td>
        <td>0x24 </td>
        <td>no </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0006 </td>
        <td>TPM Enc Blob </td>
        <td>0x0C </td>
        <td>no </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0007 </td>
        <td><span class="struct">FVE_DATUM_VALIDATION_INFO</span> </td>
        <td>0x08 </td>
        <td>no </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0008 </td>
        <td><span class="struct">FVE_DATUM_VMK_INFO</span> </td>
        <td>0x24 </td>
        <td>yes </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0009 </td>
        <td><span class="struct">FVE_DATUM_EXTERNAL_INFO</span> </td>
        <td>0x20 </td>
        <td>yes </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x000A </td>
        <td>Update </td>
        <td>0x2C </td>
        <td>yes </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x000B </td>
        <td>Error </td>
        <td>0x34 </td>
        <td>no </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x000C </td>
        <td><span class="struct">FVE_DATUM_ASYM_ENC_BLOB</span> </td>
        <td>0x08 </td>
        <td>no </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x000D </td>
        <td><span class="struct">FVE_DATUM_EXPORTED_PUBLIC_KEY</span> </td>
        <td>0x08 </td>
        <td>no </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x000E </td>
        <td><span class="struct">FVE_DATUM_PUBLIC_KEY_INFO</span> </td>
        <td>0x08 </td>
        <td>no </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x000F </td>
        <td>Virtualization Info </td>
        <td>0x18 </td>
        <td>no </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x0010 </td>
        <td>Simple </td>
        <td>0x0C </td>
        <td>no </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x0011 </td>
        <td>Simple </td>
        <td>0x0C </td>
        <td>no </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x0012 </td>
        <td>Concat Hash Key </td>
        <td>0x1C </td>
        <td>no </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x0013 </td>
        <td>Simple </td>
        <td>0x0C </td>
        <td>no </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x0014 </td>
        <td>Simple Large </td>
        <td>0x10 </td>
        <td>no </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x0015 </td>
        <td>Backup Info </td>
        <td>0x1C </td>
        <td>no </td>
        <td>1903 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Three types are all described just as Simple and another just as Simple Large. 
  None of these are known ever to be created with a data segment. The Simple of the 
  description is just that the type-specific header continues beyond the
  <span class="struct">FVE_DATUM</span> with just one four-byte member, growing 
  to eight bytes for Simple Large. In the only known use of Simple Large, the eight-byte 
  member is specifically an iteration count for key stretching. </p>
  <h3>Role </h3>
  <p>If the type at offset 0x04 tells how to interpret what follows the
  <span class="struct">FVE_DATUM</span>, then the role at offset 0x02 tells what the 
  datum is for. 
  The role is not a sub-type. The type and role are independent. This seems safe 
  to infer from such internal (library) routines as
  <span class="internal routine">FveDatumNestedGetNext</span> which can search a 
  sequence of nested data for all that have a particular combination of type and 
  role, or all that have a specified type (whatever the role), but also for all 
  that have a specified role (whatever the type). </p>
  <p>Much less evidence is published by Microsoft for any classification of roles 
  than of the type. That the member is thought of by Microsoft as a
  <span class="definition">role</span>, rather than a purpose or some other category, 
  is here taken from some sort of white paper
  <a href="http://download.microsoft.com/download/D/7/1/D7158253-CE22-4CB3-B622-E3460AB2B9B1/CommercialOSSecFunReqsPublic.docx">
  Addressing a Commercial Grade Operating System Security Functional Requirement 
  Set with Windows Vista and Server 2008</a> that Microsoft published in 2008 but 
  which has all but disappeared from the Internet. (The link is long stale.) In 
  a relatively small section headed “Full volume encryption”, this paper names several 
  structures consistently with public symbol files. It therefore comes with some 
  assurance that all its names that seem to have been taken from the programming 
  actually have been. As well as naming several structures whose names are not 
  known from public symbol files (but which might otherwise be guessed with 
  confidence), it names a constant, <span class="constant">FVE_ROLE_VMK_CACHE</span>, and describes 
  its use closely enough for deducing that it is intended for this member of the
  <span class="struct">FVE_DATUM</span> (and that its value is 5). </p>
  <table>
    <thead>
      <tr>
        <th>Role </th>
        <th>Description </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0000 </td>
        <td>none specified (default) </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0001 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0002 </td>
        <td>for an <span class="struct">FVE_DATUM_VMK_INFO</span> in a dataset </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0003 </td>
        <td>for an <span class="struct">FVE_DATUM_AESCCM_ENC</span> in a dataset,
        <br>
        data segment is encrypted <span class="struct">FVE_DATUM_KEY</span> 
        <br>
        whose decrypted data segment is the FVEK </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0004 </td>
        <td>for an <span class="struct">FVE_DATUM_VALIDATION_INFO</span> in a 
        dataset </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0005 </td>
        <td>for an <span class="struct">FVE_DATUM_KEY</span> in a dataset, <br>
        data segment is the cached VMK </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0006 </td>
        <td>for an <span class="struct">FVE_DATUM_EXTERNAL_INFO</span> in a 
        dataset </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0007 </td>
        <td>for an <span class="struct">FVE_DATUM_UNICODE</span> in a dataset,
        <br>
        data segment is description </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0008 </td>
        <td>for an Update datum (type 0x000A) in a dataset </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0009 </td>
        <td>for an <span class="struct">FVE_DATUM_PUBLIC_KEY_INFO</span> in a 
        dataset, <br>
        data segment is <span class="struct">FVE_DEVICE_LOCKOUT_STATE</span>  </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x000A </td>
        <td>for an Error datum (type 0x000B) in a dataset </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x000B </td>
        <td>for an <span class="struct">FVE_DATUM_AESCCM_ENC</span> in a dataset,
        <br>
        data segment is encrypted <span class="struct">FVE_DATUM_KEY</span> 
        <br>
        whose decrypted data segment is the AMK </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x000C </td>
        <td>for an <span class="struct">FVE_DATUM_EXPORTED_PUBLIC_KEY</span> 
        nested in an <span class="struct">FVE_DATUM_VMK_INFO</span> </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x000D </td>
        <td>for an <span class="struct">FVE_DATUM_EXPORTED_PUBLIC_KEY</span> 
        nested in an <span class="struct">FVE_DATUM_VMK_INFO</span> </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x000E </td>
        <td>for an <span class="struct">FVE_DATUM_AESCCM_ENC</span> in a dataset,
        <br>
        data segment is encrypted <span class="struct">FVE_DATUM_UNICODE</span> 
        <br>
        whose decrypted data segment is the identification field </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x000F </td>
        <td>for Virtualization Info (type 0x000F) in a dataset </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x0010 </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0011 </td>
        <td>for an <span class="struct">FVE_DATUM_VALIDATION_INFO</span> in a 
        dataset </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x0012 </td>
        <td>for an <span class="struct">FVE_DATUM_AESCCM_ENC</span> nested in a 
        stretch key (type 3), <br>
        data segment is encrypted <span class="struct">FVE_DATUM_KEY</span> 
        <br>
        whose decrypted data segment is password to stretch </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x0013 </td>
        <td>for an <span class="struct">FVE_DATUM_AESCCM_ENC</span> nested in a 
        stretch key (type 3) </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x0014 </td>
        <td>for an <span class="struct">FVE_DATUM_UNICODE</span> nested in a 
        stretch key (type 3), <br>
        data segment names algorithm for stretching key </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x0015 </td>
        <td>for an <span class="struct">FVE_DATUM_KEY</span> nested in a stretch 
        key (type 3), <br>
        data segment is salt for stretching key </td>
        <td>6.3 and higher </td>
      </tr>
    </tbody>
  </table>
  <h3>Flags </h3>
  <p>The only known original use for the word at offset 0x06 is that the 0x0001 
  bit is set in an <span class="struct">FVE_DATUM</span> that is contained in some 
  larger structure such as a dataset or as a nested datum. Internally, this 
  bit’s being set 
  marks the datum as one that is not to be individually freed from memory. Only 
  rarely would this not apply to the typical datum in the typical circumstances 
  of much typical analysis, e.g., of a datum in a dataset that is in turn in an 
  information sectors that persists on disk. </p>
  <p>For this original purpose, the flags word looks to be intended for all types 
  of datum. As BitLocker has evolved, some need seems to have developed for type-specific 
  bit flags but without space being easily made in the corresponding type-specific 
  extension of the header beyond the <span class="struct">FVE_DATUM</span>. Remember 
  that all these headers can pass between components at run-time and can persist 
  on disk, and therefore have non-trivial constraints for compatibility. Inevitably, 
  the space for bit flags in the non-specific header has ended up being used for 
  type-specific bits. For instance, a datum for what’s called the clear key (when 
  BitLocker is suspended) can have the 0x0004 bit set in these flags to signify 
  that the high byte of the flags is the suspend count. By now, most bits in this 
  flags word have some such type-specific interpretation. More study is required.
  </p>
  <div class="Footer">
    <p class="Dates">This page was created on 31st May 2020 but was not published 
    until 16th <a href="../../../../../../new/21/06.htm">June 2021</a>. It was last 
    modified on 22nd June 2021. </p>
    <!--webbot bot="Include" U-Include="../../../_include/c21.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2021. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="61973" -->
  </div>
</div>

</body>

</html>
