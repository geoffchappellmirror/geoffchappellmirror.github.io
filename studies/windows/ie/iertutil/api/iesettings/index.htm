<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Internet Explorer Settings</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/ie.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/ie.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="55064" endspan -->
<h1>Internet Explorer Settings </h1>
<p>As with any large program, Internet Explorer has many registry settings. Internet Explorer 8 
brings thousands of settings together for common 
handling. The settings are defined in various tables throughout IERTUTIL and are 
made accessible through a large set of exported functions: </p>
<ul>
  <li><span class="function">ClearNegativeKeyCache</span> </li>
  <li><span class="function"><a href="deleteextkey.htm">DeleteExtKey</a></span> </li>
  <li><span class="function"><a href="deleteextvalue.htm">DeleteExtValue</a></span> </li>
  <li><span class="function"><a href="deletekey.htm">DeleteKey</a></span> </li>
  <li><span class="function"><a href="deletevalue.htm">DeleteValue</a></span> </li>
  <li><span class="function"><a href="enumextkey.htm">EnumExtKey</a></span> </li>
  <li><span class="function"><a href="enumextvalue.htm">EnumExtValue</a></span> </li>
  <li><span class="function"><a href="enuminhiveextkey.htm">EnumInHiveExtKey</a></span> </li>
  <li><span class="function"><a href="enuminhiveextvalue.htm">EnumInHiveExtValue</a></span> </li>
  <li><span class="function"><a href="enuminhivekey.htm">EnumInHiveKey</a></span> </li>
  <li><span class="function"><a href="enuminhivevalue.htm">EnumInHiveValue</a></span> </li>
  <li><span class="function"><a href="enumkey.htm">EnumKey</a></span> </li>
  <li><span class="function"><a href="enumvalue.htm">EnumValue</a></span> </li>
  <li><span class="function"><a href="existsextkey.htm">ExistsExtKey</a></span> </li>
  <li><span class="function"><a href="existsinhiveextkey.htm">ExistsInHiveExtKey</a></span> </li>
  <li><span class="function"><a href="existsinhiveextvalue.htm">ExistsInHiveExtValue</a></span> </li>
  <li><span class="function"><a href="existsinhivekey.htm">ExistsInHiveKey</a></span> </li>
  <li><span class="function"><a href="existsinhivevalue.htm">ExistsInHiveValue</a></span> </li>
  <li><span class="function"><a href="existskey.htm">ExistsKey</a></span> </li>
  <li><span class="function"><a href="getextvalue.htm">GetExtValue</a></span> </li>
  <li><span class="function">GetIEInstalledTime</span> </li>
  <li><span class="function"><a href="getinhiveextvalue.htm">GetInHiveExtValue</a></span> </li>
  <li><span class="function"><a href="getinhivevalue.htm">GetInHiveValue</a></span> </li>
  <li><span class="function">GetTimestampExtValue</span> </li>
  <li><span class="function">GetTimestampValue</span> </li>
  <li><span class="function"><a href="getvalue.htm">GetValue</a></span> </li>
  <li><span class="function">ImpersonateUser</span> </li>
  <li><span class="function">IsPolicyEnabledExtKey</span> </li>
  <li><span class="function">IsPolicyEnabledExtValue</span> </li>
  <li><span class="function">IsPolicyEnabledKey</span> </li>
  <li><span class="function">IsPolicyEnabledValue</span> </li>
  <li><span class="function">MarkUpgradedExtValue</span> </li>
  <li><span class="function">MarkUpgradedValue</span> </li>
  <li><span class="function">MultiSzFromByte</span> </li>
  <li><span class="function">MultiSzToByte</span> </li>
  <li><span class="function">NeedsUpgradeExtValue</span> </li>
  <li><span class="function">NeedsUpgradeValue</span> </li>
  <li><span class="function">RevertImpersonate</span> </li>
  <li><span class="function"><a href="setextvalue.htm">SetExtValue</a></span> </li>
  <li><span class="function"><a href="setvalue.htm">SetValue</a></span> </li>
  <li><span class="function">SuggestHintKey</span> </li>
</ul>
<p>Most of these functions take as their first argument a GUID that represents a 
setting. The IERTUTIL from Windows 7 knows of 4,714 values and 524 keys. I do not intend 
any time soon to extract the list and arrange it for publication. That work 
should be someone’s commercial exercise. </p>
<h2>Logical Hives </h2>
<p>Each setting may be stored at the same position relative to as many as four keys 
depending on whether it is to represent a user’s preference or be imposed by administrative 
policy. The functions treat these branches as logical hives, each represented by 
a Hive ID that some functions take as their second argument. Other functions iterate 
through the hives in order of decreasing precedence: </p>
<table>
  <tr>
    <th>Hive ID </th>
    <th>Path </th>
    <th>Interpretation </th>
  </tr>
  <tr>
    <td>0 </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\Software\Policies</span> </td>
    <td>administrative policy for all users </td>
  </tr>
  <tr>
    <td>1 </td>
    <td><span class="regkey">HKEY_CURRENT_USER\Software\Policies</span> </td>
    <td>administrative policy for current user </td>
  </tr>
  <tr>
    <td>2 </td>
    <td><span class="regkey">HKEY_CURRENT_USER\Software</span> </td>
    <td>preference for current user, can be configured by current user </td>
  </tr>
  <tr>
    <td>3 </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\Software</span> </td>
    <td>administrative preference for all users, can be overridden by current user
    </td>
  </tr>
</table>
<p>The merit in reproducing a value in multiple locations lies in the combination 
of applicability and access. A setting in either of the <span class="regkey">HKEY_LOCAL_MACHINE</span> 
branches is intended for all users, but the same setting in either of the
<span class="keyword">HKEY_CURRENT_USER</span> branches is meant just for the current 
user. Indeed, what the system presents as <span class="regkey">HKEY_CURRENT_USER</span> 
is different for different users. A setting that is stored beneath either of the
<span class="regkey">Software\Policies</span> keys or in either of the
<span class="regkey">HKEY_LOCAL_MACHINE</span> branches typically cannot be modified 
except with administrative privilege. </p>
<p>The first branch therefore sets a machine-wide policy, with no exception. The 
second branch allows an administrator to write different policies for particular 
users, but the machine-wide policy has precedence. Though a user can typically write 
the setting in the <span class="regkey">HKEY_CURRENT_USER\Software</span> key, there 
may be no effect since all policies apply before all preferences. Note the reversal 
of machine and user branches in moving from policies to preferences. The last branch 
also applies machine-wide, like the first, but it has little force: users are free 
to override it in their <span class="regkey">HKEY_CURRENT_USER\Software</span> branch.
</p>
<h2>Value Types </h2>
<p>Each setting has an intrinsic type, which several functions expect to be 
specified as an argument: </p>
<table class="Constants">
  <colgroup><col class="Constant"><col class="draft Remarks"><col class="Remarks"></colgroup>
  <tr>
    <th>Type ID </th>
    <th>Interpretation </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0 </td>
    <td>BOOL </td>
    <td><span class="constant">REG_DWORD</span>, with non-zero as true, zero as 
    false; <br><span class="constant">REG_SZ</span>, with case-insensitive
    <span class="regsz">yes</span>, <span class="regsz">true</span> or
    <span class="regsz">1</span> as true, <span class="regsz">no</span>,
    <span class="regsz">false</span> or <span class="regsz">0</span> as false </td>
  </tr>
  <tr>
    <td>1 </td>
    <td>DWORD </td>
    <td><span class="constant">REG_DWORD</span>; <br><span class="constant">
    REG_BINARY</span> if exactly 4 bytes </td>
  </tr>
  <tr>
    <td>2 </td>
    <td>String </td>
    <td><span class="constant">REG_SZ</span> </td>
  </tr>
  <tr>
    <td>3 </td>
    <td>&nbsp;</td>
    <td><span class="constant">REG_EXPAND_SZ</span> </td>
  </tr>
  <tr>
    <td>4 </td>
    <td>StringArray </td>
    <td><span class="constant">REG_MULTI_SZ</span> </td>
  </tr>
  <tr>
    <td>5 </td>
    <td>Binary </td>
    <td><span class="constant">REG_BINARY</span> </td>
  </tr>
  <tr>
    <td>6 </td>
    <td>&nbsp;</td>
    <td><span class="constant">REG_BINARY</span> </td>
  </tr>
  <tr>
    <td>7 </td>
    <td>BOOLExt </td>
    <td>as for 0 but with placeholders for the setting’s key and value </td>
  </tr>
  <tr>
    <td>8 </td>
    <td>DWORDExt </td>
    <td>as for 1 but with placeholders for the setting’s key and value </td>
  </tr>
  <tr>
    <td>9 </td>
    <td>StringExt </td>
    <td>as for 2 but with placeholders for the setting’s key and value </td>
  </tr>
  <tr>
    <td>10 </td>
    <td>&nbsp;</td>
    <td>as for 4 but with placeholders for the setting’s key and value </td>
  </tr>
  <tr>
    <td>11 </td>
    <td>BinaryExt </td>
    <td>as for 5 but with placeholders for the setting’s key and value </td>
  </tr>
  <tr>
    <td>12 </td>
    <td>&nbsp;</td>
    <td><span class="constant">REG_BINARY</span> </td>
  </tr>
  </table>
<p class="draft">Within IERTUTIL, the hive and type are each defined as an
<span class="keyword">enum</span>, named <span class="enum">HIVEID</span> and
<span class="enum">TYPE</span> respectively, in the <span class="namespace">
SettingStore</span> namespace. Although the exported functions, which all have 
C-language linkage, could be defined to use types from a namespace, these notes 
assume they are not, so that arguments that specify the hive and type are simple integers. 
Some support for this is provided by relevant methods of the
<span class="interface"><a href="../../interfaces/isettingsbroker.htm">
ISettingsBroker</a></span> interface: the decorated names shown in the IERTUTIL 
symbol file have <span class="keyword">
int</span> for both arguments.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 14th April 2010 and was last 
  modified on 15th April 2010. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c10.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2010. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="61781" endspan -->
</div>

</body>

</html>
