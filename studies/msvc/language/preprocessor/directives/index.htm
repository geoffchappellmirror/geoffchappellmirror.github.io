<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Preprocessor Directives</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<!--webbot bot="Include" U-Include="../../../_include/draft.htm" TAG="BODY" startspan -->

<p class="alert">ROUGH DRAFT </p>

<!--webbot bot="Include" i-checksum="20300" endspan -->
<h1>Preprocessor Directives </h1>
<h2>Syntax </h2>
<blockquote>
  <p>[<span class="directive"> </span>]<span class="directive">#</span>[<span class="directive">
  </span>][<span class="placeholder">directive</span>[<span class="placeholder">arguments</span>]]<span class="directive">
  </span></p>
</blockquote>
<p>From the start of the line, there may be any amount of white space, including 
none, before the # sign. There may then be any amount of white space, including 
none, before the optional <a href="../tokens/identifier.htm">identifier</a> that 
is here labelled <span class="placeholder">directive</span>. Except for a coding 
oversight discussed below, it is an error (C2019) if the first character that 
follows the # sign and is not white space is not valid for starting an 
identifier. </p>
<p>Though <span class="placeholder">directive</span> is an identifier, it is not 
subject to macro expansion. It is a fatal error (C1021) if
<span class="placeholder">directive</span> is not the name of a supported 
directive (as listed below). Interpretation of whatever follows <span class="placeholder">
directive</span> varies from one directive to another. Details are left to 
separate notes for the individual directives. </p>
<h3>Supported Directives </h3>
<p>In the following list of preprocessor directives supported by Microsoft 
Visual C++ version 13.00.9466, those that seem to be omitted from the product 
documentation are highlighted yellow. </p>
<ul>
  <li><span class="directive"><a href="define.htm">#define</a></span> </li>
  <li><span class="directive">#elif</span> </li>
  <li><span class="directive">#else</span> </li>
  <li><span class="directive">#endif</span> </li>
  <li><span class="directive"><a href="error.htm">#error</a></span> </li>
  <li><span class="undocumented directive">#ident</span> </li>
  <li><span class="directive">#if</span> </li>
  <li><span class="directive">#ifdef</span> </li>
  <li><span class="directive">#ifndef</span> </li>
  <li><span class="directive"><a href="import/index.htm">#import</a></span> </li>
  <li><span class="directive">#include</span> </li>
  <li><span class="undocumented directive">#injected_line</span> </li>
  <li><span class="directive">#line</span> </li>
  <li><span class="directive"><a href="pragma/index.htm">#pragma</a></span> </li>
  <li><span class="directive">#undef</span> </li>
  <li><span class="directive"><a href="using.htm">#using</a></span> </li>
</ul>
<p>In addition, <span class="directive">#bimport</span> is recognised but only 
to be rejected, so that it produces the fatal error C1021, just as for an 
unrecognised directive. </p>
<h3>Translation Precedence </h3>
<p>For the # sign and for white space before and after, the input stream is 
interpreted as if trigraphs, line splices and comments have been translated. For 
the composition of <span class="placeholder">directive</span>, interpretation of 
the input stream follows the usual rules for identifiers. </p>
<h3>Coding Error </h3>
<p>If where <span class="placeholder">directive</span> is expected there is 
instead a question mark, backslash or forward slash that does not introduce a 
trigraph, line splice or comment (respectively), then the compiler proceeds as 
if it has not only found an identifer to name the directive but has already 
processed it. The identifier that was processed most recently becomes the
<span class="placeholder">directive</span> and the characters that follow become 
arguments for that directive. For example, compiling </p>
<pre class="source">int pragma;

# / message (&quot;This surely ought not work.&quot;)</pre>
<p>displays the quoted message, just as for </p>
<pre class="source"># pragma message (&quot;This surely ought not work&quot;)</pre>
<h2>Scanning </h2>
<p>Some directives may in some circumstances require that the preprocessor scan 
ahead for another directive that is deemed to match the first, and discard 
whatever it finds along the way. Details vary with the directives and are 
presented in the notes for those directives. However, the scanning is common to 
all and is therefore described here. </p>
<p>When scanning for the matching directive, each line that is not enclosed in 
quotes (single or double) is tested quickly for whether it is a preprocessor 
directive, and if so, which one. Except for a coding oversight discussed below, 
the quick test conforms to the syntax above but interpretation proceeds only as 
far as identifying the <span class="placeholder">directive</span> and there are 
no errors: a line that does not scan as a supported preprocessor directive is 
simply discarded. </p>
<p><font color="#FF0000">NOT QUITE TRUE </font></p>
<p>Note that each line scanned, whether discarded or not, counts for line 
numbering. If the <span class="switch">/E</span> option (including as implied by
<span class="switch">/EP</span> or <span class="switch">/P</span>) is active, 
then each line is represented in the preprocessor output as an empty line. </p>
<p>While scanning, the preprocessor tracks a nesting level of conditional 
blocks. Each <span class="directive">#if</span>, <span class="directive">#ifdef</span> 
or
<span class="directive">#ifndef</span> opens a block. </p>
<h3>Coding Error </h3>
<p>The quick test neglects to translate trigraphs on the way to finding the
<span class="placeholder">directive</span>. Consider for example, the fragment
</p>
<pre class="source">??=if 0
<span class="placeholder">whatever</span>
??=endif</pre>
<p>The first line is interpreted fully and accepted as a <span class="directive">
#if</span> directive. If the conditional expression for this directive evaluated 
as non-zero, then the preprocessor would interpret fully the lines of
<span class="placeholder">whatever</span>. The last line, too, would be 
interpreted fully and accepted as a <span class="directive">#endif</span> 
directive, specifically as the directive that closes the conditional block. 
However, with 0 as the conditional expression, the preprocessor is to discard 
the lines of
<span class="placeholder">whatever</span>, with no more interpretation than to 
scan for a line to accept as the directive that closes the block. The last line, 
with its # sign made as a trigraph, is not even a candidate. The preprocessor 
continues discarding input, still scanning for a directive to close the block. </p>
<p>This neglect of trigraph translation in the quick scan for preprocessor 
directives is presumably by oversight, not design. Note that Microsoft documents 
the problem as <a target="_top" href="http://support.microsoft.com/kb/120668">
BUG: Trigraph Statements May Produce End-of-File Error</a>. The KB number 
(120668), being low, dates Microsoft’s first awareness of the problem to long, 
long ago. It is good of Microsoft to keep the description up to date, so that 
the article lists so many versions in which Microsoft is content to leave the 
problem unfixed. In some sense, this is fair enough: surely nobody nowadays uses 
trigraphs in real-world code. But if Microsoft means not to support trigraphs, 
can’t Microsoft actually say so?
</p>
<p>As an aside (perhaps of value only for Microsoft’s programmers should they 
care to fix the problem), note that the problem is not directly with Microsoft’s 
code that scans for preprocessor directives, but is instead with a routine that 
this code calls for skipping white space. More precisely, this routine gets the 
next character from the input stream as if line splices and comments have been 
translated and white space discarded, but with trigraphs left alone. This 
routine is used fairly widely in the interpretation of individual preprocessor 
directives, so that there are rather many cases where trigraphs are not 
translated. These cases are described in the notes for the relevant directives. </p>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../../_include/c0510.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2010. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62288" endspan -->
</div>

</body>

</html>