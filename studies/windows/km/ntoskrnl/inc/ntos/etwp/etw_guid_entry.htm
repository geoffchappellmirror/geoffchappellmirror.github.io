<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>ETW_GUID_ENTRY</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>ETW_GUID_ENTRY </h1>
  <p>The <span class="struct">ETW_GUID_ENTRY</span> structure is the kernel’s record 
  of an event provider. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">ETW_GUID_ENTRY</span> structure is not documented.
  </p>
  <h2>Variability </h2>
  <p>For a non-trivial structure that is plainly very much internal to the kernel, 
  the <span class="struct">ETW_GUID_ENTRY</span> has been very stable. In the following 
  table of sizes, different builds of Windows Vista are distinguished as early and 
  late because they are known to vary the layout even though they don’t change the 
  size. </p>
  <table class="Sizes">
    <colgroup>
      <col class="Version"><col class="Size" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Version </th>
        <th>Size (x86) </th>
        <th>Size (x64) </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>early 6.0 (before SP1); <br>
        late 6.0 </td>
        <td>0x0158 </td>
        <td>0x0170 </td>
      </tr>
      <tr>
        <td>6.1 </td>
        <td>0x0178 </td>
        <td>0x01B0 </td>
      </tr>
      <tr>
        <td>6.2 to 6.3 </td>
        <td>0x0160 </td>
        <td>0x0178 </td>
      </tr>
      <tr>
        <td>10.0 </td>
        <td>0x0160 </td>
        <td>0x0180 </td>
      </tr>
      <tr>
        <td>1511 to 1903 </td>
        <td>0x0168 </td>
        <td>0x0190 </td>
      </tr>
      <tr>
        <td>2004 </td>
        <td>0x0178 </td>
        <td>0x01A8 </td>
      </tr>
    </tbody>
  </table>
  <h2>Layout </h2>
  <p>The preceding sizes, and the offsets, types and names in the table below are 
  from Microsoft’s symbol files for the kernel starting with Windows Vista. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">LIST_ENTRY GuidList;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">LIST_ENTRY SiloGuidList;</pre>
        </td>
        <td>2004 and higher </td>
      </tr>
      <tr>
        <td>0x08 (6.0 to 1903); <br>
        0x10 </td>
        <td>0x10 (6.0 to 1903); <br>
        0x20 </td>
        <td>
        <pre class="source">LONG_PTR volatile RefCount;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0C (6.0 to 1903); <br>
        0x14 </td>
        <td>0x18 (6.0 to 1903); <br>
        0x28 </td>
        <td>
        <pre class="source">GUID Guid;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x1C (6.0 to 1903); <br>
        0x24 </td>
        <td>0x28 (6.0 to 1903); <br>
        0x38 </td>
        <td>
        <pre class="source">LIST_ENTRY RegListHead;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x24 (6.0 to 1903); <br>
        0x2C </td>
        <td>0x38 (6.0 to 1903); <br>
        0x48 </td>
        <td>
        <pre class="source">PSECURITY_DESCRIPTOR SecurityDescriptor;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x28 (early 6.0) </td>
        <td>0x40 (early 6.0) </td>
        <td>
        <pre class="source">TRACE_ENABLE_CONTEXT LegacyEnableContext;</pre>
        </td>
        <td>early 6.0 only </td>
      </tr>
      <tr>
        <td>0x30 (early 6.0) </td>
        <td>0x48 (early 6.0) </td>
        <td>
        <pre class="source">ULONG LegacyProviderEnabled;</pre>
        </td>
        <td>early 6.0 only </td>
      </tr>
      <tr>
        <td rowspan="2">0x28 (late 6.0 to 1903); <br>
        0x30 </td>
        <td rowspan="2">0x40 (late 6.0 to 1903); <br>
        0x50 </td>
        <td>
        <pre class="source">ETW_LAST_ENABLE_INFO LastEnable;</pre>
        </td>
        <td>late 6.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    ETW_LAST_ENABLE_INFO LastEnable;
    ULONGLONG MatchId;
};</pre>
        </td>
        <td>6.1 and higher </td>
      </tr>
      <tr>
        <td>0x38 (6.0 to 1903); <br>
        0x40 </td>
        <td>0x50 (6.0 to 1903); <br>
        0x60 </td>
        <td>
        <pre class="source">TRACE_ENABLE_INFO ProviderEnableInfo;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x58 (6.0 to 1903); <br>
        0x60 </td>
        <td>0x70 (6.0 to 1903); <br>
        0x80 </td>
        <td>
        <pre class="source">TRACE_ENABLE_INFO EnableInfo [8];</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="3">0x0158 (6.1 to 1903); <br>
        0x0160 </td>
        <td rowspan="3">0x0170 (6.1 to 1903); <br>
        0x0180 </td>
        <td>
        <pre class="source">EVENT_FILTER_HEADER *FilterData [8];</pre>
        </td>
        <td>6.1 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">EVENT_FILTER_HEADER **FilterData;</pre>
        </td>
        <td>6.2 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ETW_FILTER_HEADER *FilterData;</pre>
        </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td rowspan="3">0x015C (10.0 to 1903); <br>
        0x0164 </td>
        <td rowspan="3">0x0178 (10.0 to 1903); <br>
        0x0188 </td>
        <td>
        <pre class="source">ESILO *ServerSilo;</pre>
        </td>
        <td>10.0 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">UCHAR HostSilo;</pre>
        </td>
        <td>1511 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source"><a href="etw_silodriverstate.htm">ETW_SILODRIVERSTATE</a> *SiloState;</pre>
        </td>
        <td>1607 and higher </td>
      </tr>
      <tr>
        <td>0x0168 </td>
        <td>0x0190 </td>
        <td>
        <pre class="source">ETW_GUID_ENTRY *HostEntry;</pre>
        </td>
        <td>2004 and higher </td>
      </tr>
      <tr>
        <td>0x0160 (1511 to 1903); <br>
        0x016C </td>
        <td>0x0180 (1511 to 1903); <br>
        0x0198 </td>
        <td>
        <pre class="source">EX_PUSH_LOCK Lock;</pre>
        </td>
        <td>1511 and higher </td>
      </tr>
      <tr>
        <td>0x0164 (1511 to 1903); <br>
        0x0170 </td>
        <td>0x0188 (1511 to 1903); <br>
        0x01A0 </td>
        <td>
        <pre class="source"><a href="../../../inc/ntos/ps/ethread/index.htm">ETHREAD</a> *LockOwner;</pre>
        </td>
        <td>1511 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">Guid</span> is not unique to an
  <span class="struct">ETW_GUID_ENTRY</span>. This is because event providers come 
  in different types: trace provider; notification provider; and provider group 
  (this last being new for Windows 10). Providers that have a different
  <span class="enum"><a href="etw_guid_type.htm">ETW_GUID_TYPE</a></span> 
  can have the same <span class="member">Guid</span> because the corresponding
  <span class="struct">ETW_GUID_ENTRY</span> instances go into different lists. 
  Windows 10 not only adds a list but also allows for multiplicity within each list: 
  providers that register in multiple silos get a different instance for each silo. 
  Whichever list an <span class="struct">ETW_GUID_ENTRY</span> goes into, it’s linked 
  through its <span class="member">GuidList</span> member. </p>
  <p>Each registration of an event provider creates an <span class="struct">
  <a href="etw_reg_entry/index.htm">ETW_REG_ENTRY</a></span> 
  structure. To register an event provider is in effect to open it with the intention 
  of writing events through it. Registration from user mode formalises this by opening 
  an Object Manager handle to the <span class="struct">ETW_REG_ENTRY</span> structure. 
  An event provider can have concurrent registrations. The most notable purpose 
  to this in practice is that an event provider can be distributed across multiple 
  executable modules, including to mix kernel and user modes, which each write their 
  selection of events through the one provider. The <span class="struct">ETW_REG_ENTRY</span> 
  structures for the possibly many registrations of a provider are kept in the provider’s
  <span class="member">RegListHead</span>, linking through their
  <span class="member">RegList</span> member. </p>
  <p>A provider can be concurrently enabled for at most eight tracing sesions, also 
  known as loggers. The <span class="member">EnableInfo</span> array records what 
  the provider knows about these loggers. This includes, of course, the 16-bit
  <span class="member">LoggerId</span>, but also parameters such as the
  <span class="member">Level</span>, <span class="member">MatchAnyKeyword</span> 
  and <span class="member">MatchAllKeyword</span> that the logger has specified 
  for matching against event definitions to decide which events the logger is and 
  is not interested in receiving. (The <span class="struct">TRACE_ENABLE_INFO</span> 
  structure is declared in Microsoft’s EVNTRACE.H and is documented, though for 
  reasons that are far removed from its use in the <span class="struct">ETW_GUID_ENTRY</span>.)
  </p>
  <p>The <span class="member">ProviderEnableInfo</span> member is an aggregate over 
  all loggers, so that the provider can see quickly not to proceed with writing 
  an event that is not enabled for any logger. It has the highest of any logger’s
  <span class="member">Level</span>, a bit-wise OR of all loggers’
  <span class="member">MatchAnyKeyword</span> and a bit-wise AND of all loggers’
  <span class="member">MatchAllKeyword</span>. </p>
  <p>Schematized event filters—also called provider-side filters—were added at kernel 
  level for Windows 7. Loggers can specify one filter each. The original implementation 
  has <span class="member">FilterData</span> as an array of eight pointers to
  <span class="struct">EVENT_FILTER_HEADER</span> structures. The filter data for 
  each logger is this header plus variable-size data, for a total size given by 
  the header’s <span class="member">Size</span> member. Version 6.2 changed to having 
  one pointer to an array of eight pointers, each again to an
  <span class="struct">EVENT_FILTER_HEADER</span> and variable-size data. In version 
  6.3 and higher, the pointer is to an array of eight <span class="struct">ETW_FILTER_HEADER</span> 
  structures, for each of which the <span class="struct">EVENT_FILTER_HEADER</span> 
  and variable-size data is pointed to by the <span class="member">ProviderSideFilter</span> 
  member. </p>
  <p>The new <span class="member">Lock</span> for the 1511 release of Windows 10 
  allows that operations on one provider, such as adding an <span class="struct">
  ETW_REG_ENTRY</span>, do not delay operations on another. Earlier versions have 
  a mutex in the kernel’s data. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 27th
    <a href="../../../../../../../new/16/11.htm">November 2016</a> and was last 
    modified on 17th October 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
