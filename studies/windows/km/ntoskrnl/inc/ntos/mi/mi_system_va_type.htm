<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>MI_SYSTEM_VA_TYPE</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <!--webbot bot="Include" U-Include="../../../../_include/sketch.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">SKETCH OF HOW RESEARCH MIGHT CONTINUE AND RESULTS BE PRESENTED
  </p>
</div>

<!--webbot bot="Include" endspan i-checksum="5204" -->
  <h1>MI_SYSTEM_VA_TYPE </h1>
  <p>From the beginning, Windows separates virtual address space into a low part 
  for user mode and a high part for kernel mode. The user space varies with the 
  process and can be accessed by both user-mode and kernel-mode code. The system 
  space is mostly global but is accessible only to code that executes in kernel 
  mode. This still serves as a rough understanding, despite elaborations. An important 
  one is that the division was originally equal, with 2GB each, but was made configurable 
  as long ago as Windows NT 4.0 SP3 so that the user space could be as large as 
  3GB. In 32-bit Windows, then, system address space typically starts at 0x80000000 
  but may start as high as 0xC0000000. </p>
  <p>In 64-bit Windows the processor architecture itself separates the address space 
  since the mapping to physical addresses through page tables does not support a 
  continuous 64-bit address space but instead defines low and high 47-bit address 
  spaces in which an address can be valid only if the high 17 bits are either all 
  clear or all set. Still, the user and system spaces are the low and high halves: 
  the 128TB user space runs up to and including 0x00007FFF`FFFFFFFF and the 128TB 
  system address space starts at 0xFFFF8000`00000000. </p>
  <p>Historically, the Windows kernel divided the system virtual address space at 
  startup into different regions for different uses. One notable region has long 
  been hard-coded: all known versions of 32-bit Windows prepare the top level of 
  the page-table mapping so that 0xC0000000 is the address of an array of page table 
  entries for the whole 4GB of linear address space. Other regions are not so much 
  hard-coded as preset: their start addresses are computed during initialisation 
  and are then kept in internal variables whose 
  values never can change. In this way, for instance, versions 3.10 to 5.0 have 
  the paged pool at 0xE1000000 and versions 3.10 to 5.2 have the system cache at 
  0xC1000000. </p>
  <p>Not until Windows Vista does the 32-bit system address space get allocated 
  to the different uses dynamically. The allocation unit is the amount of address 
  space that is mapped through one page directory entry, thus 4MB in what was once 
  the ordinary page-table mapping but 2MB if the kernel uses the slightly different 
  mapping that allows for Physical Address Extension (PAE). </p>
  <p>For each allocation unit of system address space, the type of use, if any, 
  is represented by the <span class="enum">MI_SYSTEM_VA_TYPE</span> enumeration. 
  Before version 10.0, the 32-bit kernel’s record of the types for successive allocation 
  units from the start of the system address space upwards is kept as an internal 
  variable named <span class="variable">MiSystemVaType</span>. Windows 10 reworked 
  this as the <span class="member">SystemVaType</span> member of an
  <span class="struct"><a href="mi_visible_state.htm">MI_VISIBLE_STATE</a></span> 
  structure that is in turn the <span class="member">Vs</span> member of an
  <span class="struct"><a href="mi_system_information.htm">MI_SYSTEM_INFORMATION</a></span> 
  structure that is the type of an internal variable named
  <span class="variable">MiState</span>. </p>
  <p>Microsoft’s names for <span class="enum">MI_SYSTEM_VA_TYPE</span> itself and 
  for its possible values are known from public symbol files for the kernel, starting 
  with Windows Vista: </p>
  <table class="Enum">
    <colgroup>
      <col class="Value" span="2"><col class="Name"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Value (x86) </th>
        <th>Value (x64) </th>
        <th>Name </th>
        <th>Versions </th>
        <th>Remarks </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td><span class="constant">MiVaUnused</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x01 </td>
        <td>0x01 </td>
        <td><span class="constant">MiVaSessionSpace</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x02 </td>
        <td>0x02 </td>
        <td><span class="constant">MiVaProcessSpace</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x03 </td>
        <td>0x03 </td>
        <td><span class="constant">MiVaBootLoaded</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x04 </td>
        <td><span class="constant">MiVaPfnDatabase</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x05 </td>
        <td>0x05 </td>
        <td><span class="constant">MiVaNonPagedPool</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x06 </td>
        <td>0x06 </td>
        <td><span class="constant">MiVaPagedPool</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x07 </td>
        <td rowspan="2">0x07 </td>
        <td><span class="constant">MiVaSpecialPool</span> </td>
        <td>6.0 only </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td><span class="constant">MiVaSpecialPoolPaged</span> </td>
        <td>6.1 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x08 </td>
        <td><span class="constant">MiVaSystemCache</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x09 </td>
        <td>0x09 </td>
        <td><span class="constant">MiVaSystemPtes</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0A </td>
        <td>0x0A </td>
        <td><span class="constant">MiVaHal</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0B </td>
        <td>0x0B </td>
        <td><span class="constant">MiVaSessionGlobalSpace</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>0x0C </td>
        <td><span class="constant">MiVaDriverImages</span> </td>
        <td>late 6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0D (6.1 to 1809) </td>
        <td>0x0D (6.1 to 1809) </td>
        <td><span class="constant">MiVaSpecialPoolNonPaged</span> </td>
        <td>6.1 to 1809 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0E (6.2 to 1709) </td>
        <td>&nbsp;</td>
        <td><span class="constant">MiVaPagedProtoPool</span> </td>
        <td>6.2 to 1709 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0F (1709); <br>
        0x0E (1803 to 1809); <br>
        0x0D </td>
        <td>0x0E (1709 to 1809); <br>
        0x0D </td>
        <td><span class="constant">MiVaSystemPtesLarge</span> </td>
        <td>1709 and higher </td>
        <td>previously after <span class="constant">MiVaMaximumType</span> </td>
      </tr>
      <tr>
        <td>0x10 (1709); <br>
        0x0F (1803 to 1809); <br>
        0x0E </td>
        <td>0x0F (1709 to 1809); <br>
        0x0E </td>
        <td><span class="constant">MiVaKernelStacks</span> </td>
        <td>1709 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0F </td>
        <td>0x0F </td>
        <td><span class="constant">MiVaSecureNonPagedPool</span> </td>
        <td>2004 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0C (early 6.0); <br>
        0x0D (late 6.0); <br>
        0x0E (6.1); <br>
        0x0F (6.2 to 1703);<br>
        0x11 (1709); <br>
        0x10 (1803 to 1809); <br>
        0x0F (1903); <br>
        0x10 </td>
        <td>0x0C (early 6.0); <br>
        0x0D (late 6.0); <br>
        0x0E (6.1 to 1703): <br>
        0x10 (1803 to 1809); <br>
        0x0F (1903); <br>
        0x10 </td>
        <td><span class="constant">MiVaMaximumType</span> </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x10 (6.3 to 1703) </td>
        <td>0x0F (6.3 to 1703) </td>
        <td><span class="constant">MiVaSystemPtesLarge</span> </td>
        <td>6.3 to 1703 </td>
        <td>next at 0x0F and 0x0E </td>
      </tr>
    </tbody>
  </table>
  <p>For most versions, <span class="constant">MiVaMaximumType</span> ends the enumeration 
  and acts conventionally not as a defined type but as counting the defined types. 
  Addition of <span class="constant">MiVaSystemPtesLarge</span> for Windows 8.1 
  disturbed this. Whether this was by intention or oversight, it persisted for years: 
  only when the 1709 release of Windows 10 added <span class="constant">MiVaKernelStacks</span> 
  was <span class="constant">MiVaMaximumType</span> restored to counting all the 
  defined types. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 6th
    <a href="../../../../../../../new/19/05.htm">May 2019</a> but was not published 
    until 9th <a href="../../../../../../../new/22/07.htm">August 2022</a>. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c22.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5890" -->
  </div>
</div>

</body>

</html>
