<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EPROCESS_QUOTA_BLOCK</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>EPROCESS_QUOTA_BLOCK </h1>
<p>The <span class="struct">EPROCESS_QUOTA_BLOCK</span> is the primary structure 
in which the kernel keeps information about the use that a set of processes makes 
of various resources that are subject to quotas. </p>
<p>The kernel keeps a default quota block as an internal variable. Version 6.0 adds 
a system quota block, again as an internal variable. A quota block is created for 
a process by the <span class="function">NtSetInformationProcess</span> and
<span class="function">ZwSetInformationProcess</span> functions when first given 
the information class <span class="constant">ProcessQuotaLimits</span> (0x01) with 
input that sets no size for the process’s working set. A newly created process inherits 
its parent’s quota block. </p>
<p>The applicable quota block for a process’s use of resources is pointed to by 
the <span class="member">QuotaBlock</span> member of that process’s
<span class="struct"><a href="../../../inc/ntos/ps/eprocess/index.htm">EPROCESS</a></span>. 
The process’s own current and peak usage of each resource is tracked in the
<span class="struct">EPROCESS</span>, e.g., in <span class="member">ProcessQuotaUsage</span> 
and <span class="member">ProcessQuotaPeak</span>. What the quota block tracks is 
the current and peak usage of each resource by the totality of all processes that 
share the quota block. Crucially, the quota block also has the limit on total usage 
by these processes. </p>
<h2>Documentation Status </h2>
<p>Though the <span class="struct">EPROCESS_QUOTA_BLOCK</span> is not documented, 
its name is in public symbol files starting from Windows 2000 SP3 because, as noted 
already, the <span class="struct">EPROCESS</span> structure contains a pointer to 
an <span class="struct">EPROCESS_QUOTA_BLOCK</span>. Before Windows Vista, these 
same public symbol files also show offsets, types and Microsoft’s names for members 
of the <span class="struct">EPROCESS_QUOTA_BLOCK</span>. The names and offsets were 
also disclosed publicly in the output of the <span class="command">
<a href="../../../../debug/userexts/dso.htm">!dso</a></span> command as implemented 
by the USEREXTS debugger extension that Microsoft supplied with the Device Driver 
Kit (DDK) for Windows NT 4.0 and Windows 2000, and in the output of the
<span class="command"><a href="../../../../debug/kdex2x86/strct.htm">!strct</a></span> 
command as implemented by the KDEX2X86 debugger extension for Windows 2000. </p>
<h2>Variability </h2>
<p>Being internal to the kernel, the <span class="struct">EPROCESS_QUOTA_BLOCK</span> 
is subject to variation between versions. It changed significantly for Windows XP, 
but it then has a stability that is not obvious from the following table of changing 
sizes: </p>
<table class="Sizes">
  <colgroup>
    <col class="Version"><col class="Size" span="2">
  </colgroup>
  <tr>
    <th>Version </th>
    <th>Size (x86) </th>
    <th>Size (x64) </th>
  </tr>
  <tr>
    <td>3.10 to 5.0 </td>
    <td>0x2C </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.1 to 5.2 </td>
    <td>0x40 </td>
    <td>0x78 </td>
  </tr>
  <tr>
    <td>6.0 </td>
    <td>0xA8 </td>
    <td>0x0120 </td>
  </tr>
  <tr>
    <td>6.1 and higher </td>
    <td>0x0240 </td>
    <td>0x0240 </td>
  </tr>
</table>
<p>The expansion for version 6.0 is almost entirely due to the management of two 
more types of resource. The very large expansion for version 6.1 is mostly explained 
by cache alignment. </p>
<h2>Layout </h2>
<p>What’s known of the <span class="struct">EPROCESS_QUOTA_BLOCK</span> before version 
4.0 is entirely from matching the kernel’s treatment of the structure in these versions 
with the later versions for which the members are known from debugger extensions. 
The original <span class="struct">EPROCESS_QUOTA_BLOCK</span> apparently served 
well enough without change until version 5.0, but it was then reworked so much that 
only one member survives. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="1"><col class="Definition"><col class="Versions">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Definition </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x00 (3.10 to 5.0) </td>
    <td>
    <pre class="source">KSPIN_LOCK QuotaLock;</pre>
    </td>
    <td>3.10 to 5.0 </td>
  </tr>
  <tr>
    <td>0x04 (3.10 to 5.0) </td>
    <td>
    <pre class="source">ULONG ReferenceCount;</pre>
    </td>
    <td>3.10 to 5.0 </td>
  </tr>
  <tr>
    <td>0x08 (3.10 to 5.0) </td>
    <td>
    <pre class="source">ULONG QuotaPeakPoolUsage [2];</pre>
    </td>
    <td>3.10 to 5.0 </td>
  </tr>
  <tr>
    <td>0x10 (3.10 to 5.0) </td>
    <td>
    <pre class="source">ULONG QuotaPoolUsage [2];</pre>
    </td>
    <td>3.10 to 5.0 </td>
  </tr>
  <tr>
    <td>0x18 (3.10 to 5.0) </td>
    <td>
    <pre class="source">ULONG QuotaPoolLimit [2];</pre>
    </td>
    <td>3.10 to 5.0 </td>
  </tr>
  <tr>
    <td>0x20 (3.10 to 5.0) </td>
    <td>
    <pre class="source">ULONG PeakPagefileUsage;</pre>
    </td>
    <td>3.10 to 5.0 </td>
  </tr>
  <tr>
    <td>0x24 (3.10 to 5.0) </td>
    <td>
    <pre class="source">ULONG PagefileUsage;</pre>
    </td>
    <td>3.10 to 5.0 </td>
  </tr>
  <tr>
    <td>0x28 (3.10 to 5.0) </td>
    <td>
    <pre class="source">ULONG PagefileLimit;</pre>
    </td>
    <td>3.10 to 5.0 </td>
  </tr>
</table>
<p>Note the repeating arrangement of peak usage, (current) usage and limit first 
in pairs for non-paged and paged pool and then separately for the pagefile. A large 
part of the reworking for Windows XP was to put the two pool types and the pagefile 
on equal footing as quota types each of whose peak usage, current usage and limit 
are gathered into an <span class="struct"><a href="entry.htm">EPROCESS_QUOTA_ENTRY</a></span>. 
The <span class="struct">EPROCESS_QUOTA_BLOCK</span> then gets one
<span class="struct">EPROCESS_QUOTA_ENTRY</span> for each quota type, organised 
as an array indexed by the <span class="enum"><a href="type.htm">PS_QUOTA_TYPE</a></span> 
enumeration (whose last value, <span class="constant">PsQuotaTypes</span>, counts 
the current possibilities). </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Definition"><col class="Versions">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td rowspan="3">0x00 </td>
    <td rowspan="3">0x00 </td>
    <td>
    <pre class="source">EPROCESS_QUOTA_ENTRY QuotaEntry [PsQuotaTypes];</pre>
    </td>
    <td>5.1 to 5.2 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">PSP_QUOTA_ENTRY QuotaEntry [4];</pre>
    </td>
    <td>6.0 to 6.2 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">PSP_QUOTA_ENTRY QuotaEntry [PsQuotaTypes];</pre>
    </td>
    <td>6.3 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td rowspan="2">0x60 (6.0); <br>
    0x0200 (6.1) </td>
    <td rowspan="2">0xC0 (6.0); <br>
    0x0200 (6.1) </td>
    <td>
    <pre class="source">&lt;unknown-type&gt; RateEntry [1];</pre>
    </td>
    <td>6.0 only </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>
    <pre class="source">PS_CPU_QUOTA_BLOCK *CpuQuotaBlock;</pre>
    </td>
    <td>6.1 only </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x30 (5.1 to 5.2); <br>
    </td>
    <td>0x60 (5.2) </td>
    <td>
    <pre class="source">LIST_ENTRY QuotaList;</pre>
    </td>
    <td>5.1 to 5.2 </td>
    <td>next at 0x98 and 0x0100 </td>
  </tr>
  <tr>
    <td>0x38 (5.1 to 5.2); <br>
    0x90 (6.0); <br>
    0x0204 (6.1); <br>
    0x0200 </td>
    <td>0x70 (5.2); <br>
    0xF8 (6.0); <br>
    0x0208 (6.1); <br>
    0x0200 </td>
    <td>
    <pre class="source">ULONG ReferenceCount;</pre>
    </td>
    <td>5.1 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x3C (5.1 to 5.2); <br>
    0x94 (6.0); <br>
    0x0208 (6.1); <br>
    0x0204 </td>
    <td>0x74 (5.2); <br>
    0xFC (6.0); <br>
    0x020C (6.1); <br>
    0x0204 </td>
    <td>
    <pre class="source">ULONG ProcessCount;</pre>
    </td>
    <td>5.1 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x98 (6.0); <br>
    0x020C (6.1); <br>
    0x0208 </td>
    <td>0x0100 (6.0); <br>
    0x0210 (6.1); <br>
    0x0208 </td>
    <td>
    <pre class="source">LIST_ENTRY QuotaList;</pre>
    </td>
    <td>6.0 and higher </td>
    <td>previously at 0x30 and 0x60 </td>
  </tr>
  <tr>
    <td>0xA0 (6.0) </td>
    <td>0x0110 (6.0) </td>
    <td>unknown <span class="struct">SLIST_HEAD</span> </td>
    <td>6.0 only </td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>Most of what is known of the structure in version 6.0 and higher is again from 
matching its treatment by the kernel, though now with the earlier versions for which 
type information is available in the public symbol files. Some developments are 
new enough to have no correspondence. A little insight into Microsoft’s names in 
version 6.0 and higher can be gleaned from the KDEXTS debugger extension’s
<span class="command">!quota</span> command. Among the debugger support in the Windows 
Driver Kit (WDK), this appears first in the WDK for Windows 7. It has two small 
points of distinction. One is that is does no version checking. The other is that 
even its <span class="switch">-?</span> switch (for help) requires type information 
that is not present in the public symbol files. The types that it looks for are 
the slimmest of pickings for Microsoft’s names but seem to be the most that is publicly 
available. </p>
<p>The <span class="command">!quota</span> command 
tells of a break from continuity: the <span class="struct">EPROCESS_QUOTA_ENTRY</span> changes name, if not 
in version 6.0, then certainly by version 6.1. The command assumes that the
<span class="struct">EPROCESS_QUOTA_BLOCK</span> starts with an array of four
<span class="struct">PSP_QUOTA_ENTRY</span> structures. That the array continues 
to be named <span class="member">QuotaEntry</span> is just an assumption. </p>
<p>The layout above glosses over an irregularity about quota types. Version 6.0 
added two: one for the working set; and another for the CPU rate; bringing
<span class="constant">PsQuotaTypes</span> to 5. Versions 6.0 to 6.2 plainly allow 
for 5 quota types, notably while reading quota limits from registry values. Some 
routines in these versions even allow for 5 quota types while working their way 
through the <span class="member">QuotaEntry</span> array but understand that there 
are only 4 entries. In version 6.0, where there might be an entry for the CPU rate 
as the fifth quota type, there is instead a different structure. Microsoft’s name 
for this structure is not known. Microsoft’s name for the member is a confident 
inference from the <span class="command">!quota</span> command’s seeking of a field 
named <span class="member">RateEntry[0].RateLimit.RateData</span>. This fits with 
inspection of the kernel: the unknown structure has a member (at offset 0x18 in 
both x86 and x64 builds) that is consistent 
with being a <span class="union">RATE_QUOTA_LIMIT</span>, which is defined in NTDDK.H 
as having a member named <span class="member">RateData</span>. </p>
<p>The sequenced list at the end of the quota block in version 6.0 is a cache of
<span class="struct">PSP_RATE_APC</span> structures. </p>
<div class="Footer">
  <p class="Dates">This page was created on 11th
  <a href="../../../../../../../new/17/10.htm">October 2017</a> and was last mofified 
  on 5th December 2020. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1720.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5021" -->
</div>

</body>

</html>
