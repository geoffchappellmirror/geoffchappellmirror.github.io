<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SECTION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>SECTION </h1>
  <p>The <span class="struct">SECTION</span> structure (formally
  <span class="struct">_SECTION</span>) is the kernel’s representation of a section 
  object. Both kernel-mode and user-mode software may obtain a handle to a section 
  object. Kernel-mode software may reference the handle to obtain the address of 
  the object. If the <span class="function">ObReferenceObjectByHandle</span> function 
  successfully resolves a handle though directed to do so only if the object type 
  is <span class="variable">MmSectionObjectType</span>, then the pointer that the 
  function produces for the object is a pointer to a <span class="struct">SECTION</span>.
  </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">SECTION</span> structure is not documented. Microsoft 
  is not known to have disclosed even its name for—let alone any internal details 
  of—whatever kernel-mode structure supports a handle to a section object. For the 
  handful of exported functions, e.g., <span class="function">MmMapViewInSystemSpace</span> 
  and <span class="function">MmMapViewInSessionSpace</span>, that take a pointer 
  to a section object as an argument and for which Microsoft has published C-language 
  declarations in headers from a Windows Driver Kit (WDK), the argument’s type is 
  simply <span class="type">PVOID</span>. Even the referencing of the object from 
  a handle is obscure: though the <span class="variable">MmSectionObjectType</span> 
  variable is a kernel export as far back as version 3.51, it never has been declared 
  in any WDK header except an NTOSP.H that Microsoft disclosed in early editions 
  of the WDK for Windows 10 (apparently only by oversight). </p>
  <p>The structure of a section object is obscure even in the public symbol files. 
  Before the original Windows 10, these show type information for a
  <span class="struct">SECTION_OBJECT</span> but not for the
  <span class="struct">SECTION</span>. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">SECTION</span> is 0x28 and 0x40 bytes in 32-bit and 
  64-bit Windows, respectively, in all known versions. Sizes, types and Microsoft’s 
  names of members are from public symbol files for the Windows 10 kernel. What 
  is shown below for earlier versions is, of course, something of a guess. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 (3.10 to 5.1) </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">PVOID StartingVa;</pre>
        </td>
        <td>3.10 to 5.1 </td>
        <td>next at 0x0C </td>
      </tr>
      <tr>
        <td>0x04 (3.10 to 5.1) </td>
        <td>&nbsp;</td>
        <td>
        <pre class="source">PVOID EndingVa;</pre>
        </td>
        <td>3.10 to 5.1 </td>
        <td>next at 0x10 </td>
      </tr>
      <tr>
        <td>0x08 (3.10 to 5.1); <br>
        0x00 (5.2 to 6.1) </td>
        <td>0x00 (late 5.2 to 6.1) </td>
        <td>
        <pre class="source">PVOID Parent;</pre>
        </td>
        <td>3.10 to 6.1 </td>
        <td>next in <span class="member">SectionNode</span> at 0x00 </td>
      </tr>
      <tr>
        <td>0x0C (3.10 to 5.1); <br>
        0x04 (5.2 to 6.1) </td>
        <td>0x08 (late 5.2 to 6.1) </td>
        <td>
        <pre class="source">PVOID LeftChild;</pre>
        </td>
        <td>3.10 to 6.1 </td>
        <td>next in <span class="member">SectionNode</span> at 0x00 </td>
      </tr>
      <tr>
        <td>0x10 (3.10 to 5.1); <br>
        0x08 (5.2 to 6.1) </td>
        <td>0x10 (late 5.2 to 6.1) </td>
        <td>
        <pre class="source">PVOID RightChild;</pre>
        </td>
        <td>3.10 to 6.1 </td>
        <td>next in <span class="member">SectionNode</span> at 0x00 </td>
      </tr>
      <tr>
        <td rowspan="2">0x00 </td>
        <td rowspan="2">0x00 </td>
        <td>
        <pre class="source">MM_AVL_NODE SectionNode;</pre>
        </td>
        <td>6.2 only </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">RTL_BALANCED_NODE SectionNode;</pre>
        </td>
        <td>6.3 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x0C </td>
        <td rowspan="2">0x18 </td>
        <td>
        <pre class="source">PVOID StartingVa;</pre>
        </td>
        <td>5.2 to 6.1 </td>
        <td>previously at 0x00 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG_PTR StartingVpn;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x10 </td>
        <td rowspan="2">0x20 </td>
        <td>
        <pre class="source">PVOID EndingVa;</pre>
        </td>
        <td>5.2 to 6.1 </td>
        <td>previously at 0x04 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG_PTR EndingVpn;</pre>
        </td>
        <td>6.2 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x14 </td>
        <td rowspan="2">0x28 </td>
        <td>
        <pre class="source">SEGMENT *Segment;</pre>
        </td>
        <td>3.10 to 6.3 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    CONTROL_AREA *ControlArea;
    FILE_OBJECT *FileObject;
    struct {
        RemoteImageFileObject : 1;
        RemoteDataFileObject : 1;
    };
} u1;</pre>
        </td>
        <td>10.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>The original behaviour is consistent with the section object beginning as a
  <span class="struct">SECTION_OBJECT</span>, which is well known from symbol files, 
  but continuing with members that symbol files for Windows 10 confirm are those 
  of the <span class="struct">SECTION</span> (see below). The
  <span class="struct">SECTION_OBJECT</span> can usefully be seen as having its 
  members in three sets: two for the virtual addresses of the section’s first and 
  last bytes; three as links for the section object in a tree; a pointer to a
  <span class="struct">SEGMENT</span>. The kernel for Windows Server 2003 swaps 
  the first two but the symbol files for the <span class="struct">SECTION_OBJECT</span> 
  show no such reordering. This means that for whatever reason the
  <span class="struct">SECTION_OBJECT</span> survives in symbol files in version 
  5.2—indeed, all the way to the original Windows 10—it cannot be that the
  <span class="struct">SECTION_OBJECT</span> any longer had anything to do with section objects 
  as actually implemented by the kernel.
  </p>
  <p>In Windows 10, the section object ordinarily keeps a pointer to the control 
  area, which has in its turn a <span class="member">FilePointer</span> for access 
  to the file. However, if the file’s device object has the
  <span class="constant">FILE_REMOTE_DEVICE</span> characteristic, then the section 
  object instead keeps a pointer to the file object. In this case, one or other 
  of the low two bits in the address is set according to whether the section is 
  for an image or for data. The control area is then found through the file object’s
  <span class="member">SectionObjectPointer</span>. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x18 </td>
        <td>0x30 </td>
        <td>
        <pre class="source">ULONGLONG SizeOfSection;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x20 </td>
        <td>0x38 </td>
        <td>
        <pre class="source">union {
    ULONG LongFlags;
    <a href="mmsection_flags.htm">MMSECTION_FLAGS</a> Flags;
} u;</pre>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td rowspan="2">0x24 </td>
        <td rowspan="2">0x3C </td>
        <td>
        <pre class="source">ULONG InitialPageProtection;</pre>
        </td>
        <td>3.10 to 5.2 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">struct {
    /*  changing bit fields, see below  */
};</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">InitialPageProtection</span> comes from the macros 
  (defined in WDM.H and WINNT.H) that start with <span class="constant">PAGE_NOACCESS</span>. 
  It will typically be just what was provided as the <span class="argument">SectionPageProtection</span> 
  argument when creating the section, but <span class="constant">PAGE_NOCACHE</span> 
  and <span class="constant">PAGE_WRITECOMBINE</span> bits can have been picked 
  up by implication. The point to retaining it in this form is for validating that 
  the <span class="argument">Win32Protect</span> argument that is presented when 
  later mapping a view of the section is compatible with the page protection that 
  was specified for the section. </p>
  <p>Windows Vista recognised that with only 12 bits allowed for the
  <span class="member">InitialPageProtection</span>, a truly new member could be 
  added to the <span class="struct">SECTION</span> without changing the size: </p>
  <table class="Flags">
    <colgroup>
      <col class="Mask"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Mask </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00000FFF </td>
        <td>
        <pre class="source">ULONG InitialPageProtection : 12;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0xFFFFF000 (6.0 to 6.1); <br>
        0x7FFFF000 </td>
        <td>
        <pre class="source">ULONG SessionId : 20;</pre>
        </td>
        <td>6.0 to 6.1 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG SessionId : 19;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x80000000 </td>
        <td>
        <pre class="source">ULONG NoValidationNeeded : 1;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 31st August 2019 but was not published 
    until 7th <a href="../../../../../../../new/22/07.htm">August 2022</a>. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c22.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5890" -->
  </div>
</div>

</body>

</html>
