<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EVENT_HEADER</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <p class="alert">This page is being prepared for a substantial reworking. Some 
  content may be temporarily missing. Temporarily may turn into indefinitely. New 
  content may be more than usually defective. The page is now published only as 
  a revision in progress. Use with caution. </p>
  <h1>EVENT_HEADER </h1>
  <p>The <span class="struct">EVENT_HEADER</span> (formally <span class="struct">
  _EVENT_HEADER</span>) is one of several types of fixed-size header that introduce 
  variable-size data for events that are logged through Event Tracing for Windows 
  (ETW). As with other types of event, those that begin with an
  <span class="struct">EVENT_HEADER</span> accumulate first in trace buffers. To 
  have these events persist in this raw form for ready inspection, configure the 
  event tracing session to flush the trace buffers to an Event Trace Log (ETL) file.
  </p>
  <p>Among the various <a href="../../api/ntwmi/traceheaders/index.htm">trace headers</a>, 
  the <span class="struct">EVENT_HEADER</span> is unusual in that it is not just 
  a transitory implementation detail for how one type of event gets packed into 
  the trace buffers or even for how NTDLL passes events to the kernel. It is also 
  the header, within an <span class="struct">EVENT_RECORD</span>, when event data 
  is unpacked for event consumers—even of event data that had a different header 
  while in the trace buffers. This article is concerned only with the packed form.
  </p>
  <h2>Availability </h2>
  <p>The <span class="struct">EVENT_HEADER</span> was introduced for Windows Vista.
  </p>
  <h2>Usage </h2>
  <p>Two ways are known that an event begins with an <span class="struct">EVENT_HEADER</span> 
  rather than some other trace header. One is that it is delivered to the kernel 
  through the <span class="function">NtTraceEvent</span> function. For this, the
  <span class="argument">Flags</span> argument masked with
  <span class="constant">ETW_NT_TRACE_TYPE_MASK</span> must be
  <span class="constant">ETW_NT_FLAGS_TRACE_EVENT</span>. The
  <span class="argument">Fields</span> argument must then address an event</p>
  <h2>Documentation Status </h2>
  <p>Presumably because of its role in interfaces that support event consumers, 
  the <span class="struct">EVENT_HEADER</span> structure is defined in the EVNTCONS.H 
  header for user-mode programming and is documented. </p>
  <p>Note, however, that the <span class="struct">EVENT_HEADER</span> is documented 
  merely as “defines information about the event” as if the structure exists solely 
  for delivering the event to an event consumer. One might easily miss that the 
  structure has a very much longer role in the life of most events, including even 
  when NTDLL prepares an event for sending to the kernel. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">EVENT_HEADER</span> is 0x50 bytes in both 32-bit and 
  64-bit Windows in all versions that are known to have it. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">USHORT Size;</pre>
        </td>
      </tr>
      <tr>
        <td>0x02 </td>
        <td>
        <pre class="source">USHORT HeaderType;</pre>
        </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>
        <pre class="source">USHORT Flags;</pre>
        </td>
      </tr>
      <tr>
        <td>0x06 </td>
        <td>
        <pre class="source">USHORT EventProperty;</pre>
        </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>
        <pre class="source">ULONG ThreadId;</pre>
        </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>
        <pre class="source">ULONG ProcessId;</pre>
        </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>
        <pre class="source">LARGE_INTEGER TimeStamp;</pre>
        </td>
      </tr>
      <tr>
        <td>0x18 </td>
        <td>
        <pre class="source">GUID ProviderId;</pre>
        </td>
      </tr>
      <tr>
        <td>0x28 </td>
        <td>
        <pre class="source">EVENT_DESCRIPTOR EventDescriptor;</pre>
        </td>
      </tr>
      <tr>
        <td>0x38 </td>
        <td>
        <pre class="source">union {
    struct {
        ULONG KernelTime;
        ULONG UserTime;
    };
    ULONG64 ProcessorTime;
};</pre>
        </td>
      </tr>
      <tr>
        <td>0x40 </td>
        <td>
        <pre class="source">GUID ActivityId;</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <h3>Size </h3>
  <p>The <span class="member">Size</span> is the total, in bytes, of the
  <span class="struct">EVENT_HEADER</span> and all the event data that follows. 
  To understand the fixed-size header, it helps to know that the variable-size data 
  that follows it is broadly in two parts: </p>
  <ul>
    <li>extended data items added by the kernel, possibly from provider-supplied 
    arguments; </li>
    <li>arbitrary event data, necessarily from the event provider. </li>
  </ul>
  <h3>Header Type </h3>
  <p>What distinguishes the <span class="struct">EVENT_HEADER</span> from other 
  trace headers are special values in the bytes at offset 0x02 and 0x03. For the
  <span class="struct">EVENT_HEADER</span>, but for no other types of trace header, 
  Microsoft models these bytes together as a 16-bit <span class="member">HeaderType</span>. 
  Whether they’re defined as two bytes or one word, two combinations of these bytes 
  at offsets 0x02 and 0x03 distinguish that a trace header is specifically an
  <span class="struct">EVENT_HEADER</span>. Microsoft’s names for them as values 
  for the <span class="member">HeaderType</span> are known from an NTETW.H which 
  Microsoft distributed with the original and Version 1511 editions of the Windows 
  Driver Kit (WDK) for Windows 10: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>Implied Layout </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0xC012 </td>
        <td><span class="constant">EVENT_HEADER_EVENT32</span> </td>
        <td>0x50 bytes of header followed by 32-bit event data </td>
      </tr>
      <tr>
        <td>0xC013 </td>
        <td><span class="constant">EVENT_HEADER_EVENT64</span> </td>
        <td>0x50 bytes of header followed by 64-bit event data </td>
      </tr>
    </tbody>
  </table>
  <h3>Flags </h3>
  <p>Microsoft defines the following in EVNTCONS.H as bits for the
  <span class="member">Flags</span>: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>SDK Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0001 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_EXTENDED_INFO</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0002 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_PRIVATE_SESSION</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0004 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_STRING_ONLY</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0008 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_TRACE_MESSAGE</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0010 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_NO_CPUTIME</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0020 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_32_BIT_HEADER</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0040 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_64_BIT_HEADER</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0080 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_DECODE_GUID</span> </td>
        <td>1709 and higher </td>
      </tr>
      <tr>
        <td>0x0100 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_CLASSIC_HEADER</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0200 </td>
        <td><span class="constant">EVENT_HEADER_FLAG_PROCESSOR_INDEX</span> </td>
        <td>6.2 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Microsoft defines them because they are set for the structure that is presented 
  to event consumers. The <span class="member">Flags</span> are mostly not meaningful 
  (and cannot be set) in an <span class="struct">EVENT_HEADER</span> that is in 
  the trace buffers. Some exist precisely to tell the event consumer that the event 
  originated differently. For instance, an event that gets
  <span class="constant">EVENT_HEADER_FLAG_TRACE_MESSAGE</span> set in its presentation 
  to an event consumer actually started its life with a <span class="struct">MESSAGE_TRACE_HEADER</span>.
  </p>
  <p>Microsoft defines the following for <span class="member">EventProperty</span>:
  </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0001 </td>
        <td><span class="constant">EVENT_HEADER_PROPERTY_XML</span> </td>
      </tr>
      <tr>
        <td>0x0002 </td>
        <td><span class="constant">EVENT_HEADER_PROPERTY_FORWARDED_XML</span>
        </td>
      </tr>
      <tr>
        <td>0x0004 </td>
        <td><span class="constant">EVENT_HEADER_PROPERTY_LEGACY_EVENTLOG</span>
        </td>
      </tr>
      <tr>
        <td>0x0008 </td>
        <td><span class="constant">EVENT_HEADER_PROPERTY_RELOGGABLE</span> </td>
      </tr>
    </tbody>
  </table>
  <p>Most of the other members are generated at logging-time. The
  <span class="member">ProviderGuid</span> and <span class="member">ActivityId</span> 
  are saved from function arguments. </p>
  <h2>Extended Data Items </h2>
  <p>The kernel sets <span class="constant">EVENT_HEADER_FLAG_EXTENDED_INFO</span> 
  in the <span class="member">Flags</span> to indicate that the
  <span class="struct">EVENT_HEADER</span> is followed by at least one extended 
  data item. Each such item appears, after 8-byte alignment, as a fixed-size header 
  and variable-size data. The header is an <span class="struct">EVENT_HEADER_EXTENDED_DATA_ITEM</span>, 
  not quite as defined in EVNTCONS.H: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">USHORT Reserved1;</pre>
        </td>
      </tr>
      <tr>
        <td>0x02 </td>
        <td>
        <pre class="source">USHORT ExtType;</pre>
        </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>
        <pre class="source">struct {
    USHORT Linkage : 1;
    USHORT Reserved2 : 15;
};</pre>
        </td>
      </tr>
      <tr>
        <td>0x06 </td>
        <td>
        <pre class="source">USHORT DataSize;</pre>
        </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>
        <pre class="source">ULONGLONG DataPtr;</pre>
        </td>
      </tr>
    </tbody>
  </table>
  <p>The key difference is that <span class="member">DataPtr</span> is not space 
  for a 32-bit or 64-bit pointer to wherever the unpacking has placed the variable-size 
  data. Instead, it holds that data, or at least the beginning of that data. The
  <span class="member">Reserved1</span> member is the total size, i.e., of the first 
  8 bytes of the <span class="struct">EVENT_HEADER_EXTENDED_DATA_ITEM</span> plus 
  the <span class="member">DataSize</span> bytes of variable-size data. The form 
  of that data depends on the <span class="member">ExtType</span>. Microsoft’s EVNTCONS.H 
  defines the following values and names: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>DataPtr Replacement </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0001 </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_RELATED_ACTIVITYID</span>
        </td>
        <td><span class="struct">EVENT_EXTENDED_ITEM_RELATED_ACTIVITYID</span>
        </td>
      </tr>
      <tr>
        <td>0x0002 </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_SID</span> </td>
        <td><span class="struct">SID</span> </td>
      </tr>
      <tr>
        <td>0x0003 </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_TS_ID</span> </td>
        <td><span class="struct">EVENT_EXTENDED_ITEM_TS_ID</span> </td>
      </tr>
      <tr>
        <td>0x0004 </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_INSTANCE_INFO</span>
        </td>
        <td><span class="struct">EVENT_EXTENDED_ITEM_INSTANCE</span> </td>
      </tr>
      <tr>
        <td>0x0005 </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_STACK_TRACE32</span>
        </td>
        <td><span class="struct">EVENT_EXTENDED_ITEM_STACK_TRACE32</span> </td>
      </tr>
      <tr>
        <td>0x0006 </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_STACK_TRACE64</span>
        </td>
        <td><span class="struct">EVENT_EXTENDED_ITEM_STACK_TRACE64</span> </td>
      </tr>
      <tr>
        <td>0x0007 </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_PEBS_INDEX</span> </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0008 </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_PMC_COUNTERS</span>
        </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0009 </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_PSM_KEY</span> </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x000A </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_EVENT_KEY</span> </td>
        <td><span class="struct">EVENT_EXTENDED_ITEM_EVENT_KEY</span> </td>
      </tr>
      <tr>
        <td>0x000B </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_EVENT_SCHEMA_TL</span>
        </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x000C </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_PROV_TRAITS</span> </td>
        <td>byte array&nbsp; </td>
      </tr>
      <tr>
        <td>0x000D </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_PROCESS_START_KEY</span>
        </td>
        <td><span class="struct">EVENT_EXTENDED_ITEM_PROCESS_START_KEY</span>
        </td>
      </tr>
      <tr>
        <td>0x000E </td>
        <td><span class="constant">EVENT_HEADER_EXT_TYPE_MAX</span> </td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p><span class="alert">TO BE CONTINUED</span> </p>
  <div class="Footer">
    <p class="Dates">This page was created on 9th December 2016 and was last modified 
    on 30th <a href="../../../../../../../new/22/10.htm">November 2022</a>. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" --></div>
</div>

</body>

</html>
