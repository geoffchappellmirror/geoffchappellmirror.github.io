<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>IUserEventTimer</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js">
</script>
<script type="text/javascript" src="../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="55064" endspan -->
<h1>IUserEventTimer </h1>
<p>The <span class="interface">IUserEventTimer</span> interface exposes a timing 
facility whose special feature is to disregard intervals during which there have 
been no user input events. </p>
<table>
  <tr>
    <td><span class="constant">IID_IUserEventTimer</span> </td>
    <td><span class="iid">{0F504B94-6E42-42E6-99E0-E20FAFE52AB4}</span> </td>
  </tr>
</table>
<p>The <span class="interface">IUserEventTimer</span> methods, in order of their 
appearance in the virtual function table after the three <span class="interface">
IUnknown</span> methods, are: </p>
<table class="Methods">
  <colgroup>
    <col class="Offset"><col class="Method">
  </colgroup>
  <tr>
    <th class="Offset">Offset </th>
    <th class="Method">Method </th>
  </tr>
  <tr>
    <td>0x0C </td>
    <td><span class="method"><a href="set.htm">SetUserEventTimer</a></span> </td>
  </tr>
  <tr>
    <td>0x10 </td>
    <td><span class="method"><a href="kill.htm">KillUserEventTimer</a></span>
    </td>
  </tr>
  <tr>
    <td>0x14 </td>
    <td><span class="method"><a href="getelapsed.htm">GetUserEventTimerElapsed</a></span>
    </td>
  </tr>
  <tr>
    <td>0x18 </td>
    <td><span class="method"><a href="init.htm">InitTimerTickInterval</a></span>
    </td>
  </tr>
</table>
<p>The functionality of these user event timers is broadly similar to the window 
timers that are created and destroyed by the standard API functions
<span class="function">SetTimer</span> and <span class="function">KillTimer</span>. 
In general, each user event timer is described by the pairing of a window handle 
and an identifier, and the timer’s expiry is communicated by posting a message to 
the window, with the identifier as reference data. As far as concerns the interface, 
the key differences are just that the message number is configurable and that the 
choice of identifier can be left to the implementation. </p>
<p>A user event timer is started by calling the <span class="method">SetUserEventTimer</span> 
method, to specify a window and optionally a window-relative identifier, plus the 
desired timeout and a message number for notification of the timeout’s expiry. Provision 
exists also for notification via a callback function. The timeout triggers recurringly 
until the timer is destroyed by calling the <span class="method">KillUserEventTimer</span> 
method. The <span class="method">GetUserEventTimerElapsed</span> method is available 
for polling the timer rather than waiting for a notification, and is perhaps intended 
primarily for gauging the discrepancy between actual time and user-active time. 
Remember always that the time measured by user event timers is time during which 
there has been user input. How they do this is essentially an implementation detail, 
but one aspect which has practical consequences is configurable, via the
<span class="method">InitTimerTickInterval</span> method. </p>
<p>The only known implementation is by SHELL32.DLL for the <span class="class">
<a href="../../classes/usereventtimer.htm">UserEventTimer</a></span> class. </p>
<h2>Availability </h2>
<p>The <span class="interface">IUserEventTimer</span> interface is implemented 
in SHELL32.DLL version 6.00 and higher. </p>
<p>The interface seems never to have been documented, but is declared in the SHOBJIDL.IDL 
(and thus also SHOBJIDL.H) from the Platform SDK dated February 2003. This declaration 
may have been an oversight: it is removed from the Windows Vista SDK dated January 
2007. </p>
<div class="Footer">
  <p class="Dates">This page was created on 16th April 2007 and was last modified 
  on 7th August 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0709.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2007-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="4319" endspan -->
</div>

</body>

</html>
