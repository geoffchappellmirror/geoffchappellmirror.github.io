<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>FindFirstUrlCacheEntryEx</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/ie.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/ie.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="14798" endspan -->
<h1>FindFirstUrlCacheEntryEx </h1>
<p>This function sets parameters for an enumeration of URL cache containers and 
produces information about the first entry. </p>
<h2>Declaration </h2>
<pre class="source">HANDLE 
FindFirstUrlCacheEntryEx (
    LPCTSTR lpszUrlSearchPattern, 
    DWORD dwFlags, 
    DWORD dwFilter, 
    GROUPID GroupId, 
    LPINTERNET_CACHE_ENTRY_INFO lpFirstCacheEntryInfo, 
    LPDWORD lpcbEntryInfo, 
    LPVOID lpGroupAttributes, 
    LPDWORD lpcbGroupAttributes, 
    LPVOID lpReserved);</pre>
<p>This function has multi-byte and wide-character forms distinguished by A and 
W suffixes respectively. The function is natively ANSI. The notes below (mostly) 
do not address variations for Unicode. </p>
<h3>Parameters </h3>
<p>The <span class="argument">lpszUrlSearchPattern</span> argument provides the 
address of a string that selects which cache container (or, exceptionally, containers) 
to enumerate. This argument can be <span class="constant">NULL</span> to search 
all the fixed containers, i.e., Content, Cookies and History. </p>
<p>Bits in the <span class="argument">dwFlags</span> argument vary the behaviour 
of the function, most notably to ask that some types of information not be produced 
for the enumerated entries. The following are meaningful: </p>
<table>
  <tr>
    <td>0x01 </td>
    <td>unmatched pattern that doesn’t begin with a colon selects all fixed containers
    </td>
  </tr>
  <tr>
    <td>0x02 </td>
    <td>omit all variable-sized information; <br>not valid for Unicode form </td>
  </tr>
  <tr>
    <td>0x04 </td>
    <td>omit variable-sized information except for local file name; <br>overrides 
    the 0x02 flag; <br>not valid for Unicode form </td>
  </tr>
</table>
<p>Mostly, the <span class="argument">dwFilter</span> argument confines the search 
to entries whose cache entry type matches the given filter: a bit should be set 
in the filter if entries that have that bit set in their cache entry type are wanted 
in the enumeration. </p>
<p>The <span class="argument">GroupId</span> argument confines the search to entries 
that belong to a particular group. This argument may be 0 to enumerate entries regardless 
of group membership. </p>
<p>The <span class="argument">lpFirstCacheEntryInfo</span> argument provides the 
address of a buffer that is to receive information about the first enumerated entry. 
The information is produced as a fixed-size header followed by variable-sized data. 
The <span class="argument">lpcbEntryInfo</span> argument provides the address of 
a dword whose value on input is the size, in bytes, of the buffer. On output, the 
dword at <span class="argument">lpcbEntryInfo</span> may have changed to show how 
much information has been produced into the buffer or could be (were the buffer 
sufficiently large). The <span class="argument">lpFirstCacheEntryInfo</span> argument 
can be <span class="constant">NULL</span> (unless the 0x02 or 0x04 flag is specified) 
as an explicit query for how much information is available, but the size declared 
on input must in this case be zero, else the function misbehaves. </p>
<p>The <span class="argument">lpGroupAttributes</span> and
<span class="argument">lpcbGroupAttributes</span> arguments are ignored. The
<span class="argument">lpReserved</span> argument must be <span class="constant">
NULL</span>. </p>
<h3>Return Value </h3>
<p>If successful, the function returns a handle which can then be passed to the
<span class="function">FindNextUrlCacheEntry</span> or <span class="function">FindNextUrlCacheEntryEx</span> 
functions to discover more entries and must be passed to <span class="function">
FindCloseUrlCache</span> when further enumeration is not wanted. The buffer at
<span class="argument">lpFirstCacheEntryInfo</span> contains information about the 
first entry. The dword at <span class="argument">lpcbEntryInfo</span> tells how 
much information was produced into that buffer. </p>
<p>Failure is indicated by returning <span class="constant">NULL</span>. An error 
code is available from <span class="function">GetLastError</span>. Two error codes 
are particularly important: <span class="constant">ERROR_NO_MORE_ITEMS</span> means 
the function has behaved correctly but found that no entries match the given criteria; 
and <span class="constant">ERROR_INSUFFICIENT_BUFFER</span> indicates that the function 
would have succeeded if given a buffer at least as large as now reported in the 
dword at <span class="argument">lpcbEntryInfo</span>. </p>
<h2>Behaviour </h2>
<p>The function expects to produce information in a buffer described by the
<span class="argument">lpFirstCacheEntryInfo</span> and <span class="argument">lpcbEntryInfo</span> 
arguments. If <span class="argument">lpcbEntryInfo</span> is
<span class="constant">NULL</span>, the function has no means to report how much 
memory is used (or needed) for the requested information, and so the function fails. 
The function also fails if a buffer is given at <span class="argument">lpFirstCacheEntryInfo</span> 
but its size as given through <span class="argument">lpcbEntryInfo</span> is zero. 
(Curiously, if no buffer is given, the function does not reject a non-zero size.) 
The last three arguments are all documented as reserved and the very last actually 
is checked: if <span class="argument">lpReserved</span> is not
<span class="constant">NULL</span>, the function fails. The error code in all these 
cases is <span class="constant">ERROR_INVALID_PARAMETER</span>. </p>
<!--webbot bot="Include" U-Include="_include/initglobals.htm" TAG="BODY" startspan -->

<p>If URL caching is not yet initialised, it gets initialised as part of this function. 
Among other things, this involves loading the registry configuration of all cache 
containers in the applicable registry set and creating default groups in the Content 
container. If this initialisation fails, so too does the function (having set
<span class="constant">ERROR_INTERNET_INTERNAL_ERROR</span> as the error code).
</p>

<!--webbot bot="Include" i-checksum="20759" endspan -->
<p>This function has two jobs. One is to find a URL entry that matches the search 
criteria. The other is to arrange that subsequent calls to the
<span class="function">FindNextUrlCacheEntry</span> or <span class="function">FindNextUrlCacheEntryEx</span> 
functions can find other entries that match the same search criteria. This function 
obtains memory for holding whatever needs to persist between such calls, and represents 
this memory by an opaque handle (actually a 1-based index into an array of pointers 
to such memory). If the necessary memory cannot be obtained or if a handle cannot 
be generated, the function fails (with <span class="constant">ERROR_NOT_ENOUGH_MEMORY</span> 
as the error code). </p>
<p>The search criteria are saved in this memory and thus apply to the whole enumeration. 
The flags, filter and group ID are explicit search criteria. The URL search pattern 
is also a search criterion, but indirectly. When a pattern is given, the function 
treats it as a URL for which an entry might be created, and looks through all containers, 
both fixed and extensible, in the applicable registry set, to find the container 
in which that entry would be created. In general, that container is the one container 
that the whole enumeration is restricted to. There are two exceptions. If the selected 
container is the Content container and the 0x01 flag is set, the enumeration is 
widened to the three fixed containers, in the order Content, Cookies and History. 
Enumeration of all the fixed containers is also understood if no pattern is given, 
i.e., if the <span class="argument">lpszUrlSearchPattern</span> argument is
<span class="constant">NULL</span>. </p>
<p>Container selection for a URL depends on how the URL starts. Configuration of 
URL cache containers is planned as the subject of a separate article. Particularly 
relevant here is the specification of a case-insensitive prefix. The Content container 
has no prefix. The Cookies and History containers have the prefixes “Cookie:” and 
“Visited:” respectively. Extensible containers get their prefix from the
<span class="regvalue">CachePrefix</span> value in their registry key. A URL matches 
a container if the URL begins with the container’s prefix. An unmatched URL selects 
the Content container by default, except if the URL begins with a colon: in that 
case, it would not be stored in any container, and the function fails for having 
no matching entry to describe (and so <span class="constant">ERROR_NO_MORE_ITEMS</span> 
is the error code). </p>
<h3>Enumeration </h3>
<p>Entries are enumerated in the order that their hash items appear in the container’s 
hash table. For the relevant structures, see the separate article on
<a href="../indexdat.htm">the INDEX.DAT file format</a>. Only hash items for URL 
entries are considered: hash items for redirection entries are ignored. If the search 
criteria include a group, then a hash item that is not marked for group membership 
is ignored. If a hash item does not have a valid file offset for a URL entry, it 
is freed for reuse, and then ignored. The URL entry is ignored if the search criteria 
has no filter, i.e., if <span class="argument">dwFilter</span> is zero. (Indeed, 
in this case, no entries can ever be found.) If the entry has any bit set in its 
cache entry type that is not set in the filter and is not in the
<span class="constant">INCLUDE_BY_DEFAULT_CACHE_ENTRY</span> collection (0x2200F1C0), 
it is ignored. If a group is specified for the search and the entry does not belong 
to that group, it is ignored. If the entry is in the Content container, it is ignored 
unless <span class="constant">OTHER_USER_CACHE_ENTRY</span> is set in the filter 
or the header information for the entry contains the case-insensitive characters 
~U:<span class="placeholder">username</span>, in which the placeholder stands for 
the current user’s logon name. The first entry that survives all these tests is 
considered found. If no entry survives these tests, the function fails, with
<span class="constant">ERROR_NO_MORE_ITEMS</span> as the error code. </p>
<h3>Reported Information </h3>
<p>Now that an entry is found, the function’s success or failure is essentially 
just a matter of whether information about the entry can be copied to the given 
buffer. However, there are a few quirks. </p>
<p>Believe it or not, but only now are the 0x02 and 0x04 flags rejected if called 
through the Unicode form or if the <span class="argument">lpFirstCacheEntryInfo</span> 
argument is NULL. The error code is <span class="constant">ERROR_INVALID_PARAMETER</span>.
</p>
<p>The information to be produced in the buffer is a fixed-sized header, in the 
form of an <span class="struct">INTERNET_CACHE_ENTRY_INFO</span> structure, to be 
followed by as many as four variable-sized items: </p>
<ul>
  <li>the URL name, as a null-terminated string whose address goes into the
  <span class="member">lpszSourceUrlName</span> member; </li>
  <li>the pathname for the local file, as a null-terminated string whose address 
  goes into the <span class="member">lpszLocalFileName</span> member; </li>
  <li>the header information, of no specified form, whose address and size, in bytes, 
  go into the <span class="member">lpHeaderInfo</span> and <span class="member">
  dwHeaderInfoSize</span> members; </li>
  <li>the file extension, as a null-terminated string whose address goes into the
  <span class="member">lpszFileExtension</span> member. </li>
</ul>
<p>If the entry does not have a URL name, which should not be possible, the function 
ignores it, i.e., returns to the search. A URL entry need not have the others, however. 
The function tallies how much space it requires in total for the fixed-sized header 
and whichever of the variable-sized items are both wanted by the caller and possessed 
by the entry. The information to be copied to the buffer, and thus also the space 
to be required beyond the <span class="struct">INTERNET_CACHE_ENTRY_INFO</span> 
structure, depends on the flags. If the 0x04 flag is set, then the only variable-sized 
item that is wanted is the pathname for the local file. The function then requires 
additional space for <span class="constant">MAX_PATH</span> characters, no matter 
how long the pathname turns out to be. If the 0x04 flag is clear but the 0x02 flag 
is set, then no variable-sized data at all is wanted, and thus no extra space. When 
neither flag is set, which is the ordinary case, additional space is required for 
the URL name and for as many of the other three variable-sized items as the entry 
possesses. Moreover, each item is to be dword-aligned when copied into the buffer.
</p>
<p>If the computed requirement exceeds the size of buffer, as declared through the
<span class="argument">lpcbEntryInfo</span> argument, the function fails. The error 
code in this case is <span class="constant">ERROR_INSUFFICIENT_BUFFER</span> and 
the dword at <span class="argument">lpcbEntryInfo</span> is changed so that the 
caller may know how much space is required. Importantly, in the persistent state 
accessed through the handle, markers of where the enumeration has reached are reset 
so that if the function is called again, it will resume its search from the previously 
found entry, not from this one. </p>
<p>Having established that the buffer is sufficiently large, the function copies 
each of the applicable variable-sized items in turn from the URL entry to the space 
after the <span class="struct">INTERNET_CACHE_ENTRY_INFO</span> structure and then 
fills in the structure. Most members of the <span class="struct">INTERNET_CACHE_ENTRY_INFO</span> 
are copied directly from counterparts in the URL entry. The exceptions are: </p>
<ul>
  <li>the <span class="member">dwStructSize</span> member is set to 0x50, of course;
  </li>
  <li>the <span class="member">CacheEntryType</span> member gets
  <span class="constant">STATIC_CACHE_ENTRY</span> set if the entry’s synchronisation 
  count has reached 6; </li>
  <li>the <span class="member">dwSizeHigh</span> member is set to 0; </li>
  <li>the <span class="member">ExpireTime</span> and <span class="member">LastSyncTime</span> 
  members are converted from DOS time. </li>
</ul>
<p>If an exception occurs while copying to the buffer, e.g., because only now is 
it found that the address given for the buffer is invalid for write access, the 
function not only fails, as one would hope, but sets <span class="constant">ERROR_FILE_NOT_FOUND</span> 
as the error code, which takes old jokes about cryptic error codes to new heights.
</p>
<h3>Coding Errors and Curiosities </h3>
<p>For a function that has existed so long and been documented all the while, this 
one has surprisingly many quirks. </p>
<h4>Assumed Local File </h4>
<p>If the 0x04 flag is set, then as noted above, the only variable-sized item wanted 
is the pathname for the found entry’s local file. Unfortunately, that the entry 
has a local file is merely assumed. If in fact the entry does not have a local file, 
a pathname is produced in the buffer but is spurious. Of course, this greatly reduces 
the usefulness of the 0x04 flag (not that this seems likely as the reason the flag 
is not documented). </p>
<p>The spurious pathname is partly predictable. The URL entry, as saved in its container 
file, has a member whose value is the offset from the start of the entry to the 
filename, or is zero to mean that the entry has no local file. When zero is accepted 
as the offset, the filename appears to be whatever is at the start of the URL entry. 
This is the “URL ” signature followed by a dword whose value is necessarily small 
enough that the first few bytes of the URL entry make a null-terminated string. 
Appended to the path for all the container’s local files, this phantom filename 
actually is copied to the buffer and pointed to by the <span class="member">lpszLocalFileName</span> 
member. </p>
<h4>Size But No Buffer </h4>
<p>It is already noted that when the function is called with no buffer, it does 
not insist that zero be declared as the buffer size. Not noted is what the function 
does about a non-zero size for a non-existent buffer. This anomalous combination 
isn’t even noticed until an entry has been found. If the 0x02 or 0x04 flags are 
set, then the lack of a buffer is itself an error. If the declared size is too small 
for all the information that might be produced for the entry, then the function 
complains of an insufficient buffer and all is well. But what if the declared size 
would be large enough for success had a buffer of that size actually been supplied?
</p>
<p>The response in this case is to reduce the dword at <span class="argument">lpcbEntryInfo</span> 
to the size of information that could be produced for this entry, and then to ignore 
this entry and search for another! Since there is still no buffer, this case will 
recur until an entry is found for which there is more information to copy to the 
buffer than for the entry found before it. The function will then fail with
<span class="constant">ERROR_INSUFFICIENT_BUFFER</span> as the error code but reporting 
the size required for information about the last entry that was found. This need 
not be adequate for the first entry that was found, and which would be found again 
by a repeat call that actually does provide a buffer. </p>
<h4 class="draft">String Security </h4>
<p class="draft">Some other curious coding has no consequence outside the function 
but may as well be noted as an example of how Microsoft’s introduction of string-safe 
functions is no substitute for getting programmers to think through what they’re 
doing rather than grasp mindlessly at supposed aids to security. Many components 
of Windows and Internet Explorer, and probably many other Microsoft products, were 
treated in the early 2000s to a revision in which calls to CRT functions such as
<span class="function">strlen</span> and <span class="function">strcpy</span> were 
replaced with calls to new functions such as <span class="function">StringCchLength</span> 
and <span class="function">StringCchCopy</span>. WININET appears to be no different. 
I perhaps miss the point but it seems to me that the new functions are as open to 
abuse and oversight, albeit in new ways, as are the ones they replace. Changing 
to the new functions must sometimes change good code to bad. <span class="alert">
TO BE CONTINUED</span> </p>
<h2>Availability </h2>
<p>The <span class="function">FindFirstUrlCacheEntryEx</span> function is exported 
by name (with ANSI and Unicode suffixes) from WININET version 4.71 and higher. It 
has long been documented. Supposedly, no flags are currently implemented. More importantly, 
the documentation gives the wrong error code, <span class="constant">ERROR_NO_MORE_FILES</span>, 
for the case of failure that is actually a successful discovery that no files match 
the criteria. </p>
<p>The behaviour described in this note is of version 7.0 from the original Windows 
Vista. </p>
<div class="Footer">
  <p class="Dates">This page was created on 26th September 2010 and was last modified 
  on 30th September 2010. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c10.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2010. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="5570" endspan -->
</div>

</body>

</html>
