<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EVENT_TRACE_HEADER</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <p class="alert">This page is being prepared for a substantial reworking. Some 
  content may be temporarily missing. Temporarily may turn into indefinitely. New 
  content may be more than usually defective. The page is now published only as 
  a revision in progress. Use with caution. </p>
  <h1>EVENT_TRACE_HEADER </h1>
  <p>The <span class="struct">EVENT_TRACE_HEADER</span> is one of several types 
  of fixed-size header that introduce variable-size data for events that are logged 
  through Event Tracing for Windows (ETW). As with other types of event, those that 
  begin with an <span class="struct">EVENT_TRACE_HEADER</span> accumulate first 
  in trace buffers. To have these events persist in this raw form for ready inspection, 
  configure the event tracing session to flush the trace buffers to an Event Trace 
  Log (ETL) file. </p>
  <h2>Availability </h2>
  <p>The <span class="struct">EVENT_TRACE_HEADER</span> dates from version 5.0, 
  when ETW was not yet named ETW but was arguably just a side-line to the then-new 
  and much-touted Windows Management Infrastructure (WMI). Indeed, the
  <span class="struct">EVENT_TRACE_HEADER</span> of ETW Is very similar to, though 
  certainly not the same as, the <span class="struct">WNODE_HEADER</span> of WMI.
  </p>
  <p>Since the substantial reworking of ETW for Windows Vista, the
  <span class="struct">EVENT_TRACE_HEADER</span> is largely superseded by the
  <span class="struct"><a href="../evntcons/event_header.htm">EVENT_HEADER</a></span>. 
  Events that start with an <span class="struct">EVENT_TRACE_HEADER</span> can still 
  be written, presumably to support not just old tools but also diagnostic techniques 
  that have not been entirely displaced by the supposedly new and improved. For 
  event consumption (see below), the structure is obsolete, i.e., is properly ignored 
  in favour of the later structure, unless the event consumer may run on older Windows 
  versions. </p>
  <h2>Usage </h2>
  <p>Apparently for surviving from the simpler architecture of ETW in Windows 2000, 
  the <span class="struct">EVENT_TRACE_HEADER</span> can be involved in event tracing 
  all the way from provider to consumer. </p>
  <h3>Provision </h3>
  <p>If an event begins with an <span class="struct">EVENT_TRACE_HEADER</span> when 
  seen in the trace buffers, then it typically originated with this header. The 
  usual way that it will have been provided to the ETW machinery is through the 
  documented API function <span class="function">TraceEvent</span> which takes an
  <span class="struct">EVENT_TRACE_HEADER</span> as its input. Though the similarly 
  old kernel export <span class="function">IoWMIWriteEvent</span> is documented 
  as taking a <span class="function">WNODE_HEADER</span> as its input, it can accept 
  an <span class="struct">EVENT_TRACE_HEADER</span> instead. </p>
  <h3>Consumption </h3>
  <p>The <span class="struct">EVENT_TRACE_HEADER</span> can also turn up when retrieving 
  events from the ETW machinery, even events that have some other type of trace 
  header while in the trace buffers (or ETL file). The usual way is that an event 
  consumer’s call to the documented API function <span class="function">OpenTrace</span> 
  registers one or more routines that are to be called back, typically many times 
  over, during a later call to the documented API function
  <span class="function">ProcessTrace</span>. One of these routines delivers events, 
  one on each call back. The older form of this routine presents its event as an
  <span class="struct">EVENT_TRACE</span> structure which begins with an
  <span class="struct">EVENT_TRACE_HEADER</span>. (The newer form of the routine 
  replaces these with the <span class="struct">EVENT_RECORD</span> and
  <span class="struct">EVENT_HEADER</span>, respectively.) </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">EVENT_TRACE_HEADER</span> structure is documented. 
  It has been since at least an MSDN Library dated January 2000 (albeit marked as 
  preliminary documentation). So too is the <span class="function">TraceEvent</span> 
  function that can take an <span class="struct">EVENT_TRACE_HEADER</span> as input.
  </p>
  <p>As ever, the picture for kernel-mode use is a little different. Documentation 
  that <span class="function">IoWMIWriteEvent</span> accepts an
  <span class="struct">EVENT_TRACE_HEADER</span> has always been, shall we say, 
  obscure. To this day, 10th December 2018, Microsoft’s online page for
  <span class="function">IoWMIWriteEvent</span> makes no mention of the
  <span class="struct">EVENT_TRACE_HEADER</span>. Documentation has instead always 
  been either by hint or in reverse: the programmer can follow links from the function 
  to learn that if a particular flag is set in a <span class="struct">WNODE_HEADER</span>, 
  then the latter is actually an <span class="struct">EVENT_TRACE_HEADER</span>; 
  or the programmer can know to start with the kernel-mode documentation of the
  <span class="struct">EVENT_TRACE_HEADER</span> and then learn which function can 
  write one. </p>
  <p>Microsoft’s C-language definition of the <span class="struct">EVENT_TRACE_HEADER</span> 
  is in the EVNTRACE.H header for both kernel-mode and user-mode programming, starting 
  with development kits for Windows 2000. </p>
  <h2>Layout </h2>
  <p>The <span class="struct">EVENT_TRACE_HEADER</span> is 0x30 bytes in both 32-bit 
  and 64-bit Windows in all versions that are known to have it, i.e., 5.0 and higher:
  </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">USHORT Size;</pre>
        </td>
        <td>5.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x02 </td>
        <td>
        <pre class="source">UCHAR HeaderType;
</pre>
        </td>
        <td>5.0 only </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    USHORT FieldTypeFlags;
    struct {
        UCHAR HeaderType;
        UCHAR MarkerFlags;
    };
};</pre>
        </td>
        <td>5.1 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x03 </td>
        <td>
        <pre class="source">UCHAR MarkerFlags;</pre>
        </td>
        <td>5.0 only </td>
        <td>remains at 0x03 in 5.1 and higher, <br>
        but wrapped in struct in union </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>
        <pre class="source">union {
    ULONG Version;
    struct {
        UCHAR Type;
        UCHAR Level;
        USHORT Version;
    } Class;
};</pre>
        </td>
        <td>5.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x08 </td>
        <td>
        <pre class="source">ULONGLONG ThreadId;</pre>
        </td>
        <td>5.0 only </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG ThreadId;</pre>
        </td>
        <td>5.1 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>
        <pre class="source">ULONG ProcessId;</pre>
        </td>
        <td>5.1 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>
        <pre class="source">LARGE_INTEGER TimeStamp;</pre>
        </td>
        <td>5.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x18 </td>
        <td>
        <pre class="source">union {
    GUID Guid;
    ULONGLONG GuidPtr;
};</pre>
        </td>
        <td>5.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td rowspan="2">0x28 </td>
        <td>
        <pre class="source">union {
    struct {
        ULONG ClientContext;
        ULONG Flags;
    };
    struct {
        ULONG KernelTime;
        ULONG UserTime;
    };
    ULONG64 ProcessorTime;
};</pre>
        </td>
        <td>5.0 to 5.2 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    struct {
        ULONG KernelTime;
        ULONG UserTime;
    };
    ULONG64 ProcessorTime;
    struct {
        ULONG ClientContext;
        ULONG Flags;
    };
};</pre>
        </td>
        <td>6.0 and higher </td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="struct">EVENT_TRACE_HEADER</span> developed as a specialised
  <span class="struct">WNODE_HEADER</span>. The adaptation was made overt by a comment 
  which precedes the C-language definition in EVNTRACE.H before Windows Vista:
  </p>
  <pre class="source">// Trace header for all (except kernel) events. This is used to overlay
// to bottom part of WNODE_HEADER to conserve space.</pre>
  <p>Both structures have the same size and have <span class="member">TimeStamp</span>,
  <span class="member">Guid</span>, <span class="member">ClientContext</span> and
  <span class="member">Flags</span> members at the same offsets. Functions that 
  might take either structure distinguish them from the <span class="member">Flags</span>.
  </p>
  <h3>Size </h3>
  <p>The <span class="member">Size</span> is the total, in bytes, of the fixed-size
  <span class="struct">EVENT_TRACE_HEADER</span> and all the variable-size event 
  data that follows. The WNODE_HEADER has its size as a 32-bit BufferSizeThe
  <span class="member">Size</span> is among the members that must be set on input 
  by the event provider. </p>
  <h3>Header Type and Marker Flags </h3>
  <p>The first 4 bytes have common elements in all the various
  <a href="../../api/ntwmi/traceheaders/index.htm">trace headers</a>. Some begin 
  with a 16-bit <span class="member">Size</span>, some not, but if the first four 
  bytes are taken as one 32-bit marker (which some do formally define as a member 
  named <span class="member">Marker</span>), then all types of trace header have 
  the high two bits set. For the <span class="struct">EVENT_TRACE_HEADER</span>, 
  given its particular definition of the first four bytes, this means that the high 
  two bits are necessarily set in the 8-bit <span class="member">MarkerFlags</span> 
  at offset 0x03. What distinguishes a trace header as continuing specifically as 
  an <span class="struct">EVENT_TRACE_HEADER</span> is that the 8-bit
  <span class="member">HeaderType</span> at offset 0x02 is either: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name"><col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>Implied Layout </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0A </td>
        <td><span class="constant">TRACE_HEADER_TYPE_FULL_HEADER32</span> </td>
        <td>0x30 bytes of header followed by 32-bit event data </td>
      </tr>
      <tr>
        <td>0x14 </td>
        <td><span class="constant">TRACE_HEADER_TYPE_FULL_HEADER64</span> </td>
        <td>0x30 bytes of header followed by 64-bit event data </td>
      </tr>
    </tbody>
  </table>
  <p>Microsoft’s names for these values are known from a header, named
  <a href="../../../source/inc/ntwmi.htm">NTWMI.H</a>, which might otherwise have 
  been internal to Microsoft except for possibly accidental disclsoure in the original 
  and Version 1511 editions of the WDK for Windows 10. Another otherwise unpublished 
  header, <a href="../../../source/inc/ntetw.htm">NTETW.H</a>, defines corresponding 
  masks to combine with the 16-bit <span class="member">Size</span> in the 32-bit 
  marker: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0xC00A0000 </td>
        <td><span class="constant">TRACE_HEADER_FULL32</span> </td>
      </tr>
      <tr>
        <td>0xC0140000 </td>
        <td><span class="constant">TRACE_HEADER_FULL64</span> </td>
      </tr>
    </tbody>
  </table>
  <h3>Flags </h3>
  <p>As noted above, the <span class="member">Flags</span> at offset 0x2C are shared 
  with the <span class="struct">WNODE_HEADER</span>. At first, it was only as
  <span class="member">Flags</span> of the <span class="struct">WNODE_HEADER</span> 
  that any of the applicable bits were named. A comment notes—it is still there—that
  </p>
  <pre class="source">// The second byte, except for the first bit is used exclusively for tracing</pre>
  <p>and is followed by definitions of bits in the third byte. Names that showed 
  their meaningfulness to the <span class="struct">EVENT_TRACE_HEADER</span> had 
  to wait for Windows Vista. </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Name"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>SDK Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td rowspan="2">0x00000200 </td>
        <td><span class="constant">WNODE_FLAG_USE_TIMESTAMP</span> </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td><span class="constant">TRACE_HEADER_FLAG_USE_TIMESTAMP</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00020000 </td>
        <td><span class="constant">WNODE_FLAG_TRACED_GUID</span> </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td><span class="constant">TRACE_HEADER_FLAG_TRACED_GUID</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00040000 </td>
        <td><span class="constant">WNODE_FLAG_LOG_WNODE</span> </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td><span class="constant">TRACE_HEADER_FLAG_LOG_WNODE</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00080000 </td>
        <td><span class="constant">WNODE_FLAG_USE_GUID_PTR</span> </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td><span class="constant">TRACE_HEADER_FLAG_USE_GUID_PTR</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00100000 </td>
        <td><span class="constant">WNODE_FLAG_USE_MOF_PTR</span> </td>
        <td>5.0 and higher </td>
      </tr>
      <tr>
        <td><span class="constant">TRACE_HEADER_FLAG_USE_MOF_PTR</span> </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x00200000 </td>
        <td><span class="constant">WNODE_FLAG_INTERNAL2</span> </td>
        <td>5.0 only </td>
      </tr>
      <tr>
        <td><span class="constant">WNODE_FLAG_NO_HEADER</span> </td>
        <td>5.1 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Though <span class="constant">WNODE_FLAG_USE_TIMESTAMP</span> is defined for 
  the <span class="struct">WNODE_HEADER</span> as early as version 5.0, no use of 
  it is known for the <span class="struct">EVENT_TRACE_HEADER</span> until version 
  5.1. Its effect then and after is to signify that the event is already time-stamped 
  by the event provider. Ordinarily, the <span class="member">TimeStamp</span> is 
  generated when the event is written to a trace buffer. With this flag set, the 
  input <span class="member">TimeStamp</span> is instead retained. </p>
  <p class="alert">TO BE CONTINUED </p>
  <div class="Footer">
    <p class="Dates">This page was created on 7th
    <a href="../../../../../../../new/16/12.htm">December 2016</a> and was last 
    modified on 21st <a href="../../../../../../../new/22/10.htm">October 2022</a>.
    </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
