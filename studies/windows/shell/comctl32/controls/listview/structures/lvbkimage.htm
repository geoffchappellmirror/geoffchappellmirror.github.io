<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>LVBKIMAGE</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" u-include="../../../../_include/noscript.htm" tag="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="14798" endspan -->
<h1>LVBKIMAGE </h1>
<p>This is the main structure for operating on <a href="../background.htm">List-View 
backgrounds</a>, to set either a background image or watermark, or to get information 
about them. It is used for the <span class="message">
<a href="../messages/getbkimage.htm">LVM_GETBKIMAGE</a></span> and
<span class="message"><a href="../messages/setbkimage.htm">LVM_SETBKIMAGE</a></span> 
messages and the <span class="method">
<a href="../interfaces/ilistview/getbackgroundimage.htm">GetBackgroundImage</a></span> 
and <span class="method">
<a href="../interfaces/ilistview/setbackgroundimage.htm">SetBackgroundImage</a></span> 
methods. </p>
<h2>Declaration </h2>
<pre class="source">typedef struct tagLVBKIMAGE {
    ULONG ulFlags;
    HBITMAP hbm;
    LPTSTR pszImage;
    UINT cchImageMax;
    int xOffsetPercent;
    int yOffsetPercent;
} LVBKIMAGE, *PLVBKIMAGE;</pre>
<h3>Members </h3>
<p>For the <span class="method">GetBackgroundImage</span> method and
<span class="message">LVM_GETBKIMAGE</span> message, the structure both provides 
input and receives output. For <span class="method">SetBackgroundImage</span> and
<span class="message">LVM_SETBKIMAGE</span>, the structure only provides input.
</p>
<h4>Flags </h4>
<p>Bits of the <span class="member">ulFlags</span> member determine which other 
members are valid and what they mean: </p>
<table class="Constants">
  <colgroup>
    <col class="Name"><col class="Constant"><col class="Remarks">
  </colgroup>
  <tr>
    <td><span class="constant">LVBKIF_SOURCE_MASK</span> </td>
    <td>0x03 </td>
    <td>masked bits specify source of background image; <br>
    can be meaningful on input when setting and on output when getting </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_STYLE_MASK</span> </td>
    <td>0x10 </td>
    <td>masked bits specify style of background image; <br>
    can be meaningful on input when setting and on output when getting </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_FLAG_TILEOFFSET</span> </td>
    <td>0x0100 </td>
    <td>placement is specified for first background image in tiled style; <br>
    can be meaningful on input when setting and on output when getting </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_TYPE_WATERMARK</span> </td>
    <td>0x10000000 </td>
    <td>operate on watermark (described by <span class="member">hbm</span> member);
    <br>
    always meaningful on input when getting or setting </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_FLAG_ALPHABLEND</span> </td>
    <td>0x20000000 </td>
    <td>draw watermark with alpha blend; <br>
    can be meaningful on input when setting </td>
  </tr>
</table>
<p>The <span class="constant">LVBKIF_TYPE_WATERMARK</span> bit is unusual in being 
meaningful on input when getting information. If this bit is set on input either 
when getting or setting, then the request is to get or set the watermark, rather 
than the ordinary background image. When getting, all other flags are meaningless, 
both on input and output. When setting, all other flags except
<span class="constant">LVBKIF_FLAG_ALPHABLEND</span> are invalid. The watermark 
itself is described by a bitmap handle, passed through the <span class="member">
hbm</span> member. </p>
<p>The <span class="constant">LVBKIF_FLAG_ALPHABLEND</span> bit is meaningful only 
as input when setting information, and only then if <span class="constant">LVBKIF_TYPE_WATERMARK</span> 
is also set. Its effect is to direct that the watermark be drawn with a very particular 
alpha-blending. In terms of the <span class="struct">BLENDFUNCTION</span> structure 
used for the GDI function <span class="function">GdiAlphaBlend</span>, the
<span class="member">SourceConstantAlpha</span> and <span class="member">AlphaFormat</span> 
are constrained to 0xFF and <span class="constant">AC_SRC_ALPHA</span> respectively.
</p>
<p>With <span class="constant">LVBKIF_TYPE_WATERMARK</span> clear on input, the 
request is to get or set the (ordinary) background image. The source mask is meaningful 
on input when setting and on output when getting. Bits in the source mask have the 
values: </p>
<table class="Constants">
  <colgroup>
    <col class="Name"><col class="Constant"><col class="Remarks">
  </colgroup>
  <tr>
    <td><span class="constant">LVBKIF_SOURCE_NONE</span> </td>
    <td>0x00 </td>
    <td>no background image </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_SOURCE_HBITMAP</span> </td>
    <td>0x01 </td>
    <td>background image known as bitmap handle (described by
    <span class="member">hbm</span> member) </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_SOURCE_URL</span> </td>
    <td>0x02 </td>
    <td>background image known by URL (described by <span class="member">pszImage</span> 
    member, and possibly <span class="member">cchImageMax</span>) </td>
  </tr>
</table>
<p>When no background image is indicated, all other flags and members are best regarded 
as meaningless. </p>
<p>Whether the background image is known as a bitmap handle or by a URL, the style 
mask is also meaningful on input when setting and on output when getting. Applying 
the style mask gives the values: </p>
<table class="Constants">
  <colgroup>
    <col class="Name"><col class="Constant"><col class="Remarks">
  </colgroup>
  <tr>
    <td><span class="constant">LVBKIF_STYLE_NORMAL</span> </td>
    <td>0x00 </td>
    <td>background image displayed once </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_STYLE_TILE</span> </td>
    <td>0x10 </td>
    <td>background image repeated horizontally and vertically as needed to fill 
    client area </td>
  </tr>
</table>
<p>The normal style always has additional configuration, specifically of the image’s 
placement with respect to the List-View control’s client area, which makes the
<span class="member">xOffsetPercent</span> and <span class="member">yOffsetPercent</span> 
members meaningful. </p>
<p>The tiled style has a default placement. Placement for the tiling is indicated 
if <span class="constant">LVBKIF_FLAG_TILEOFFSET</span> is set, which makes the
<span class="member">xOffsetPercent</span> and <span class="member">yOffsetPercent</span> 
members meaningful. Note that <span class="constant">LVBKIF_FLAG_TILEOFFSET</span> 
can be meaningful only if given in combination with <span class="constant">LVBKIF_STYLE_TILE</span>.
</p>
<h4>Bitmap Handle </h4>
<p>The <span class="member">hbm</span> member passes the bitmap handle for either 
the ordinary background image or watermark. It is meaningful on input when setting:
</p>
<ul>
  <li>the watermark, if <span class="constant">LVBKIF_TYPE_WATERMARK</span> is set 
  in the input <span class="member">ulFlags</span>; </li>
  <li>the background image, if the source bits in the input <span class="member">
  ulFlags</span> mask to <span class="constant">LVBKIF_SOURCE_HBITMAP</span>.
  </li>
</ul>
<p>On output when getting, the <span class="member">hbm</span> member describes:
</p>
<ul>
  <li>the watermark, if <span class="constant">LVBKIF_TYPE_WATERMARK</span> was 
  set in the input <span class="member">ulFlags</span>; </li>
  <li>the background image, if the source bits in the output
  <span class="member">ulFlags</span> mask to <span class="constant">LVBKIF_SOURCE_HBITMAP</span>.
  </li>
</ul>
<p>In all other cases, the <span class="member">hbm</span> member is meaningless.
</p>
<h4>URL </h4>
<p>The <span class="member">pszImage</span> and <span class="member">cchImageMax</span> 
members pass the address and size (in characters) of a URL for the ordinary background 
image. They are irrelevant if <span class="constant">LVBKIF_TYPE_WATERMARK</span> 
is set in <span class="member">ulFlags</span> on input, whether getting or setting. 
Their have no meaning on output, except from retaining their input values. </p>
<p>For input when getting, both members matter if the List-View turns out to have 
a background image that was set through a URL. This case is indicated when the source 
bits in the output <span class="member">ulFlags</span> mask to
<span class="constant">LVBKIF_SOURCE_URL</span>. If failure in this case would be 
acceptable, it suffices to initialise <span class="member">pszImage</span> as NULL.
</p>
<p>For input when setting, only <span class="member">pszImage</span> matters and 
only then if the source bits in the input <span class="member">ulFlags</span> mask 
to <span class="constant">LVBKIF_SOURCE_URL</span>. </p>
<h4>Offsets </h4>
<p>The <span class="member">xOffsetPercent</span> and <span class="member">yOffsetPercent</span> 
members describe the placement of the background image. They are irrelevant if
<span class="constant">LVBKIF_TYPE_WATERMARK</span> is set in
<span class="member">ulFlags</span> on input, whether getting or setting. Otherwise, 
they can be meaningful on input when setting and on output when getting. Interpretation 
varies with the style bits in <span class="member">ulFlags</span> on input or output, 
respectively. </p>
<p>For the normal style, indicated when the style bits are
<span class="constant">LVBKIF_STYLE_NORMAL</span>, placement is relative to the 
unscrolled client area, meaning here the client area as would be seen were the content 
scrolled fully to the left and top. The <span class="member">xOffsetPercent</span> 
and <span class="member">yOffsetPercent</span> values are expressed as a percentage 
of the space that would be available to the left and top, respectively, of the image 
were the image placed at the bottom right. Calculating the percentages then gives 
the offsets to the right and bottom from the top left. Thus, </p>
<pre class="source">x = (client.right - image.cx) * xOffsetPercent / 100 + scroll.x;
y = (client.bottom - image.cy) * yOffsetPercent / 100 + scroll.y;</pre>
<p>where <span class="argument">x</span> and <span class="argument">y</span> are 
client coordinates for the top left of the background image,
<span class="argument">client</span> is a <span class="struct">RECT</span> for the 
client area (in client coordinates), <span class="argument">image</span> is a
<span class="struct">SIZE</span> for the background image, and
<span class="argument">scroll</span> is a <span class="struct">POINT</span> for 
the top left of the content (again in client coordinates). Of particular interest 
is that 0, 50 and 100 align the top left of the image with the top left of the unscrolled 
client area, the centre with the centre and the bottom right with the bottom right. 
The arithmetic is signed, and handles images larger than the client area and percentages 
outside the range 0 to 100. </p>
<p>For a background image in the tiled style, indicated when the style bits are
<span class="constant">LVBKIF_STYLE_TILE</span>, the <span class="member">xOffsetPercent</span> 
and <span class="member">yOffsetPercent</span> are meaningful only in combination 
with <span class="constant">LVBKIF_FLAG_TILEOFFSET</span>. Their values are offsets 
from the top left of the image to the point that is to be drawn at the top left 
of the client area (or of the unscrolled client area if <span class="regvalue">ListviewScrollOver</span> 
is disabled in the <a href="../registry.htm">List-View registry settings</a>).
</p>
<h2>Applicable Versions </h2>
<p>The <span class="struct">LVBKIMAGE</span> structure has both ANSI and Unicode 
forms. Both are meaningful to the NT builds of COMCTL32 in versions 4.71 and higher, 
but the Unicode form is not supported by the Windows builds until version 5.80.
</p>
<p>Though the structure has not changed since version 4.71, some
<span class="member">ulFlags</span> bits have version dependencies. The following 
table lists the earliest COMCTL32 version that recognises the corresponding bit.
</p>
<table>
  <tr>
    <td><span class="constant">LVBKIF_FLAG_TILEOFFSET</span> </td>
    <td>6.00 </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_TYPE_WATERMARK</span> </td>
    <td>6.00 </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_FLAG_ALPHABLEND</span> </td>
    <td>6.10 </td>
  </tr>
</table>
<p>The <span class="constant">LVBKIF_SOURCE_HBITMAP</span> flag is known to versions 
4.71 and higher, but the coding before version 6.00 is dysfunctional. The early 
versions always return zero, as if for failure, when sent an
<span class="message">LVM_SETBKIMAGE</span> with this flag. This is only appropriate, 
since these versions of COMCTL32 have no code for drawing a background image from 
the given bitmap handle. However, it would not be quite correct to say that these 
versions leave the feature unimplemented. Despite the failure, COMCTL32 does take 
ownership of the bitmap handle. Subsequent <span class="message">LVM_GETBKIMAGE</span> 
messages report this bitmap handle as being in use for the background image, until 
an <span class="message">LVM_SETBKIMAGE</span> induces COMCTL32 to delete the bitmap 
handle. </p>
<p>The ANSI forms of the <span class="message">LVM_GETBKIMAGE</span> and
<span class="message">LVM_SETBKIMAGE</span> messages behave as if the
<span class="constant">LVBKIF_TYPE_WATERMARK</span> bit is clear. </p>
<div class="Footer">
  <p class="Dates">This page was created on 29th April 2008 and was last modified 
  on 26th May 2008. </p>
  <!--webbot bot="Include" u-include="../../../../_include/c08.htm" tag="BODY" startspan -->

<p class="Copyright">Copyright © 2008. Geoff Chappell. All rights reserved.
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="6977" endspan -->
</div>

</body>

</html>
