<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Dynamic Pointer Arrays</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="14798" endspan -->
<h1>Dynamic Pointer Arrays </h1>
<p>From the very start, with version 3.50, even before the original Windows 95, 
COMCTL32 provided a set of functions for working with arrays of pointers as a way 
to manage ordered lists of arbitrary items. Apart from adding a handful of functions 
in version 4.71 and another in version 6.10, the interface has since been stable:
</p>
<ul>
  <li><span class="doc0506 function"><a href="clone.htm">DPA_Clone</a></span> </li>
  <li><span class="settlement function"><a href="create.htm">DPA_Create</a></span> </li>
  <li><span class="doc0506 function"><a href="createex.htm">DPA_CreateEx</a></span> </li>
  <li><span class="settlement function"><a href="deleteallptrs.htm">DPA_DeleteAllPtrs</a></span> </li>
  <li><span class="settlement function"><a href="deleteptr.htm">DPA_DeletePtr</a></span> </li>
  <li><span class="settlement function"><a href="destroy.htm">DPA_Destroy</a></span> </li>
  <li><span class="settlement function"><a href="destroycallback.htm">DPA_DestroyCallback</a></span> (4.71) </li>
  <li><span class="settlement function"><a href="enumcallback.htm">DPA_EnumCallback</a></span> (4.71) </li>
  <li><span class="settlement function"><a href="getptr.htm">DPA_GetPtr</a></span> </li>
  <li><span class="doc0506 function"><a href="getptrindex.htm">DPA_GetPtrIndex</a></span> </li>
  <li><span class="function"><a href="getsize.htm">DPA_GetSize</a></span> (6.10) </li>
  <li><span class="doc06 function"><a href="grow.htm">DPA_Grow</a></span> </li>
  <li><span class="settlement function"><a href="insertptr.htm">DPA_InsertPtr</a></span> </li>
  <li><span class="doc05 function"><a href="loadstream.htm">DPA_LoadStream</a></span> (4.71) </li>
  <li><span class="doc0506 function"><a href="merge.htm">DPA_Merge</a></span> (4.71) </li>
  <li><span class="doc05 function"><a href="savestream.htm">DPA_SaveStream</a></span> (4.71) </li>
  <li><span class="settlement function"><a href="search.htm">DPA_Search</a></span> </li>
  <li><span class="settlement function"><a href="setptr.htm">DPA_SetPtr</a></span> </li>
  <li><span class="settlement function"><a href="sort.htm">DPA_Sort</a></span> </li>
</ul>
<p>At the most abstract, a DPA is an ordered list of arbitrary items. The storage, 
lifetime and internal structure of an item are no concern to the list. An item can 
appear in any number of lists simultaneously. Items are put into a list only by 
reference: each item is represented by a pointer. Items are ordered within the list 
by keeping the pointers in an array. Memory for this array of pointers grows and 
shrinks as items are added or removed—hence the name Dynamic Pointer Array. </p>
<p>The <span class="function">DPA_Create</span> and <span class="function">DPA_CreateEx</span> 
functions set up an empty list, with no memory yet allocated for a pointer array, 
but with a choice of initial size for the allocation unit by which memory for the 
pointer array can grow or shrink. The <span class="function">DPA_Grow</span> function 
forces memory to be found for at least a given size of pointer array (and may increase 
the allocation unit). The <span class="function">DPA_GetSize</span> function reports 
how much memory is presently held for the array. </p>
<p>The <span class="function">DPA_Clone</span> function prepares a list with the 
same items in the same order as another list. The <span class="function">DPA_LoadStream</span> 
function creates a list of items by reading from a stream such as written by the
<span class="function">DPA_SaveStream</span> function. The
<span class="function">DPA_Merge</span> function blends the items of one list into 
another. </p>
<p>The <span class="function">DPA_Destroy</span> and <span class="function">DPA_DestroyCallback</span> 
functions destroy a list (though not, of course, the items that were listed in it).
</p>
<p>Items are referenced within a list by giving their 0-based index in the current 
ordering. The <span class="function">DPA_GetPtr</span> function retrieves an item 
from its index. Its inverse of sorts is <span class="function">DPA_GetPtrIndex</span>, 
which finds an index for an item. The <span class="function">DPA_EnumCallback</span> 
function enumerates the list by calling a user-supplied “callback” function for 
each item in turn. Through similar means, the <span class="function">DPA_Search</span> 
function either finds an item in the list or finds where the item would appear, 
and the <span class="function">DPA_Sort</span> function reorders whatever items 
are already in the list. </p>
<p>The <span class="function">DPA_InsertPtr</span> and <span class="function">DPA_SetPtr</span> 
functions put an item on the list. The <span class="function">DPA_DeletePtr</span> 
function removes an item from the list. The <span class="function">DPA_DeleteAllPtrs</span> 
function empties the list. </p>
<h2>Documentation Status </h2>
<p>Though 13 of the 19 DPA functions date from as far back as Win32s, Windows NT 
3.51 and the original Windows 95, and all but one of the others from Internet Explorer 
4.0 (released in 1997), none were documented until late 2002 as
<a target="_top" href="http://msdn.microsoft.com/library/ms807073.aspx">Settlement 
Program Interfaces</a>. Even then, Microsoft documented only 11, and declared these 
as requiring Windows 2000 as the minimum operating system. </p>
<!--webbot bot="Include" U-Include="../_include/baredoc.htm" TAG="BODY" startspan -->

<p>As with much of the documentation that results from that settlement, Microsoft’s 
effort is extraordinarily grudging and miserly. This documentation comes with no 
overview of the functionality. Barely all that is offered is that for each function, 
such little information as a competent reader might discern from uncommented C-language 
prototypes is repackaged in the standard form of MSDN documentation. The C-language 
prototypes anyway do not seem to have been released (in COMMCTRL.H, as supplied 
with the Platform SDK) until 2003. </p>

<!--webbot bot="Include" i-checksum="37146" endspan -->
<p>For compliance with Section III.D of the
<a target="_top" href="http://www.usdoj.gov/atr/cases/f200400/200457.htm">Final 
Judgment</a> in a well-publicised anti-trust suit by various U.S. governments, Microsoft 
must document all API functions that are implemented in components of Windows and 
used by components of so-called Microsoft Middleware and particularly of Internet 
Explorer. Of the 18 pre-existing DPA functions, 15 are used by SHDOCVW.DLL, i.e., 
by the essence of Internet Explorer. Another, <span class="function">DPA_CreateEx</span>, 
is used by WEBCHECK.DLL and one more, <span class="function">DPA_GetPtrIndex</span>, 
by MSIEFTP.DLL. Only one DPA function, <span class="function">DPA_Grow</span>, is 
plausibly an internal Windows API, whose only known use is by other components of 
Windows that are not components of anything that the judgement defines as a Microsoft 
Middleware Product. </p>
<p>How then can Microsoft possibly have come up with its selection of only 11 to 
document for the settlement? On what grounds did Microsoft omit
<span class="function">DPA_Clone</span>, <span class="function">DPA_CreateEx</span>,
<span class="function">DPA_GetPtrIndex</span>, <span class="function">DPA_LoadStream</span>,
<span class="function">DPA_Merge</span> and <span class="function">DPA_SaveStream</span>? 
Did the relevant compliance authorities call Microsoft to account for such omission? 
If so, when, and where is the public record? If not, then on what grounds? </p>
<h3>Post-Settlement Documentation </h3>
<p>In April 2005, apparently after a contributor to a
<a target="_top" href="http://blogs.msdn.com/dmassy/archive/2005/03/22/400689.aspx">
blog by Dave Massy</a> (at Microsoft) cited <span class="function">DPA_LoadStream</span> 
as a counter-example to Dave Massy’s insistence that all Windows API functions used 
by Internet Explorer are now documented, Microsoft added <span class="function">
DPA_LoadStream</span> and <span class="function">DPA_SaveStream</span> to the list 
of DPA functions that Microsoft has condescended to document. As far as I know, 
Microsoft has not troubled to explain what principle guided the original selection 
of functions to document as Settlement Program Interfaces, nor to explain how or 
why these two were omitted for so long. </p>
<p>Note also how specific is Microsoft’s attention to functions that may need to 
be documented for the settlement. The calls to <span class="function">DPA_LoadStream</span> 
and <span class="function">DPA_SaveStream</span> are not even 500 bytes apart in 
the SHDOCVW executable and are implemented in the same source file. Between them, 
and therefore surely hard to miss in even a half-serious attempt to meet obligations, 
is a call to <span class="function">DPA_Merge</span>. This function was literally 
over-looked in Microsoft’s supposedly great effort at compliance with the settlement.
</p>
<p>Four more DPA functions got documented still later, possibly in 2005, but certainly 
by the August 2006 edition of the MSDN Library on CD. These newly documented functions 
are <span class="function">DPA_Clone</span>, <span class="function">DPA_CreateEx</span>,
<span class="function">DPA_GetPtrIndex</span> and (finally)
<span class="function">DPA_Merge</span>. All are said correctly to date from Windows 
95, except that for <span class="function">DPA_Merge</span> Microsoft sticks to 
the line about Windows 2000 being the minimum. For three of the four, the documentation 
is said to be “preliminary and subject to change” (which warning has been removed 
in time for the Windows Vista SDK dated January 2007). </p>
<p>Of the DPA functions that existed at the time of the settlement—indeed, of the 
original DPA functions from 1995—the last got documented even more recently, just 
in time for the the Windows Vista Software Development Kit (SDK) in January 2007. 
Through who could know what reasoning, <span class="function">DPA_Grow</span> is 
there said to have Windows Vista as the minimum operating system. </p>
<h3>Internet Explorer 7 </h3>
<p>Whether the post-settlement documentation was a low-profile correction of oversight 
may never be known. In some very strict sense that probably only lawyers can understand 
while keeping a straight face, it is now only of historical interest, not because 
the functions all eventually did get documented but because Microsoft has now arranged 
that Internet Explorer no longer calls the DPA functions in COMCTL32. </p>
<p>Starting with Internet Explorer 7, including as supplied with Windows Vista, 
Internet Explorer still uses the DPA functions but it doesn’t call them in COMCTL32. 
It instead calls copies that are built into a new Internet Explorer module named 
IERTUTIL. The code in COMCTL32 and IERTUTIL is exactly the same. Indeed, the DPA 
functions are all built into a statically linked library, which Microsoft’s symbol 
files name as comctl32_v6_static.lib. COMCTL32 and IERTUTIL each acquire the same 
code for the same DPA functions from this same library. But since Internet Explorer 
calls the copies in IERTUTIL, these previously undocumented Windows functions in 
COMCTL32 are no longer being used by Internet Explorer. Some would call this a sleight 
of hand. That it appears to have been sanctioned by the courts, wittingly or not, 
is to the shame of everyone involved. </p>
<h2>Alternative Documentation </h2>
<p>To demonstrate what might reasonably be expected of Microsoft, with all its resources 
and all its talk of taking its obligations seriously, I returned in 2005 to a documentation 
sample that I prepared in 1997 for the 13 original DPA functions. I have extended 
this to the remaining functions (that were all introduced with Internet Explorer 
4.0) and have updated it, both to match Microsoft’s nomenclature and to fit the 
format that I have used throughout this study of the Windows shell. </p>
<div class="Footer">
  <!--webbot bot="Include" U-Include="../../../../_include/c0510.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2010. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="4693" endspan --></div>

</body>

</html>
