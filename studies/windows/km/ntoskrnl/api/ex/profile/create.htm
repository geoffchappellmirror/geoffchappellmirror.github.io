<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>NtCreateProfile</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>NtCreateProfile </h1>
<p>This function creates an object for profiling a process’s execution within a 
specified range of addresses. </p>
<h2>Declaration </h2>
<pre class="source">NTSTATUS 
NtCreateProfile (
    HANDLE *ProfileHandle, 
    HANDLE Process, 
    PVOID ProfileBase, 
    SIZE_T ProfileSize, 
    ULONG BucketSize, 
    ULONG *Buffer, 
    ULONG BufferSize, 
    <a href="../../ke/profobj/kprofile_source.htm">KPROFILE_SOURCE</a> ProfileSource, 
    KAFFINITY Affinity);</pre>
<p>in version 3.51 and higher, but </p>
<pre class="source">NTSTATUS 
NtCreateProfile (
    HANDLE *ProfileHandle, 
    HANDLE Process, 
    PVOID ProfileBase, 
    SIZE_T ProfileSize, 
    ULONG BucketSize, 
    ULONG *Buffer, 
    ULONG BufferSize);</pre>
<p>in versions 3.10 and 3.50. </p>
<h3>Parameters </h3>
<!--webbot bot="Include" U-Include="_include/create_common.htm" TAG="BODY" startspan -->

<p>The <span class="argument">ProfileHandle</span> argument is the address of a 
variable that is to receive a handle to the created <a href="eprofile.htm">profile 
object</a>. This handle can then be given to the <span class="function">
<a href="start.htm">NtStartProfile</a></span> and <span class="function">
<a href="stop.htm">NtStopProfile</a></span> functions to start and stop the profiling 
that this function sets up. </p>
<p>The <span class="argument">Process</span> argument limits the profiling to a 
specified process. This argument can be <span class="constant">NULL</span> to profile 
globally. </p>
<p>The <span class="argument">ProfileBase</span> and <span class="argument">ProfileSize</span> 
arguments are respectively the address and size, in bytes, of a region of address 
space to profile. The 32-bit builds allow a special case in which the
<span class="argument">ProfileBase</span> is instead a segment address: this applies 
if the <span class="argument">BucketSize</span> argument is zero. </p>
<p>The <span class="argument">BucketSize</span> argument selects a granularity for 
the profiling. Think of the profiled region as an array of buckets. Profiling produces 
a count of executions that are discovered within each bucket. The function supports 
buckets whose size in bytes is a power of two. As an argument, the
<span class="argument">BucketSize</span> is not in bytes but is instead the logarithm 
base 2 of the size in bytes. </p>
<p>The <span class="argument">Buffer</span> and <span class="argument">BufferSize</span> 
arguments are respectively the address and size, in bytes, of a buffer that is to 
receive the <span class="type">ULONG</span> execution counts for successive buckets 
while profiling is started but not stopped. </p>
<p>The <span class="argument">ProfileSource</span> argument limits the profiling 
to the specified source. </p>

<!--webbot bot="Include" endspan i-checksum="10106" -->
<p>The <span class="argument">Affinity</span> argument limits the profiling to the 
specified processors in the current processor group. Modern versions require that 
the specified processors all be active, except that if this argument is -1 it stands 
for all the active processors in the current processor group, whichever they happen 
to be. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../../_include/ntstatus.htm" TAG="BODY" startspan -->

<p>The function returns <span class="constant">STATUS_SUCCESS</span> if successful, 
else a negative error code. </p>

<!--webbot bot="Include" endspan i-checksum="8" -->
<h2>Availability </h2>
<p>The <span class="function">NtCreateProfile</span> function and its alias
<span class="function">ZwCreateProfile</span> are exported by name from NTDLL in 
version 3.10 and higher. In kernel mode, where <span class="function">ZwCreateProfile</span> 
is a stub and <span class="function">NtCreateProfile</span> is the implementation, 
neither is exported. </p>
<h2>Documentation Status </h2>
<p>Neither <span class="function">NtCreateProfile</span> nor its alias is documented. 
As <span class="function">ZwCreateProfile</span>, it is declared in the ZWAPI.H 
file from an Enterprise edition of the Windows Driver Kit (WDK) for Windows 10.
</p>
<p>Unusually for native API functions, no repackaging of <span class="function">
NtCreateProfile</span>, documented or not, is known in any higher-level user-mode 
module that is distributed as standard with Windows. </p>
<h2>Behaviour </h2>
<p>In version 6.1 and higher, the <span class="function">NtCreateProfile</span> 
function is superseded by <span class="function"><a href="createex.htm">NtCreateProfileEx</a></span>, 
which is explicitly aware of processor groups. The old function is essentially the 
new but with the given <span class="type">KAFFINITY</span> translated to a single-element
<span class="struct">GROUP_AFFINITY</span> array. </p>
<h3>Wow64 </h3>
<p>The preceding description of the old <span class="function">NtCreateProfile</span> 
in terms of the new <span class="function">NtCreateProfileEx</span> might pass as 
complete for versions 6.1 and higher, except for a quirk concerning the interpretation 
of -1 for the <span class="argument">Affinity</span> in a 32-bit call on 64-bit 
Windows. </p>
<p>From its beginning in version 6.1, the new <span class="function">NtCreateProfileEx</span> 
requires that the caller specify only active processors (else the function fails, 
returning <span class="constant">STATUS_INVALID_PARAMETER</span>). Before version 
6.1, the old <span class="function">NtCreateProfile</span> allows that bits in the
<span class="argument">Affinity</span> can be set for processors that are not active. 
The translation from old to new in version 6.1 and higher accommodates this difference 
to some extent by recognising that -1, as the mask in which all bits are set, will 
most likely have been intended by callers not as specifying exactly the first 32 
or 64 processors but as standing for all processors whether active or not. When 
the kernel translates the <span class="type">KAFFINITY</span> to a
<span class="struct">GROUP_AFFINITY</span> for the common implementation, it recognises 
-1 as having this special meaning and looks up the active processors, via
<span class="function">KeQueryGroupAffinity</span>, on behalf of the caller. </p>
<p>However, this interpretation of -1 for the <span class="argument">Affinity</span> 
argument is not built in to WOW64.DLL. When it translates a 32-bit caller’s
<span class="function">NtCreateProfile</span> for the 64-bit kernel, it merely widens 
the 32-bit <span class="type">KAFFINITY</span> to a 64-bit <span class="type">KAFFINITY</span>. 
The 32-bit 0xFFFFFFFF, intended as all processors, becomes a 64-bit 0x00000000FFFFFFFF, 
interpreted by the kernel as specifically the first 32 processors. Unless the current 
processor group actually does have those 32 active processors, the 32-bit
<span class="function">NtCreateProfile</span> with -1 for <span class="argument">
Affinity</span> fails though a 64-bit call would have succeeded. </p>
<h3>Historical Differences </h3>
<p>Before version 6.1, the function behaves differently from the later
<span class="function">NtCreateProfileEx</span> in several respects. (For behaviour 
that is the same, look to the separate documentation of <span class="function">NtCreateProfileEx</span> 
and read as if the latter existed earlier.) </p>
<h4>Profile All Processors </h4>
<p>As noted above, the original <span class="function">NtCreateProfile</span> does 
not require that the set bits in <span class="argument">Affinity</span> select only 
active processors. To call the function with -1 for <span class="argument">Affinity</span> 
to mean all processors is only natural, and is explicitly supported in later versions 
when translating the <span class="type">KAFFINITY</span> to a
<span class="struct">GROUP_AFFINITY</span> for <span class="function">NtCreateProfileEx</span>. 
However, versions before 6.1 can end up profiling all processors for other values 
of <span class="argument">Affinity</span> too—most notably zero, which might otherwise 
be rejected immediately as leaving no profiling to be done. </p>
<p>This happens because the <span class="function">NtCreateProfile</span> function 
does not itself interpret <span class="argument">Affinity</span> but merely transfers 
it to the created profile object. It is not acted on until each subsequent
<span class="function">NtStartProfile</span>. Originally, a special case was made 
only for zero, as meaning that profiling starts for all processors that are active 
at the time. This had the defect that if a non-zero <span class="argument">Affinity</span> 
selected no active processor, profiling would start but uselessly, with no chance 
of incrementing any execution count. The correction, in the version 4.0 from Windows 
NT 4.0 SP4, is that any <span class="argument">Affinity</span> that selects no active 
processor is instead interpreted as selecting all. </p>
<h4>Parameter Validation Errors </h4>
<p>The version 4.0 from Windows NT SP4 also corrected two coding oversights in parameter 
validation. </p>
<p>Earlier versions do not check that <span class="argument">BufferSize</span> is 
non-zero. Implications are not known. </p>
<p>When zero is given as the <span class="argument">BucketSize</span> so that the
<span class="argument">ProfileBase</span> is instead interpreted as a segment address, 
a non-zero <span class="argument">BucketSize</span> is computed from the
<span class="argument">ProfileSize</span> and <span class="argument">BufferSize</span>. 
This computation depends on <span class="argument">BufferSize</span> to be at least 
four. The early versions, however, do not check. A smaller
<span class="argument">BufferSize</span> induces a divide-by-zero. </p>
<div class="Footer">
  <p class="Dates">This page was created on 23rd
  <a href="../../../../../../../new/16/12.htm">December 2016</a> and was last modified 
  on 13th June 2018. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1618.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2018. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5013" -->
</div>

</body>

</html>
