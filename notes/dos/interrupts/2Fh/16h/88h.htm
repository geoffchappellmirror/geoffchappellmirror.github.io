<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Interrupt 2Fh Function 1688h</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/notes.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/notes.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript Header" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="20600" -->
<div class="Main">
  <h1>Interrupt 2Fh Function 1688h </h1>
  <p>With this function, a client of the DOS Protected Mode Interface (DPMI) obtains 
  a selector to the client’s Local Descriptor Table (LDT). The selector can then 
  be used for reading and editing LDT entries without having to call the DPMI’s
  <span class="instruction">int 31h</span> functions for selector management. The 
  subfunction number, 88h, is defined symbolically as <span class="constant">W386_Get_LDT_Base_Sel</span> 
  in a header named INT2FAPI.INC which Microsoft distributed with the Device Driver 
  Kit at least as early as for Windows 3.1. </p>
  <p>Among Microsoft’s DPMI hosts, <span class="instruction">int 2Fh</span> function 
  1688h is implemented by both the DOS extenders that Microsoft distributed with 
  Windows: </p>
  <ul>
    <li>DOSX.EXE from both Windows 3.0 and 3.1; </li>
    <li>the Virtual Machine Manager (VMM) from Windows 3.0 only. </li>
  </ul>
  <p>For Windows 3.1, <span class="instruction">int 2Fh</span> function 1688h was 
  superseded by <a href="8Ah.htm"><span class="instruction">int 2Fh</span> function 
  168Ah</a> in both implementations. </p>
  <h2>Parameters </h2>
  <p>The function uses registers for both input and output. In the intended circumstances, 
  it is called by a DOS program that is already executing in protected mode as a 
  DPMI client. </p>
  <h3>Input </h3>
  <table>
    <tbody>
      <tr>
        <td><span class="register">ax</span> </td>
        <td>1688h </td>
      </tr>
      <tr>
        <td><span class="register">bx</span> </td>
        <td>0BADh </td>
      </tr>
    </tbody>
  </table>
  <h3>Success </h3>
  <table>
    <tbody>
      <tr>
        <td><span class="register">ax</span> </td>
        <td>0000h </td>
      </tr>
      <tr>
        <td><span class="register">bx</span> </td>
        <td>selector for caller’s LDT </td>
      </tr>
    </tbody>
  </table>
  <h2>Behaviour </h2>
  <p>Though the interface itself would seem to allow that different DPMI clients, 
  if the host supports them, can be given different selectors, neither of the known 
  implementations does so. For DOSX, the selector is hard-coded: 0085h in Windows 
  3.0 but 009Bh in Windows 3.1. The VMM allocates one selector during the VMM’s 
  initialisation and returns this to all DPMI clients in all virtual machines for 
  the remainder of the VMM’s execution. What the selector’s numerical value is fixed 
  to can vary for different executions of the VMM, presumably to discourage programmers 
  from thinking to hard-code any one observed value. The particular implementation 
  constrains the selector to the range 0085h to 00FDh inclusive. The variability 
  is obtained from the timer tick that the BIOS maintains at the real-mode address 
  0040:006C. </p>
  <p>The interface’s usefulness surely lies in what the returned selector is expected 
  to address, which is the caller’s LDT. The VMM allows that this LDT can move and 
  can grow (but not shrink). </p>
  <p>The interface looks like it does not itself specify the Table Indicator (TI) 
  or Requested Privilege Level (RPL) bits in the selector’s numerical value or perhaps 
  even the Descriptor Privilege Level (DPL) or Type bits in the selected descriptor. 
  If anything, flexibility on these points is intended: for instance, a DPMI host 
  might restrict one client just to reading its LDT but trust another with both 
  read and write access to its. As it happens, both the known implementations from 
  Windows 3.0 return an LDT selector that requests ring 1 access and that the selected 
  descriptor grants ring 1 access to the corresponding segment as read/write data. 
  See that the one known implementation in Windows 3.1 changes to a GDT selector 
  with ring 3 access. </p>
  <h4>Other Exposure </h4>
  <p>This function is evidently an early form of what was later developed (or formalised) 
  as a vendor-specific extension of the DPMI. Starting with Windows 3.1, both DOSX 
  and the VMM expose their LDT self-selector through the MS-DOS Extensions API Entry 
  Point whose address is produced by <span class="instruction">int 2Fh</span> function 
  168Ah. </p>
  <p>The same selector that these functions return to protected-mode DPMI clients 
  is also given to any Virtual Device Driver (VxD) that calls the VMM service
  <span class="function">_Allocate_LDT_Selector</span>. The allocated selector, 
  which is the service’s immediate reason for existence, is returned in
  <span class="register">ax</span> (if the service is successful) but opportunity 
  is taken to use <span class="register">edx</span> for a general description of 
  the LDT. The self-selector is returned in the low word. The high word has the 
  LDT’s current capacity as a count of selectors. Documentation notes that “Although 
  this service returns a selector to the LDT, virtual devices should
  <span class="emphasis">not</span> attempt to edit the LDT directly.” </p>
  <h3>Quirks </h3>
  <p>Possibly just by not explicitly excluding the case, the VMM has
  <span class="instruction">int 2Fh</span> function 1688h succeed even when called 
  by virtual-8086 code. The returned selector is not immediately useful. DOSX, by 
  contrast, implements the function only in protected mode. </p>
  <h2>Known Use </h2>
  <p>The one known user is the Windows 3.0 KRNL386.EXE. No matter what’s said to 
  the contrary in both <span class="citation">Undocumented Windows</span> (ISBN 
  0-201-60834-0) on page 203 and <span class="citation">Windows Internals</span> 
  (ISBN 0-201-62217-3) on page 8, the KRNL386.EXE from Windows 3.0 starts as a DOS 
  program with the real-mode addressing of virtual-8086 execution under the VMM. 
  After stepping up to protected mode with the help of <span class="instruction">
  int 2Fh</span> function 1687h, it calls <span class="instruction">int 2Fh</span> 
  function 1688h to obtain a selector to its LDT. Failure is fatal, though curiously 
  the complaint is of being “Unable to enter Protected Mode”. </p>
  <p>With success of <span class="instruction">int 2Fh</span> function 1688h enforced 
  during initialisation, code throughout the Windows 3.0 KRNL386 takes as granted 
  that it has this selector for easily reading and editing the LDT. The KRNL386 
  from Windows 3.1 and higher requires that the function’s more complicated replacement,
  <span class="instruction">int 2Fh</span> function 168Ah, succeeds but not that 
  the next step produces a suitable selector. Some KRNL386 code was updated to fall 
  back to using <span class="instruction">int 31h</span> functions if the selector 
  was not obtained, but much was not. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 27th
    <a href="../../../../../new/21/12.htm">December 2021</a> and was last modified 
    on 26th January 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c2122.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2021-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4739" -->
  </div>
</div>

</body>

</html>
