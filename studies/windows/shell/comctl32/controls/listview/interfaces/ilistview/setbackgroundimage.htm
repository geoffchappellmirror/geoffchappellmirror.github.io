<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SetBackgroundImage</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js">
</script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js">
</script>
<script type="text/javascript" src="../../../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="58008" endspan -->
<!--webbot bot="Include" U-Include="../../../../../_include/preview.htm" startspan -->

<div class="Header">
  <p class="alert">CURRENT WORK ITEM - PREVIEW ONLY </p>
</div>

<!--webbot bot="Include" i-checksum="8381" endspan -->
<h1>SetBackgroundImage </h1>
<p>This method of the <span class="interface"><a href="index.htm">IListView</a></span> 
interface sets the background image or watermark of a List-View control. </p>
<h2>Declaration </h2>
<pre class="source">HRESULT SetBackgroundImage (const PLVBKIMAGEW plvbki);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">plvbki</span> argument provides the address of an
<span class="struct"><a href="../../structures/lvbkimage.htm">LVBKIMAGEW</a></span> 
structure that describes the desired background. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../_include/hresult.htm" TAG="BODY" startspan -->

<p>The method returns zero for success, else an error code. </p>

<!--webbot bot="Include" i-checksum="37727" endspan -->
<!--webbot bot="Include" U-Include="_include/e_fail.htm" TAG="BODY" startspan -->

<p>Except where noted to the contrary, the error code is
<span class="constant">E_FAIL</span>. </p>

<!--webbot bot="Include" i-checksum="3188" endspan -->
<h2>Behaviour </h2>
<!--webbot bot="Include" U-Include="_include/createdestroy.htm" TAG="BODY" startspan -->

<p>The method fails, returning <span class="constant">E_UNEXPECTED</span>, if 
the List-View control has not yet received its <span class="message">WM_CREATE</span> 
message or has already received a <span class="message">WM_DESTROY</span> 
message.
</p>

<!--webbot bot="Include" i-checksum="20458" endspan -->
<p>The method also fails if the address given in <span class="argument">lParam</span> 
is NULL. Otherwise, <span class="argument">lParam</span> is taken as addressing 
an <span class="struct">LVBKIMAGEW</span> structure. These notes mostly take the 
view that the structure is meant only as input to the method. That the
<span class="keyword">const</span> in the declaration does not actually model 
this is here thought to occur because Microsoft’s programmer did not fully 
understand the language. However, this may be not just too harsh but wrong. As 
noted in detail below, the method actually does have a few cases of failure that 
may cause it to clear one bit in the structure—and perhaps this actually is by 
design not inattention.
</p>
<!--webbot bot="Include" U-Include="_include/bkiorwm.htm" TAG="BODY" startspan -->

<p>A List-View control can have simultaneously both a background image and a 
watermark. Though only one or the other is displayed at any one time (the 
background image having precedence), they can be set and cleared independently. 
Whether the method operates on the background image or the watermark depends on 
the
<span class="constant">LVBKIF_TYPE_WATERMARK</span> bit in the
<span class="member">ulFlags</span> member on input. </p>

<!--webbot bot="Include" i-checksum="25224" endspan -->
<h3>Watermark </h3>
<p>If <span class="constant">LVBKIF_TYPE_WATERMARK</span> is set, the method 
sets or clears a watermark. The only other valid bit in <span class="member">
ulFlags</span> 
is <span class="constant">LVBKIF_FLAG_ALPHABLEND</span> and the message fails 
unless all other bits are clear. The <span class="member">hbm</span> member 
supplies the bitmap handle for the watermark, or is NULL for no watermark. No 
other members are meaningful. </p>
<p>Whether setting or clearing, the method invalidates any previously set 
watermark. If setting a watermark, the method fails if <span class="member">hbm</span> 
is not a bitmap handle. (Actually, it does not test that <span class="member">
hbm</span> 
is specifically a bitmap handle. It fails if <span class="function">GetObject</span> 
cannot produce at least 0x18 bytes of information from the given handle.) If 
clearing a watermark, the method fails always. It may be that giving NULL in
<span class="member">hbm</span> is not actually intended as the way to clear the 
watermark—but if not, then what is? </p>
<p>Note that if the method gets as far as invalidating any previously set 
watermark, then whether it subsequently succeeds or fails, it invalidates the 
control’s client area, including to erase the background. Thus, the old 
watermark disappears from view, even if what is given as the new watermark turns 
out not to be usable. (Contrast with setting a background colour, as through the <span class="method">
<a href="setbackgroundcolor.htm">SetBackgroundColor</a></span> method, which 
allows an old background colour to remain on show.) </p>
<p>A quirk of the method is that although <span class="constant">
LVBKIF_FLAG_ALPHABLEND</span> 
is meaningful, and is acted upon when the background is redrawn, it is not 
retrieved if a subsequent <span class="method"><a href="getbackgroundimage.htm">
GetBackgroundImage</a></span> 
asks about the watermark. </p>
<h3>Background Image </h3>
<p>With <span class="constant">LVBKIF_TYPE_WATERMARK</span> clear in
<span class="member">ulFlags</span>, the method sets or clears a background 
image. This may in turn be specified either by a bitmap handle or a URL. The 
choice is determined by the <span class="constant">LVBKIF_SOURCE_MASK</span> 
bits in
<span class="member">ulFlags</span>: </p>
<table>
  <tr>
    <td><span class="constant">LVBKIF_SOURCE_NONE</span> </td>
    <td>clear the background image </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_SOURCE_HBITMAP</span> </td>
    <td>set the background image from a bitmap handle </td>
  </tr>
  <tr>
    <td><span class="constant">LVBKIF_SOURCE_URL</span> </td>
    <td>set the background image from a URL </td>
  </tr>
</table>
<p>If the source bits mask to anything else, the method fails. In all the 
supported cases, the method first releases any previously set background image. </p>
<h4>Clearing the Background Image </h4>
<p>When clearing the background image, the method saves the <span class="member">
ulFlags</span>, <span class="member">xOffsetPercent</span> and
<span class="member">yOffsetPercent</span> members, such that a subsequent
<span class="method">GetBackgroundImage</span> will retrieve them, though with 
the exception of the source bits they are surely all better regarded as 
meaningless.
</p>
<p>The method always fails when clearing the background image, but this is 
perhaps a coding oversight. What is the point of coding non-trivially for
<span class="constant">LVBKIF_SOURCE_NONE</span> in the input if not to provide 
the way to specify (successfully) that there is to be no background image? 
Despite treating this case as failure, the effect certainly is to clear the 
background image: the control’s client area is invalidated, including to erase 
the background. </p>
<h4>Setting From a URL </h4>
<p>When setting the background image from a URL, the <span class="member">
pszImage</span> 
member provides the address of the URL. </p>
<p>If the given address is NULL or if the Unicode string at this address is 
empty, the method fails. However, this case of failure has some curiosities. It 
changes the <span class="member">ulFlags</span> so that the source bits mask to
<span class="constant">LVBKIF_SOURCE_NONE</span> on output. It then saves these
<span class="member">ulFlags</span>, presumably so that a subsequent
<span class="method">GetBackgroundImage</span> will report that no background 
image is set. It also saves the <span class="member">xOffsetPercent</span> and
<span class="member">yOffsetPercent</span> members, such that a subsequent
<span class="method">GetBackgroundImage</span> will retrieve them though they 
are surely meaningless. Finally, it invalidates the control’s client area, 
including to erase the background. None of this cleanup applies to any later 
failure while setting the background from a URL. The effect may be deliberate, 
if obtuse: specifying
<span class="constant">LVBKIF_SOURCE_URL</span> as the source bits in
<span class="member">ulFlags</span> but with NULL as <span class="member">
pszImage</span> 
is another way to set the control to have no background image. </p>
<p>The method saves a copy of the given URL, apparently only for retrievability 
by <span class="method">GetBackgroundImage</span>. Failure to get memory for the 
copy is failure for the method. </p>
<p>To set the background image from a URL, the method needs help from outside, 
specifically through the COM machinery to create an instance of the <span class="class">
<a href="../../../../../../ie/mshtml/interfaces/iimgctx.htm">IImgCtx</a></span> 
class. The method fails if this external assistance is unavailable, e.g., if COM 
initialisation has not been performed or if the <span class="class">IImgCtx</span> 
class is not properly registered. The ordinarily configured server for this 
class is MSHTML. Thus, setting a background image from a URL requires Internet 
Explorer, even if the URL is for a file on the local computer, such that no 
Internet access is required, and even if the user has chosen some web browser 
other than Internet Explorer. </p>
<p>The method asks the <span class="class">IImgCtx</span> instance to load the 
image from the given URL, with the image to be mirrored if the List-View control 
has the
<span class="constant">WS_EX_RTLREADING</span> extended style. Failure of the
<span class="class">IImgCtx</span> instance’s <span class="method">Load</span> 
method is failure for the <span class="method">SetBackgroundImage</span> method. 
Note however that the <span class="class">IImgCtx</span> implementation may—and 
the one in MSHTML certainly can—load the image asynchronously. A difficulty with 
the URL, such as being badly formed or there being no usable image at the URL, 
typically will not be discovered as part of the <span class="method">
SetBackgroundImage</span> method.
</p>
<p>Given that the image-load does not fail this early, the method saves the
<span class="member">ulFlags</span>, <span class="member">xOffsetPercent</span> 
and <span class="member">yOffsetPercent</span> members, various combinations of 
which are meaningful for the style and placement of the image. The
<span class="class">IImgCtx</span> instance is asked for a palette and a 
callback is set for notification of when the image-load has completed. Only once 
COMCTL32 learns through this notification that the image has loaded without an 
error and without being stopped does the image become set in the sense of being 
used when drawing the background. Curiously, even if this notification reports a 
difficulty, the image remains set in the sense that it will be reported by a 
subsequent
<span class="method">GetBackgroundImage</span>, with no indication of the known 
trouble. </p>
<h4>Setting From a Bitmap Handle </h4>
<p>When setting the background image from a bitmap handle, the
<span class="member">hbm</span> member provides the bitmap handle. </p>
<p>If <span class="member">hbm</span> is NULL, the method fails. Except that it 
fails, it means that specifying <span class="constant">LVBKIF_SOURCE_HBITMAP</span> 
as the source bits in <span class="member">ulFlags</span> but with NULL as
<span class="member">hbm</span> is yet another way to set the control to have no 
background image. </p>
<p>In all cases of failure when setting from a bitmap handle, the method 
performs the following cleaning up. It changes the <span class="member">ulFlags</span> 
so that the source bits mask to <span class="constant">LVBKIF_SOURCE_NONE</span> 
on output. It then saves these <span class="member">ulFlags</span>, presumably 
so that a subsequent <span class="method">GetBackgroundImage</span> will report 
that no background image is set. It also saves the <span class="member">
xOffsetPercent</span> 
and <span class="member">yOffsetPercent</span> members, such that a subsequent
<span class="method">GetBackgroundImage</span> will retrieve them though they 
are surely meaningless. Finally, it invalidates the control’s client area, 
including to erase the background. </p>
<p>To set the background image from a bitmap handle, COMCTL32 implements its own
<span class="interface">IImgCtx</span> interface. This has the obvious merit 
that except for the purpose of describing the background image for a subsequent
<span class="method">GetBackgroundImage</span>, it becomes essentially 
irrelevant whether the background image is set from a URL or from a bitmap 
handle. </p>
<p>The COMCTL32 implementation of <span class="interface">IImgCtx</span> is much 
simpler than the definitive one in MSHTML. The given bitmap handle is retained 
only indirectly, in the form of a pattern brush. The method fails if it cannot 
create a pattern brush from the given handle. It also fails if <span class="member">
hbm</span> 
is not a bitmap handle. (Actually, it does not test that <span class="member">
hbm</span> 
is specifically a bitmap handle. It fails if <span class="function">GetObject</span> 
cannot produce at least 0x18 bytes of information from the given handle.) </p>
<p>The method saves the <span class="member">ulFlags</span>,
<span class="member">xOffsetPercent</span> and <span class="member">
yOffsetPercent</span> 
members, various combinations of which are meaningful for the style and 
placement of the image. </p>
<h3 class="draft">Coding Errors and Quirks </h3>
<p class="draft">First call <span class="method">SetBackgroundImage</span> to 
set a background image from a bitmap handle and again to to set a new image from 
a URL. If the second call fails for lack of COM initialisation or such other 
things as improper registration of the <span class="class">IImgCtx</span> class, 
then incomplete cleanup leaves the control having released the old image while 
keeping flags that indicate it has a background image known by a bitmap handle. 
A call to
<span class="method">GetBackgroundImage</span> will produce <span class="member">
ulFlags</span> that say a background image is known from a bitmap handle, but
<span class="member">hbm</span> will be NULL. </p>
<p class="draft">Although setting a watermark invalidates any previously set 
watermark, it does not invalidate any previously set background image. The 
latter has precedence when the background is drawn. This may be a coding 
oversight or it may be that a background image is intended to have precedence 
over a watermark. Either way, it isn’t documented and the behaviour may puzzle. 
To change a List-View control from having a background image to having a 
watermark, first send one
<span class="message">LVM_SETBKIMAGE</span> to clear the background image, then 
send another to set the watermark. </p>
<h3 class="draft">Old Windows Versions </h3>
<p class="draft">The preceding notes describe the implementation by COMCTL32 
version 6.10 for Windows Vista. Some variations through early versions are 
plainly significant, but please bear in mind that it is far beyond the scope of 
these notes to examine every old version and the following observations are 
intended only as a sketch.
</p>
<p class="draft">Support for watermarks dates from COMCTL32 version 6.00, as 
does the defence against <span class="argument">lParam</span> being NULL. </p>
<p class="draft">Though the <span class="struct">LVBKIMAGE</span> structure 
seems to have provided for the <span class="constant">LVBKIF_SOURCE_HBITMAP</span> 
flag and the <span class="member">hbm</span> member since the beginning, the 
ability to set a background image from a bitmap handle does not actually work 
until version 6.00. </p>
<h2>Availability </h2>
<p>The <span class="method">SetBackgroundImage</span> method of the
<span class="interface">IListView</span> interface is implemented by COMCTL32 
versions 6.10 and higher. </p>
<p>In versions 4.71 and higher, the functionality of the <span class="method">
SetBackgroundImage</span> 
method is available through the windowing system, by sending the
<span class="message"><a href="../../messages/setbkimage.htm">LVM_SETBKIMAGE</a></span> 
message. </p>
<p class="draft">Note that the primary case, that of setting a background image 
by giving a URL, is not handled by COMCTL32 just with the aid of modules that 
are ordinarily regarded as lower-level. In practice therefore, support for this 
message also requires the presence of MSHTML versions 4.71 and higher. This may 
be what Microsoft means when listing “Windows NT 4.0 with Internet Explorer 4.0” 
among the minimum operating systems for this message: Windows NT 4.0 has 
COMCTL32 version 4.71, starting at least with Service Pack 4, but Internet 
Explorer 4.0 is needed for MSHTML. </p>
<div class="Footer">
  <p class="Dates">This page was created on 29th April 2008 and was last 
  modified on 3rd June 2008. </p>
  <!--webbot bot="Include" U-Include="../../../../../_include/c08.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2008. Geoff Chappell. All rights reserved.
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="56773" endspan -->
</div>

</body>

</html>