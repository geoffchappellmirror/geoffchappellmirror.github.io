<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>KOBJECTS</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>KOBJECTS </h1>
  <p>The kernel’s core has its own set of objects that it works with independently 
  of the Object Manager. Many kernel objects, but not all, begin with a
  <span class="struct"><a href="../ntosdef_x/dispatcher_header/index.htm">DISPATCHER_HEADER</a></span>. 
  Some kernel objects, but not all, are the beginning of some other object that
  <span class="emphasis">is</span> managed by the Object Manager. Consider, for 
  example, the process object that is referred to when a handle is obtained to a 
  process: it is an <span class="struct"><a href="../ps/eprocess/index.htm">EPROCESS</a></span> 
  which has the kernel’s <span class="struct"><a href="kprocess/index.htm">KPROCESS</a></span> 
  at its start. All kernel objects begin with a byte or word that signifies the 
  type of object. These signifiers are formally defined as the
  <span class="enum">KOBJECTS</span> enumeration. </p>
  <p>Microsoft does not document the <span class="enum">KOBJECTS</span> enumeration, 
  nor even declare it in header files from any Windows Driver Kit (WDK). However, 
  Microsoft’s names for it and its values are known from public symbols for the 
  kernel in Windows Vista and higher. Since symbol files for earlier versions do 
  not contain type information for <span class="struct">KOBJECTS</span>, what’s 
  known for these earlier versions is instead inferred from inspecting different 
  versions of the kernel for corresponding use. Where close correspondence is found 
  it seems reasonable to suppose continuity. Some use, however, has no correspondence, 
  the code having changed too much. Even where the use hasn’t changed, tracking 
  it down exhaustively would be difficult, if not impossible, even with source code. 
  Beware, then, that the description below is something of a guess before Windows 
  Vista. </p>
  <table class="Enum">
    <colgroup>
      <col class="Value"><col class="Name"><col class="Remarks">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Value </th>
        <th>Name </th>
        <th>Structure </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td><span class="constant">EventNotificationObject</span> </td>
        <td><span class="struct">KEVENT</span> </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x01 </td>
        <td><span class="constant">EventSynchronizationObject</span> </td>
        <td><span class="struct">KEVENT</span> </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x02 </td>
        <td><span class="constant">MutantObject</span> </td>
        <td><span class="struct">KMUTANT</span> </td>
        <td>all </td>
      </tr>
      <tr>
        <td rowspan="2">0x03 </td>
        <td><span class="constant">MutexObject</span> (proposed) </td>
        <td><span class="struct"><a href="../ke_x/kmutex.htm">KMUTEX</a></span>
        </td>
        <td>3.10 only </td>
      </tr>
      <tr>
        <td><span class="constant">ProcessObject</span> </td>
        <td><span class="struct">KPROCESS</span> </td>
        <td>3.50 and higher </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td><span class="constant">QueueObject</span> </td>
        <td><span class="struct">KQUEUE</span> </td>
        <td>3.50 and higher </td>
      </tr>
      <tr>
        <td>0x04 (3.10); <br>
        0x05 </td>
        <td><span class="constant">SemaphoreObject</span> </td>
        <td><span class="struct">KSEMAPHORE</span> </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x05 (3.10); <br>
        0x06 </td>
        <td><span class="constant">ThreadObject</span> </td>
        <td><span class="struct"><a href="kthread/index.htm">KTHREAD</a></span>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td rowspan="2">0x07 </td>
        <td><span class="constant">SpareObject</span> (proposed) </td>
        <td>&nbsp;</td>
        <td>4.0 to early 5.2 </td>
      </tr>
      <tr>
        <td><span class="constant">GateObject</span> </td>
        <td><span class="struct">KGATE</span> </td>
        <td>late 5.2 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x06 (3.10); <br>
        0x07 (3.50 to 3.51); <br>
        0x08 </td>
        <td><span class="constant">TimerObject</span> (proposed) </td>
        <td><span class="struct"><a href="../ntosdef_x/ktimer.htm">KTIMER</a></span>
        </td>
        <td>3.10 to 3.51 </td>
      </tr>
      <tr>
        <td><span class="constant">TimerNotificationObject</span> </td>
        <td><span class="struct">KTIMER</span> </td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td>0x09 </td>
        <td><span class="constant">TimerSynchronizationObject</span> </td>
        <td><span class="struct">KTIMER</span> </td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td>0x0A </td>
        <td><span class="constant">Spare2Object</span> </td>
        <td>&nbsp;</td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td>0x0B </td>
        <td><span class="constant">Spare3Object</span> </td>
        <td>&nbsp;</td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td><span class="constant">Spare4Object</span> </td>
        <td>&nbsp;</td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td>0x0D </td>
        <td><span class="constant">Spare5Object</span> </td>
        <td>&nbsp;</td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td>0x0E </td>
        <td><span class="constant">Spare6Object</span> </td>
        <td>&nbsp;</td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td>0x0F </td>
        <td><span class="constant">Spare7Object</span> </td>
        <td>&nbsp;</td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td><span class="constant">Spare8Object</span> </td>
        <td>&nbsp;</td>
        <td>4.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x11 </td>
        <td><span class="constant">Spare9Object</span> </td>
        <td>&nbsp;</td>
        <td>4.0 to 6.1 </td>
      </tr>
      <tr>
        <td><span class="constant">ProfileCallbackObject</span> </td>
        <td><span class="struct"><a href="kprofile.htm">KPROFILE</a></span> </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x07 (3.10); <br>
        0x08 (3.50 to 3.51); <br>
        0x12 </td>
        <td><span class="constant">ApcObject</span> </td>
        <td><span class="struct">KAPC</span> </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x08 (3.10); <br>
        0x09 (3.50 to 3.51); <br>
        0x13 </td>
        <td><span class="constant">DpcObject</span> </td>
        <td><span class="struct"><a href="../ntosdef_x/kdpc.htm">KDPC</a></span>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x09 (3.10); <br>
        0x0A (3.50 to 3.51); <br>
        0x14 </td>
        <td><span class="constant">DeviceQueueObject</span> </td>
        <td><span class="struct">KDEVICE_QUEUE</span> </td>
        <td>all </td>
      </tr>
      <tr>
        <td rowspan="2">0x0A (3.10); <br>
        0x0B (3.50 to 3.51); <br>
        0x15 </td>
        <td><span class="constant">EventPairObject</span> </td>
        <td><span class="struct"><a href="kevent_pair.htm">KEVENT_PAIR</a></span>
        </td>
        <td>3.10 to 6.2 </td>
      </tr>
      <tr>
        <td><span class="constant">PriQueueObject</span> </td>
        <td><span class="struct">KPRIQUEUE</span> </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x0B (3.10); <br>
        0x0C (3.50 to 3.51); <br>
        0x16 </td>
        <td><span class="constant">InterruptObject</span> </td>
        <td><span class="struct">
        <a href="../ke_x/kinterrupt.htm">KINTERRUPT</a></span>
        </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x0C (3.10) </td>
        <td>apparently unused </td>
        <td>&nbsp;</td>
        <td>3.10 only </td>
      </tr>
      <tr>
        <td rowspan="2">0x0D (3.10 to 3.51) </td>
        <td><span class="constant">PowerStatusObject</span> (proposed) </td>
        <td><span class="struct">KPOWER_STATUS</span> (proposed) </td>
        <td>3.10 only </td>
      </tr>
      <tr>
        <td>apparently unused </td>
        <td>&nbsp;</td>
        <td>3.50 to 3.51 </td>
      </tr>
      <tr>
        <td rowspan="2">0x0E (3.10 to 3.51) </td>
        <td><span class="constant">ProcessObject</span> </td>
        <td><span class="struct">KPROCESS</span> </td>
        <td>3.10 only </td>
      </tr>
      <tr>
        <td>apparently unused </td>
        <td>&nbsp;</td>
        <td>3.50 to 3.51 </td>
      </tr>
      <tr>
        <td>0x0F (3.10 to 3.51); <br>
        0x17 </td>
        <td><span class="constant">ProfileObject</span> </td>
        <td><span class="struct">KPROFILE</span> </td>
        <td>all </td>
      </tr>
      <tr>
        <td>0x18 </td>
        <td><span class="constant">Timer2NotificationObject</span> </td>
        <td><span class="struct">KTIMER2</span> </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x19 </td>
        <td><span class="constant">Timer2SynchronizationObject</span> </td>
        <td><span class="struct">KTIMER2</span> </td>
        <td>6.3 and higher </td>
      </tr>
      <tr>
        <td>0x18 (5.2 to 6.2); <br>
        0x1A </td>
        <td><span class="constant">ThreadedDpcObject</span> </td>
        <td><span class="struct">KDPC</span> </td>
        <td>5.2 and higher </td>
      </tr>
      <tr>
        <td>0x10 (3.10 to 3.51); <br>
        0x18 (4.0 to 5.1); <br>
        0x19 (5.2 to 6.2); <br>
        0x1B </td>
        <td><span class="constant">MaximumKernelObject</span> </td>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>The enumeration is broadly in two sets, each arranged very nearly alphabetically: 
  first the types for kernel objects that begin with a <span class="struct">DISPATCHER_HEADER</span>; 
  then those that do not. This separation seems to have been an original intention. 
  Conforming to it looks like the one and only reason that
  <span class="constant">ProcessObject</span> got renumbered when version 3.50 reworked 
  the <span class="struct">KPROCESS</span> to start with a <span class="struct">
  DISPATCHER_HEADER</span>. The separation persisted until new timer objects for 
  version 6.3 could not be added to the first set as a pair at a multiple of 8 without 
  renumbering the second set. </p>
  <p>It is not merely coincidental or neat that <span class="constant">EventSynchronizationObject</span>,
  <span class="constant">TimerSynchronizationObject</span> and
  <span class="constant">Timer2SynchronizationObject</span> are each one more than 
  a multiple of 8. Kernel objects that begin with a <span class="struct">DISPATCHER_HEADER</span>—let’s 
  call them<span class="definition"> dispatcher objects</span>—are directly waitable. 
  Their addresses can be passed to the <span class="function">KeWaitForSingleObject</span> 
  and <span class="function">KeWaitForMultipleObjects</span> functions such that 
  the function should not return unless the object or objects (all or any) get
  <span class="definition">signalled</span>. How a dispatcher object gets signalled 
  varies with the object. What’s relevant to the <span class="enum">KOBJECTS</span> 
  enumeration is that, starting with version 4.0, if the <span class="enum">KOBJECTS</span> 
  for a dispatcher object has 1 for its low 3 bits, then the object is specifically 
  a <span class="definition">synchronisation object</span> in contrast to a
  <span class="definition">notification object</span>: when it is signalled and 
  a waiting thread is released from its wait, the object is automatically reset 
  to non-signalled and no more threads are released from waiting until the object 
  is signalled again. </p>
  <p>The name <span class="constant">MutexObject</span> is proposed for the
  <span class="enum">KOBJECTS</span> value that selects what version 3.10 has as 
  its <span class="struct">KMUTEX</span> structure. In this version only, the
  <span class="struct">KMUTEX</span> is a different structure from the
  <span class="struct">KMUTANT</span>. </p>
  <p>The name <span class="constant">TimerObject</span> is proposed for what is 
  later the <span class="constant">TimerNotificationObject</span>. The corresponding 
  structure is the same <span class="struct">KTIMER</span> that later versions support 
  in two types. Earlier versions than 4.0 implement the timer only as a notification 
  object. They have no notion of a <span class="constant">TimerNotificationObject</span> 
  as separate from a <span class="constant">TimerSynchronizationObject</span>, just 
  as they have only a <span class="function">KeInitializeTimer</span> function, 
  not the later <span class="function">KeInitializeTimerEx</span> that can initialise 
  either type. </p>
  <p>No later use of any kernel object of type 0x07 is known until Windows Server 
  2003 SP1 (which is what “late 5.2” means in the table above) introduced the gate 
  object. It seems at least plausible that 0x07 was left as the original
  <span class="constant">SpareObject</span> or <span class="constant">Spare1Object</span> 
  as a side-effect of skipping ahead to 0x08 and 0x09 for the new types of timer 
  object so that notification versus synchronisation can be discerned in common 
  for events and timers just from the low 3 bits. </p>
  <p>For several of the object types, the corresponding structures are sufficiently 
  internal to the kernel that even their names have never been revealed in public 
  symbol files for the kernel. </p>
  <p>The name <span class="struct">KEVENT_PAIR</span> for the structure that corresponds 
  to <span class="constant">EventPairObject</span> is first known from the output 
  of the <span class="command"><a href="../../../../debug/kdex2x86/strct.htm">!strct</a></span> 
  command as implemented by the KDEX2X86 debugging extension which Microsoft supplied 
  with the Device Driver Kit (DDK) for Windows NT 4.0. Though obscure now—indeed, 
  for decades—the event pair was once vital to the efficiency of windowing and other 
  functionality in the Win32 subsystem. </p>
  <p>The structure that is signified by <span class="constant">ProfileObject</span> 
  and (later) <span class="constant">ProfileCallbackObject</span> is known with 
  the certainty of type information, just not from public symbols but instead from 
  a statically linked library (named CLFSMGMT.LIB) that Microsoft supplies in the 
  Software Development Kit (SDK) as if for user-mode programming. Even without this, 
  there’d have been no surprise that Microsoft’s name for it is
  <span class="struct">KPROFILE</span>. </p>
  <p>What filled the gap between <span class="constant">InterruptObject</span> and
  <span class="constant">ProfileObject</span> before version 4.0 is known only partly. 
  The names <span class="constant">PowerStatusObject</span> and
  <span class="struct">KPOWER_STATUS</span> are proposed for whatever object is 
  initialised and worked with through the exported functions
  <span class="function">KeInitializePowerStatus</span>, <span class="function">
  KeInsertQueuePowerStatus</span> and <span class="function">KeRemoveQueuePowerStatus</span> 
  which exist only in version 3.10. Symbol files show that an internal variable 
  named <span class="internal variable">KiPowerStatusLock</span> persists to version 
  3.50 and so it seems at least possible that the value for the extinct object type 
  remained defined as a placeholder until the large renumbering for version 4.0.
  </p>
  <div class="Footer">
    <p class="Dates">This page was created on 20th
    <a href="../../../../../../../new/16/06.htm">June 2016</a> and was last modified 
    on 20th February 2023. </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1623.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4941" -->
  </div>
</div>

</body>

</html>
