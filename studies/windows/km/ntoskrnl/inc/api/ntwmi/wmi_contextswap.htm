<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>WMI_CONTEXTSWAP</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>WMI_CONTEXTSWAP </h1>
  <p>The <span class="struct">WMI_CONTEXTSWAP</span> is one of many types of fixed-size 
  header that begin the data for an event as held in the trace buffers or flushed 
  to an Event Trace Log (ETL) file for an NT Kernel Logger session. The event is 
  specifically <span class="constant">PERFINFO_LOG_TYPE_CONTEXTSWAP</span> (0x0524). 
  It was introduced with Windows XP. </p>
  <h2>Usage </h2>
  <p>The <span class="constant">PERFINFO_LOG_TYPE_CONTEXTSWAP</span> event traces 
  context swaps, of course. Here, context swap means a change of thread: a processor 
  switches from running an old thread to a new thread. The event records the identifiers 
  of each thread and a small selection of possibly interesting properties, mostly 
  of the outgoing thread. </p>
  <p>For any particular NT Kernel Logger session to be sent this event, the undocumented
  <a href="perfinfo_groupmask.htm">group mask</a> <span class="constant">PERF_CONTEXT_SWITCH</span> 
  (0x20000004) must be enabled. For compatibility with the documented
  <span class="member">EnableFlags</span> in the <span class="struct">EVENT_TRACE_PROPERTIES</span> 
  that is input to the <span class="function">StartTrace</span> and
  <span class="struct">ControlTrace</span> functions, this group mask maps to
  <span class="constant">EVENT_TRACE_FLAG_CSWITCH</span> (0x00000010). </p>
  <h2>Documentation Status </h2>
  <p>Microsoft has long documented the <span class="struct">WMI_CONTEXTSWAP</span> 
  structure as an MOF class named <span class="class">CSwitch</span> using a syntax 
  that is “simplified from MOF code”. To say long documented is to take only a modern 
  perspective. This useful diagnostics support seems to have been kept for use only 
  by Microsoft’s tools for roughly its first five years: the structure and event 
  date from Windows XP but the first known documentation is in the Software Development 
  Kit (SDK) for Windows Vista. </p>
  <p>For what MOF code the documentation simplified from, the only known candidate 
  is in a file named WMICORE.MOF which is distributed not with the SDK and the documentation 
  but with the Windows Driver KIt (WDK), again starting with Windows Vista. Microsoft 
  apparently had some trouble synchronising the documentation’s simplification with 
  the MOF definition, let alone with the reality of what the kernel actually does 
  write as the event data. What’s documented for Windows Vista mixes old and new 
  formats. The MOF definition, simplified or not, never truly is that of the structure. 
  For instance, even as found online today, 3rd November 2022, the documentation 
  names the last property as <span class="member">Reserved</span> and describes 
  another as “Not used”, which is no more true now than for Windows Vista. </p>
  <p>Though the <span class="struct">WMI_CONTEXTSWAP</span> structure itself is 
  not documented, a C-language definition was published in the
  <a href="../../../source/inc/ntwmi.htm">NTWMI.H</a> header from the original and 
  Version 1511 editions of the Windows Driver Kit (WDK) for Windows 10. </p>
  <p>Otherwise, the structure is known from type information in a smattering of 
  symbol files, starting with Windows 8. These are all private symbol files that 
  Microsoft has included, possibly by oversight, in the usual downloadable packages 
  of public symbol files for Windows and continues to make available at the public 
  symbol server. A few of these private symbol files show that their corresponding 
  (user-mode) binaries were built with NTWMI.H among the headers that were included 
  by the source files. Thus do these few symbol files have type information for 
  the <span class="struct">WMI_CONTEXTSWAP</span>. </p>
  <h2>Variability </h2>
  <p>The point to the MOF definition is that the structure is intended for interpretation 
  by user-mode tools for performance monitoring. These may be fed data that was 
  collected from a different computer which ran a different Windows version. Changes 
  to the structure are allowed but are few and orderly. A progression through four 
  distinct formats has changed the size only once: </p>
  <table class="Sizes">
    <colgroup>
      <col class="Version"><col class="Size">
    </colgroup>
    <thead>
      <tr>
        <th>Version </th>
        <th>Size </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>5.1 to 5.2 </td>
        <td>0x10 </td>
      </tr>
      <tr>
        <td>6.0 to 2004 </td>
        <td>0x18 </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="struct">WMI_CONTEXTSWAP</span> structure itself does not carry 
  an indication of its format. This is instead a byte in the trace header of the 
  event for which the structure is event-specific data. </p>
  <h2>Layout </h2>
  <p>As it exists in the trace buffers, a <span class="constant">PERFINFO_LOG_TYPE_CONTEXTSWAP</span> 
  event comprises: </p>
  <ul>
    <li>a <span class="struct"><a href="traceheaders/perfinfo_trace_header.htm">
    PERFINFO_TRACE_HEADER</a></span>, possibly with extended data items; </li>
    <li>the <span class="struct">WMI_CONTEXTSWAP</span>. </li>
  </ul>
  <h3>Trace Header </h3>
  <p>As for any <span class="struct">PERFINFO_TRACE_HEADER</span>, the four-byte
  <span class="member">Marker</span> at the start is at its most basic either 0xC0100000 
  (32-bit) or 0xC0110000 (64-bit). To this may be added bit flags to indicate that 
  extended data items are inserted between the trace header and the event data. 
  The low byte, however, is particular to the event. It tells which version of the 
  event is recorded. Different versions of the kernel write different versions of 
  the event: </p>
  <table class="Constants">
    <colgroup>
      <col class="Value"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Event Version </th>
        <th>Windows Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x01 </td>
        <td>5.1 to 5.2 </td>
      </tr>
      <tr>
        <td>0x02 </td>
        <td>6.0 to 1607 </td>
      </tr>
      <tr>
        <td>0x03 </td>
        <td>1703 </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>1709 to 2004 </td>
      </tr>
    </tbody>
  </table>
  <p>After the <span class="member">Marker</span>, the <span class="member">Size</span> 
  is the total in bytes of the trace header and all the event data. That the event 
  records a context swap is indicated by its having <span class="constant">PERFINFO_LOG_TYPE_CONTEXTSWAP</span> 
  as its <span class="member"><a href="wmi_trace_packet/hookid.htm">HookId</a></span>. 
  Except if the <span class="member">Marker</span> indicates the insertion of extended 
  data items, the event data follows as the trace header’s <span class="member">
  Data</span> array. </p>
  <h3>Event-Specific Data </h3>
  <p>The event-specific data for a <span class="constant">PERFINFO_LOG_TYPE_CONTEXTSWAP</span> 
  event is just the one fixed-size <span class="struct">WMI_CONTEXTSWAP</span> structure. 
  Names, types and offsets are from symbol files, as noted above, for Windows 8 
  and higher. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">ULONG NewThreadId;</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>
        <pre class="source">ULONG OldThreadId;</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>
        <pre class="source">CHAR NewThreadPriority;</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td>0x09 </td>
        <td>
        <pre class="source">CHAR OldThreadPriority;</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x0A </td>
        <td>
        <pre class="source">CHAR NewThreadQuantum;</pre>
        </td>
        <td>5.1 to 5.2 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    UCHAR PreviousCState;
    UCHAR OldThreadRank;
};</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td rowspan="2">0x0B </td>
        <td>
        <pre class="source">CHAR OldThreadQuantum;</pre>
        </td>
        <td>5.1 to 5.2 </td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    CHAR NewThreadPriorityDecrement;
    CHAR SpareByte;
};</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>
        <pre class="source">UCHAR OldThreadWaitReason;</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td rowspan="3">0x0D </td>
        <td>
        <pre class="source">CHAR OldThreadWaitMode;</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    struct {
        UCHAR OldThreadWaitMode : 1;
        UCHAR OldThreadBamEppImportant : 1;
        UCHAR NewThreadBamEppImportant : 1;
        UCHAR Reserved : 5;
    }
    UCHAR Flags;
};</pre>
        </td>
        <td>1703 only </td>
      </tr>
      <tr>
        <td>
        <pre class="source">union {
    struct {
        UCHAR OldThreadWaitMode : 1;
        UCHAR OldThreadBamQosLevel : 3;
        UCHAR NewThreadBamQosLevel : 3;
        UCHAR Reserved : 1;
    }
    UCHAR Flags;
};</pre>
        </td>
        <td>1709 and higher </td>
      </tr>
      <tr>
        <td>0x0E </td>
        <td>
        <pre class="source">UCHAR OldThreadState;</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td>0x0F </td>
        <td>
        <pre class="source">UCHAR OldThreadIdealProcessor;</pre>
        </td>
        <td>5.1 and higher </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>
        <pre class="source">ULONG NewThreadWaitTime;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
      <tr>
        <td>0x14 </td>
        <td>
        <pre class="source">LONG OldThreadRemainingQuantum;</pre>
        </td>
        <td>6.0 and higher </td>
      </tr>
    </tbody>
  </table>
  <p>Most of the members are read straightforwardly from similarly named members 
  of the old or new thread’s <span class="struct">
  <a href="../../ntos/ps/ethread/index.htm">ETHREAD</a></span>. Not obvious from 
  the types is that the <span class="member">OldThreadWaitReason</span>,
  <span class="member">OldThreadWaitMode</span> and <span class="member">OldThreadState</span> 
  take their values from the documented <span class="enum">KWAIT_REASON</span> and
  <span class="enum">KPROCESSOR_MODE</span> and the undocumented
  <span class="enum"><a href="../../ntos/ke/kthread_state.htm">KTHREAD_STATE</a></span> 
  enumerations, respectively. Note also the truncation of the ideal processor from 
  a <span class="type">ULONG</span>: the <span class="member">OldThreadIdealProcessor</span> 
  is unreliable for computers with more than 256 processors. </p>
  <p>The names <span class="member">NewThreadQuantum</span> and
  <span class="member">OldThreadQuantum</span> are from the MOF definitions of
  <span class="class">CSwitch_V1</span>. </p>
  <p>In the union at offset 0x0A, the <span class="member">PreviousCState</span> 
  applies if the old thread is the idle thread for its processor. Otherwise, the
  <span class="member">SpareByte</span> is zeroed. </p>
  <p>The <span class="member">OldThreadRemainingQuantum</span> is the old thread’s
  <span class="member">QuantumTarget</span> less its <span class="member">CycleTime</span>, 
  divided by 1024. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 17th
    <a href="../../../../../../../new/16/12.htm">December 2016</a> and was last 
    modified on 3rd <a href="../../../../../../../new/22/10.htm">November 2022</a>.
    </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
