<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EVENT_TRACE_GROUPMASK_INFORMATION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>EVENT_TRACE_GROUPMASK_INFORMATION </h1>
  <p>The <span class="struct">EVENT_TRACE_GROUPMASK_INFORMATION</span> structure 
  is one of many that the <span class="function">
  <a href="../../../api/ex/sysinfo/query.htm">ZwQuerySystemInformation</a></span> 
  (or <span class="function">NtQuerySystemInformation</span>) and
  <span class="function"><a href="../../../api/ex/sysinfo/set.htm">ZwSetSystemInformation</a></span> 
  (or <span class="function">NtSetSystemInformation</span>) functions expect in 
  their information buffer when given the information class
  <span class="constant">SystemPerformanceTraceInformation</span> (0x1F). This particular 
  structure is selected when the first dword in the information buffer on input 
  is <span class="constant">EventTraceGroupMaskInformation</span> (0x01). </p>
  <h2>Usage </h2>
  <p>At least in user mode, the <span class="struct">EVENT_TRACE_GROUPMASK_INFORMATION</span> 
  structure arguably exists only to support the documented ADVAPI32 or SECHOST functions
  <span class="function">
  <a href="../../../../../win32/advapi32/api/etw/logapi/query.htm">TraceQueryInformation</a></span> 
  and <span class="function">
  <a href="../../../../../win32/advapi32/api/etw/logapi/set.htm">TraceSetInformation</a></span> 
  for their information class <span class="constant">TraceSystemTraceEnableFlagsInfo</span> 
  (0x04). Well-behaved user-mode software executing above ADVAPI32 does not call
  <span class="function">NtQuerySystemInformation</span> or
  <span class="function">NtSetSystemInformation</span> but prefers
  <span class="function">TraceQueryInformation</span> and <span class="function">
  TraceSetInformation</span> and therefore has no need of this structure. </p>
  <p>Or so might go the theory or principle. Against it is that Microsoft’s documentation 
  of <span class="function">TraceQueryInformation</span> and
  <span class="function">TraceSetInformation</span>, as perused online today (30th 
  November 2016), does not tell programmers what form of information to expect or 
  provide. Indeed, what it does say is arguably misleading, for it suggests that 
  the <span class="constant">TraceSystemTraceEnableFlagsInfo</span> case works just 
  with “the setting for the <span class="member">EnableFlags</span> for the system 
  trace provider” and directs attention to the documentation of the
  <span class="struct">EVENT_TRACE_PROPERTIES</span> structure. In fact, the case 
  provides for a significant extension of those flags. </p>
  <h2>Documentation Status </h2>
  <p>The <span class="enum">EVENT_TRACE_GROUPMASK_INFORMATION</span> structure is 
  not documented. </p>
  <!--webbot bot="Include" U-Include="_include/typeinfo_struct.htm" TAG="BODY" startspan -->

<p>A few public disclosures are known from Microsoft, though not as any sort of 
plain-English documentation. One is that a previously unpublished header named NTETW.H 
was published in the original and Version 1511 editions of the Windows Driver Kit 
(WDK) for Windows 10, and this header contains a C-language definition of the structure.
</p>
<p>Were it not for this limited and possibly unintended disclosure of NTETW.H, a 
practical equivalent of the C-language definition (but missing comments, of course) 
would anyway be known from type information in symbol files. But this too has the 
look of an oversight. Type information for this structure has never appeared in 
any public symbol files for the kernel or for the obvious low-level user-mode DLLs. 
It has instead slipped out in symbol files for a smattering of higher-level user-mode 
DLLs, starting with Windows 8. For these few, the readily available symbol files 
actually are private symbol files and show that the unpublished
<a href="../../../source/inc/ntetw.htm">NTETW.H</a> was included when compiling 
the corresponding binaries. </p>

<!--webbot bot="Include" endspan i-checksum="23935" -->
  <!--webbot bot="Include" U-Include="_include/clfsmgmt.htm" TAG="BODY" startspan -->

<p>Type information also has been published in a statically linked library, named 
CLFSMGMT.LIB, which Microsoft distributes with the Software Development Kit (SDK) 
starting for Windows Vista. This does not have the forensic quality as has type 
information in symbol files for the binaries that ship with an operating system, 
for although it is as accurate for when the library was built, there is no requirement 
that the library have been built with the operating system that it targets. There 
can be, and often is, some discrepancy, and there is anyway not always a fresh library 
for each service pack. </p>

<!--webbot bot="Include" endspan i-checksum="57935" -->
  <h2>Layout </h2>
  <p>The <span class="struct">EVENT_TRACE_GROUPMASK_INFORMATION</span> is 0x30 bytes 
  in both 32-bit and 64-bit Windows. Offsets, names and types in the table that 
  follows are from type information in symbol files and libraries, and from the 
  published C-language definition, as described above. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Input or Output </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source"><a href="event_trace_information_class.htm">EVENT_TRACE_INFORMATION_CLASS</a> EventTraceInformationClass;</pre>
        </td>
        <td>6.0 and higher </td>
        <td>input </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>
        <pre class="source">TRACEHANDLE TraceHandle;</pre>
        </td>
        <td>6.0 and higher </td>
        <td>input </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>
        <pre class="source"><a href="../ntwmi/perfinfo_groupmask.htm">PERFINFO_GROUPMASK</a> EventTraceGroupMasks;</pre>
        </td>
        <td>6.0 and higher </td>
        <td>output for query; <br>
        input for set </td>
      </tr>
    </tbody>
  </table>
  <p>When the structure is built by <span class="function">TraceQueryInformation</span> 
  or <span class="function">TraceSetInformation</span>, the <span class="member">
  TraceHandle</span> is the <span class="argument">SessionHandle</span> argument 
  and the <span class="member">EventTraceGroupMasks</span> is copied to or from 
  the <span class="argument">InformationLength</span> bytes at
  <span class="argument">TraceInformation</span>. </p>
  <h2>Behaviour </h2>
  <p>The <span class="struct">EVENT_TRACE_GROUPMASK_INFORMATION</span> structure 
  is meaningful only as input to one case each of the <span class="function">ZwQuerySystemInformation</span> 
  and <span class="function">ZwSetSystemInformation</span> functions. The behaviour 
  is as well picked up here. This review takes as understood all the general points 
  and shorthands that are noted in the separate attempt at documenting the functions, 
  and takes as granted that the information class is <span class="constant">SystemPerformanceTraceInformation</span> 
  and that the information buffer is exactly the size of an <span class="struct">
  EVENT_TRACE_GROUPMASK_INFORMATION</span> in which the <span class="member">EventTraceInformationClass</span> 
  is <span class="constant">EventTraceGroupMaskInformation</span>. </p>
  <p>Note that although <span class="constant">EventTraceGroupMaskInformation</span> 
  is valid for querying in version 6.0 and higher, versions before 6.2 reject it 
  for setting. The returned error code is <span class="constant">ERROR_NOT_IMPLEMENTED</span>.
  </p>
  <p>Whether to query or set, the <span class="member">TraceHandle</span> selects 
  an event logger. Specifically, the low 16 bits are the logger ID or are 0xFFFF 
  to select the NT Kernel Logger. This interpretation of 0xFFFF is formalised by 
  the definition of a macro <span class="constant">KERNEL_LOGGER_ID</span> in the 
  NTWMI_X.H header from the early editions of the WDK for Windows 10. If the logger 
  ID does not select an active logger to which the function can arrange exclusive 
  access, the function returns <span class="constant">STATUS_WMI_INSTANCE_NOT_FOUND</span>. 
  The function also fails, but returning <span class="constant">STATUS_INVALID_PARAMETER</span>, 
  if the logger context’s logger mode does not include <span class="constant">EVENT_TRACE_SYSTEM_LOGGER_MODE</span> 
  (0x02000000). </p>
  <h3>Query </h3>
  <p>The essential work when querying is to extract the logger’s
  <span class="struct">PERFINFO_GROUPMASK</span> as the <span class="member">EventTraceGroupMasks</span> 
  member of the output. This <span class="struct">PERFINFO_GROUPMASK</span> that 
  is produced as output is not necessarily exactly what the kernel keeps for the 
  logger but may instead have been translated for compatibility with the
  <span class="member">EnableFlags</span> that is documented for the
  <span class="struct">EVENT_TRACE_PROPERTIES</span> structure as input to the
  <span class="function">StartTrace</span> and <span class="function">ControlTrace</span> 
  functions. </p>
  <h3>Set </h3>
  <p>To set information, the caller must have <span class="constant">TRACELOG_GUID_ENABLE</span> 
  access to the logger. Without it, the function fails, typically returning
  <span class="constant">STATUS_ACCESS_DENIED</span>. </p>
  <p>The essential work when setting is to load the logger’s
  <span class="struct">PERFINFO_GROUPMASK</span> from the <span class="member">EventTraceGroupMasks</span> 
  member of the input. As with querying, translation may be involved for compatibility.
  </p>
  <p>The given group masks specify which types of event the kernel is to generate 
  (itself or on behalf of low-level user-mode modules such as NTDLL) for the logger. 
  For most types of event, enabling is trivial: for others, not so much. For example, 
  asking to enable <span class="constant">PERF_PROFILE</span> (0x20000002) or
  <span class="constant">PERF_PMC_PROFILE</span> (0x20000400) without
  <span class="constant">SeSystemProfilePrivilege</span> causes the function to 
  fail, returning <span class="constant">STATUS_PRIVILEGE_NOT_HELD</span>. Another 
  is that asking to enable <span class="constant">PERF_CONTEXT_SWITCH</span> (0x20000004) 
  and <span class="constant">PERF_COMPACT_CSWITCH</span> (0x20000100) when they 
  are not already both enabled may require the preparation of per-processor buffers 
  to support the efficient batching of data about thread switches, and can fail 
  such that the function returns <span class="constant">STATUS_NO_MEMORY</span>. 
  There need not be an end to such examples, of course. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 25th
    <a href="../../../../../../../new/16/11.htm">November 2016</a> and was last 
    modified on 30th <a href="../../../../../../../new/22/10.htm">November 2022</a>.
    </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
