<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>KTHREAD (3.10 to 3.50)</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="33595" -->
<h1>KTHREAD (3.10 to 3.50) </h1>
<div class="Main">
  <!--webbot bot="Include" U-Include="_include/intro.htm" TAG="BODY" startspan -->

<p>The <span class="struct">KTHREAD</span> structure is the Kernel Core’s portion 
of the <span class="struct"><a href="../../ps/ethread/index.htm">ETHREAD</a></span> 
structure. The latter <span class="emphasis">is</span> the thread object as exposed 
through the Object Manager. The <span class="struct">KTHREAD</span> is the core 
of it. </p>

<!--webbot bot="Include" endspan i-checksum="54584" -->
  <h2>Variability </h2>
  <p>The <span class="struct">KTHREAD</span> structure is plainly internal to the 
  kernel and its layout varies greatly between Windows versions and even between 
  builds. Indeed, it is the most highly variable of all significant kernel-mode 
  structures—so much so that tracking its history looks to be imposisble on one 
  page and is therefore spread over several: </p>
  <ul>
    <li>versions 3.10 to 3.50; </li>
    <li><a href="351.htm">versions 3.51 to 5.1</a>; </li>
    <li><a href="early52.htm">version 5.2 before SP1</a>; </li>
    <li><a href="late52.htm">versions 5.2 SP1 to 6.1</a>; </li>
    <li><a href="62.htm">versions 6.2 and higher</a>. </li>
  </ul>
  <p>Changes from version 3.10 to 3.50 were very few. All are explained as reductions 
  of members’ widths, e.g., from a 32-bit integer to a one-byte boolean, possibly 
  then motivating relocation, e.g., to collect those booleans for better alignment. 
  Where members have been rearranged such that some need to be listed twice in the 
  Layout tables that follow, the Remarks column points the way. </p>
  <p>As soon as version 3.51, however, the changes become too great for conveying 
  any sense of continuity. For a quick sense of this, look down the Future columns, 
  especially at the sequence of byte-sized members near to the end, and notice how 
  often two neighbouring members are next at opposite ends of the structure. </p>
  <h2>Layout </h2>
  <p>Types and names in the table that follows are from Microsoft’s symbol files 
  for the kernel starting with Windows 2000 SP3. How these apply to the much earlier 
  versions presented here is something of a guess based on cross-version comparison 
  of the kernel’s code for using the <span class="struct">KTHREAD</span>. Where 
  use of a member by these early versions corresponds closely with that of a version 
  for which type information is available in Microsoft’s symbol files, it seems 
  reasonable to suppose continuity. Some use, however, has no correspondence, the 
  code having changed too much. Even where the use hasn’t changed so much, tracking 
  down the correspondence exhaustively would be difficult, if not impossible, even 
  with source code. Take everything here against the background that the historical 
  detail attempted here is plausibly long lost even at Microsoft (or if not lost, 
  then at least long forgotten). </p>
  <p>It is well known that the <span class="struct">KTHREAD</span> is a kernel object 
  that can be waited on until it gets signalled, as happens when the thread ends 
  its execution. All known versions of Windows have the <span class="struct">KTHREAD</span> 
  start with a <span class="struct">
  <a href="../../ntosdef_x/dispatcher_header/index.htm">DISPATCHER_HEADER</a></span> 
  whose <span class="member">Type</span> is <span class="constant">ThreadObject</span> 
  from the <span class="enum"><a href="../kobjects.htm">KOBJECTS</a></span> enumeration. 
  In these early versions, only the <span class="member">Type</span> and
  <span class="member">Size</span> distinguish this <span class="member">Header</span> 
  from that of any other dispatcher object. The <span class="member">Type</span> 
  changes from 5 to 6 in progressing from version 3.10 to 3.50. The
  <span class="member">Size</span> is consistent with the <span class="struct">KTHREAD</span> 
  being 0x01D8 and 0x01B0 bytes in versions 3.10 and 3.50, respectively. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Future </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source">DISPATCHER_HEADER Header;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x00 </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>
        <pre class="source">LIST_ENTRY MutantListHead;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x10 </td>
      </tr>
      <tr>
        <td>0x18 (3.10) </td>
        <td>
        <pre class="source">LIST_ENTRY MutexListHead;</pre>
        </td>
        <td>3.10 only </td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">MutantListHead</span> persists as the second
  <span class="struct">KTHREAD</span> member through all the structure’s early rearrangements 
  up to and including version 5.2, before version 6.0 moved it to nearly the end. 
  By contrast, the <span class="member">MutexListHead</span> is unique to version 
  3.10. The name <span class="member">MutexListHead</span> is a guess, proposed 
  on the pattern of <span class="member">MutantListHead</span> whose name is known 
  from symbol files for later versions, but it is a guess that has the support of 
  showing in the output of the <span class="command">!thread</span> command as implemented 
  by I386KD from the DDK for Windows NT 3.10. </p>
  <p>When a thread waits successfully (including trivially) on a mutant or mutex 
  object, it acquires the object exclusively. No other thread can acquire it until 
  the owning thread releases it. All such objects that the thread currently owns 
  have the thread stamped into them as their <span class="member">OwnerThread</span> 
  member and are linked into the thread’s <span class="member">MutantListHead</span> 
  or <span class="member">MutexListHead</span>, as appropriate, through their
  <span class="member">MutantListEntry</span> or <span class="member">MutexListEntry</span> 
  members, respecively.&nbsp; </p>
  <p>That there are two lists in version 3.10 is because in this version the
  <span class="struct"><a href="../../ke_x/kmutex.htm">KMUTEX</a></span> and
  <span class="struct">KMUTANT</span> are different objects. Indeed, the mutex is 
  different enough from all other dispatcher objects that it has its own exported 
  function, <span class="function">KeWaitForMutexObject</span>, which is in this 
  version separate from <span class="function">KeWaitForSingleObject</span>. How 
  exactly the <span class="struct">KMUTEX</span> and <span class="struct">KMUTANT</span> 
  differed in version 3.10 is not without implications for later versions, and may 
  be taken up elsewhere as its own subject. Here, it’s of historical interest only: 
  as soon as version 3.50 the <span class="struct">KMUTEX</span> and
  <span class="struct">KMUTANT</span> become one and the same. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Future </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x20 (3.10); <br>
        0x18 (3.50) </td>
        <td>unknown <span class="struct">LIST_ENTRY</span> </td>
        <td>3.10 to 3.50 </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x28 (3.10); <br>
        0x20 (3.50) </td>
        <td>
        <pre class="source">LIST_ENTRY ThreadListEntry;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x01A4 </td>
      </tr>
      <tr>
        <td>0x30 (3.10): <br>
        0x28 (3.50) </td>
        <td>
        <pre class="source">LIST_ENTRY WaitListEntry;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x58 </td>
      </tr>
    </tbody>
  </table>
  <p>In contast to the first two <span class="struct">LIST_ENTRY</span> structures 
  in the <span class="struct">KTHREAD</span>, which are both list heads that objects 
  are linked into, the next three list entries link the thread into other lists.
  </p>
  <p>The <span class="member">ThreadListEntry</span> is arguably the best known 
  and most permanent. It links the thread with the other threads of the same process. 
  The head of this list is the <span class="member">ThreadListHead</span> in the
  <span class="struct">EPROCESS</span>. The thread is linked into this list at the 
  end of initialising the thread object and it then stays in this list until the 
  thread is terminated (specifically until all threads that wait for the thread’s 
  termination are signalled). </p>
  <p>The <span class="member">ThreadListEntry</span> is also the most permanent 
  in that there is absolutely no doubt about its existence through the whole history 
  of Windows. For the other two of these <span class="struct">LIST_ENTRY</span> 
  members, the correspondence with later versions is not yet established with certainty.
  </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Future </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td rowspan="2">0x38 (3.10); <br>
        0x30 (3.50) </td>
        <td>
        <pre class="source">LARGE_INTEGER KernelTime;</pre>
        </td>
        <td>3.10 only </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG KernelTime;</pre>
        </td>
        <td>3.50 only </td>
        <td>next at 0x0138 </td>
      </tr>
      <tr>
        <td rowspan="2">0x40 (3.10); <br>
        0x34 (3.50) </td>
        <td>
        <pre class="source">LARGE_INTEGER UserTime;</pre>
        </td>
        <td>3.10 only </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>
        <pre class="source">ULONG UserTime;</pre>
        </td>
        <td>3.50 only </td>
        <td>next at 0x013C </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">KernelTime</span> and <span class="member">UserTime</span> 
  are retrievable from user mode through the <span class="function">NtQueryInformationThread</span> 
  and <span class="function">ZwQueryInformationThread</span> functions when given 
  the information class <span class="constant">ThreadTimes</span> (1). They then 
  show as the same-named members of a <span class="struct">KERNEL_USER_TIMES</span> 
  structure that the caller provides for output. Version 3.10 keeps them as 64-bit 
  times. Later versions keep them as 32-bit tick counts. </p>
  <p>Whatever their size, and despite being soon moved near to the end of the
  <span class="struct">KTHREAD</span>, the <span class="member">KernelTime</span> 
  and <span class="member">UserTime</span> are kept together until version 5.2 SP1 
  squeezes them into unused space in the <span class="member">SuspendApc</span>.
  </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Future </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x48 (3.10); <br>
        0x38 (3.50) </td>
        <td>
        <pre class="source"><a href="../../ntosdef_x/ktimer.htm">KTIMER</a> Timer;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0xE8 </td>
      </tr>
      <tr>
        <td>0x70 (3.10); <br>
        0x60 (3.50) </td>
        <td>
        <pre class="source">KAPC SuspendApc;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x0160 </td>
      </tr>
      <tr>
        <td>0xA0 (3.10); <br>
        0x90 (3.50) </td>
        <td>
        <pre class="source">KSEMAPHORE SuspendSemaphore;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x0190 </td>
      </tr>
      <tr>
        <td>0xB4 (3.10); <br>
        0xA4 (3.50) </td>
        <td>
        <pre class="source"><a href="../../ke_x/kwait_block.htm">KWAIT_BLOCK</a> WaitBlock [5];</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x68 </td>
      </tr>
    </tbody>
  </table>
  <p>A <span class="struct">KWAIT_BLOCK</span> is needed for each dispatcher object 
  that a thread waits on. That callers of <span class="function">KeWaitForSingleObject</span> 
  aren’t asked for one is because the <span class="struct">KTHREAD</span> has its 
  own. That callers of <span class="function">KeWaitForMultipleObjects</span> typically 
  don’t have to provide an array of wait blocks for the multiple objects is because 
  the <span class="struct">KTHREAD</span> has not just one but several. The first 
  three in the <span class="member">WaitBlock</span> array have this purpose. Starting 
  with the NTDDK.H from the Device Driver Kit (DDK) for Windows NT 4.0, this number 
  of what a comment calls “Builtin usable wait blocks” is defined as
  <span class="macro">THREAD_WAIT_OBJECTS</span>. The comment is remarkably succinct: 
  those three are not all of the built-in wait blocks, just the ones that are usable 
  for callers who do not provide their own. All versions have at least one more 
  built-in wait block that is not usable for waiting on a caller’s provision of 
  multiple objects. These early versions have two more. </p>
  <p>Before version 4.0, the <span class="struct">KWAIT_BLOCK</span> whose 0-based 
  index is 3 is dedicated to synchronising a client and a server through an event-pair 
  object. This type of kernel object seems never to have been formally documented 
  (though the obvious name <span class="struct">KEVENT_PAIR</span> is known, along 
  with names and offsets of members, from the output of early debugger extensions). 
  Two user-mode threads—you might call them client and server—create or open a pair 
  of synchronisation events as one object by calling the NTDLL functions
  <span class="function">NtCreateEventPair</span> and <span class="function">NtOpenEventPair</span>. 
  The two events—call them low and high—each represent one thread’s work. When one 
  thread completes work for the other, it signals its own of the events and waits 
  on the other’s. They each do this as one call to the kernel, passing one handle 
  to the NTDLL functions <span class="function">NtSetLowWaitHighEventPair</span> 
  and <span class="function">NtSetHighWaitLowEventPair</span>. In version 5.0 and 
  higher, once this operation gets to the kernel and the handles are resolved to 
  objects, the kernel actually does just call <span class="function">KeSetEvent</span> 
  for one event and <span class="function">KeWaitForSingleObject</span> for the 
  other. Earlier versions, however, look for efficiency from the certainty that 
  setting the event is just the first operation in a pair. They even give each thread 
  a built-in event pair—though in the <span class="struct">ETHREAD</span> not the
  <span class="struct">KTHREAD</span>—that a client and server can operate through 
  the NTDLL functions <span class="function">NtSetLowWaitHighThread</span> and
  <span class="function">NtSetHighWaitLowThread</span> without the overhead of interpreting 
  a handle. The original Windows versions apparently regarded this as so important 
  that these functions get to the kernel through their own interrupt numbers (0x2B 
  and 0x2C), thus shaving away even the small overhead of having the kernel look 
  up its service table. Though this special attention given to synchronising with 
  event pairs is arguably nothing but dim prehistory now, one formal vestige remains 
  to this day in NTSTATUS.H where comments for <span class="constant">STATUS_NO_EVENT_PAIR</span> 
  talk of a “thread specific client/server event pair object”. </p>
  <p>The last built-in <span class="struct">KWAIT_BLOCK</span> is dedicated to the 
  thread’s own <span class="member">Timer</span> when a wait for multiple objects 
  has a timeout. The <span class="member">Timer</span> is implied as an additional 
  object to wait for whenever a non-zero timeout is specified, whether the wait 
  is for a single object or for mutliple objects. The wait for a single object is 
  simpler, of course: the first built-in <span class="struct">KWAIT_BLOCK</span> 
  is used for the object and the second for the timer. In a wait for multiple objects 
  without a caller-supplied <span class="struct">KWAIT_BLOCK</span> array, the second 
  (and third) <span class="struct">KWAIT_BLOCK</span> in the built-in array may 
  be needed for the objects the caller specifies. All versions therefore need one 
  more built-in <span class="struct">KWAIT_BLOCK</span> for the built-in
  <span class="member">Timer</span>. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Future </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0140 (3.10); <br>
        0x0130 (3.50) </td>
        <td>
        <pre class="source">KAPC_STATE ApcState;</pre>
        </td>
        <td>3.10 ro 3.50 </td>
        <td>next at 0x30 </td>
      </tr>
      <tr>
        <td>0x0158 (3.10); <br>
        0x0148 (3.50) </td>
        <td>
        <pre class="source">KAPC_STATE SavedApcState;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x0140 </td>
      </tr>
      <tr>
        <td>0x0170 (3.10); <br>
        0x0160 (3.50) </td>
        <td>
        <pre class="source">KAPC_STATE *ApcStatePointer [2];</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x012C </td>
      </tr>
      <tr>
        <td>0x0178 (3.10); <br>
        0x0168 (3.50) </td>
        <td>
        <pre class="source">PVOID InitialStack;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x18 </td>
      </tr>
      <tr>
        <td>0x017C (3.10); <br>
        0x016C (3.50) </td>
        <td>
        <pre class="source">PVOID KernelStack;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x20 </td>
      </tr>
    </tbody>
  </table>
  <p>The <span class="member">InitialStack</span> is the address immediately above 
  the 8KB that these versions allow for the thread’s kernel-mode stack. It is however 
  not where <span class="register">esp</span> points for the thread’s very first
  <span class="instruction">push</span>. The top of the stack is given over to a
  <span class="struct">FLOATING_SAVE_AREA</span>. The pushing and popping of actual 
  execution all takes place beneath that. </p>
  <p>When a processor is switched from one thread to another, the
  <span class="member">KernelStack</span> marks how far <span class="register">esp</span> 
  had come down for the outgoing thread and thus also where it will need to be restored 
  to when the internal routine <span class="routine">ContextSwap</span> next switches 
  a processor to the thread. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Future </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0180 (3.10); <br>
        0x0170 (3.50) </td>
        <td>
        <pre class="source">PVOID Teb;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x24 </td>
      </tr>
      <tr>
        <td>0x0184 (3.10); <br>
        0x0174 (3.50) </td>
        <td>
        <pre class="source">ULONG ContextSwitches;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x48 </td>
      </tr>
      <tr>
        <td>0x0188 (3.10) </td>
        <td>
        <pre class="source">ULONG MutexLevel;</pre>
        </td>
        <td>3.10 only </td>
        <td>&nbsp;</td>
      </tr>
    </tbody>
  </table>
  <p>The name <span class="member">MutexLevel</span> is taken from the output of 
  the <span class="command">!thread</span> command as implemented by I386KD from 
  the DDK for Windows NT 3.10. It is the highest <span class="member">Level</span> 
  of any <span class="struct">KMUTEX</span> that the thread currently owns. The 
  point to the level is to defend against deadlocks by enforcing an order of acquisition, 
  specifically only ever to higher levels. It is a serious error—with its own bug 
  check code, <span class="constant">MUTEX_LEVEL_NUMBER_VIOLATION</span> (0x0D)—if 
  a thread that already owns a mutex tries to acquire another whose level is not 
  higher. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x018C (3.10) </td>
        <td>
        <pre class="source">LONG Quantum;</pre>
        </td>
        <td>3.10 only </td>
        <td>next as <span class="type">CHAR</span> at 0x01AB </td>
      </tr>
      <tr>
        <td>0x0190 (3.10) </td>
        <td>
        <pre class="source">ULONG Iopl;</pre>
        </td>
        <td>3.10 only </td>
        <td>next as <span class="type">UCHAR</span> at 0x01AC </td>
      </tr>
      <tr>
        <td>0x0194 (3.10) </td>
        <td>
        <pre class="source">ULONG KernelApcDisable;</pre>
        </td>
        <td>3.10 only </td>
        <td>next as <span class="type">UCHAR</span> at 0x01AE </td>
      </tr>
    </tbody>
  </table>
  <p>The preceding three are the only <span class="struct">KTHREAD</span> members 
  that version 3.50 shifts out of sequence. Each is narrowed to eight bits and moved 
  to the end of the structure. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0198 (3.10) </td>
        <td>unaccounted 0x0C bytes </td>
        <td>3.10 only </td>
      </tr>
      <tr>
        <td>0x01A4 (3.10) </td>
        <td>unknown pointer </td>
        <td>3.10 only </td>
      </tr>
      <tr>
        <td>0x01A8 (3.10); <br>
        0x0178 (3.50) </td>
        <td>unaccounted eight bytes </td>
        <td>3.10 to 3.50 </td>
      </tr>
    </tbody>
  </table>
  <p>Version 3.10 has a hard-coded maximum number of threads that can exist concurrently. 
  This arises from keeping a table of pointers to threads. The table is a set of 
  variables in the kernel’s own data: a count of entries; an array of 0x0100 possible 
  pointers to table segments; a pointer to the first free entry; an initial segment; 
  and supporting synchronisation. Each segment is an array of 0x0100 pointers. These 
  are the table’s entries. An entry’s interpretation depends on its low bit. If 
  clear, the entry holds the address of a thread. If set, the entry is free. What 
  it holds, disregarding its set low bit, is the address of the next free entry.
  </p>
  <p>In an initialised thread, the pointer at offset 0x01A4 is the address of the 
  thread’s entry in the thread table. At the thread’s termination, this pointer 
  allows that that the thread’s entry in the thread table is quickly found and freed. 
  Whatever was Microsoft’s name for this pointer might never be known: the thread 
  table is gone as soon as version 3.50. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Future </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x01B0 (3.10); <br>
        0x0180 (3.50) </td>
        <td>
        <pre class="source">ULONG WaitTime;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x60 </td>
      </tr>
      <tr>
        <td>0x0184 (3.50) </td>
        <td>unaccounted four bytes </td>
        <td>3.50 only </td>
        <td>&nbsp;</td>
      </tr>
      <tr>
        <td>0x01B4 (3.10); <br>
        0x0188 (3.50) </td>
        <td>
        <pre class="source">KAFFINITY Affinity;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x0118 </td>
      </tr>
      <tr>
        <td>0x01B8 (3.10); <br>
        0x018C (3.50) </td>
        <td>
        <pre class="source">KWAIT_BLOCK *WaitBlockList;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x54 </td>
      </tr>
      <tr>
        <td>0x01BC (3.10); <br>
        0x0190 (3.50) </td>
        <td>
        <pre class="source">NTSTATUS WaitStatus;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x4C </td>
      </tr>
      <tr>
        <td>0x01C0 (3.10); <br>
        0x0194 (3.50) </td>
        <td>
        <pre class="source">BOOLEAN Alertable;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x0158 </td>
      </tr>
      <tr>
        <td>0x01C1 (3.10); <br>
        0x0195 (3.50) </td>
        <td>
        <pre class="source">BOOLEAN Alerted [MaximumMode];</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x2A </td>
      </tr>
      <tr>
        <td>0x01C3 (3.10); <br>
        0x0197 (3.50) </td>
        <td>
        <pre class="source">BOOLEAN ApcQueueable;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x015A </td>
      </tr>
      <tr>
        <td>0x01C4 (3.10); <br>
        0x0198 (3.50) </td>
        <td>
        <pre class="source">BOOLEAN AutoAlignment;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x015B </td>
      </tr>
      <tr>
        <td>0x01C5 (3.10); <br>
        0x0199 (3.50) </td>
        <td>
        <pre class="source">BOOLEAN DebugActive;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x28 </td>
      </tr>
      <tr>
        <td>0x01C6 (3.10); <br>
        0x019A (3.50) </td>
        <td>
        <pre class="source">BOOLEAN Preempted;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x011C </td>
      </tr>
      <tr>
        <td>0x01C7 (3.10); <br>
        0x019B (3.50) </td>
        <td>
        <pre class="source">BOOLEAN ProcessReadyQueue;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x011D </td>
      </tr>
      <tr>
        <td>0x01C8 (3.10); <br>
        0x019C (3.50) </td>
        <td>
        <pre class="source">BOOLEAN KernelStackResident;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x011E </td>
      </tr>
      <tr>
        <td>0x01C9 (3.10); <br>
        0x019D (3.50) </td>
        <td>
        <pre class="source">BOOLEAN WaitNext;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x52 </td>
      </tr>
      <tr>
        <td>0x01CA (3.10); <br>
        0x019E (3.50) </td>
        <td>
        <pre class="source">UCHAR ApcStateIndex;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x0159 </td>
      </tr>
      <tr>
        <td>0x01CB (3.10); <br>
        0x019F (3.50) </td>
        <td>
        <pre class="source">UCHAR DecrementCount;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x65 </td>
      </tr>
      <tr>
        <td>0x01CC (3.10); <br>
        0x01A0 (3.50) </td>
        <td>
        <pre class="source">UCHAR NextProcessor;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x011F </td>
      </tr>
      <tr>
        <td>0x01CD (3.10); <br>
        0x01A1 (3.50) </td>
        <td>
        <pre class="source">CHAR Priority;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x2F </td>
      </tr>
      <tr>
        <td>0x01CE (3.10); <br>
        0x01A2 (3.50) </td>
        <td>
        <pre class="source">UCHAR State;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x29 </td>
      </tr>
      <tr>
        <td>0x01CF (3.10); <br>
        0x01A3 (3.50) </td>
        <td>
        <pre class="source">CHAR FreezeCount;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x01AC </td>
      </tr>
      <tr>
        <td>0x01D0 (3.10); <br>
        0x01A4 (3.50) </td>
        <td>
        <pre class="source">CHAR SuspendCount;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x01AD </td>
      </tr>
      <tr>
        <td>0x01D1 (3.10); <br>
        0x01A5 (3.50) </td>
        <td>
        <pre class="source">KIRQL WaitIrql;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x50 </td>
      </tr>
      <tr>
        <td>0x01D2 (3.10); <br>
        0x01A6 (3.50) </td>
        <td>
        <pre class="source">KPROCESSOR_MODE WaitMode;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x51 </td>
      </tr>
      <tr>
        <td>0x01D3 (3.10); <br>
        0x01A7 (3.50) </td>
        <td>
        <pre class="source">UCHAR WaitReason;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>next at 0x53 </td>
      </tr>
    </tbody>
  </table>
  <p>The single-byte <span class="member">State</span> member takes its values from 
  the undocumented <span class="enum"><a href="../kthread_state.htm">KTHREAD_STATE</a></span> 
  enumeration—or is known to in much later versions. What could have been known 
  with certainty in 1993 is that the <span class="command">!thread</span> command 
  as implemented by the I386KD debugger from the DDK for Windows NT 3.10 presents 
  the following as possible values for <span class="member">State</span>: </p>
  <ul>
    <li>0 is INITIALIZED; </li>
    <li>1 is READY; </li>
    <li>2 is RUNNING; </li>
    <li>3 is STANDBY; </li>
    <li>4 is TERMINATED; </li>
    <li>5 is WAIT; </li>
    <li>6 is TRANSITION. </li>
  </ul>
  <p>When <span class="member">State</span> is 5, the <span class="member">WaitReason</span> 
  tells something of why. It takes its values from the documented
  <span class="enum">KWAIT_REASON</span> enumeration. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
      <col class="Remarks" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Definition </th>
        <th>Versions </th>
        <th>Remarks </th>
        <th>Future </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x01D4 (3.10); <br>
        0x01A8 (3.50) </td>
        <td>
        <pre class="source">KPROCESSOR_MODE PreviousMode;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>&nbsp;</td>
        <td>next at 0x0134 </td>
      </tr>
      <tr>
        <td>0x01D5 (3.10); <br>
        0x01A9 (3.50) </td>
        <td>
        <pre class="source">CHAR BasePriority;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td></td>
        <td>next at 0x64 </td>
      </tr>
      <tr>
        <td>0x01D6 (3.10); <br>
        0x01AA (3.50) </td>
        <td>
        <pre class="source">CHAR PriorityDecrement;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>&nbsp;</td>
        <td>next at 0x66 </td>
      </tr>
      <tr>
        <td>0x01AB (3.50) </td>
        <td>
        <pre class="source">CHAR Quantum;</pre>
        </td>
        <td>3.50 only </td>
        <td>previously as <span class="type">LONG</span> at 0x018C </td>
        <td>next at 0x67 </td>
      </tr>
      <tr>
        <td>0x01AC (3.50) </td>
        <td>
        <pre class="source">UCHAR Iopl;</pre>
        </td>
        <td>3.50 only </td>
        <td>previously as <span class="type">ULONG</span> at 0x0190 </td>
        <td>next at 0x2C </td>
      </tr>
      <tr>
        <td>0x01D7 (3.10); <br>
        0x01AD (3.50) </td>
        <td>
        <pre class="source">UCHAR NpxState;</pre>
        </td>
        <td>3.10 to 3.50 </td>
        <td>&nbsp;</td>
        <td>next at 0x2D </td>
      </tr>
      <tr>
        <td>0x01AE (3.50) </td>
        <td>
        <pre class="source">UCHAR KernelApcDisable;</pre>
        </td>
        <td>3.50 only </td>
        <td>previously as <span class="type">ULONG</span> at 0x0194 </td>
        <td>next at 0xD0 </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 4th May 2017 from material that was 
    first published on 15th <a href="../../../../../../../../new/16/06.htm">June 
    2016</a>. It was last modified on 7th October 2022. </p>
    <!--webbot bot="Include" U-Include="../../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="14250" -->
  </div>
</div>

</body>

</html>
