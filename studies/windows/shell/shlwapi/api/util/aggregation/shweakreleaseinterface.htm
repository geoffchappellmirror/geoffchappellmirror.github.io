<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>SHWeakReleaseInterface</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="14798" endspan -->
<h1>SHWeakReleaseInterface </h1>
<p>This function releases an inner object’s interface. </p>
<h2>Declaration </h2>
<pre class="source">VOID SHWeakReleaseInterface (
    IUnknown *punkOuter,
    IUnknown **ppunk);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">punkOuter</span> argument is an interface pointer 
to an outer object. </p>
<p>The <span class="argument">ppunk</span> argument provides the address of a variable 
in which the caller may hold an interface pointer to an inner object. </p>
<h2>Behaviour </h2>
<p>If the variable at <span class="argument">ppunk</span> holds NULL, then there 
is no interface pointer to the inner object, and the function does nothing. Otherwise, 
the function adds a reference to the outer object, clears the interface pointer 
and releases whatever the interface pointer had been pointing to. </p>
<h3>Aggregation </h3>
<p>The function seems intended to ease some bookkeeping with COM aggregation. An 
outer (aggregating) object contains an inner (aggregable) object such that the inner 
object’s interfaces seem to be those of the outer object. Reference counting for 
the pair requires that whenever an interface pointer to the inner object is released, 
the reference returns to the outer object’s <span class="interface">IUnknown</span> 
interface. </p>
<p>The <span class="function">SHWeakReleaseInterface</span> function seems intended 
to ease some bookkeeping with COM aggregation. An outer (aggregating) object contains 
an inner (aggregable) object such that the inner object’s interfaces seem to be 
those of the outer object. Part of the technique is that the inner object implements 
an explicit <span class="interface">IUnknown</span> interface that gives access 
to its other interfaces, but has all its other interfaces delegate their
<span class="interface">IUnknown</span> methods to an outer
<span class="interface">IUnknown</span> interface provided by the outer object. 
Proper reference counting demands the following rule, which Microsoft’s page
<a target="_top" href="http://msdn.microsoft.com/library/ms686558.aspx">Aggregation 
(COM)</a> expresses as: </p>
<blockquote>
  To free this pointer, the outer object calls its controlling <b>IUnknown AddRef</b> 
  method, followed by <b>Release</b> on inner object’s pointer.
</blockquote>
<p>Using the <span class="function">SHWeakReleaseInterface</span> function conveniently 
deals with both steps as one. </p>
<h2>Availability </h2>
<p>The <span class="function">SHWeakReleaseInterface</span> function is exported 
from SHLWAPI.DLL as ordinal 268 in version 5.00 and higher. </p>
<!--webbot bot="Include" U-Include="../../_include/undoc500-2007.htm" TAG="BODY" startspan -->

<p>Though this function dates from as long ago as 1999, it was still not documented 
by Microsoft as late as the January 2007 edition of the Windows Vista Software Development 
Kit (SDK). </p>

<!--webbot bot="Include" i-checksum="62277" endspan -->
<h3>Use by Microsoft </h3>
<p>Before Windows Vista, the <span class="function">SHWeakReleaseInterface</span> 
function was imported by BROWSEUI.DLL, SHDOCVW.DLL and SHELL32.DLL. Since SHDOCVW 
is beyond debate as being part of Internet Explorer, the only way that this function 
can be exempt from needing to be documented among the
<a target="_top" href="http://msdn.microsoft.com/library/ms807073.aspx">Settlement 
Program Interfaces</a> is that Microsoft does not count SHLWAPI as part of any Windows Operating 
System Product for the terms of the settlement. For Windows Vista, Microsoft evades 
the compliance issue. Where use of the function by BROWSEUI and SHDOCVW is transferred 
to or reproduced in the new DLL named IEFRAME, the latter does not import the function 
from SHLWAPI but instead calls its own copy. </p>
<p>Windows Vista also sees this function acquire new use, in TWEXT.DLL, which is 
the Time Warp namespace extension and is responsible for the Previous Versions tab 
in the Properties dialog for files. </p>
<div class="Footer">
  <p class="Dates">This page was created on 2nd June 2009 and was last modified 
  on 1st July 2009. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c09.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009. Geoff Chappell. All rights reserved.
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="7105" endspan -->
</div>

</body>

</html>