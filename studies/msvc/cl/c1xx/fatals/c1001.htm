<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Visual C++ Compiler Fatal Error C1001</title>
<link rel="stylesheet" type="text/css" href="../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/msvc.css">
<script type="text/javascript" src="../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="24274" endspan -->
<h1>Visual C++ Compiler Fatal Error C1001 </h1>
<h2>Message Text </h2>
<pre class="output">INTERNAL COMPILER ERROR
        (compiler file &#39;<span class="placeholder">file</span>&#39;, line <span class="placeholder">number</span>)
         Please choose the Technical Support command on the Visual C++
         Help menu, or open the Technical Support help file for more information</pre>
<h2>Circumstances </h2>
<p>Error C1001 is the main error in which the compiler admits to something having 
gone wrong internally, as opposed to being wrong with what its user provided as 
input or arranged as the execution environment. Moreoever, though what has gone 
wrong may have been anticipated, it is highly unexpected and not easily explained.
</p>
<p>Broadly speaking, this error’s very many possible occurrences can be attributed 
to two processes: assertions and exceptions. For an assertion, the compiler anticipates
<span class="emphasis">something</span> that may go wrong. For an exception, the 
compiler anticipates <span class="emphasis">that</span> something may go wrong.
</p>
<h3>Assertions </h3>
<p class="alert">TO BE DONE </p>
<h3>Exceptions </h3>
<p>The value of this error when reporting an exception is greatly reduced because 
although the error message does at least cite which line of the user’s source code 
the compiler was grappling with at the time, the rest of the error message tells 
nothing of the faulting instruction or of the nature of the fault. What is described 
is not where the fault occurred but where in the compiler’s source code the compiler 
got round to reporting the fault as an internal compiler error. Indeed, all “exception” 
cases of error C1001 cite the same compiler file and one of just two line numbers, 
namely (in version 13.00.9466) </p>
<pre class="output">compiler file &#39;msc1.cpp&#39;, line 1414</pre>
<p>and </p>
<pre class="output">compiler file &#39;msc1.cpp&#39;, line 2844</pre>
<p>Of these, the second has much the greater opportunity for occurrence. It also 
may show as a different fatal error. Of particular significance is that if an error 
has already occurred, then an exception that would otherwise have caused this case 
of fatal error C1001 is instead reported as fatal error <a href="c1903.htm">C1903</a>.
</p>
<p>Almost by definition, the C1001 cases that are caused by CPU exceptions are coding 
errors in the compiler. Perhaps this is just so obvious it needn’t be said, at least 
not directly. The product documentation manages little more than “the compiler cannot 
generate correct code for a construct”, which is true, but only in the best tradition 
of euphemism: it has absolutely no useful content, being trivially true of any error 
that stops compilation from proceeding to successful completion, and it is doubtful 
that anybody would think to write such a description except as euphemism. A frank 
explanation would admit to something such as “our programmers slipped up and the 
compiler has just tried to do some such rubbish as dereference a null pointer.”
</p>
<p>It is arguable, of course, that details of the exception can have hardly any 
value even to the most advanced of users. The compiler’s code has caused a CPU exception 
and there is nothing the user can do about it except rewrite the code in the hope 
of avoiding the compiler’s defect. The exception details are better left to those 
of Microsoft’s own programmers who work on the compiler and know it well enough 
for deduction of what has gone wrong in their code. </p>
<p>That said, the exception details are obtainable, and without having to reproduce 
the exception while the compiler runs under a debugger. Instead, compile with the 
(undocumented) <span class="switch"><a href="../../cl/options/b$d.htm">/Bd</a></span> 
option to defeat the compiler’s exception handlers. The fault then passes from the 
compiler as unhandled, which in practice these days leaves it to be picked up by 
Dr Watson with an offer to send details to Microsoft over the Internet. </p>
<p>Among the known cases of the front-end C++ compiler raising error C1001 because 
a coding error causes a CPU exception are: </p>
<table>
  <tr>
    <td>Evaluation of built-in macro <span class="macro">
    <a href="../../../language/preprocessor/macros/builtin/wchar_t_defined.htm">
    _WCHAR_T_DEFINED</a></span> </td>
    <td>execution at address zero </td>
  </tr>
  <tr>
    <td><span class="directive">
    <a href="../../../language/preprocessor/directives/pragma/start_map_region.htm">
    #pragma start_map_region</a></span> without argument </td>
    <td>dereference of null pointer </td>
  </tr>
  <tr>
    <td><span class="keyword">
    <a href="../../../language/keywords/declspec/property.htm">__declspec (property)</a></span> 
    outside class definition </td>
    <td>data access outside array bounds </td>
  </tr>
</table>
<div class="Footer">
  <p class="Dates">This page was created on 22nd March 2006 and was last modified 
  on 10th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c0609.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2006-2009. Geoff Chappell. All rights reserved.
<a href="../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="62552" endspan -->
</div>

</body>

</html>
