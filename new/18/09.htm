<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Updated in September 2018</title>
<link rel="stylesheet" type="text/css" href="../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/tree.css">
<script type="text/javascript" src="../../_scripts/master.js"></script>
<script type="text/javascript" src="../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/tree.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript Header" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="14880" -->
<div class="Main">
  <h1>Updated in September 2018 </h1>
  <p>Not all undocumented Windows structures are equally undocumented. Most prominent 
  ones have some official disclosure—certainly not documentation, but disclosure 
  nonetheless—through type information in the public symbol files. For a handful 
  of prominent ones type information has made it into the public symbol files only 
  for a smattering of versions. The structure in which WIN32K.SYS keeps what it 
  knows of a process surely counts as prominent. Yet the public symbol files for 
  WIN32K have type information for this structure in version 6.1 only. Worse, this 
  type information is incorrect even though the symbol files do match the executables. 
  So it’s big news, relatively speaking, that the public symbol files in the 1803 
  release of Windows 10 have type information for the sub-structure at this one’s 
  start. </p>
  <p>It turns out that a few structures that have never or only rarely had type 
  information in public symbol files have it for the 1803 release. I attended to 
  some of that back in <a href="07.htm">July</a>, just as fallout from my articles 
  on driver signing, but clearly it’s (past) time for a round of updating the bookkeeping. 
  Where are the research students to do this? </p>
  <p>Having Microsoft’s names and types is always welcome. Understanding anyone 
  else’s code is <span class="emphasis">very</span> much harder when you have to 
  make up names for everything. Of course, having the manufacturer’s names doesn’t 
  mean you should trust that what’s named truly does what the name suggests (any 
  more than having source code would give you the luxury of believing the comments). 
  But a little extra watchfulness against being misled is nothing against the extra 
  work of inventing good names and tracking all your changes of them as your understanding 
  develops. </p>
  <p>The ideal, of course, is to have not just a bare catalogue of offsets, types 
  and names, but some level of informed annotation—and to have it as basic, common 
  knowledge for all who study Windows. Why is some sort of curation not organised 
  by someone who has the resources to do it more frequently? </p>
  <h2>Kernel </h2>
  <div class="Tree">
    <ul>
      <li class="Expanded Branch">Kernel
      <ul>
        <li class="Expanded Branch">Structures
        <ul>
          <li class="Expanded Branch"><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ntosdef_x/dispatcher_header/index.htm">DISPATCHER_HEADER</a>
          <ul>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ntosdef_x/dispatcher_header/threadcontrolflags.htm">Thread Control Flags</a> </li>
          </ul>
          </li>
          <li class="Expanded Branch"><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/index.htm">EPROCESS</a>
          <ul>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/flags.htm">Flags</a> </li>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/flags2.htm">Flags2</a> </li>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/flags3.htm">Flags3</a> </li>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/mitigationflags.htm">MitigationFlags</a> (new) </li>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/eprocess/mitigationflags2.htm">MitigationFlags2</a> (new) </li>
          </ul>
          </li>
          <li class="Expanded Branch"><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/ethread/index.htm">ETHREAD</a>
          <ul>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/ethread/crossthreadflags.htm">CrossThreadFlags</a> </li>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/ethread/samethreadapcflags.htm">SameThreadApcFlags</a> </li>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ps/ethread/samethreadpassiveflags.htm">SameThreadPassiveFlags</a> </li>
          </ul>
          </li>
          <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/hal/hal_private_dispatch.htm">HAL_PRIVATE_DISPATCH</a> </li>
          <li class="Expanded Branch"><a href="../../studies/windows/km/ntoskrnl/inc/ntos/kprcb.htm">KPRCB</a>
          <ul>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/i386_x/kprcb/index.htm">32-bit (i386)</a> </li>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/amd64_x/kprcb/index.htm">64-bit (amd64)</a> </li>
          </ul>
          </li>
          <li class="Expanded Branch"><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ke/kprocess/index.htm">KPROCESS</a>
          <ul>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ke/kprocess/processflags.htm">ProcessFlags</a> </li>
          </ul>
          </li>
          <li class="Expanded Branch"><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ke/kthread/index.htm">KTHREAD</a>
          <ul>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ke/kthread/threadflags.htm">ThreadFlags</a> </li>
          </ul>
          </li>
          <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/ktrap_frame.htm">KTRAP_FRAME</a> </li>
          <li><a href="../../studies/windows/km/ntoskrnl/inc/api/ntexapi_x/kuser_shared_data/index.htm">KUSER_SHARED_DATA</a> </li>
          <li><a href="../../studies/windows/km/ntoskrnl/inc/api/arc/memory_allocation_descriptor.htm">MEMORY_ALLOCATION_DESCRIPTOR</a> </li>
          <li><a href="../../studies/windows/km/ntoskrnl/inc/ntos/procpowr/processor_power_state.htm">PROCESSOR_POWER_STATE</a> </li>
        </ul>
        </li>
      </ul>
      </li>
      <li class="Expanded Branch">Win32k
      <ul>
        <li class="Expanded Branch">Structures
        <ul>
          <li><a href="../../studies/windows/km/win32k/structs/processinfo/index.htm">PROCESSINFO</a> </li>
          <li><a href="../../studies/windows/km/win32k/structs/threadinfo/index.htm">THREADINFO</a> </li>
        </ul>
        </li>
      </ul>
      </li>
    </ul>
  </div>
  <h2>Win32 </h2>
  <div class="Tree">
    <ul>
      <li class="Expanded Branch">NTDLL
      <ul>
        <li class="Expanded Branch">Structures
        <ul>
          <li><a href="../../studies/windows/km/ntoskrnl/inc/api/ntldr/ldr_data_table_entry.htm">LDR_DATA_TABLE_ENTRY</a> </li>
          <li class="Expanded Branch"><a href="../../studies/windows/km/ntoskrnl/inc/api/pebteb/peb/index.htm">PEB</a>
          <ul>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/api/pebteb/peb/bitfield.htm">Bit Field</a> </li>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/api/pebteb/peb/crossprocessflags.htm">Cross-Process Flags</a> </li>
          </ul>
          </li>
          <li class="Expanded Branch"><a href="../../studies/windows/km/ntoskrnl/inc/api/pebteb/teb/index.htm">TEB</a>
          <ul>
            <li><a href="../../studies/windows/km/ntoskrnl/inc/api/pebteb/teb/sametebflags.htm">Same-TEB Flags</a> </li>
          </ul>
          </li>
        </ul>
        </li>
      </ul>
      </li>
    </ul>
  </div>
  <p>The good and bad in this is that I find small mistakes. Good because mistakes 
  don’t quite mortify me, but do very nearly, and it’s vital that they get corrected. 
  Bad because I wonder how it is that my errors aren’t pointed out much sooner (and 
  more frequently, for surely there are many more than I yet know). Does anyone 
  actually read any of this material? </p>
  <div class="Footer">
    <!--webbot bot="Include" U-Include="../../_include/c18.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2018. Geoff Chappell. All rights reserved.  
<a href="../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="40676" -->
  </div>
</div>

</body>

</html>
