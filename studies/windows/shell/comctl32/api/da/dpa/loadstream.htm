<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>DPA_LoadStream</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="14798" endspan -->
<h1>DPA_LoadStream </h1>
<p>This function creates a DPA and loads it with items read from a specially formatted 
stream. </p>
<h2>Declaration </h2>
<pre class="source">HRESULT
DPA_LoadStream (
    HDPA *ppdpa,
    PFNDPASTREAM pfn,
    IStream *pstm,
    PVOID pvInstData);</pre>
<!--webbot bot="Include" U-Include="_include/scb.htm" TAG="BODY" startspan -->

<p>The callback function has the prototype: </p>
<pre class="source">typedef HRESULT (*PFNDPASTREAM) (
    DPASTREAMINFO *pinfo,
    IStream *pstm,
    PVOID pvInstData);</pre>

<!--webbot bot="Include" i-checksum="33265" endspan -->
<!--webbot bot="Include" U-Include="_include/sinfo.htm" TAG="BODY" startspan -->

<p>The information structure for the callback function has the form: </p>
<pre class="source">typedef struct _DPASTREAMINFO {
    int iPos;
    PVOID pvItem;
} DPASTREAMINFO; </pre>

<!--webbot bot="Include" i-checksum="49578" endspan -->
<p>The stream is expected to begin, at its current seek pointer, with the following 
structure: </p>
<pre class="source">typedef struct _DPASTREAMHEADER {
    DWORD dwSize;
    DWORD dwVersion;
    int cpItems;
} DPASTREAMHEADER;</pre>
<h3>Parameters </h3>
<p>The <span class="argument">ppdpa</span> argument provides the address of a variable 
that is to receive a handle to the DPA. </p>
<p>The <span class="argument">pfn</span> argument provides the address of a callback 
function that loads successive items from the stream. </p>
<p>The <span class="argument">pstm</span> argument provides the address of an
<span class="interface">IStream</span> interface for access to the stream. </p>
<p>The <span class="argument">pvInstData</span> argument provides a caller-specific 
context for each invocation of the callback function. </p>
<h3>Return Value </h3>
<p>The function returns <span class="constant">S_OK</span> (zero) for success, with 
all items loaded from the stream. It returns <span class="constant">S_FALSE</span> 
(1) for a partial success in which loading was aborted. In both these cases, the 
variable at the address given by the <span class="argument">ppdpa</span> argument 
receives a handle to the DPA that lists whatever items did get loaded. </p>
<p>Any other value is an error code to describe a failure, with no items loaded 
and no DPA. The variable at the address given by the <span class="argument">ppdpa</span> 
argument may be, but is not necessarily, cleared to NULL. </p>
<h2>Behaviour </h2>
<p>The function expects that the given stream, at its current seek position, begins 
with a 12-byte <span class="struct">DPASTREAMHEADER</span> structure The
<span class="member">dwSize</span> member gives the size of the stream (or, strictly 
speaking, of as much of the stream as is to concern this function), measured in 
bytes, counting the header and whatever arbitrary-sized items follow. The
<span class="member">cpItems</span> member gives the number of those items. The 
function creates a DPA with sufficient memory for representing this number of items, 
and then calls the given callback function repeatedly to get this many items loaded 
from the stream. </p>
<h3>Callback Function </h3>
<p>Each invocation of the callback function is responsible for loading one item. 
The 0-based index for this item is provided as the <span class="member">iPos</span> 
member of a <span class="struct">DPASTREAMINFO</span> structure. Also provided as 
arguments to the callback function are the <span class="argument">pstm</span> and
<span class="argument">pvInstData</span> arguments, as given to to the
<span class="function">DPA_LoadStream</span> function. </p>
<p>To indicate success at loading the desired item, the callback function returns
<span class="constant">S_OK</span> and enters the address of the loaded item into 
the <span class="member">pvItem</span> member of the <span class="struct">DPASTREAMINFO</span> 
structure. The address may be NULL, to represent an empty item. Whatever the address,
<span class="function">DPA_LoadStream</span> accepts it into the DPA and advances 
to the next item. A successful load of the last expected item results in
<span class="function">DPA_LoadStream</span> declaring a full success, returning
<span class="constant">S_OK</span>. </p>
<p>The callback function returns any negative error code to report its failure at 
loading the desired item and to direct that <span class="function">DPA_LoadStream</span> 
not ask to load any more items. This causes <span class="function">DPA_LoadStream</span> 
to declare a partial success, returning <span class="constant">S_FALSE</span>.
</p>
<p>Behaviour if the callback function returns any positive value may best be treated 
as undefined. If for a particular <span class="member">iPos</span> in the
<span class="struct">DPASTREAMINFO</span> structure, the callback function always 
returns a positive value without changing the <span class="member">iPos</span>, 
then <span class="function">DPA_LoadStream</span> will hang as it calls the callback 
function repeatedly with this same <span class="member">iPos</span>. </p>
<h3>Error Details </h3>
<p>Historically, the function returns <span class="constant">E_INVALIDARG</span> 
if the <span class="argument">ppdpa</span> argument is not a valid address for writing 
the 4 bytes of a DPA handle, or if either the <span class="argument">pfn</span> 
or <span class="argument">pstm</span> arguments are not valid as addresses for reading 
at least one byte. These checks are removed entirely in versions 5.82 and 6.0 
starting from Windows XP SP2. However, less strict defences are reinstated in the version 5.82 from Windows Vista and higher, and in version 
6.10 and higher: the function returns <span class="constant">E_INVALIDARG</span> 
if any of the <span class="argument">ppdpa</span>, <span class="argument">pfn</span> 
and <span class="argument">pstm</span> arguments are NULL. </p>
<p>The function returns error codes from the given stream’s <span class="method">
Seek</span> or <span class="method">Read</span> methods, if these fail when noting 
the stream’s initial seek pointer (in anticipation of having to restore it) or when 
reading the expected header. </p>
<p>The function returns <span class="constant">E_FAIL</span> if the stream, at its 
current seek position, is readable but fails to supply 12 bytes for interpretation 
as a <span class="struct">DPASTREAMHEADER</span>. Successful interpretation requires 
all the following: </p>
<ul>
  <li>the <span class="member">dwSize</span> member is at least 12; </li>
  <li>the <span class="member">dwVersion</span> member is exactly 1; </li>
  <li>the <span class="member">cpItems</span> member is not negative (in the version 
  5.82 from Windows Vista and higher, and in version 6.10 and higher). </li>
</ul>
<p>The function returns <span class="constant">E_OUTOFMEMORY</span> if a DPA cannot 
be created with its allocation unit set to the number of items in the stream (from
<span class="member">cpItems</span> in the <span class="struct">DPASTREAMHEADER</span>), 
or if the DPA cannot be grown to accommodate this many items. It probably does not 
matter much in practice, but if the creation succeeds and the expansion fails, then 
the DPA ought to be destroyed but is not. </p>
<p>In all but the <span class="constant">E_INVALIDARG</span> case above, the function 
sets NULL as the DPA handle at the address given by the <span class="argument">ppdpa</span> 
argument. </p>
<p>In the <span class="constant">E_FAIL</span> and <span class="constant">E_OUTOFMEMORY</span> 
cases noted above, the function resets the given stream’s seek position to wherever 
it was before any read was attempted from the stream. In the case of partial success, 
with the function returning <span class="constant">S_FALSE</span>, the function 
advances the seek position as if the whole stream (i.e., the number of bytes given 
by <span class="member">dwSize</span> in the <span class="struct">DPASTREAMHEADER</span>) 
had been read successfully. </p>
<h2>Availability </h2>
<p>The <span class="function">DPA_LoadStream </span>function is exported from COMCTL32.DLL 
as ordinal 9 in version 4.71 and higher. The implementation for version 6.10 and 
higher is built into a statically linked library and thence is also exported 
from the Internet Explorer module IERTUTIL.DLL as ordinal 86 in version 7.0 and 
higher. </p>
<!--webbot bot="Include" U-Include="../../_include/undoc471.htm" TAG="BODY" startspan -->

<p>Though this function dates from as long ago as 1997, it was still not 
documented by Microsoft in the MSDN Library at least as late as the CD edition 
dated January 2004. </p>

<!--webbot bot="Include" i-checksum="43173" endspan -->
<!--webbot bot="Include" U-Include="../../_include/doc05.htm" TAG="BODY" startspan -->

<p>Microsoft documented this function for the MSDN on-line in April 2005, apparently 
after a contributor to a
<a target="_top" href="http://blogs.msdn.com/dmassy/archive/2005/03/22/400689.aspx">
blog by Dave Massy</a> (at Microsoft) cited this function as a counter-example to 
Massy’s claim that Internet Explorer uses no Windows API functions that were not 
by then documented by Microsoft. This article now follows Microsoft’s nomenclature as 
much as possible. </p>

<!--webbot bot="Include" i-checksum="60158" endspan -->
<p>Microsoft’s name for the <span class="struct">DPASTREAMINFO</span> structure 
has long been knowable even without formal documentation from Microsoft. The
<span class="function">DPA_LoadStream</span> function is called from BROWSEUI.DLL, 
SHDOCVW.DLL and SHELL32.DLL, almost certainly from one source file used for all 
three executables. The callback function is written in C++ and the decorated name, 
as seen in Microsoft’s symbol files for these DLLs, therefore includes the name 
of the information structure. </p>
<p>The <span class="struct">DPASTREAMHEADER</span> structure and its members are 
not documented, and the names used here are invented. Indeed, the naming of the
<span class="member">dwVersion</span> member as providing some sort of version number 
is mere supposition. That the header is left undocumented is not unreasonable if 
the point is made clear that <span class="function">DPA_LoadStream</span> expects 
to work only with a stream that has been written by <span class="function">
<a href="savestream.htm">DPA_SaveStream</a></span>, for the internal structure of 
the header would then be an implementation detail of this pair of DPA functions.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 9th April 2005 and was last modified 
  on 15th March 2010. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c0510.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2010. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="4693" endspan -->
</div>

</body>

</html>