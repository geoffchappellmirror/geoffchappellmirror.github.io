<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Multilingual User Interface</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/shell.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/shell.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="55064" endspan -->
<h1>Multilingual User Interface (MUI) </h1>
<p>A well-established way to organise multi-language software is to separate the 
code from the localised resources. Each executable is the same for all languages 
but is accompanied by a different resources library, sometimes called a satellite 
DLL, for each supported language. </p>
<p>Windows itself is organised this way in Windows Vista. The satellites have “.mui” 
appended to the name of their executable and are placed in language-specific subdirectories 
of wherever their executable is run from. Knowledge of this scheme of satellites 
is built into the system code that loads resources, so that multi-language support 
comes essentially for free at run-time. The executable is written exactly as if 
the resources were in the executable intead of having been separated into an MUI 
file. </p>
<p>Moreover, the Windows Vista MUI scheme is available even when running on earlier 
Windows versions. The run-time price is that the programs must be specially written 
to know to load the satellite and to provide a handle to the satellite (instead 
of to the executable) when asking for resources. Microsoft greatly eases this work 
by providing functions in a statically-linked library (MUILoad.lib). The most notable 
are <span class="function">LoadMUILibrary</span> and <span class="function">FreeMUILibrary</span>, 
to use instead of the standard API functions <span class="function">LoadLibrary</span> 
and <span class="function">FreeLibrary</span>. </p>
<p>Unsurprisingly, this is not Microsoft’s first draft. An early MUI scheme is seen 
in Internet Explorer 5.0, from as long ago as 1999. A generalisation of Internet 
Explorer’s MUI scheme is explicitly supported by the <span class="function">LoadMUILibrary</span> 
function just mentioned. The reason it’s being talked of here, in a collection of 
articles about functions exported from SHLWAPI.DLL, is that where the Windows Vista 
scheme has a statically-linked library with its <span class="function">LoadMUILibrary</span> 
and <span class="function">FreeMUILibrary</span>, the Internet Explorer scheme has 
the dynamically-linked SHLWAPI with its exported functions
<span class="function"><a href="load.htm">MLLoadLibrary</a></span> and
<span class="function"><a href="free.htm">MLFreeLibrary</a></span>. </p>
<p>In Internet Explorer’s MUI scheme, a default satellite is in the same directory 
as its executable, but the multi-language satellites are in directories
<span class="placeholder">iepath</span>\mui\<span class="placeholder">langid</span>, 
where <span class="placeholder">iepath</span> is the installation directory for 
Internet Explorer and <span class="placeholder">langid</span> is a four-digit hexadecimal 
code for the language that the particular satellite supports. </p>
<p>To keep talking of this as the Internet Explorer scheme is perhaps not entirley 
fair. Microsoft may have intended all along that the scheme should apply more generally. 
For many years, as seen in the MSDN Library on CD in editions dated January 2001 
and January 2004, Microsoft’s documentation of <span class="function">MSLoadLibrary</span> 
allowed for the satellites to be placed beneath the installation directory of any 
component, not just of Internet Explorer. How much one can make of this as a general 
intention is unclear, however. The documentation somehow managed not to describe 
the mui\<span class="placeholder">langid</span> subdirectories that are vital to 
putting the scheme to any actual use and the function as described in the documentation 
didn’t even have the right number of arguments. In all retail releases of SHLWAPI, 
the <span class="function">MSLoadLibrary</span> function necessarily has the satellites 
in the directory tree beneath the Internet Explorer installation, as did eventually 
get described, e.g., in the Windows Vista Software Development Kit dated January 
2007. </p>
<div class="Footer">
  <p class="Dates">This page was created on 13th July 2009 and was last modified 
  on 15th July 2009. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c09.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2009. Geoff Chappell. All rights reserved.
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="50766" endspan -->
</div>

</body>

</html>
