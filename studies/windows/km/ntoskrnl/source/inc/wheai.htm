<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>WHEAI.H</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="43332" -->
<div class="Main">
  <h1>WHEAI.H </h1>
  <p>The public symbol files NTKRPAMP.PDB and NTKRNLMP.PDB for the original releases 
  of 32-bit and 64-bit Windows 10 tell that the kernel is built with the WHEAI.H 
  header at </p>
  <blockquote>
    d:\th\minkernel\ntos\whea
  </blockquote>
  <p>and draws from it the type definitions that are tabulated below. The header 
  WHEAI.H is not known in any Device Driver Kit (DDK) or Windows Driver Kit (WDK). 
  The WHEA in the name is of course for the Windows Hardware Error Architecture. 
  The I perhaps stands for Internal. All the types that show in the symbol files 
  begin as WHEAP, the P perhaps standing for Private. </p>
  <table class="LineNumbers">
    <colgroup>
      <col class="LineNumber"><col class="Name">
    </colgroup>
    <thead>
      <tr>
        <th>Line Number </th>
        <th>Type </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>100 </td>
        <td>struct <span class="struct">_WHEAP_ERROR_SOURCE</span> </td>
      </tr>
      <tr>
        <td>122 </td>
        <td>struct <span class="struct">_WHEAP_ERROR_SOURCE_TABLE</span> </td>
      </tr>
      <tr>
        <td>131 </td>
        <td>union <span class="union">_WHEAP_ERROR_RECORD_WRAPPER_FLAGS</span>
        </td>
      </tr>
      <tr>
        <td>142 </td>
        <td>struct <span class="struct">_WHEAP_ERROR_RECORD_WRAPPER</span> </td>
      </tr>
      <tr>
        <td>163 </td>
        <td>struct <span class="struct">_WHEAP_WORK_QUEUE</span> </td>
      </tr>
      <tr>
        <td>186 </td>
        <td>struct <span class="struct">_WHEAP_INFO_BLOCK</span> </td>
      </tr>
    </tbody>
  </table>
  <p>In the downloadable packages of public symbols for the original Windows 10, 
  only those for the kernel have type information from this header. No object file 
  or statically linked library has yet been found that has type information from 
  this header. It is therefore not known if this header defines yet more types.
  </p>
  <h2>Reverse-Engineering Forensics </h2>
  <p>Because the known types are manageably few, a study may be useful of how these 
  particular types that are defined in WHEAI.H are the ones that get into the public 
  symbols. That a public symbol file for the kernel has any type information at 
  all is from compiling a separate source file such that type information generated 
  as its private symbols gets merged into the public symbols that were already created 
  from building the kernel. This source file, which for the kernel is named
  <a href="../ntsym.htm">ntsym.c</a>, evidently has a <span class="directive">#include</span> 
  of WHEAI.H or of some other header that picks up WHEAI.H as a nested inclusion. 
  If a programmer wants that a particular type shows in the public symbols, then 
  if the type is not used (as the compiler sees it) in the header, an explicit use 
  of it must be written into NTSYM.C. </p>
  <p>What seems to be the usual reason for wanting a particular type to show in 
  the kernel’s public symbols is that the type information is looked up for a debugger 
  extension’s command that’s supposed to work even for non-Microsoft programmers 
  who don’t have the kernel’s private symbols. The only known command that looks 
  up any of the types from WHEAI.H is <span class="command">!whea</span> as implemented 
  by KDEXTS.DLL. It assumes access to type information for the following three of 
  the types listed above: </p>
  <ul>
    <li><span class="struct">_WHEAP_ERROR_SOURCE</span>; </li>
    <li><span class="struct">_WHEAP_ERROR_SOURCE_TABLE</span>; </li>
    <li><span class="struct">_WHEAP_ERROR_RECORD_WRAPPER</span>. </li>
  </ul>
  <p>The programmer could ensure this availability by using the first two explicitly 
  in NTSYM.C. The third is used implicitly by the first. It, in turn, has an implied 
  use of <span class="union">_WHEAP_ERROR_RECORD_WRAPPER_FLAGS</span>. This leaves
  <span class="struct">_WHEAP_INFO_BLOCK</span> or <span class="struct">_WHEAP_WORK_QUEUE</span>. 
  They could, of course, be used explicitly in NTSYM.C, but an easier explanation 
  fits a close reading of the type information: <span class="struct">_WHEAP_INFO_BLOCK</span> 
  is almost certainly picked up just from including the header, and
  <span class="struct">_WHEAP_ERROR_SOURCE</span> likely is too, and the two together 
  account for all the others. </p>
  <p>Several mechanisms select a type as used such that type information is generated 
  for the public symbols. The most common, most natural, and thus most expected, 
  is implicit: the type is on some chain of references from the definition of a 
  type that is explicitly selected. The easiest and plausibly the intended mechanism 
  of explicit selection is simply to declare a variable of this type in NTSYM.C. 
  Less often, but arguably more notable, the explicit selection is overlooked by 
  the programmer: the type is used by code in the header, as for an inlined routine.
  </p>
  <p>This last mechanism is capable of surprise, both of Microsoft’s programmers 
  and of reverse engineers. It is, for instance, how type information for such kernel-mode 
  structures as the <span class="struct">KPROCESS</span> turns up in public symbols 
  for user-mode modules that ought never to have even read-only access—and not just 
  in public symbol files for the lowest-level modules such as NTDLL.DLL but even 
  for higher-level modules as far out as URLMON.DLL from Internet Explorer. Almost 
  certainly this is the mechanism that gets <span class="struct">_WHEAP_INFO_BLOCK</span> 
  into the kernel’s public symbols. </p>
  <p>For these types that the public symbols show as defined in WHEAI.H, the sequence 
  of records that hold the type information is organised in two sets. First,
  <span class="struct">_WHEAP_INFO_BLOCK</span> brings in: </p>
  <ul>
    <li><span class="struct">_WHEAP_ERROR_SOURCE_TABLE</span>; </li>
    <li><span class="struct">_WHEAP_WORK_QUEUE</span>. </li>
  </ul>
  <p>These are each brought in through pointers, which turn out to be the types 
  of the <span class="struct">_WHEAP_INFO_BLOCK</span> members named
  <span class="member">ErrorSourceTable</span> and <span class="member">WorkQueue</span>. 
  Second, from <span class="struct">_WHEAP_ERROR_SOURCE</span>: </p>
  <ul>
    <li><span class="struct">_WHEAP_ERROR_RECORD_WRAPPER</span>; </li>
    <li><span class="struct">_WHEA_ERROR_SOURCE_DESCRIPTOR</span> (which brings 
    in all the types from <a href="wheadef.htm">wheadef.h</a>); </li>
    <li><span class="union">_WHEAP_ERROR_RECORD_WRAPPER_FLAGS</span>. </li>
  </ul>
  <p>The first of these comes in as a pointer but the second is nested whole, as 
  the types of the <span class="struct">_WHEAP_ERROR_SOURCE</span> members
  <span class="member">Records</span> and <span class="member">Descriptor</span>. 
  The last is brought in by its use for the <span class="struct">_WHEAP_ERROR_RECORD_WRAPPER</span> 
  member named <span class="member">Flags</span>. The <span class="struct">_WHEAP_ERROR_RECORD_WRAPPER</span> 
  also has a member, named <span class="member">ErrorSource</span>, that points 
  (back) to a <span class="struct">_WHEAP_ERROR_SOURCE</span>. </p>
  <p>There ends the tedium of accounting for references that bring these types into 
  the public symbols implicitly. For both <span class="struct">_WHEAP_INFO_BLOCK</span> 
  and <span class="struct">_WHEAP_ERROR_SOURCE</span>, the
  <span class="constant">LF_STRUCTURE</span> record is followed immediately by an
  <span class="constant">LF_POINTER</span> record. Each is in the public symbols 
  for being first used as a pointer, but not from being pointed to from another 
  type in the public symbols. Although the pointer record for
  <span class="struct">_WHEAP_ERROR_SOURCE</span> is referenced (from the
  <span class="constant">LF_FIELDLIST</span> record for <span class="struct">_WHEAP_ERROR_RECORD_WRAPPER</span>), 
  the pointer record for <span class="struct">_WHEAP_INFO_BLOCK</span> is completely 
  unreferenced. Concentrate on this last observation for it allows two inferences 
  as almost certain for the compilation of NTSYM.C when generating type information 
  for the public symbols. One is that the first, and perhaps only, use of
  <span class="struct">_WHEAP_INFO_BLOCK</span> is for a routine that either returns 
  the pointer type or has it as an argument. The other inference is indirect: this 
  routine is not called from another, else the called routine’s type (and name, 
  if compiling with Visual Studio 2012 or higher) would be recorded as type information 
  and the pointer record for the <span class="struct">_WHEAP_INFO_BLOCK</span> would 
  then be referenced. </p>
  <p>In practice, the routine would be defined in the header and will need to be 
  an inlined routine. Good motivation for an inlined routine that returns a pointer 
  to a <span class="struct">_WHEAP_INFO_BLOCK</span> follows from knowing first 
  that the kernel creates a <span class="struct">_WHEAP_INFO_BLOCK</span> for each 
  processor and keeps the address as the <span class="member">WheaInfo</span> member 
  of the processor’s <span class="struct"><a href="../../inc/ntos/kprcb.htm">KPRCB</a></span>, 
  and second that <span class="member">WheaInfo</span> is defined as a pointer to
  <span class="type">void</span> and therefore needs a type cast whenever the pointer 
  is read for interpretation. The intention is presumably that the
  <span class="struct">_WHEA_INFO_BLOCK</span> is opaque even for most of Microsoft’s 
  programmers who work on the kernel: only the programmers of the kernel’s WHEA 
  functionality need to interpret what’s pointed to. Still, these programmers will 
  not want to keep writing the cast. If they need to read the pointer more than 
  once, as has been so since the functionality’s substantial elaboration for Windows 
  Vista SP1, then it will be wholly unsurprising if they wrap this simple but tedious 
  work into a macro or inlined routine. </p>
  <p>Search a disassembly of the kernel and a repeating sequence that does exactly 
  this work and looks like an inlining is easily found. For reasons that are not 
  yet understood, it finds the current <span class="struct">KPRCB</span> via the 
  current <span class="struct"><a href="../../inc/ntos/kpcr.htm">KPCR</a></span> 
  rather than use the long-established <span class="inlined routine">KeGetCurrentPrcb</span>. 
  Rendering in C is complicated by differences in how the
  <a href="../../inc/ntos/i386_x/kpcr.htm">x86 <span class="struct">KPCR</span></a> 
  and <a href="../../inc/ntos/amd64_x/kpcr.htm">x64 <span class="struct">KPCR</span></a> 
  each label their embedded <span class="struct">KPRCB</span> and their pointer 
  to it. What follows (with an invented name) captures what’s done by the binary 
  code but one might hope it’s not what the WHEA programmers work with: </p>
  <pre class="source">FORCEINLINE 
PWHEAP_INFO_BLOCK WheapGetInfoBlock (VOID)
{
    #if defined (_X86_) 
    return (PWHEAP_INFO_BLOCK) KeGetPcr () -&gt; Prcb -&gt; WheaInfo;
    #elif defined (_AMD64_)
    return (PWHEAP_INFO_BLOCK) KeGetPcr () -&gt; Prcb.WheaInfo;
    #else
    /* of no concern to this study */
    #endif
}</pre>
  <p>Assume that this or something like it is defined in WHEAI.H, perhaps immediately 
  after the structure’s definition. Then a <span class="directive">#include</span> 
  of this header, even as a nested inclusion, in NTSYM.C for merging type information 
  into the public symbols will count as a use of <span class="struct">_WHEA_INFO_BLOCK</span> 
  and will get its type information into the public symbols. </p>
  <p>That <span class="struct">_WHEA_ERROR_SOURCE</span> also is in the public symbols 
  only because of its use for an inline routine is more than merely plausible, but 
  a candidate routine is not yet known with high confidence. It need be nothing 
  more than a convenience that’s so slight it barely shows in the binary. For instance, 
  the following (with invented names and arguments) for getting the first in the 
  linked list of these structures, and then for moving along the list, would suffice:
  </p>
  <pre class="source">FORCEINLINE 
PWHEAP_ERROR_SOURCE 
WheapGetFirstErrorSource (
    PWHEAP_ERROR_SOURCE_TABLE ErrorSourceTable)
{
    return CONTAINING_RECORD (
        ErrorSourceTable -&gt; ListHead.Flink, 
        WHEAP_ERROR_SOURCE, 
        ListEntry);
}</pre>
<pre class="source">FORCEINLINE 
PWHEAP_ERROR_SOURCE 
WheapGetNextErrorSource (
    PWHEAP_ERROR_SOURCE ErrorSource)
{
    return CONTAINING_RECORD (
        ErrorSource -&gt; ListEntry.Flink, 
        WHEAP_ERROR_SOURCE, 
        ListEntry);
}</pre>
  <p>Incidentally, these particular suppositions are not without support. The internal 
  routine (<span class="internal routine">WheapGetErrorSource</span>) that searches 
  the list from the <span class="member">ListHead</span> in the
  <span class="struct">WHEAP_ERROR_SOURCE_TABLE</span> for a
  <span class="struct">WHEAP_ERROR_SOURCE</span> whose <span class="member">Descriptor</span> 
  matches a given <span class="member">ErrorSourceId</span> is conspicuous for ending 
  the search by counting entries, not by checking for a link back to the head.
  </p>
  <div class="Footer">
    <p class="Dates">This page was created on 2nd
    <a href="../../../../../../new/20/11.htm">November 2020</a> and was last modified 
    on 12th <a href="../../../../../../new/23/02.htm">February 2023</a>. </p>
    <!--webbot bot="Include" U-Include="../../../_include/c2023.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2020-2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="54423" -->
  </div>
</div>

</body>

</html>
