<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CSR_SERVER_DLL</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="54033" -->
<h1>CSR_SERVER_DLL </h1>
<p>The <span class="struct">CSR_SERVER_DLL</span> structure is the main record that 
CSRSRV.DLL keeps of the various DLLs that are loaded in the CSRSS.EXE process to act 
as servers to other processes. CSRSRV is itself one of these <a href="index.htm">server DLLs</a>. Others 
are learnt from the <span class="switch">ServerDLL</span> arguments on the CSRSS 
command line. </p>
<p>Much as services can be packaged together in one executable file, so may the 
CSRSS server DLLs be in the one DLL file. Such server DLLs each have their own initialisation 
routine which the DLL file must export by name. The default name is
<span class="function">ServerDllInitialization</span>. Any other can be given in 
the <span class="switch">ServerDLL</span> argument. Microsoft is known to have the type definition </p>
<pre class="source">typedef NTSTATUS (*PCSR_SERVER_DLL_INIT_ROUTINE) (CSR_SERVER_DLL *);</pre>
<p>for a pointer to a server DLL’s initialisation routine. Some of the
<span class="struct">CSR_SERVER_DLL</span> is filled in before this call. Most is 
to be filled in by the server DLL. Thus is the <span class="struct">CSR_SERVER_DLL</span> 
not just an internal record for CSRSRV’s own use but is 
also the way that CSRSRV learns what a server DLL is capable of and how to call 
it. </p>
<h2>Availability </h2>
<p>Server DLLs are essential CSRSS functionality in all known versions of Windows, 
i.e., from as far back as version 3.10 up to and including the original release 
of Windows 10, which is the last that is yet inspected for this note. </p>
<p>Prominent examples of server DLLs through the whole history of Windows are 
BASESRV.DLL and the two or three that are packaged into WINSRV.DLL. Versions 
3.10 to 4.0 allow as many as 16 server DLLs. Version 5.0 reduced the allowance 
to four, but new server DLLs for Windows 7 and (and perhaps anticipated for) 
Windows 8 saw the limit raised to five and then six. </p>
<h2>Documentation Status </h2>
<p>The <span class="struct">CSR_SERVER_DLL</span> is not documented. Considering 
that the <span class="struct">CSR_SERVER_DLL</span> is shared between modules, rather 
than being internal to just one, Microsoft has been unusually careful about publishing 
the structure’s name, let alone any details about its members. Knowledge of the
<span class="struct">CSR_SERVER_DLL</span> would be essential to any authorship 
of a CSRSS server DLL, and Microsoft presumably does not want that any third-party 
server DLLs should ever exist. </p>
<p>From this perspective, it is no surprise that Microsoft is not known to have 
disclosed a C-language definition of the <span class="struct">CSR_SERVER_DLL</span> 
in any header from any publicly available kit for any sort of software 
development. It is perhaps also no surprise that when type information for other 
CSRSS structures started appearing in public symbol files for CSRSS in Windows 
Vista, <span class="struct">CSR_SERVER_DLL</span> was omitted. Microsoft’s only 
known public release of type information for the <span class="struct">
CSR_SERVER_DLL</span> structure is not in any symbol file but is instead in a 
statically linked library, named GDISRVL.LIB, that was published with the Device 
Driver Kit (DDK) for Windows NT 3.51. That type information surives in this 
library—especially since it has the detail of what would ordinarily be called 
private symbols—surely was an oversight, but published it is. </p>
<h2>Variability </h2>
<p>
<!-- Though CSRSS remains a critical process in the Win32 subsystem, its role was 
greatly reduced in version 4.0 when windowing functionality was moved from WINSRV.DLL 
in the CSRSS process to WIN32K.SYS in kernel mode. Curiously, the
<span class="struct">CSR_SERVER_DLL</span> was not affected immediately. -->The
<span class="struct">CSR_SERVER_DLL</span> has tended to shrink as functionality 
has been withdrawn from CSRSS and server DLLs have less to do (even if recent 
versions have found more reasons to do it). The following changes 
of size are known: </p>
<table class="Sizes">
  <colgroup>
    <col class="Version"><col class="Size" span="2">
  </colgroup>
  <tr>
    <th>Version </th>
    <th>Size (x86) </th>
    <th>Size (x64) </th>
  </tr>
  <tr>
    <td>3.10 </td>
    <td>0x60 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>3.51 to 4.0 </td>
    <td>0x64 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.0 to 5.1 </td>
    <td>0x4C </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>5.2 to 10.0 </td>
    <td>0x44 </td>
    <td>0x78 </td>
  </tr>
</table>
<h2>Layout </h2>
<p>The sizes in the preceding table and the names and types in the table that follows 
are based on type information such as debuggers read from symbol files. As noted 
above, this means version 3.51 only. What’s known of Microsoft’s names and types 
for other versions is something of a guess, being inferred from inspecting 
different versions of CSRSRV for what use they make of the structure and 
assuming that continuity of use speaks strongly for continuity of names and 
types. </p>
<table class="Struct">
  <colgroup>
    <col class="Offset" span="2"><col class="Definition">
  </colgroup>
  <tr>
    <th>Offset (x86) </th>
    <th>Offset (x64) </th>
    <th>Definition </th>
    <th>Versions </th>
    <th>Remarks </th>
  </tr>
  <tr>
    <td>0x00 (3.10 to 6.0) </td>
    <td>0x00 (before 6.1) </td>
    <td>
    <pre class="source">ULONG Length;</pre>
    </td>
    <td>3.10 to 6.0 </td>
    <td>input </td>
  </tr>
  <tr>
    <td>0x04 (3.10 to 5.1) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">HANDLE CsrInitializationEvent;</pre>
    </td>
    <td>3.10 to 5.1 </td>
    <td>input </td>
  </tr>
  <tr>
    <td>0x08 (3.10 to 5.1); <br>
    0x04 (5.2 to 6.0); <br>
    0x00 </td>
    <td>0x08 (before 6.1); <br>
    0x00 </td>
    <td>
    <pre class="source">ANSI_STRING ModuleName;</pre>
    </td>
    <td>all </td>
    <td>input </td>
  </tr>
  <tr>
    <td>0x10 (3.10 to 5.1); <br>
    0x0C (5.2 to 6.0); <br>
    0x08 </td>
    <td>0x18 (before 6.1); <br>
    0x10 </td>
    <td>
    <pre class="source">HMODULE ModuleHandle;</pre>
    </td>
    <td>all </td>
    <td>input </td>
  </tr>
  <tr>
    <td>0x14 (3.10 to 5.1); <br>
    0x10 (5.2 to 6.0); <br>
    0x0C </td>
    <td>0x20 (before 6.1); <br>
    0x18 </td>
    <td>
    <pre class="source">ULONG ServerDllIndex;</pre>
    </td>
    <td>all </td>
    <td>input </td>
  </tr>
  <tr>
    <td>0x18 (3.10 to 5.1); <br>
    0x14 (5.2 to 6.0); <br>
    0x10 </td>
    <td>0x24 (before 6.1); <br>
    0x1C </td>
    <td>
    <pre class="source">ULONG ServerDllConnectInfoLength;</pre>
    </td>
    <td>all </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x1C (3.10 to 5.1); <br>
    0x18 (5.2 to 6.0); <br>
    0x14 </td>
    <td>0x28 (before 6.1); <br>
    0x20 </td>
    <td>
    <pre class="source">ULONG ApiNumberBase;</pre>
    </td>
    <td>all </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x20 (3.10 to 5.1); <br>
    0x1C (5.2 to 6.0); <br>
    0x18 </td>
    <td>0x2C (before 6.1); <br>
    0x24 </td>
    <td>
    <pre class="source">ULONG MaxApiNumber;</pre>
    </td>
    <td>all </td>
    <td>output </td>
  </tr>
  <tr>
    <td rowspan="3">0x24 (3.10 to 5.1); <br>
    0x20 (5.2 to 6.0); <br>
    0x1C </td>
    <td rowspan="3">0x30 (before 6.1); <br>
    0x28 </td>
    <td>
    <pre class="source">PCSR_API_ROUTINE *ApiDispatchTable;</pre>
    </td>
    <td>3.10 only </td>
    <td rowspan="3">output </td>
  </tr>
  <tr>
    <td>
    <pre class="source">union {
    PCSR_API_ROUTINE *ApiDispatchTable;
    PCSR_1P_API_ROUTINE *QuickApiDispatchTable;
};</pre>
    </td>
    <td>3.51 only </td>
  </tr>
  <tr>
    <td>
    <pre class="source">PCSR_API_ROUTINE *ApiDispatchTable;</pre>
    </td>
    <td>4.0 and higher </td>
  </tr>
  <tr>
    <td>0x28 (3.10 to 5.1); <br>
    0x24 (5.2 to 6.0); <br>
    0x20 </td>
    <td>0x38 (before 6.1); <br>
    0x30 </td>
    <td>
    <pre class="source">BOOLEAN *ApiServerValidTable;</pre>
    </td>
    <td>all </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x2C (3.10 to 5.1) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">PSTR *ApiNameTable;</pre>
    </td>
    <td>3.10 to 5.1 </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x24 </td>
    <td>0x38 </td>
    <td>unaccounted four or eight bytes </td>
    <td>6.1 and higher </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>0x30 (3.10 to 5.1); <br>
    0x28 </td>
    <td>0x40 </td>
    <td>
    <pre class="source">ULONG PerProcessDataLength;</pre>
    </td>
    <td>all </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x34 3.10 to 4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">ULONG PerThreadDataLength;</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x38 (3.10 to 4.0); <br>
    0x34 (5.0 to 5.1); <br>
    0x2C </td>
    <td>0x48 </td>
    <td>
    <pre class="source">LONG 
(*ConnectRoutine) (
    <a href="../process/process.htm">CSR_PROCESS</a> *, 
    PVOID, 
    ULONG *);</pre>
    </td>
    <td>all </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x3C (3.10 to 4.0); <br>
    0x38 (5.0 to 5.1); <br>
    0x30 </td>
    <td>0x50 </td>
    <td>
    <pre class="source">VOID (*DisconnectRoutine) (CSR_PROCESS *);</pre>
    </td>
    <td>all </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x40 (3.10 to 4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">LONG (*AddThreadRoutine) (<a href="../process/thread.htm">CSR_THREAD</a> *);</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x44 (3.10 to 4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">LONG (*DeleteThreadRoutine) (CSR_THREAD *);</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x48 (3.10 to 4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">LONG (*InitThreadRoutine) (VOID);</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x4C (3.10 to 4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">VOID 
(*ExceptionRoutine) (
    EXCEPTION_POINTERS *, 
    BOOLEAN);</pre>
    </td>
    <td>3.10 to 4.0 </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x50 (3.10 to 4.0); <br>
    0x3C (5.0 to 5.1); <br>
    0x34 </td>
    <td>0x58 </td>
    <td>
    <pre class="source">VOID 
(*HardErrorRoutine) (
    CSR_THREAD *, 
    HARDERROR_MSG *);</pre>
    </td>
    <td>all </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x54 (3.10 to 4.0); <br>
    0x40 (5.0 to 5.1); <br>
    0x38 </td>
    <td>0x60 </td>
    <td>
    <pre class="source">PVOID SharedStaticServerData;</pre>
    </td>
    <td>all </td>
    <td>input <br>
    output </td>
  </tr>
  <tr>
    <td>0x58 (3.10 to 4.0); <br>
    0x44 (5.0 to 5.1); <br>
    0x3C </td>
    <td>0x68 </td>
    <td>
    <pre class="source">LONG 
(*AddProcessRoutine) (
    CSR_PROCESS *, 
    CSR_PROCESS *);</pre>
    </td>
    <td>all </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x5C (3.10 to 4.0); <br>
    0x48 (5.0 to 5.1); <br>
    0x40 </td>
    <td>0x70 </td>
    <td>
    <pre class="source">ULONG 
(*ShutdownProcessRoutine) (
    CSR_PROCESS *, 
    ULONG, 
    UCHAR);</pre>
    </td>
    <td>all </td>
    <td>output </td>
  </tr>
  <tr>
    <td>0x60 (3.51 to 4.0) </td>
    <td>&nbsp;</td>
    <td>
    <pre class="source">ULONG 
(*ApiDispatchRoutine) (
    <a href="../apireqst/api_msg.htm">CSR_API_MSG</a> *, 
    ULONG);</pre>
    </td>
    <td>3.51 to 4.0 </td>
    <td>output </td>
  </tr>
</table>
<p>To ease the reading of pointers 
to functions within other types, the preceding table uses the following type 
definitions from the known symbol file: </p>
<pre class="source">typedef ULONG (*PCSR_API_ROUTINE) (CSR_API_MSG *, CSR_REPLY_STATUS *);
typedef ULONG (*PCSR_1P_API_ROUTINE) (CSR_API_MSG *);</pre>
<p>The symbol file also has type definitions for the many other members that are function pointers:
</p>
<ul>
  <li><span class="type">PCSR_SERVER_CONNECT_ROUTINE</span> for
  <span class="member">ConnectRoutine</span>; </li>
  <li><span class="type">PCSR_SERVER_DISCONNECT_ROUTINE</span> for
  <span class="member">DisconnectRoutine</span>; </li>
  <li><span class="type">PCSR_SERVER_ADDTHREAD_ROUTINE</span> for
  <span class="member">AddThreadRoutine</span>; </li>
  <li><span class="type">PCSR_SERVER_DELETETHREAD_ROUTINE</span> for
  <span class="member">DeleteThreadRoutine</span>; </li>
  <li><span class="type">PCSR_SERVER_INITTHREAD_ROUTINE</span> for
  <span class="member">InitThreadRoutine</span>; </li>
  <li><span class="type">PCSR_SERVER_EXCEPTION_ROUTINE</span> for
  <span class="member">ExceptionRoutine</span>; </li>
  <li><span class="type">PCSR_SERVER_HARDERROR_ROUTINE</span> for
  <span class="member">HardErrorRoutine</span>; </li>
  <li><span class="type">PCSR_SERVER_ADDPROCESS_ROUTINE</span> for
  <span class="member">AddProcessRoutine</span>; </li>
  <li><span class="type">PCSR_SERVER_SHUTDOWNPROCESS_ROUTINE</span> for
  <span class="member">ShutdownProcessRoutine</span>; </li>
  <li><span class="type">PCSR_API_DISPATCH_ROUTINE</span> for
  <span class="member">ApiDispatchRoutine</span>. </li>
</ul>
<!-- p>The <span class="struct">CSR_SERVER_DLL</span> is built at the start of a 
heap allocation that continues with the buffer for the <span class="member">
ModuleName</span>. The <span class="member">Length</span> is the size in bytes 
of the whole allocation. Members that are shown above as “input” are set 
explicitly for the server DLL’s initialisation. Others are zeroed. The server 
DLL is assumed to set some and may set any. Some are ignored. </p>
<p>CSRSRV simply assumes that the server DLL sets the <span class="member">ApiNumberBase</span>,
<span class="member">MaxApiNumber</span> and <span class="member">ApiDispatchTable</span> 
(or <span class="member">QuickApiDispatchTable</span>), and in version 3.10 an
<span class="member">ApiServerValidTable</span> too. These collectively tell CSRSRV 
where to direct calls to the server DLL’s API routines. </p>
<p>In no version is the <span class="member">MaxApiNumber</span> interpreted consistently 
with its name. Before version 5.0, presumably as a coding error, the 
<span class="member">MaxApiNumber</span> is treated as the number of API routines 
and thus of elements in the <span class="member">ApiDispatchTable</span> and 
<span class="member">ApiServerValidTable</span> arrays. In later versions it is 
not the maximum API number, in the sense of being the highest that’s valid, but 
one more. </p>
<p>It is here thought that the form with one argument, for the
<span class="member">QuickApiDispatchTable</span>, is used only in version 3.51 
and only then to support an improvement in what is apparently named Quick LPC, which 
version 4.0 discontinues. It is not impossible that 
<span class="member">QuickApiDispatchTable</span> persists in the formal definition 
even when no longer used, as apparently does <span class="member">ApiDispatchRoutine</span> 
in version 4.0. </p -->
<div class="Footer">
  <p class="Dates">This page was created on 20th June 2019 and was last modified 
  on 25th June 2019. </p>
  <!--webbot bot="Include" U-Include="../../../_include/c19.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="62933" -->
</div>

</body>

</html>
