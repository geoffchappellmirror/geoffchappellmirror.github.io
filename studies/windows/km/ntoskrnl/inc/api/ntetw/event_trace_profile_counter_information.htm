<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EVENT_TRACE_PROFILE_COUNTER_INFORMATION</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<div class="Main">
  <h1>EVENT_TRACE_PROFILE_COUNTER_INFORMATION </h1>
  <p>The <span class="struct">EVENT_TRACE_PROFILE_COUNTER_INFORMATION</span> structure 
  is one of many that the <span class="function">
  <a href="../../../api/ex/sysinfo/set.htm">ZwSetSystemInformation</a></span> and
  <span class="function">NtSetSystemInformation</span> functions expect as input 
  when given the information class <span class="constant">SystemPerformanceTraceInformation</span> 
  (0x1F). This particular structure is selected when the first dword in the information 
  buffer is <span class="constant">EventTraceProfileConfigInformation</span> (0x0C) 
  or <span class="constant">EventTraceProfileCounterListInformation</span> (0x0F).
  </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">EVENT_TRACE_PROFILE_COUNTER_INFORMATION</span> structure 
  is not documented. </p>
  <!--webbot bot="Include" U-Include="_include/typeinfo_struct.htm" TAG="BODY" startspan -->

<p>A few public disclosures are known from Microsoft, though not as any sort of 
plain-English documentation. One is that a previously unpublished header named NTETW.H 
was published in the original and Version 1511 editions of the Windows Driver Kit 
(WDK) for Windows 10, and this header contains a C-language definition of the structure.
</p>
<p>Were it not for this limited and possibly unintended disclosure of NTETW.H, a 
practical equivalent of the C-language definition (but missing comments, of course) 
would anyway be known from type information in symbol files. But this too has the 
look of an oversight. Type information for this structure has never appeared in 
any public symbol files for the kernel or for the obvious low-level user-mode DLLs. 
It has instead slipped out in symbol files for a smattering of higher-level user-mode 
DLLs, starting with Windows 8. For these few, the readily available symbol files 
actually are private symbol files and show that the unpublished
<a href="../../../source/inc/ntetw.htm">NTETW.H</a> was included when compiling 
the corresponding binaries. </p>

<!--webbot bot="Include" endspan i-checksum="23935" -->
  <h2>Usage </h2>
  <p>In user mode, the <span class="struct">EVENT_TRACE_PROFILE_COUNTER_INFORMATION</span> 
  structure arguably exists only to support the documented ADVAPI32 (or SECHOST) 
  function <span class="function">
  <a href="../../../../../win32/advapi32/api/etw/logapi/set.htm">TraceSetInformation</a></span> 
  for its information classes <span class="constant">TraceProfileSourceConfigInfo</span> 
  (0x06) and <span class="constant">TracePmcCounterListInfo</span> (0x09). Well-behaved 
  user-mode software executing above ADVAPI32 does not call
  <span class="function">NtSetSystemInformation</span> but prefers
  <span class="function">TraceSetInformation</span> and therefore has no need of 
  this structure. </p>
  <p>Or so might go the theory or principle. Against it is that Microsoft’s documentation 
  of <span class="function">TraceSetInformation</span>, as perused online today 
  (30th November 2016), does not tell programmers what information to provide in 
  what form. For instance, of <span class="constant">TracePmcCounterListInfo</span> 
  it says only “Query the list of performance monitoring counters to collect.”
  </p>
  <h2>Layout </h2>
  <p>The <span class="struct">EVENT_TRACE_PROFILE_COUNTER_INFORMATION</span> is 
  0x18 bytes in both 32-bit and 64-bit Windows. Offsets, names and types in the 
  table that follows are from type information in symbol files and from the published 
  C-language definition, as described above. </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset"><col class="Definition"><col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>
        <pre class="source"><a href="event_trace_information_class.htm">EVENT_TRACE_INFORMATION_CLASS</a> EventTraceInformationClass;</pre>
        </td>
        <td>
        6.2 and higher
        </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>
        <pre class="source">TRACEHANDLE TraceHandle;</pre>
        </td>
        <td>
        6.2 and higher
        </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>
        <pre class="source">ULONG ProfileSource [ANYSIZE_ARRAY];</pre>
        </td>
        <td>
        6.2 and higher
        </td>
      </tr>
    </tbody>
  </table>
  <p>Though the elements of the <span class="member">ProfileSource</span> array 
  are defined as <span class="type">ULONG</span>, they take values from the
  <span class="enum"><a href="../../../api/ke/profobj/kprofile_source.htm">KPROFILE_SOURCE</a></span> 
  enumeration. This is defined in WDM.H and lists the types of profiling data that 
  the HAL may keep about processor performance. It is presumably also defined in 
  headers that Microsoft does not publish but makes available to its own user-mode 
  programmers: how else does type information for it appear in symbol files for 
  such high-level modules as the URLMON.DLL from Internet Explorer? </p>
  <p>Though the one <span class="struct">EVENT_TRACE_PROFILE_COUNTER_INFORMATION</span> 
  structure serves both information classes <span class="constant">EventTraceProfileConfigInformation</span> 
  and <span class="constant">EventTraceProfileCounterListInformation</span>, NTETW.H 
  helpfully defines the alias <span class="struct">EVENT_TRACE_PROFILE_CONFIG_INFORMATION</span> 
  for the structure’s use with the first of them. </p>
  <h2>Behaviour </h2>
  <p>The <span class="struct">EVENT_TRACE_PROFILE_COUNTER_INFORMATION</span> structure 
  is meaningful only as input to the <span class="function">ZwSetSystemInformation</span> 
  function in two cases. Their behaviour is as well picked up here. This review 
  takes as understood all the general points and shorthands that are noted in the 
  separate attempt at documenting the function, and takes as granted that the information 
  class is <span class="constant">SystemPerformanceTraceInformation</span> and that 
  the information buffer is at least large enough for an <span class="struct">EVENT_TRACE_PROFILE_COUNTER_INFORMATION</span> 
  structure up to but not including the <span class="member">ProfileSource</span> 
  array and in which the <span class="member">EventTraceInformationClass</span> 
  is either <span class="constant">EventTraceProfileConfigInformation</span> or
  <span class="constant">EventTraceProfileCounterListInformation</span>. </p>
  <h3>EventTraceProfileConfigInformation </h3>
  <p><span class="alert">TO BE DONE</span> </p>
  <h3>EventTraceProfileCounterListInformation </h3>
  <p>The point to the <span class="member">ProfileSource</span> array is that although 
  it is defined formally as having only one element, it is meant to continue for 
  the remainder of the information buffer. If the information buffer is not exactly 
  right for zero or more whole array elements, the function returns
  <span class="constant">STATUS_INVALID_PARAMETER</span>. </p>
  <p>The <span class="member">TraceHandle</span> selects an event logger. Specifically, 
  the low 16 bits are the logger ID or are 0xFFFF to select the NT Kernel Logger. 
  This interpretation of 0xFFFF is formalised by the definition of a macro
  <span class="constant">KERNEL_LOGGER_ID</span> in the NTWMI_X.H header in early 
  editions of the Windows Driver Kit (WDK) for Windows 10. If the logger ID does 
  not select an active logger to which the function can arrange exclusive access, 
  the function returns <span class="constant">STATUS_WMI_INSTANCE_NOT_FOUND</span>. 
  If the caller does not have the <span class="constant">TRACELOG_GUID_ENABLE</span> 
  permission for the logger, the function fails, typically returning
  <span class="constant">STATUS_ACCESS_DENIED</span>. </p>
  <p>The function is to configure the logger for receiving the processor performance 
  monitoring counters that are represented by the given profile sources. The implementation 
  can support only so many counters per logger. The maximum was originally a hard-coded 
  4 that was extended to 8 for Version 1703. The published NTETW.H looks to have 
  this maximum defined as <span class="constant">ETW_MAX_PMC_COUNTERS</span>. Starting 
  with Version 1903, the kernel instead learns the maximum from the HAL while initialising. 
  The HAL’s report is obtained via the <span class="member">HalQuerySystemInformation</span> 
  pointer in the kernel’s <span class="struct">
  <a href="../../ntos/hal/hal_dispatch.htm">HAL_DISPATCH</a></span>, using the new 
  information class <span class="constant">HalQueryProfileNumberOfCounters</span> 
  (0x2C). </p>
  <p>If the information buffer supplies either no profile sources or more than the 
  maximum, the function returns <span class="constant">STATUS_INVALID_PARAMETER</span>. 
  If the logger is set to use paged memory, as from having
  <span class="constant">EVENT_TRACE_USE_PAGED_MEMORY</span> in its logger mode, 
  then the function returns <span class="constant">STATUS_INVALID_PARAMETER</span>.
  </p>
  <p>To profile counters, the logger must have an <span class="struct">
  <a href="../../ntos/etwp/etw_pmc_support.htm">ETW_PMC_SUPPORT</a></span> structure. 
  If it does not already have one but the function cannot create one, the function 
  returns <span class="constant">STATUS_NO_MEMORY</span>. </p>
  <p>Each logger can have profile counters set for it just the once. Whatever sources 
  are set remain set until the logger is stopped. If the logger already has a source 
  set, the function returns <span class="constant">STATUS_WMI_ALREADY_ENABLED</span>.
  </p>
  <p>The profiling is actually done by the HAL. For each currently active processor, 
  the given profile sources are passed to the HAL via the <span class="member">HalAllocatePmcCounterSets</span> 
  pointer in the kernel’s <span class="struct">
  <a href="../../ntos/hal/hal_private_dispatch.htm">HAL_PRIVATE_DISPATCH</a></span>.. 
  Failure for any processor is failure for the function. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 30th
    <a href="../../../../../../../new/16/11.htm">November 2016</a> and was last 
    modified on 18th <a href="../../../../../../../new/22/10.htm">October 2022</a>.
    </p>
    <!--webbot bot="Include" U-Include="../../../../_include/c1622.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2016-2022. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="4925" -->
  </div>
</div>

</body>

</html>
