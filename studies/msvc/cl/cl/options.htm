<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>CL.EXE Options</title>
<link rel="stylesheet" type="text/css" href="../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../_styles/msvc.css">
<script type="text/javascript" src="../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../_scripts/msvc.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell - Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" i-checksum="22580" endspan -->
<h1>CL.EXE Options </h1>
<p>Each option begins with a <span class="definition">switch character</span>, which 
can be either a forward slash or hyphen. The standard practice in these notes (as 
also of the product documentation and of CL itself both for command-line errors 
and warnings and in the summary produced by the <span class="switch">
<a href="options/help.htm">/help</a></span> option) is to use the forward slash 
in all references to CL options, leaving it as understood that the hyphen is equivalent 
unless otherwise stated. </p>
<p>Some CL options that begin with the same letter or letters after the switch character 
can be combined into one command-line token, with the switch character and common 
letters given just the once. For example, the sequence of options
<span class="switch">/Ob2 /Og /Oi /Ot /Oy</span> can be compressed to
<span class="switch">/Ob2gity</span>. Such <a href="combined.htm">combined options</a> 
are just a convenient shorthand. CL unpicks the combination to recover the individual 
options, which are thereafter treated as if they actually had been given individually. 
Only individual options are discussed henceforth. An alphabetical list of
<a href="options/index.htm">individual options</a> is given separately and leads 
to notes for each option. Those notes assume familiarity with the general notes 
given here. </p>
<h2>Syntax </h2>
<p>Some options have a <span class="definition">negation</span> formed by appending 
a hyphen. Typically, the ordinary option enables some feature and the negation disables 
it. For example, <span class="switch"><a href="options/gr.htm">/GR</a></span> directs 
the compiler to emit Run-Time Type Information and <span class="switch">/GR-</span> 
directs it not to. Not all these negations are noted in the product documentation.
</p>
<p>A handful of options allow or require a <span class="definition">keyword</span>, 
which is to follow immediately after a colon. Indeed, the only examples are
<span class="switch"><a href="options/clr.htm">/clr</a></span> and
<span class="switch"><a href="options/z$c.htm">/Zc</a></span>. The first may be 
given alone or as <span class="switch">/clr:noAssembly</span> (or with a negation, 
albeit undocumented). The second is invalid without a keyword (which may be either
<span class="keyword">forScope</span> or <span class="keyword">wchar_t</span>).
</p>
<p>Though these notes set out to treat negations and keywords as variations of the 
underlying option, presuming this to simplify the concept, it is as well to bear 
in mind that the implementation actually parses them as separate options. Thus, 
a <span class="switch">/clr</span> or <span class="switch">/Zc</span> with a colon 
and an unrecognised keyword is rejected as an unknown option (with warning
<a href="warnings/d4002.htm">D4002</a>), not as an incorrect formulation of a recognised 
option. </p>
<h3>Case </h3>
<p>In general, CL options and their keywords are case-sensitive. For example,
<span class="switch">/GR</span> and <span class="switch">
<a href="options/g$r.htm">/Gr</a></span> are very different options (one to enable 
Run-Time Type Information, as noted above, the other to set a default calling convention).
</p>
<p>Exceptions are very few. True case-insensitivity applies to just one option, 
namely <span class="switch">/clr</span> (including if given as a negation or with 
a keyword). One other option, namely <span class="switch">/help</span>, is partly 
case-insensitive in that it is recognised equivalently whether all in lower case 
or all in upper case. </p>
<h3>Arguments </h3>
<p>Some options accept or require an argument. For all except
<span class="switch"><a href="options/d.htm">/D</a></span>, <span class="switch">
<a href="options/link.htm">/link</a></span>, <span class="switch">
<a href="options/t$c.htm">/Tc</a></span>, <span class="switch">
<a href="options/t$o.htm">/To</a></span>, <span class="switch">
<a href="options/t$p.htm">/Tp</a></span> and <span class="switch">
<a href="options/u.htm">/U</a></span>, the parsing of one or more command-line tokens 
into an option and its argument has a common implementation whose details are given 
here so that the syntax notes for each option need merely state which case applies.
</p>
<p>The following are all the options whose allowance of an argument is subject to 
these general notes: </p>
<blockquote>
  <p><span class="switch"><a href="options/ai.htm">/AI</a></span>,
  <span class="switch"><a href="options/b1.htm">/B1</a></span>,
  <span class="switch"><a href="options/b1_5.htm">/B1_5</a></span>,
  <span class="switch"><a href="options/b2.htm">/B2</a></span>,
  <span class="switch"><a href="options/bk.htm">/BK</a></span>,
  <span class="switch"><a href="options/b$k.htm">/Bk</a></span>,
  <span class="switch"><a href="options/b$l.htm">/Bl</a></span>,
  <span class="switch"><a href="options/b$p1.htm">/Bp1</a></span>,
  <span class="switch"><a href="options/b$p2.htm">/Bp2</a></span>,
  <span class="switch"><a href="options/b$pl.htm">/Bpl</a></span>,
  <span class="switch"><a href="options/b$px.htm">/Bpx</a></span>,
  <span class="switch"><a href="options/b$x.htm">/Bx</a></span>,
  <span class="switch">/bC</span>, <span class="switch">/bS</span>,
  <span class="switch"><a href="options/d1.htm">/d1</a></span>,
  <span class="switch"><a href="options/d1_5.htm">/d1_5</a></span>,
  <span class="switch"><a href="options/d2.htm">/d2</a></span>,
  <span class="switch"><a href="options/f.htm">/F</a></span>,
  <span class="switch"><a href="options/fa.htm">/FA</a></span>,
  <span class="switch"><a href="options/f$a.htm">/Fa</a></span>,
  <span class="switch"><a href="options/f$b.htm">/Fb</a></span>,
  <span class="switch"><a href="options/f$c.htm">/Fc</a></span>,
  <span class="switch"><a href="options/f$d.htm">/Fd</a></span>,
  <span class="switch"><a href="options/f$e.htm">/Fe</a></span>,
  <span class="switch"><a href="options/fi.htm">/FI</a></span>,
  <span class="switch"><a href="options/f$l.htm">/Fl</a></span>,
  <span class="switch"><a href="options/f$m.htm">/Fm</a></span>,
  <span class="switch"><a href="options/f$o.htm">/Fo</a></span>,
  <span class="switch">/FP</span>, <a href="options/f$p.htm">/<span class="switch">Fp</span></a>,
  <span class="switch"><a href="options/fr.htm">/FR</a></span>,
  <span class="switch"><a href="options/f$r.htm">/Fr</a></span>,
  <span class="switch">/Fs</span>, <span class="switch">
  <a href="options/fu.htm">/FU</a></span>, <span class="switch">/f</span>,
  <span class="switch">/GE</span>, <span class="switch">/Gp</span>,
  <span class="switch"><a href="options/g$s.htm">/Gs</a></span>,
  <span class="switch">/Gt</span>, <span class="switch"><a href="options/h.htm">
  /H</a></span>, <span class="switch"><a href="options/i.htm">/I</a></span>,
  <span class="switch">/il</span>, <span class="switch">
  <a href="options/mp.htm">/MP</a></span>, <span class="switch">
  <a href="options/$nl.htm">/nl</a></span>, <span class="switch">/OV</span>,
  <span class="switch"><a href="options/$o.htm">/o</a></span>,
  <span class="switch">/pc</span>, <span class="switch"><a href="options/v.htm">
  /V</a></span>, <span class="switch"><a href="options/$vd.htm">/vd</a></span>,
  <span class="switch"><a href="options/w.htm">/W</a></span>,
  <span class="switch"><a href="options/$w1.htm">/w1</a></span>,
  <a href="options/$w2.htm">/<span class="switch">w2</span></a>,
  <span class="switch"><a href="options/$w3.htm">/w3</a></span>,
  <span class="switch"><a href="options/$w4.htm">/w4</a></span>,
  <span class="switch"><a href="options/$wd.htm">/wd</a></span>,
  <span class="switch"><a href="options/$we.htm">/we</a></span>,
  <span class="switch"><a href="options/$wo.htm">/wo</a></span>,
  <span class="switch"><a href="options/y$c.htm">/Yc</a></span>,
  <span class="switch"><a href="options/y$l.htm">/Yl</a></span>,
  <span class="switch"><a href="options/y$u.htm">/Yu</a></span>,
  <span class="switch"><a href="options/yx.htm">/YX</a></span>,
  <span class="switch"><a href="options/zb.htm">/ZB</a></span>,
  <span class="switch"><a href="options/z$m.htm">/Zm</a></span>,
  <span class="switch"><a href="options/z$p.htm">/Zp</a></span> and
  <span class="switch"><a href="options/zx.htm">/ZX</a></span> </p>
</blockquote>
<h4>Argument in Same Token </h4>
<p>If an option is not the whole of its command-line token, then the argument can 
only be the remainder of that same token. Note that the argument begins immediately 
after the defining characters of the option, including if this means that the argument 
starts with white space. For example, in the command </p>
<pre class="input">cl test.cpp /Fatest.asm</pre>
<p>the <span class="switch">/Fa</span> option has the argument “test.asm”. CL is 
to compile the source file “test.cpp” and create an assembly-language listing file 
named “test.asm” as a by-product. If “test.asm” is the name wanted for the listing 
file, then there can be no white space after the <span class="switch">/Fa</span>, 
even if quoted: the command </p>
<pre class="input">cl test.cpp &quot;/Fa test.asm&quot;</pre>
<p>names the listing file as “ test.asm”, with a leading space. Without the quotes, 
as </p>
<pre class="input">cl test.cpp /Fa test.asm</pre>
<p>the <span class="switch">/Fa</span> and the “test.asm” are separate command-line 
tokens, and the present rule has nothing to say. It will be seen shortly that the 
next rule does not apply either, so that <span class="switch">/Fa</span> has no 
argument and “test.asm” names a (second) source file. </p>
<h4>Argument in Next Token </h4>
<p>For some options, if the option is the whole of its command-line token, then 
the argument may instead be the whole of the next token. The option then consists 
of two tokens. For example, in the command </p>
<pre class="input">cl test.cpp /FI test.h</pre>
<p>the <span class="switch">/FI</span> option has “test.h” as its argument, even 
though the two lie in separate command-line tokens. The unquoted white space between 
the <span class="switch">/FI</span> and the “test.h” could be omitted without changing 
the interpretation, but may be thought to improve readability. </p>
<p>The applicable options are: </p>
<blockquote>
  <p><span class="switch">/AI</span>, <span class="switch">/B1</span>,
  <span class="switch">/B1_5</span>, <span class="switch">/B2</span>,
  <span class="switch">/Bl</span>, <span class="switch">/Bp1</span>,
  <span class="switch">/Bp2</span>, <span class="switch">/Bpl</span>,
  <span class="switch">/Bpx</span>, <span class="switch">/Bx</span>,
  <span class="switch">/bC</span>, <span class="switch">/bS</span>,
  <span class="switch">/d1</span>, <span class="switch">/d1_5</span>,
  <span class="switch">/d2</span>, <span class="switch">/F</span>,
  <span class="switch">/FI</span>, <span class="switch">/FU</span>,
  <span class="switch">/f</span>, <span class="switch">/H</span>,
  <span class="switch">/I</span>, <span class="switch">/il</span>,
  <span class="switch">/MP</span>, <span class="switch">/nl</span>,
  <span class="switch">/o</span>, <span class="switch">/pc</span>,
  <span class="switch">/V</span>, <span class="switch">/W</span>,
  <span class="switch">/w1</span>, /<span class="switch">w2</span>,
  <span class="switch">/w3</span>, <span class="switch">/w4</span>,
  <span class="switch">/wd</span>, <span class="switch">/we</span> and
  <span class="switch">/wo</span> </p>
</blockquote>
<p>It happens that for all these, an argument is required, as opposed to being merely 
permitted. </p>
<h4>Arguments and Switch Characters </h4>
<p>Some options do not permit their argument to start with a switch character:
</p>
<blockquote>
  <p><span class="switch">/bC</span>, <span class="switch">/bS</span>,
  <span class="switch">/F</span>, <span class="switch">/FI</span>,
  <span class="switch">/FU</span>, <span class="switch">/Gs</span>,
  <span class="switch">/H</span>, <span class="switch">/MP</span>,
  <span class="switch">/nl</span>, <span class="switch">/V</span>,
  <span class="switch">/vd</span>, <span class="switch">/W</span>,
  <span class="switch">/w1</span>, /<span class="switch">w2</span>,
  <span class="switch">/w3</span>, <span class="switch">/w4</span>,
  <span class="switch">/wd</span>, <span class="switch">/we</span>,
  <span class="switch">/wo</span>, <span class="switch">/ZB</span> and
  <span class="switch">/Zp</span> </p>
</blockquote>
<p>If the command-line token that starts the option continues with a switch character, 
then the option is deemed to have no argument. The remainder of the token, from 
the switch character onwards, is ignored without complaint, and no argument is collected 
from the next token. For example, in the command </p>
<pre class="input">cl test.cpp /FI/<span class="placeholder">anything</span> <span class="placeholder">whatever</span></pre>
<p>the <span class="switch">/FI</span> has no argument, the <span class="switch">
/</span><span class="placeholder">anything</span> in the same command-line token 
simply never gets interpreted, and the <span class="placeholder">whatever</span> 
that is the next token is not considered as a possible extension of the
<span class="switch">/FI</span> option. </p>
<p>If the token that starts the option has no continuation and the option is one 
of those that can take its argument from the next token but this next token starts 
with a switch character, then the next token is not deemed part of the option and 
the option again has no argument. For example, in the command </p>
<pre class="input">cl test.cpp /FI /<span class="placeholder">anything</span></pre>
<p>the <span class="switch">/FI</span> is alone within its first command-line token 
but the next token begins with a switch character and cannot extend the
<span class="switch">/FI</span> option. The <span class="switch">/FI</span> therefore 
has no argument. </p>
<h4>Argument Length </h4>
<p>Given that an argument is recognised, it is subject to a maximum length, presently 
1024 characters. Exceeding this maximum is an error (<a href="errors/d2038.htm">D2038</a>). 
Since this applies so generally, it is not mentioned in the syntax notes for particular 
options. Indeed, the error is so self-explanatory that the product documentation 
seems not to bother mentioning it anywhere. </p>
<h4>Numeric Arguments </h4>
<p>For some options, the argument is formally numeric so that again there are common 
features whose details are given here rather than in the notes for each option:
</p>
<blockquote>
  <p><span class="switch">/F</span>, <span class="switch">/Gs</span>,
  <span class="switch">/H</span>, <span class="switch">/MP</span>,
  <span class="switch">/nl</span>, <span class="switch">/vd</span>,
  <span class="switch">/W</span>, <span class="switch">/w1</span>, /<span class="switch">w2</span>,
  <span class="switch">/w3</span>, <span class="switch">/w4</span>,
  <span class="switch">/wd</span>, <span class="switch">/we</span>,
  <span class="switch">/wo</span>, <span class="switch">/ZB</span>,
  <span class="switch">/Zm</span> and <span class="switch">/Zp</span> </p>
</blockquote>
<p>The standard notation for a numerical argument is decimal. It allows for any 
amount of white space at the start of the argument, including none, and then for 
a plus or minus sign, before requiring one or more decimal digits. The number that 
is formed from as many decimal digits as follow is evaluated as an unsigned 32-bit 
integer. If the number is too large for 32 bits, it is coerced to 0xFFFFFFFF without 
complaint. The number becomes the numerical value of the argument, except that if 
a minus sign preceded the number, the value is negated. (A numerical argument that 
is too large but negative therefore evaluates to 1.) </p>
<p>A handful of options (just <span class="switch">/F</span>,
<span class="switch">/Gs</span>, <span class="switch">/H</span> and
<span class="switch">/nl</span>) permit an additional notation in which a prefix 
sets the base as octal, decimal or hexadecimal. The prefix is
<span class="keyword">0x</span> for hexadecimal, <span class="keyword">0d</span> 
or <span class="keyword">0t</span> for decimal and <span class="keyword">0</span> 
alone for octal. The prefix is case-insensitive, as are hexadecimal digits. The 
prefix is recognised only at the very start of the argument, not after white space. 
The decimal prefix is in effect discarded, so that the remainder of the argument 
is interpreted according to the standard notation (with its tolerance of white space, 
except that this must now follow the prefix rather than begin the argument). The 
octal and hexadecimal cases do not allow for white space or a sign, but require 
that the prefix be followed immediately by one or more characters that are valid 
digits for the selected base. The number formed from these digits is evaluated as 
an unsigned 32-bit integer. If the number is too large for 32 bits, it is coerced 
to 0xFFFFFFFF without complaint. The number becomes the numerical value of the argument.
</p>
<p>It is an error (<a href="errors/d2021.htm">D2021</a>) if the argument does not 
fit the supported notations or continues beyond the number, including with white 
space. This counts as a general feature of numeric arguments and is not mentioned 
in the syntax notes for particular options. </p>
<h4>Required or Optional </h4>
<p>It is an error (<a href="errors/d2004.htm">D2004</a>) if an option that requires 
an argument is given without one. This also is so general a feature that the syntax 
notes for particular options take it as implied. Again, it is something that the 
product documentation seems not to mention anywhere. </p>
<h2>Syntactic Relations </h2>
<p>Each option may have a list of options that it overrides, another of options 
it is incompatible with, and another of options that are prerequisites. These lists 
define the option’s syntactic <span class="definition">relations</span> with other 
options. The compiler builds a set of active options by working through the options 
as given and applying the relations to determine whether each additional option 
duplicates, overrides or is incompatible with whatever options have so far been 
accepted. At the end of this processing, each active option is tested for whether 
its prerequisites are met among the other active options. </p>
<p class="alert">WORK IN PROGRESS </p>
<h2>Minimal Rebuild </h2>
<p>There are non-trivial interactions of option syntax with the minimal-rebuild 
feature (as enabled by <span class="switch">/Gm</span>). However, such interactions 
are beyond the scope of these notes and seem likely to remain so forever. The author 
is unaware of sufficient real-world use to justify either the additional study or 
the intrusion of possibly numerous special cases into the writing up. </p>
<div class="Footer">
  <p class="Dates">This page was created on 29th October 2005 and was last modified 
  on 9th June 2009. </p>
  <!--webbot bot="Include" U-Include="../../_include/c0509.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2005-2009. Geoff Chappell. All rights reserved.
<a href="../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" i-checksum="57989" endspan -->
</div>

</body>

</html>
