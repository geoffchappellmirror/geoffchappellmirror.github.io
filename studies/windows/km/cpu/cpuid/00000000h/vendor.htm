<!doctype html>
<html lang="en">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>The Vendor String From CPUID Leaf 0</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="43332" -->
<div class="Main">
  <h1>The Vendor String From CPUID Leaf 0 </h1>
  <p>Among the output from executing the <span class="instruction">cpuid</span> 
  instruction with 0 in <span class="register">eax</span> is a 12-character representation 
  of the processor’s manufacturer. If what’s produced in <span class="register">
  ebx</span>, <span class="register">edx</span> and <span class="register">ecx</span> 
  are stored at successive memory locations, they read as a string of single-byte 
  characters, hereafter termed the <span class="definition">vendor string</span>. 
  The following vendor strings have at least some recognition by the Windows kernel:
  </p>
  <table>
    <tr>
      <th>Vendor String </th>
      <th>Versions (x86) </th>
      <th>Versions (x64) </th>
    </tr>
    <tr>
      <td>GenuineIntel </td>
      <td>3.50 and higher </td>
      <td>all </td>
    </tr>
    <tr>
      <td>AuthenticAMD </td>
      <td>3.50 and higher </td>
      <td>all </td>
    </tr>
    <tr>
      <td>CyrixInstead </td>
      <td>4.0 and higher </td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>GenuineTMx86 </td>
      <td>5.1 and higher </td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>CentaurHauls </td>
      <td>5.1 and higher </td>
      <td>6.1 and higher </td>
    </tr>
    <tr>
      <td>RiseRiseRise </td>
      <td>late 5.1; <br>
      late 5.2 and higher </td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>HygonGenuine </td>
      <td>&nbsp;</td>
      <td>1803 and higher </td>
    </tr>
  </table>
  <p>As usual the service packs that count above as late 5.1 and late 5.2 start 
  with Windows XP SP2 and Windows Server 2003 SP1, respectively. For the x64 versions, 
  “all” starts with late 5.2. </p>
  <p>Microsoft’s disposition to manufacturers other than Intel and AMD is very different 
  for 32-bit and 64-bit Windows. The latter has from the start insisted on processors 
  from known vendors. If the 64-bit kernel detects a processor that has any vendor 
  string other than listed above, it stops Windows with the bug check
  <span class="constant"><a href="../../../bugchecks/5d.htm">UNSUPPORTED_PROCESSOR</a></span> 
  (0x5D). The wonder is that anyone has even tried to make an x64-compatible processor, 
  given that whatever they produce, whatever its quality, will forever be constrained 
  only to future versions of the dominant operating system. Even for making an x86-compatible 
  processor, the barrier is high. Although 32-bit Windows does not reject x86 processors 
  from unknown vendors, it has a long and continuing history of recognising new 
  features only on processors from Intel and AMD (and in some cases not even AMD).
  </p>
  <p>As an aside, note that although CyrixInstead is not recognised by Windows as 
  a <span class="instruction">cpuid</span> vendor string until version 4.0, Cyrix 
  is among the processor manufacturers who had Microsoft’s attention for version 
  3.50. It’s just not relevant to the table because before version 4.0 Windows does 
  not give Cyrix a thought unless the processor is identified as some sort of 80486 
  with no <span class="instruction">cpuid</span> instruction. That such a processor 
  is made by Cyrix is recognised through configuration registers that are accessed 
  through I/O ports 0x22 and 0x23. Configuration registers 0xFE and 0xFF are Device 
  ID Registers that describe the processor much as do the family, model and stepping 
  that the kernel learns for other processors through
  <a href="../00000001h/eax.htm"><span class="register">eax</span> from
  <span class="instruction">cpuid</span> leaf 1</a>. Version 4.0 recognises more 
  Device IDs and allows that the processors may have <span class="instruction">cpuid</span> 
  after all. Thereafter, the kernel’s code to recognise and configure these processors 
  is retained almost unchanged until at least the 1803 release of Windows 10.
  </p>
  <h2>Persistence </h2>
  <p>Although the kernel does in some cases repeat <span class="instruction">cpuid</span> 
  leaf 0 just to get the vendor string again, it mostly does not. All versions that 
  look at all for a processor’s vendor string keep it in the processor’s control 
  block (<span class="struct"><a href="../../../ntoskrnl/inc/ntos/kprcb.htm">KPRCB</a></span>):
  </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition"><col class="Version">
    </colgroup>
    <tr>
      <th>Offset (x86) </th>
      <th>Offset (x64) </th>
      <th>Definition </th>
      <th>Versions </th>
    </tr>
    <tr>
      <td>0x0335 (3.50); <br>
      0x034D (3.51); <br>
      0x052D (4.0); <br>
      0x072D (5.0); <br>
      0x0900 (5.1); <br>
      0x0A78 (early 5.2); <br>
      0x0B60 (late 5.2); <br>
      0x1BAC (early 6.0); <br>
      0x1C2C (late 6.0); <br>
      0x0336C (6.1); <br>
      0x03C7C (6.2 to 6.3); <br>
      0x3CFC </td>
      <td>0x22B4 (late 5.2); <br>
      0x38BC (early 6.0); <br>
      0x399C (late 6.0); <br>
      0x4BB8 (6.1); <br>
      0x5948 (6.2); <br>
      0x5958 (6.3); <br>
      0x6258 (10.0 to 1607); <br>
      0x6358 (1703); <br>
      0x6290 </td>
      <td>
      <pre class="source">UCHAR VendorString [13];</pre>
      </td>
      <td>3.50 and higher </td>
    </tr>
  </table>
  <p>See that the location varies greatly between versions and even between service 
  packs. (Late 6.0 starts with Windows Vista SP1.) Access from outside the kernel 
  is not known. </p>
  <p>Of course, repeated comparison of the <span class="member">VendorString</span> 
  with the known strings for known vendors is inefficient. As early as version 4.0, 
  the kernel started classifying the supported vendors and eventually started keeping 
  this result in the <span class="struct">KPRCB</span>: </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition"><col class="Version">
    </colgroup>
    <tr>
      <th>Offset (x86) </th>
      <th>Offset (x64) </th>
      <th>Definition </th>
      <th>Versions </th>
    </tr>
    <tr>
      <td>0x1BA8 (early 6.0); <br>
      0x1C28 (late 6.0); <br>
      0x03C4 (6.1 to 6.2); <br>
      0x03BE </td>
      <td>0x063D (late 5.2 to 1607); <br>
      0x8D </td>
      <td>
      <pre class="source">UCHAR CpuVendor;</pre>
      </td>
      <td>6.0 and higher (x86); <br>
      all (x64) </td>
    </tr>
  </table>
  <p>The <span class="member">CpuVendor</span> is significantly more stable within 
  the <span class="struct">KPRCB</span> than is the <span class="member">VendorString</span>. 
  All versions of 64-bit Windows have it in the architectural section and version 
  6.1 moved it there for 32-bit Windows. As with much else that’s in the architectural 
  section, the <span class="member">CpuVendor</span> is shared with the HAL (at 
  least). </p>
  <p>Though the <span class="member">CpuVendor</span> is formally a
  <span class="type">UCHAR</span>, it takes values from an enumeration named
  <span class="enum">CPU_VENDORS</span>. This has different members in 32-bit and 
  64-bit Windows. Even for members that have the same name, the numerical value 
  differs. Microsoft’s names for members of the 32-bit <span class="enum">CPU_VENDORS</span> 
  are known from public symbol files in Windows 8 and higher (not just for the kernel 
  but even for some user-mode modules). Some, but not all, are defined in the KS386.INC 
  from the Windows Driver Kit (WDK) starting with Windows Vista. The 64-bit
  <span class="enum">CPU_VENDORS</span> seems never to have found its way into public 
  symbol files. Microsoft’s names have, however, been published in NTOSP.H from 
  the Enterprise WDK for Windows 10 Version 1511. </p>
  <table class="Constants">
    <tr>
      <th>Value (x86) </th>
      <th>Value (x64) </th>
      <th>Name </th>
      <th>Versions </th>
    </tr>
    <tr>
      <td>0 </td>
      <td>&nbsp;</td>
      <td><span class="constant">CPU_NONE</span> </td>
      <td>4.0 and higher </td>
    </tr>
    <tr>
      <td>&nbsp;</td>
      <td>0 </td>
      <td><span class="constant">CPU_UNKNOWN</span> </td>
      <td>all </td>
    </tr>
    <tr>
      <td>1 </td>
      <td>&nbsp;</td>
      <td><span class="constant">CPU_INTEL</span> </td>
      <td>4.0 and higher </td>
    </tr>
    <tr>
      <td>2 </td>
      <td>1 </td>
      <td><span class="constant">CPU_AMD</span> </td>
      <td>4.0 and higher (x86); <br>
      all (x64) </td>
    </tr>
    <tr>
      <td>&nbsp;</td>
      <td>2 </td>
      <td><span class="constant">CPU_INTEL</span> </td>
      <td>all </td>
    </tr>
    <tr>
      <td>3 </td>
      <td>&nbsp;</td>
      <td><span class="constant">CPU_CYRIX</span> </td>
      <td>4.0 and higher </td>
    </tr>
    <tr>
      <td>4 </td>
      <td>&nbsp;</td>
      <td><span class="constant">CPU_TRANSMETA</span> </td>
      <td>5.1 and higher </td>
    </tr>
    <tr>
      <td rowspan="2">5 </td>
      <td>3 </td>
      <td><span class="constant">CPU_VIA</span> </td>
      <td>5.1 and higher (x86); <br>
      6.1 and higher (x64) </td>
    </tr>
    <tr>
      <td>&nbsp;</td>
      <td><span class="constant">CPU_CENTAUR</span> </td>
      <td>5.1 and higher </td>
    </tr>
    <tr>
      <td>6 </td>
      <td>&nbsp;</td>
      <td><span class="constant">CPU_RISE</span> </td>
      <td>late 5.1; <br>
      late 5.2 and higher </td>
    </tr>
    <tr>
      <td>&nbsp;</td>
      <td>4 </td>
      <td>unknown </td>
      <td>1803 and higher </td>
    </tr>
    <tr>
      <td>4 (5.0); <br>
      6 (early 5.1, early 5.2); <br>
      7 </td>
      <td>&nbsp;</td>
      <td><span class="constant">CPU_UNKNOWN</span> </td>
      <td>5.0 and higher </td>
    </tr>
  </table>
  <p>In 32-bit Windows, <span class="constant">CPU_NONE</span> means specifically 
  that no vendor string is known, <span class="instruction">cpuid</span> being absent 
  or unusable. In 64-bit Windows, <span class="constant">CPU_NONE</span> means what
  <span class="constant">CPU_UNKNOWN</span> means in 32-bit Windows, i.e., that 
  a vendor string is obtained but is not recognised. Though
  <span class="constant">CPU_VIA</span> and <span class="constant">CPU_CENTAUR</span> 
  are established as aliases by symbol files for version 6.2 and higher, it is not 
  known which, if not both, was in use in earlier versions. Microsoft’s name for 
  the value (4) that represents the vendor string HygonGenuine is not known, though
  <span class="constant">CPU_HYGON</span> must be all but certain. </p>
  <h3>Registry </h3>
  <p>All versions of the Windows kernel save each processor’s vendor string in the 
  registry: </p>
  <table class="Registry">
    <tr>
      <td>Key: </td>
      <td><span class="regkey">HKEY_LOCAL_MACHINE\Hardware\Description\System\CentralProcessor\<span class="placeholder">index</span></span>
      </td>
    </tr>
    <tr>
      <td>Value: </td>
      <td><span class="regvalue">VendorIdentifier</span> </td>
    </tr>
    <tr>
      <td>Type: </td>
      <td><span class="constant">REG_SZ</span> </td>
    </tr>
    <tr>
      <td>Data: </td>
      <td>null-terminated vendor string from <span class="instruction">cpuid</span> 
      leaf 0 </td>
    </tr>
  </table>
  <p>This is true even of version 3.10. It doesn’t interpret the vendor string or 
  keep it in the <span class="struct">KPRCB</span>. It gets the vendor string just 
  to record it in the registry. </p>
  <p>Generally, processors that do not have a usable <span class="instruction">cpuid</span> 
  instruction have no <span class="regvalue">VendorIdentifier</span>. The one exception 
  is for Cyrix processors that have no <span class="instruction">cpuid</span> instruction. 
  For these, the kernel confects CyrixInstead as the <span class="regvalue">VendorIdentifier</span> 
  to match what would have been set had the processor implemented
  <span class="instruction">cpuid</span>. </p>
  <div class="Footer">
    <p class="Dates">This page was created on 18th
    <a href="../../../../../../new/19/12.htm">January 2020</a> from material first 
    published on 22nd January 2008. It was last modified on 8th July 2020. </p>
    <!--webbot bot="Include" U-Include="../../../_include/c0820.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2008-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="55271" -->
  </div>
</div>

</body>

</html>
