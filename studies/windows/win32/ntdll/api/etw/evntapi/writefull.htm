<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EtwEventWriteFull</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<!--webbot bot="Include" U-Include="../../../../_include/sketch.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">SKETCH OF HOW RESEARCH MIGHT CONTINUE AND RESULTS BE PRESENTED
  </p>
</div>

<!--webbot bot="Include" endspan i-checksum="5204" -->
<h1>EtwEventWriteFull </h1>
<p>An event provider calls this function to write an event. Like
<span class="function"><a href="writetransfer.htm">EtwEventWriteTransfer</a></span>, 
this function allows for relating the event to others. It also can set event properties 
that are not supported through any other Event API function. </p>
<h2>Declaration </h2>
<pre>ULONG
EtwEventWriteFull (
    REGHANDLE RegHandle,
    EVENT_DESCRIPTOR const *EventDescriptor,
    USHORT EventProperty, 
    GUID const *ActivityId, 
    GUID const *RelatedActivityId, 
    ULONG UserDataCount,
    EVENT_DATA_DESCRIPTOR *UserData);</pre>
<h3>Parameters </h3>
<p>The required <span class="argument">RegHandle</span> argument identifies which 
registration of an event provider is writing the event. </p>
<p>The required <span class="argument">EventDescriptor</span> argument tells which 
event is to be written. </p>
<p>The <span class="argument">EventProperty</span> argument is a set of bit flags 
that elaborate the event’s intended interpretation. </p>
<p>The optional <span class="argument">ActivityId</span> argument tags the event 
with an identifier that other events may refer to as their related activity. This 
argument can be <span class="constant">NULL</span> to stand for whatever activity 
identifier is current set for the calling thread. </p>
<p>The optional <span class="argument">RelatedActivityId</span> argument tags the 
event as being related to the activity of some other event. </p>
<p>The optional <span class="argument">UserDataCount</span> and
<span class="argument">UserData</span> arguments are respectively the element count 
and address of an array of structures that supply event-specific data to record 
with the event. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../../_include/winerror.htm" TAG="BODY" startspan -->

<p>The function returns zero for success, else a Win32 error code. </p>

<!--webbot bot="Include" endspan i-checksum="16666" -->
<h2>Availability </h2>
<p>The <span class="function">EtwEventWriteFull</span> function is exported by name 
from NTDLL.DLL in version 6.0 and higher. </p>
<h2>Documentation Status </h2>
<p>As with many NTDLL functions, Microsoft does not document
<span class="function">EtwEventWriteFull</span>. Unlike many, no higher-level function 
corresponds roughly to it. Though other NTDLL functions whose names begin with
<span class="function">EtwEventWrite</span> are exported without the Etw prefix 
as forwards from ADVAPI32, this one is missed. </p>
<p>A C-language declaration of <span class="function">EtwEventWriteFull</span> is 
published by Microsoft in a file named NTETW.H in the Enterprise edition of the 
Windows Driver Kit (WDK) for Windows 10 Version 1511. </p>
<p>Or so things stood. Apparently too late for a downloadable package of documentation 
in 2017 but now dated to 2018 online, Microsoft documented
<span class="function">EtwEventWriteFull</span> among some Developer Notes. It is 
there said explicitly to be internal. Among the Requirements is the Header named 
ntetw.h which Microsoft is not known to have published except in the one case above.
</p>
<h2>Behaviour </h2>
<p>The <span class="function">EtwEventWriteFull</span> function exists only as an 
embellishment of <span class="function">EtwEventWriteTransfer</span>, specifically 
to add the <span class="argument">EventProperty</span> argument. </p>
<h3>General Event Writing </h3>
<p>If <span class="argument">EventDescriptor</span> is <span class="constant">NULL</span>, 
the function has no event to write: it returns <span class="constant">ERROR_INVALID_PARAMETER</span>.
</p>
<p>If the <span class="argument">RegHandle</span> is not valid, the function has 
no event provider to write an event from: it returns <span class="constant">ERROR_INVALID_HANDLE</span>. 
A valid <span class="type">REGHANDLE</span> is produced by the
<span class="function">EtwEventRegister</span> function and is made invalid by
<span class="function">EtwEventUnregister</span>. </p>
<p>Event providers send events into the ETW mechanism. Tracing sessions receive 
them. Each tracing session chooses which event providers they want events from. 
For each event provider that they so enable, a tracing session may also specify 
a level and keyword to match against events from that provider. In later versions, 
they may also specify properties that affect the matching. If the
<span class="member">Level</span> and <span class="member">Keyword</span> in at
<span class="argument">EventDescriptor</span> match this specification, then the 
event is said to be enabled for the session. </p>
<p>If the event is enabled for any private tracing session, the function writes 
the event to the user-mode tracing buffers of each such session for which the event 
is enabled. Failure to write to any such session is failure for the function.
</p>
<p>If the event is enabled for any tracing session that is managed by the kernel, 
the function sends the event to the kernel for distribution to each tracing session 
for which the event is enabled. Inputs and defaults are packaged as an
<span class="struct">EVENT_HEADER</span> for <span class="function">NtTraceEvent</span> 
with <span class="constant">ETW_NT_FLAGS_TRACE_EVENT</span> as its
<span class="argument">Flags</span> argument. Failure from the kernel is failure 
for the function. </p>
<h3>Event Properties </h3>
<p>Microsoft’s EVNTCONS.H defines four bits for the <span class="argument">EventProperties</span> 
argument: </p>
<table class="Constants">
  <tr>
    <th>Value </th>
    <th>Name </th>
    <th>Versions </th>
  </tr>
  <tr>
    <td>0x0001 </td>
    <td><span class="constant">EVENT_HEADER_PROPERTY_XML</span> </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x0002 </td>
    <td><span class="constant">EVENT_HEADER_PROPERTY_FORWARDED_XML</span> </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x0004 </td>
    <td><span class="constant">EVENT_HEADER_PROPERTY_LEGACY_EVENTLOG</span> </td>
    <td>6.0 and higher </td>
  </tr>
  <tr>
    <td>0x0008 </td>
    <td><span class="constant">EVENT_HEADER_PROPERTY_RELOGGABLE</span> </td>
    <td>&nbsp;</td>
  </tr>
</table>
<p>These values for the <span class="argument">EventProperty</span> argument are 
documented for another purpose, in the <span class="member">EventProperty</span> 
member of the <span class="struct">EVENT_HEADER</span> structure that describes 
an event when delivered to a consumer. </p>
<h2>Use by Microsoft </h2>
<p>When this article was new, i.e., for Windows Vista, three users were known of 
this function: </p>
<ul>
  <li>crypt32.dll, wecsvc.dll and wevtapi.dll </li>
</ul>
<p>Yes, they use one each of the flags that are defined for
<span class="argument">EventProperty</span>. There is also an internal use of
<span class="constant">EVENT_HEADER_PROPERTY_LEGACY_EVENTLOG</span> for the
<span class="function">EtwEventWriteString</span> function. </p>
<div class="Footer">
  <p class="Dates">This page was created on 30th October 2008 and was last 
  modified on 28th <a href="../../../../../../../new/20/05.htm">May 2020</a>. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c0820.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2008-2020. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5085" -->
</div>

</body>

</html>
