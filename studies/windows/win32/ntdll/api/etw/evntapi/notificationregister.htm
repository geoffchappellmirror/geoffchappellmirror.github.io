<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>EtwNotificationRegister</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="48540" -->
<!--webbot bot="Include" U-Include="../../../../_include/sketch.htm" TAG="BODY" startspan -->

<div class="Header">
  <p class="alert">SKETCH OF HOW RESEARCH MIGHT CONTINUE AND RESULTS BE PRESENTED
  </p>
</div>

<!--webbot bot="Include" endspan i-checksum="5204" -->
<h1>EtwNotificationRegister </h1>
<p>This function registers one type or another of event provider, including types 
that are not supported through higher-level API functions. </p>
<h2>Declaration </h2>
<pre>ULONG
EtwNotificationRegister (
    LPCGUID Guid,
    ULONG Type,
    PETW_NOTIFICATION_CALLBACK Callback,
    PVOID Context,
    <a href="../evntsup/reghandle.htm">REGHANDLE</a> *RegHandle);</pre>
<h3>Parameters </h3>
<p>The required <span class="argument">Guid</span> argument is the address of a 
GUID that represents the provider. </p>
<p>The <span class="argument">Type</span> argument specifies the type of notification. 
Though the argument is formally a <span class="type">ULONG</span>, its supported 
values are those of the <span class="enum">ETW_NOTIFICATION_TYPE</span> enumeration.
</p>
<p>The <span class="argument">Callback</span> argument is the address of a function 
that is to be called back in circumstances that are not presently understood. This 
argument can be <span class="constant">NULL</span> to mean that the caller does 
not want to be called back. </p>
<p>The <span class="argument">Context</span> argument is an arbitrary caller-defined 
value that is to be passed back to the caller as one of the arguments of the callback 
function. This argument is meaningful only if a callback function is supplied.
</p>
<p>The required <span class="argument">RegHandle</span> argument is the address 
of a 64-bit variable that is to receive a registration handle to the registered 
provider. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" u-include="../../_include/winerrorlasterror.htm" tag="BODY" startspan -->

<p>The function returns zero for success, else a Win32 error code (which the function 
also sets as the thread’s last error). </p>

<!--webbot bot="Include" endspan i-checksum="61401" --><h3>
Callback </h3>
<p>The callback function has the prototype </p>
<pre class="source">typedef 
ULONG 
(*PETW_NOTIFICATION_CALLBACK) (
    <a href="../../../../../km/ntoskrnl/api/etw/traceapi/notification_header.htm">ETW_NOTIFICATION_HEADER</a> *NotificationHeader,
    PVOID Context);</pre>
<h2>Availability </h2>
<p>The <span class="function">EtwNotificationRegister</span> function is exported 
by name from NTDLL in version 6.0 and higher. </p>
<h2>Documentation Status </h2>
<p>As with many NTDLL exports, Microsoft does not document
<span class="function">EtwNotificationRegister</span>. Unlike many, no higher-level 
function corresponds roughly to it. </p>
<p>Microsoft has, however, published a C-language declaration in NTETW.H from the 
Enterprise edition of the Windows Driver Kit (WDK) for Windows 10 version 1511. 
This article reproduces Microsoft’s names for the function’s arguments. Some closely 
related names are known from public symbol files. For instance, the name
<span class="struct">ETW_NOTIFICATION_HEADER</span> is known from as far back as 
Windows Vista because two modules that call this function supply callback routines 
that are written in C++ and their symbol files show the type in these routines’ 
decorated names. </p>
<h2>Behaviour </h2>
<p>Without a <span class="argument">Guid</span> for input and a
<span class="argument">RegHandle</span> for output, the function can do nothing. 
If either is <span class="constant">NULL</span>, the function returns
<span class="constant">ERROR_INVALID_PARAMETER</span>. </p>
<h3>User-Mode Registration </h3>
<p>The function saves its inputs into an <span class="struct">
<a href="../evntsup/registration_entry.htm">ETW_REGISTRATION_ENTRY</a></span> which 
becomes the event provider’s user-mode representation. If the function cannot create 
a registration entry, it returns <span class="constant">ERROR_OUTOFMEMORY</span>. 
The failure can indeed be caused by insufficient memory but a cause that’s less 
obviously indicated by this error code is that the creation exceeds a hard-coded 
limit on how many registrations a process can have at any one time. This limit is 
0x0400 before version 6.2 and 0x0800 since. Note that Microsoft’s documentation 
today, 24th December, 2018, repeats in multiple places, not just for
<span class="function">
<a href="https://docs.microsoft.com/windows/desktop/api/Eventprov/nf-eventprov-eventregister">
EventRegister</a></span> and <span class="function">
<a href="https://docs.microsoft.com/windows/desktop/etw/registertraceguids">RegisterTraceGuids</a></span> 
but in general guidance such as&nbsp;
<a href="https://docs.microsoft.com/windows/desktop/etw/writing-manifest-based-events">
Writing Manifest-based Events</a>, that a “process can register up to 1,024 provider 
GUIDs”. (Put aside that Microsoft doubled the limit without updating the documentation. 
Why does Microsoft double a limit that is already orders of magnitude beyond advice 
that “you should limit the number of providers that your process registers to one 
or two”? Apparent inconsistencies in documentation have as their inevitable consequence 
a low take-up of new ETW functionality as programmers perceive not just a steep 
learning curve but a waste of their time in trial and error just to discover what’s 
true.) </p>
<h3>Registration With Kernel </h3>
<p>Unless the <span class="argument">Type</span> is <span class="constant">EtwNotificationTypeInProcSession</span> 
(in version 6.3 and higher), registration also creates a kernel-mode representation 
for the event provider and even an Object Manager handle to an EtwRegistration object.
</p>
<p>The essence of the function’s communication with the kernel to register a provider 
is <span class="function">
<a href="../../../../../km/ntoskrnl/api/etw/traceapi/control/index.htm">NtTraceControl</a></span> 
with 0x0F as its <span class="argument">FunctionCode</span>. (Few of Microsoft’s 
names for the function codes are known.) </p>
<h4>One-Time Preparation </h4>
<p>In version 6.3 and higher, this communication with the kernel requires non-trivial 
preparation on the process’s first attempt to register any provider with the kernel. 
Significant elements include: creating an event for the kernel to signal when a 
notification is ready for retrieval; getting the thread pool to wait repeatedly 
for this signal, retrieve notifications and distribute them to the event providers; 
and telling the kernel of the event. If this preparation happens to be needed but 
fails, then so does the function, without being able to register the provider with 
the kernel. </p>
<h3>Registration Handle </h3>
<p>On successful registration both within NTDLL and, usually, with the kerrnel, 
the function creates a <span class="type">REGHANDLE</span> to return to the caller 
via the <span class="argument">RegHandle</span> argument. The <span class="type">
REGHANDLE</span> indirectly selects the user-mode <span class="struct">ETW_REGISTRATION_ENTRY</span> 
which in turn holds any <span class="type">HANDLE</span> to the kernel’s EtwRegistration 
object. The <span class="type">REGHANDLE</span>, which the caller should treat as 
opaque, then represents the whole registration for use with other functions, e.g., 
with <span class="function">EtwEventWrite</span> to have the event provider write 
an event, until its use with <span class="function">EtwNotificationUnregister</span>.
</p>
<div class="Footer">
  <p class="Dates">This page was created on 16th November 2008 but was not published 
  until 31st <a href="../../../../../../../new/18/12.htm">December 2018</a>. It 
  was last modified on 28th <a href="../../../../../../../new/20/05.htm">May 2020</a>.
  </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c18.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2018. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="6594" -->
</div>

</body>

</html>
