<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>KPROFILE_SOURCE</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/km.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>KPROFILE_SOURCE </h1>
<p>The <span class="enum">KPROFILE_SOURCE</span> enumeration is used throughout 
the kernel’s support for profiling. Its numerical value selects from the available 
sources of a profile interrupt that the kernel can use for sampling where the processor 
had been executing. The original and still typical source is simply time, such that 
the profile interrupt recurs periodically. Others, even very many others, are counters 
of events as kept by the processor itself. </p>
<h2>Scope </h2>
<p>The <span class="enum">KPROFILE_SOURCE</span> is remarkable for being immediately 
meaningful through a large range of Windows functionality. At one end, it is exposed 
to user-mode callers. Not only do these get to choose the source when calling
<span class="function"><a href="../../ex/profile/create.htm">NtCreateProfile</a></span> 
or <span class="function"><a href="../../ex/profile/createex.htm">NtCreateProfileEx</a></span> 
to specify what execution they want profiled, but they also have
<span class="function"><a href="../../ex/profile/queryinterval.htm">NtQueryIntervalProfile</a></span> 
and <span class="function"><a href="../../ex/profile/setinterval.htm">NtSetIntervalProfile</a></span> 
to manage the recurrence of profile interrupts from different sources. Modern Windows 
versions provide yet more interfaces through various information classes of
<span class="function">
<a href="../../../../../win32/advapi32/api/etw/logapi/query.htm">TraceQueryInformation</a></span> 
and <span class="function">
<a href="../../../../../win32/advapi32/api/etw/logapi/set.htm">TraceSetInformation</a></span>. 
At the lower end, the <span class="enum">KPROFILE_SOURCE</span> is shared with the 
HAL, which has the job of managing the processor’s performance-monitoring counters 
and the hardware’s timers, and then of setting up the profile interrupt at the kernel’s 
direction. The kernel learns of each profile interrupt from the HAL via
<span class="function"><a href="profileinterruptwithsource.htm">KeProfileInterruptWithSource</a></span>.
</p>
<h2>Documentation Status </h2>
<p>The <span class="enum">KPROFILE _SOURCE</span> enumeration is not documented, 
but a C-language definition is in NTDDK.H from the Device Driver Kit (DDK) for Windows 
NT 3.51 and is repeated in the DDK or Windows Driver Kit (WDK) for all versions 
since, though it moves to WDM.H in later kits. It has perhaps tended to be overlooked 
since it has never changed and is never referenced from any other header or from 
sample code. No C-language definition is known to have been published for user-mode 
programming, but the C-language definition from kernel-mode programming presumably 
is reproduced in headers that Microsoft makes available to its own user-mode programmers 
but does not publish for others: how else does type information for
<span class="enum">KPROFILE_SOURCE</span> appear in symbol files for such high-level 
modules as the URLMON.DLL from Internet Explorer? </p>
<p>And there it might be left, with documentation at this site simply directing 
you to the C-language header—except that the definition in the published header 
and as may be inferred from type information in symbol files is not the whole of 
what any modern HAL implements. </p>
<h2>Enumeration </h2>
<p>Very plausibly, the published definition was intended from the start as the whole 
that is intended as <span class="emphasis">common</span> to all types of processor.
</p>
<table>
  <tr>
    <th>Value </th>
    <th>Name </th>
  </tr>
  <tr>
    <td>0x00</td>
    <td><span class="constant">ProfileTime</span> </td>
  </tr>
  <tr>
    <td>0x01</td>
    <td><span class="constant">ProfileAlignmentFixup</span> </td>
  </tr>
  <tr>
    <td>0x02</td>
    <td><span class="constant">ProfileTotalIssues</span> </td>
  </tr>
  <tr>
    <td>0x03</td>
    <td><span class="constant">ProfilePipelineDry</span> </td>
  </tr>
  <tr>
    <td>0x04</td>
    <td><span class="constant">ProfileLoadInstructions</span> </td>
  </tr>
  <tr>
    <td>0x05</td>
    <td><span class="constant">ProfilePipelineFrozen</span> </td>
  </tr>
  <tr>
    <td>0x06</td>
    <td><span class="constant">ProfileBranchInstructions</span> </td>
  </tr>
  <tr>
    <td>0x07</td>
    <td><span class="constant">ProfileTotalNonissues</span> </td>
  </tr>
  <tr>
    <td>0x08</td>
    <td><span class="constant">ProfileDcacheMisses</span> </td>
  </tr>
  <tr>
    <td>0x09</td>
    <td><span class="constant">ProfileIcacheMisses</span> </td>
  </tr>
  <tr>
    <td>0x0A</td>
    <td><span class="constant">ProfileCacheMisses</span> </td>
  </tr>
  <tr>
    <td>0x0B</td>
    <td><span class="constant">ProfileBranchMispredictions</span> </td>
  </tr>
  <tr>
    <td>0x0C</td>
    <td><span class="constant">ProfileStoreInstructions</span> </td>
  </tr>
  <tr>
    <td>0x0D</td>
    <td><span class="constant">ProfileFpInstructions</span> </td>
  </tr>
  <tr>
    <td>0x0E</td>
    <td><span class="constant">ProfileIntegerInstructions</span> </td>
  </tr>
  <tr>
    <td>0x0F</td>
    <td><span class="constant">Profile2Issue</span> </td>
  </tr>
  <tr>
    <td>0x10</td>
    <td><span class="constant">Profile3Issue</span> </td>
  </tr>
  <tr>
    <td>0x11</td>
    <td><span class="constant">Profile4Issue</span> </td>
  </tr>
  <tr>
    <td>0x12</td>
    <td><span class="constant">ProfileSpecialInstructions</span> </td>
  </tr>
  <tr>
    <td>0x13</td>
    <td><span class="constant">ProfileTotalCycles</span> </td>
  </tr>
  <tr>
    <td>0x14</td>
    <td><span class="constant">ProfileIcacheIssues</span> </td>
  </tr>
  <tr>
    <td>0x15</td>
    <td><span class="constant">ProfileDcacheAccesses</span> </td>
  </tr>
  <tr>
    <td>0x16</td>
    <td><span class="constant">ProfileMemoryBarrierCycles</span> </td>
  </tr>
  <tr>
    <td>0x17</td>
    <td><span class="constant">ProfileLoadLinkedIssues</span> </td>
  </tr>
  <tr>
    <td>0x18</td>
    <td><span class="constant">ProfileMaximum</span> </td>
  </tr>
  <tr>
    <td>0x19 and higher </td>
    <td>processor-specific profile sources, e.g.,
    <a href="../../../../hal/api/hwperfcnt/amd64.htm">Amd64</a> and
    <a href="../../../../hal/api/hwperfcnt/emon.htm">Emon</a> </td>
  </tr>
</table>
<p>The first known addition of processor-specific profile sources is for the 64-bit 
Windows Server 2003 SP1, and only then for processors whose
<span class="instruction">cpuid</span> vendor string is AuthenticAMD. A separate 
set for GenuineIntel processors begins with 64-bit Windows Vista. No 32-bit HAL 
implements even the generally defined values other than <span class="constant">ProfileTime</span> 
until Windows 8. </p>
<div class="Footer">
  <p class="Dates">This page was created on 8th January 2017 and was last modified 
  on 23rd November 2018. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c1718.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2017-2018. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5141" -->
</div>

</body>

</html>
