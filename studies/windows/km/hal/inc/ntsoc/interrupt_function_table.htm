<!doctype html>
<html lang="en">

<head>
<title>INTERRUPT_FUNCTION_TABLE</title>
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../_styles/km.css">
<script type="text/javascript" src="../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../_scripts/km.js" defer></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li> 
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../index.htm">Home</a> </li><!--
     --><li class="LinkListItem"><a target="_self" href="../../../toc.htm">Table of Contents</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../about/index.htm">About This Site</a> </li>
      </ul>
      <ul class="PreferNoWrap">
        <li class="LinkListItem"><a href="../../../../../../new/index.htm">What’s New?</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../feedback/index.htm">Feedback</a> </li><!--
     --><li class="LinkListItem"><a href="../../../../../../consult/index.htm">Consult</a> </li>
      </ul>
      </li>
    </ul>
  </div>
  <div id="Logo">
    <p><span class="PreferNoWrap">Geoff Chappell -</span> <span class="PreferNoWrap">Software Analyst</span> </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="43332" -->
<div class="Main">
  <h1>INTERRUPT_FUNCTION_TABLE </h1>
  <p>The <span class="struct">INTERRUPT_FUNCTION_TABLE</span> (formally
  <span class="struct">_INTERRUPT_FUNCTION_TABLE</span>) is a table of function 
  pointers that allow the HAL to work mostly with an abstracted notion of interrupt 
  controllers. Its known use is as the <span class="member">FunctionTable</span> 
  member of a <span class="struct">
  <a href="../intruptp/registered_interrupt_controller.htm">REGISTERED_INTERRUPT_CONTROLLER</a></span>.
  </p>
  <h2>Documentation Status </h2>
  <p>The <span class="struct">INTERRUPT_FUNCTION_TABLE</span> is not documented. 
  Neither is Microsoft known to have ever published a C-language definition in any 
  Windows Driver Kit (WDK). </p>
  <p>The practical equivalent of a C-language definition is available as type information 
  in public symbol files for the HAL, starting with Windows 8. The merging of the 
  HAL into the kernel for the 2004 release of 64-bit Windows moves this type information 
  into the public symbols for the kernel. </p>
  <h2>Variability </h2>
  <p>The <span class="struct">INTERRUPT_FUNCTION_TABLE</span> is evidently intended 
  as private to the HAL or at least between the HAL and its extension DLLs (not 
  that any way has yet been looked for how, or even whether, these may get involved). 
  If nothing else, this shows in the lack of any formal indicator of version or 
  layout. It happens that the table has changed, but so far only by appending:
  </p>
  <table class="Sizes">
    <colgroup>
      <col class="Version"><col class="Size" span="2">
    </colgroup>
    <thead>
      <tr>
        <th>Version </th>
        <th>Size (x86) </th>
        <th>Size (x64) </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>6.2 to 1607 </td>
        <td>0x50 </td>
        <td>0xA0 </td>
      </tr>
      <tr>
        <td>1703 to 1809 </td>
        <td>0x54 </td>
        <td>0xA8 </td>
      </tr>
      <tr>
        <td>1903 </td>
        <td>0x58 </td>
        <td>0xB0 </td>
      </tr>
      <tr>
        <td>2004 </td>
        <td>0x5C </td>
        <td>0xB8 </td>
      </tr>
    </tbody>
  </table>
  <p>Incidentally, or not, the expansion for Version 1703 moved the C-language definition 
  between headers: from <a href="index.htm">ntsoc.h</a> to intdefs.h. Whether the 
  latter is a new header or just a renaming is not known. One disappears from the 
  public symbols to have its place taken by the new, but both contribute the same 
  types, with a change in line numbers, of course, but with only one change of order.
  </p>
  <h2>Layout </h2>
  <p>The sizes in the preceding table and the offsets and definitions in the next 
  are from type information in public symbols as noted above for Windows 8 and higher. 
  Whether the structure even exists in earlier versions is left for another time.
  </p>
  <table class="Struct">
    <colgroup>
      <col class="Offset" span="2"><col class="Definition">
      <col class="Versions">
    </colgroup>
    <thead>
      <tr>
        <th>Offset (x86) </th>
        <th>Offset (x64) </th>
        <th>Definition </th>
        <th>Versions </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x00 </td>
        <td>0x00 </td>
        <td>
        <pre class="source">NTSTATUS 
(*InitializeLocalUnit) (
    PVOID, 
    ULONG, 
    ULONG, 
    ULONG, 
    ULONG, 
    ULONG *;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x04 </td>
        <td>0x08 </td>
        <td>
        <pre class="source">NTSTATUS 
(*InitializeIoUnit) (
    PVOID);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x08 </td>
        <td>0x10 </td>
        <td>
        <pre class="source">VOID 
(*SetPriority) (
    PVOID, 
    ULONG);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x0C </td>
        <td>0x18 </td>
        <td>
        <pre class="source">ULONG 
(*GetLocalUnitError) (
    PVOID);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x10 </td>
        <td>0x20 </td>
        <td>
        <pre class="source">VOID 
(*ClearLocalUnitError) (
    PVOID);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x14 </td>
        <td>0x28 </td>
        <td>
        <pre class="source">NTSTATUS 
(*GetLogicalId) (
    PVOID, 
    INTERRUPT_TARGET *);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x18 </td>
        <td>0x30 </td>
        <td>
        <pre class="source">NTSTATUS 
(*SetLogicalId) (
    PVOID, 
    INTERRUPT_TARGET *);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x1C </td>
        <td>0x38 </td>
        <td>
        <pre class="source">INTERRUPT_RESULT 
(*AcceptAndGetSource) (
    PVOID, 
    LONG *, 
    ULONG *);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x20 </td>
        <td>0x40 </td>
        <td>
        <pre class="source">VOID 
(*EndOfInterrupt) (
    PVOID);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x24 </td>
        <td>0x48 </td>
        <td>
        <pre class="source">VOID 
(*FastEndOfInterrupt) (
    VOID);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x28 </td>
        <td>0x50 </td>
        <td>
        <pre class="source">NTSTATUS 
(*SetLineState) (
    PVOID, 
    INTERRUPT_LINE *, 
    INTERRUPT_LINE_STATE *);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x2C </td>
        <td>0x58 </td>
        <td>
        <pre class="source">NTSTATUS 
(*RequestInterrupt) (
    PVOID, 
    INTERRUPT_LINE *, 
    INTERRUPT_TARGET *, 
    ULONG, 
    INTERRUPT_LINE *);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x30 </td>
        <td>0x60 </td>
        <td>
        <pre class="source">NTSTATUS 
(*StartProcessor) (
    PVOID, 
    ULONG, 
    PVOID, 
    ULONG);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x34 </td>
        <td>0x68 </td>
        <td>
        <pre class="source">NTSTATUS 
(*GenerateMessage) (
    PVOID, 
    INTERRUPT_LINE_STATE *, 
    ULONGLONG *, 
    ULONGLONG *;</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x38 </td>
        <td>0x70 </td>
        <td>
        <pre class="source">NTSTATUS 
(*ConvertId) (
    PVOID, 
    ULONG *, 
    INTERRUPT_TARGET *, 
    UCHAR);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x3C </td>
        <td>0x78 </td>
        <td>
        <pre class="source">NTSTATUS 
(*SaveLocalInterrupts) (
    PVOID, 
    PVOID);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x40 </td>
        <td>0x80 </td>
        <td>
        <pre class="source">NTSTATUS 
(*ReplayLocalInterrupts) (
    PVOID, 
    PVOID);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x44 </td>
        <td>0x88 </td>
        <td>
        <pre class="source">NTSTATUS 
(*DeinitializeLocalUnit) (
    PVOID);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x48 </td>
        <td>0x90 </td>
        <td>
        <pre class="source">NTSTATUS 
(*DeinitializeIoUnit) (
    PVOID);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x4C </td>
        <td>0x98 </td>
        <td>
        <pre class="source">INTERRUPT_RESULT 
(*QueryAndGetSource) (
    PVOID, 
    LONG *, 
    ULONG *, 
    UCHAR *);</pre>
        </td>
        <td>6.2 and higher </td>
      </tr>
      <tr>
        <td>0x50 </td>
        <td>0xA0 </td>
        <td>
        <pre class="source">VOID 
(*DeactivateInterrupt) (
    PVOID, 
    ULONG);</pre>
        </td>
        <td>1703 and higher </td>
      </tr>
      <tr>
        <td>0x54 </td>
        <td>0xA8 </td>
        <td>
        <pre class="source">VOID 
(*DirectedEndOfInterrupt) (
    PVOID, 
    ULONG, 
    ULONG);</pre>
        </td>
        <td>1903 and higher </td>
      </tr>
      <tr>
        <td>0x58 </td>
        <td>0xB0 </td>
        <td>
        <pre class="source">NTSTATUS 
(*QueryLocalUnitInfo) (
    VOID, 
    ULONG, 
    ULONG, 
    ULONG *, 
    KINTERRUPT_MODE *, 
    KINTERRUPT_MODE *);</pre>
        </td>
        <td>2004 and higher </td>
      </tr>
    </tbody>
  </table>
  <div class="Footer">
    <p class="Dates">This page was created on 18th
    <a href="../../../../../../new/23/02.htm">February 2023</a> and was last modified 
    on 22nd February 2023. </p>
    <!--webbot bot="Include" U-Include="../../../_include/c23.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2023. Geoff Chappell. All rights reserved. 
<a href="../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="62229" -->
  </div>
</div>

</body>

</html>
