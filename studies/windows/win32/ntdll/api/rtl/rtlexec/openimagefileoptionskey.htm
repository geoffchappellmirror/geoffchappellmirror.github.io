<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>LdrOpenImageFileOptionsKey</title>
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/master.css">
<link rel="stylesheet" type="text/css" href="../../../../../../../_styles/document.css">
<link rel="stylesheet" type="text/css" href="../../../../_styles/win32.css">
<script type="text/javascript" src="../../../../../../../_scripts/master.js"></script>
<script type="text/javascript" src="../../../../../../../_scripts/document.js"></script>
<script type="text/javascript" src="../../../../_scripts/win32.js"></script>
</head>

<body>

<!--webbot bot="Include" U-Include="../../../../_include/noscript.htm" TAG="BODY" startspan -->

<div class="NoScript" id="Banner">
  <div id="Links">
    <ul class="LinkList">
      <li class="LinkListItem"><a href="../../../../../../../index.htm"><span>Home</span></a> </li>
      <li class="LinkListItem"><a target="_self" href="../../../../toc.htm"><span>Table of Contents</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../about/index.htm"><span>About This Site</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../new/index.htm"><span>What’s New?</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../feedback/index.htm"><span>Feedback</span></a> </li>
      <li class="LinkListItem"><a href="../../../../../../../consult/index.htm"><span>Consult</span></a> </li>
    </ul>
  </div>
  <div id="Logo">
    <p>Geoff Chappell, Software Analyst </p>
  </div>
</div>

<!--webbot bot="Include" endspan i-checksum="29544" -->
<h1>LdrOpenImageFileOptionsKey </h1>
<p>This function opens the registry key for reading a given executable’s
Image File Execution Options. </p>
<h2>Declaration </h2>
<pre class="source">NTSTATUS
LdrOpenImageFileOptionsKey (
    PUNICODE_STRING lpImageFile,
    BOOLEAN bWow64,
    HANDLE *phKey);</pre>
<h3>Parameters </h3>
<p>The <span class="argument">lpImageFile</span> argument names the executable image 
for which the key is sought. </p>
<p>The <span class="argument">bWow64</span> argument is non-zero to get the key 
from the <span class="regkey">Wow6432Node</span> branch. This argument is ignored 
in version 6.1 and higher. </p>
<p>The <span class="argument">phKey</span> argument is the address of a variable 
that is to receive a handle to the opened key. </p>
<h3>Return Value </h3>
<!--webbot bot="Include" U-Include="../../_include/ntstatus.htm" TAG="BODY" startspan -->

<p>The function returns <span class="constant">STATUS_SUCCESS</span> if successful, 
else a negative error code. </p>

<!--webbot bot="Include" endspan i-checksum="8" -->
<h2>Availability </h2>
<p>The <span class="function">LdrOpenImageFileOptionsKey</span> function is exported 
by name from NTDLL.DLL in version 5.2 starting from Windows Server 2003 SP1, and 
higher. </p>
<p>In version 6.0 and higher, the name <span class="function">LdrOpenImageFileOptionsKey</span> 
exists just for export. Were the function not exported, it would be an internal 
routine whose only name is <span class="routine">RtlOpenImageFileOptionsKey</span>. 
As usual for Run Time Library (RTL) routines, the code is written for both kernel 
and user modes. The kernel has this routine since version 6.0 and exports it without 
the name change starting with the 1709 release of version 10.0. </p>
<h2>Documentation Status </h2>
<p>The <span class="function">LdrOpenImageFileOptionsKey</span> function is not 
documented. Neither is it declared in any C-language header that Microsoft is known 
to have published in any development kit for either user-mode or kernel-mode software. 
While Microsoft’s names and types for the function’s arguments are not known, this article 
uses inventions. </p>
<h2>Behaviour </h2>
<p>From all the way back at version 3.10, NTDLL has provided that executables are 
subject to Image File Execution Options in the registry. The options for different 
executables are in different subkeys of a base key named <span class="regkey">Image 
File Execution Options</span>. Historically, options apply to all executables that 
have the same filename. In version 6.1 and higher, subkeys can reach one level deeper 
to define different options for different executables that have the same filename. 
The <span class="function">LdrOpenImageFileOptionsKey</span> function opens the 
appropriate subkey for the named executable without the caller having to know the 
implementation details of these one or two levels of subkey. </p>
<p>Note that there is no rule that the <span class="argument">lpImageFile</span> 
argument names an executable. Strictly speaking, it just provides input for selecting 
a subkey of the base key. Flexibility on this point does seem deliberate: as early 
as the function’s introduction, NTDLL allows that any DLL’s filename can be queried 
as an Image File Execution Option in a subkey named <span class="regkey">DllNXOptions</span>.
</p>
<p>This function’s introduction for Windows Server 2003 SP1 comes from NTDLL exporting 
separate functions (that had developed as internal routines in version 5.1) for 
opening the key and for querying its potentially numerous values. This
<span class="function">LdrOpenImageFileOptionsKey</span> function opens the key. 
The <span class="function"><a href="queryimagefilekeyoption.htm">LdrQueryImageFileKeyOption</a></span> 
function queries the values. The caller is expected to close the key when done. 
This separation leaves the ancient <span class="function">
<a href="../../ldrinit/queryimagefileexecutionoptions.htm">LdrQueryImageFileExecutionOptions</a></span> 
and the relatively new <span class="function">
<a href="queryimagefileexecutionoptionsex.htm">LdrQueryImageFileExecutionOptionsEx</a></span> 
as compounds which open the key, query one value and close the key. </p>
<h3>Base Key </h3>
<p>For the purposes of this function, <span class="function">LdrOpenImageFileOptionsKey</span>, 
all Image File Execution Options are in the registry at least one subkey beneath 
the one base key, which can be either: </p>
<ul>
  <li><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Image 
  File Execution Options</span> </li>
  <li><span class="regkey">HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows 
  NT\CurrentVersion\Image File Execution Options</span> </li>
</ul>
<p>Only the first is recognised in version 6.1 and higher. The second, in the
<span class="regkey">Wow6432Node</span> branch, is selected in versions 5.2 and 
6.0 if the <span class="argument">bWow64</span> argument is non-zero. (Remember 
that to 32-bit processes on 64-bit Windows, this second key appears to be the first.)
</p>
<p>Each base key is opened on the first call that has the corresponding
<span class="argument">bWow64</span> argument, and is then kept open. If the base 
key is not already open, then this function’s failure to open it is failure for 
the function. The required access is <span class="constant">KEY_QUERY_VALUE</span> 
and <span class="constant">KEY_ENUMERATE_SUB_KEYS</span> nowadays but only the latter 
in version 5.2. The addition of <span class="constant">KEY_QUERY_VALUE</span> allows 
version 6.0 and higher to support global options in the base key itself, for although 
this function, <span class="function">LdrOpenImageFileOptionsKey</span>, does not 
expose the base key to its callers, the compound functions
<span class="function">LdrQueryImageFileExecutionOptions</span> and
<span class="function">LdrQueryImageFileExecutionOptionsEx</span> do (by allowing 
that their <span class="argument">lpImageFile</span> argument can be
<span class="constant">NULL</span>). </p>
<h3>Filename Key </h3>
<p>The general scheme provides for subkeys in which to specify options for different 
executables. The subkey for an executable is the executable’s filename. If the given
<span class="argument">lpImageFile</span> contains a backslash, then the subkey’s 
name is whatever follows the last backslash. If this is too long for representation 
in a <span class="struct">UNICODE_STRING</span>, the function fails, returning
<span class="constant">STATUS_BUFFER_TOO_SMALL</span>. Failure to open the subkey 
(relative to the open base key) is failure for the function. The required access 
is <span class="constant">KEY_QUERY_VALUE</span> and <span class="constant">KEY_ENUMERATE_SUB_KEYS</span> 
nowadays but <span class="constant">GENERIC_READ</span> in version 5.2. </p>
<p>In general, and as the only successful outcome in versions 5.2 and 6.0, the subkey 
as opened for the executable from just its filename is what the function returns 
at the address given by the <span class="argument">phKey</span> argument. </p>
<h3>Pathname Key </h3>
<p>The general scheme has the problem, of course, that the same options apply to 
all executables that have the same filename. Version 6.1 extends the scheme to differentiate 
according to the whole name that is supplied for the executable. The extension is 
a little complicated because, of course, the whole pathname can’t itself be a subkey. 
If the subkey just for the filename contains a particular value (to show that the 
extension applies) and a suitable subkey (containing a particular value whose string 
data matches the executable’s whole name), then the function returns the deeper 
subkey instead. </p>
<p>Extension to a subkey for the whole name of the executable applies only if the 
subkey for the filename contains a <span class="constant">REG_DWORD</span> value 
named <span class="regvalue">UseFilter</span> whose dword of data is non-zero:
</p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Image 
    File Execution Options\<span class="placeholder">filename</span></span> </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">UseFilter</span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td><span class="constant">REG_DWORD</span> </td>
  </tr>
  <tr>
    <td>Data: </td>
    <td>non-zero dword </td>
  </tr>
</table>
<p>If the <span class="regvalue">UseFilter</span> value is absent from the subkey 
for an executable’s filename, or if it is present but has the wrong type or size 
or is zero, then all executables with this filename have the same Image File Execution 
Options and the subkey for the filename is what the function sticks with. Note, 
however, that any other failure when querying for the <span class="regvalue">UseFilter</span> 
value is failure for the function. (Other failure is specifically anything other 
than <span class="constant">STATUS_OBJECT_NAME_NOT_FOUND</span>,
<span class="constant">STATUS_BUFFER_TOO_SMALL</span> or <span class="constant">
STATUS_BUFFER_OVERFLOW</span>.) </p>
<p>Given that the subkey for just the filename has a correctly configured
<span class="regvalue">UseFilter</span>, it may have any number of subkeys that 
are each for a different pathname. The names of the subkeys are immaterial. What 
matters is whether a subkey has a <span class="constant">REG_SZ</span> value named
<span class="regvalue">FilterFullPath</span> whose data matches the executable’s 
whole name: </p>
<table class="Registry">
  <tr>
    <td>Key: </td>
    <td><span class="regkey">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Image 
    File Execution Options\<span class="placeholder">filename</span>\<span class="placeholder">subkey</span></span>
    </td>
  </tr>
  <tr>
    <td>Value: </td>
    <td><span class="regvalue">FilterFullPath</span> </td>
  </tr>
  <tr>
    <td>Type: </td>
    <td><span class="constant">REG_SZ</span> </td>
  </tr>
  <tr>
    <td>Data: </td>
    <td>executable’s case-insensitive name from <span class="argument">lpImageFile</span>, 
    less any \??\ prefix </td>
  </tr>
</table>
<p>Subkeys are ignored if they contain a <span class="regvalue">FilterFullPath</span> 
value that has the wrong type or has data that is too large for representation in 
a <span class="struct">UNICODE_STRING</span> or which does not match the executable. 
For this purpose, if the given <span class="argument">lpImageFile</span> begins 
with \??\ then what’s matched as the executable’s name is what follows this prefix. 
Any other error while enumerating or opening subkeys or querying
<span class="regvalue">FilterFullPath</span> (once sufficient memory is obtained), 
including that any subkey has no <span class="regvalue">FilterFullPath</span>, is 
failure for the function. If every subkey has a <span class="regvalue">FilterFullPath</span> 
but none matches the executable’s whole name, then the function sticks with the 
subkey for just the filename. </p>
<h3>Coding Errors and Quirks </h3>
<p>The function assumes that data for the <span class="regvalue">FilterFullPath</span> 
value, having been established as having the <span class="constant">REG_SZ</span> 
type, is whole Unicode characters ending with a null. More precisely, it ignores 
the last two bytes. </p>
<p>When failure while seeking a subkey for the executable’s whole name becomes failure 
for the whole function, the handle to the subkey for the executable’s filename does 
not get closed. </p>
<div class="Footer">
  <p class="Dates">This page was created on 26th November 2008 and was last modified 
  on 26th May 2019. </p>
  <!--webbot bot="Include" U-Include="../../../../_include/c0819.htm" TAG="BODY" startspan -->

<p class="Copyright">Copyright © 2008-2019. Geoff Chappell. All rights reserved. 
<a href="../../../../../../../about/terms.htm">Conditions apply</a>. </p>

<!--webbot bot="Include" endspan i-checksum="5221" -->
</div>

</body>

</html>
